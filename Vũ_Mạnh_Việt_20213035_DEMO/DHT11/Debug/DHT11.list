
DHT11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007544  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b50  08007658  08007658  00008658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081a8  080081a8  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  080081a8  080081a8  000091a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081b0  080081b0  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081b0  080081b0  000091b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080081b4  080081b4  000091b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080081b8  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  200001dc  08008394  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  08008394  0000a864  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010721  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002787  00000000  00000000  0001a926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  0001d0b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d34  00000000  00000000  0001e170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001939b  00000000  00000000  0001eea4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141e9  00000000  00000000  0003823f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee94  00000000  00000000  0004c428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000db2bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005890  00000000  00000000  000db300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007d  00000000  00000000  000e0b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800763c 	.word	0x0800763c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800763c 	.word	0x0800763c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <DHT11_Start>:

// Hàm bắt đầu giao tiếp với cảm biến DHT11


uint8_t DHT11_Start(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	75fb      	strb	r3, [r7, #23]
    GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]

    // Cấu hình chân GPIO của DHT11
    GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d5e:	607b      	str	r3, [r7, #4]
    GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // Cấu hình chân như output
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	482c      	ldr	r0, [pc, #176]	@ (8000e24 <DHT11_Start+0xe0>)
 8000d72:	f001 fa8d 	bl	8002290 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 0);  // Kéo chân xuống thấp
 8000d76:	2200      	movs	r2, #0
 8000d78:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d7c:	4829      	ldr	r0, [pc, #164]	@ (8000e24 <DHT11_Start+0xe0>)
 8000d7e:	f001 fc22 	bl	80025c6 <HAL_GPIO_WritePin>
    HAL_Delay(20);  // Chờ 20ms
 8000d82:	2014      	movs	r0, #20
 8000d84:	f001 f8a0 	bl	8001ec8 <HAL_Delay>
    HAL_GPIO_WritePin(DHT11_PORT, DHT11_PIN, 1);  // Kéo chân lên cao
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d8e:	4825      	ldr	r0, [pc, #148]	@ (8000e24 <DHT11_Start+0xe0>)
 8000d90:	f001 fc19 	bl	80025c6 <HAL_GPIO_WritePin>
    microDelay(30);  // Chờ 30us
 8000d94:	201e      	movs	r0, #30
 8000d96:	f000 f995 	bl	80010c4 <microDelay>

    // Đặt chân GPIO làm input
    GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // Cấu hình chân làm input
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	481f      	ldr	r0, [pc, #124]	@ (8000e24 <DHT11_Start+0xe0>)
 8000da8:	f001 fa72 	bl	8002290 <HAL_GPIO_Init>
    microDelay(40);
 8000dac:	2028      	movs	r0, #40	@ 0x28
 8000dae:	f000 f989 	bl	80010c4 <microDelay>

    if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))
 8000db2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000db6:	481b      	ldr	r0, [pc, #108]	@ (8000e24 <DHT11_Start+0xe0>)
 8000db8:	f001 fbee 	bl	8002598 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <DHT11_Start+0x98>
    {
        microDelay(80);
 8000dc2:	2050      	movs	r0, #80	@ 0x50
 8000dc4:	f000 f97e 	bl	80010c4 <microDelay>
        if ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN))) Response = 1;
 8000dc8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dcc:	4815      	ldr	r0, [pc, #84]	@ (8000e24 <DHT11_Start+0xe0>)
 8000dce:	f001 fbe3 	bl	8002598 <HAL_GPIO_ReadPin>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <DHT11_Start+0x98>
 8000dd8:	2301      	movs	r3, #1
 8000dda:	75fb      	strb	r3, [r7, #23]
    }

    pMillis = HAL_GetTick();
 8000ddc:	f001 f86a 	bl	8001eb4 <HAL_GetTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <DHT11_Start+0xe4>)
 8000de4:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000de6:	f001 f865 	bl	8001eb4 <HAL_GetTick>
 8000dea:	4603      	mov	r3, r0
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <DHT11_Start+0xe8>)
 8000dee:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000df0:	e004      	b.n	8000dfc <DHT11_Start+0xb8>
    {
        cMillis = HAL_GetTick();
 8000df2:	f001 f85f 	bl	8001eb4 <HAL_GetTick>
 8000df6:	4603      	mov	r3, r0
 8000df8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <DHT11_Start+0xe8>)
 8000dfa:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000dfc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e00:	4808      	ldr	r0, [pc, #32]	@ (8000e24 <DHT11_Start+0xe0>)
 8000e02:	f001 fbc9 	bl	8002598 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <DHT11_Start+0xd6>
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <DHT11_Start+0xe4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	1c9a      	adds	r2, r3, #2
 8000e12:	4b06      	ldr	r3, [pc, #24]	@ (8000e2c <DHT11_Start+0xe8>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	d8eb      	bhi.n	8000df2 <DHT11_Start+0xae>
    }

    return Response;
 8000e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3718      	adds	r7, #24
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40010c00 	.word	0x40010c00
 8000e28:	20000200 	.word	0x20000200
 8000e2c:	20000204 	.word	0x20000204

08000e30 <DHT11_Read>:

// Hàm đọc dữ liệu từ cảm biến DHT11
uint8_t DHT11_Read(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
    uint8_t a, b = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71bb      	strb	r3, [r7, #6]
    for (a = 0; a < 8; a++)
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	e066      	b.n	8000f0e <DHT11_Read+0xde>
    {
        pMillis = HAL_GetTick();
 8000e40:	f001 f838 	bl	8001eb4 <HAL_GetTick>
 8000e44:	4603      	mov	r3, r0
 8000e46:	4a36      	ldr	r2, [pc, #216]	@ (8000f20 <DHT11_Read+0xf0>)
 8000e48:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000e4a:	f001 f833 	bl	8001eb4 <HAL_GetTick>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	4a34      	ldr	r2, [pc, #208]	@ (8000f24 <DHT11_Read+0xf4>)
 8000e52:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e54:	e004      	b.n	8000e60 <DHT11_Read+0x30>
        {  // Chờ chân lên cao
            cMillis = HAL_GetTick();
 8000e56:	f001 f82d 	bl	8001eb4 <HAL_GetTick>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	4a31      	ldr	r2, [pc, #196]	@ (8000f24 <DHT11_Read+0xf4>)
 8000e5e:	6013      	str	r3, [r2, #0]
        while (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e64:	4830      	ldr	r0, [pc, #192]	@ (8000f28 <DHT11_Read+0xf8>)
 8000e66:	f001 fb97 	bl	8002598 <HAL_GPIO_ReadPin>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d106      	bne.n	8000e7e <DHT11_Read+0x4e>
 8000e70:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <DHT11_Read+0xf0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	1c9a      	adds	r2, r3, #2
 8000e76:	4b2b      	ldr	r3, [pc, #172]	@ (8000f24 <DHT11_Read+0xf4>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	d8eb      	bhi.n	8000e56 <DHT11_Read+0x26>
        }
        microDelay(40);  // Chờ 40us
 8000e7e:	2028      	movs	r0, #40	@ 0x28
 8000e80:	f000 f920 	bl	80010c4 <microDelay>
        if (!(HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)))  // Nếu chân xuống thấp
 8000e84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e88:	4827      	ldr	r0, [pc, #156]	@ (8000f28 <DHT11_Read+0xf8>)
 8000e8a:	f001 fb85 	bl	8002598 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d10e      	bne.n	8000eb2 <DHT11_Read+0x82>
            b &= ~(1 << (7 - a));
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	b25b      	sxtb	r3, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	b25a      	sxtb	r2, r3
 8000ea6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	71bb      	strb	r3, [r7, #6]
 8000eb0:	e00b      	b.n	8000eca <DHT11_Read+0x9a>
        else
            b |= (1 << (7 - a));
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	f1c3 0307 	rsb	r3, r3, #7
 8000eb8:	2201      	movs	r2, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	b25a      	sxtb	r2, r3
 8000ec0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b25b      	sxtb	r3, r3
 8000ec8:	71bb      	strb	r3, [r7, #6]

        pMillis = HAL_GetTick();
 8000eca:	f000 fff3 	bl	8001eb4 <HAL_GetTick>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	4a13      	ldr	r2, [pc, #76]	@ (8000f20 <DHT11_Read+0xf0>)
 8000ed2:	6013      	str	r3, [r2, #0]
        cMillis = HAL_GetTick();
 8000ed4:	f000 ffee 	bl	8001eb4 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <DHT11_Read+0xf4>)
 8000edc:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ede:	e004      	b.n	8000eea <DHT11_Read+0xba>
        {  // Chờ chân xuống thấp
            cMillis = HAL_GetTick();
 8000ee0:	f000 ffe8 	bl	8001eb4 <HAL_GetTick>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8000f24 <DHT11_Read+0xf4>)
 8000ee8:	6013      	str	r3, [r2, #0]
        while ((HAL_GPIO_ReadPin(DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000eea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eee:	480e      	ldr	r0, [pc, #56]	@ (8000f28 <DHT11_Read+0xf8>)
 8000ef0:	f001 fb52 	bl	8002598 <HAL_GPIO_ReadPin>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d006      	beq.n	8000f08 <DHT11_Read+0xd8>
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <DHT11_Read+0xf0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1c9a      	adds	r2, r3, #2
 8000f00:	4b08      	ldr	r3, [pc, #32]	@ (8000f24 <DHT11_Read+0xf4>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	d8eb      	bhi.n	8000ee0 <DHT11_Read+0xb0>
    for (a = 0; a < 8; a++)
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	71fb      	strb	r3, [r7, #7]
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b07      	cmp	r3, #7
 8000f12:	d995      	bls.n	8000e40 <DHT11_Read+0x10>
        }
    }
    return b;
 8000f14:	79bb      	ldrb	r3, [r7, #6]
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000200 	.word	0x20000200
 8000f24:	20000204 	.word	0x20000204
 8000f28:	40010c00 	.word	0x40010c00

08000f2c <DHT_ReadHumi>:

// Hàm đọc và xử lý dữ liệu từ cảm biến DHT11
float DHT_ReadHumi(void)
{
 8000f2c:	b598      	push	{r3, r4, r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
    if (DHT11_Start())  // Bắt đầu giao tiếp với DHT11
 8000f30:	f7ff ff08 	bl	8000d44 <DHT11_Start>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d04c      	beq.n	8000fd4 <DHT_ReadHumi+0xa8>
    {
        // Đọc dữ liệu từ cảm biến
        RHI = DHT11_Read();  // Đọc độ ẩm phần nguyên
 8000f3a:	f7ff ff79 	bl	8000e30 <DHT11_Read>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	461a      	mov	r2, r3
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <DHT_ReadHumi+0xb0>)
 8000f44:	701a      	strb	r2, [r3, #0]
        RHD = DHT11_Read();  // Đọc độ ẩm phần thập phân
 8000f46:	f7ff ff73 	bl	8000e30 <DHT11_Read>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b24      	ldr	r3, [pc, #144]	@ (8000fe0 <DHT_ReadHumi+0xb4>)
 8000f50:	701a      	strb	r2, [r3, #0]
        TCI = DHT11_Read();  // Đọc nhiệt độ phần nguyên (bỏ qua)
 8000f52:	f7ff ff6d 	bl	8000e30 <DHT11_Read>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b22      	ldr	r3, [pc, #136]	@ (8000fe4 <DHT_ReadHumi+0xb8>)
 8000f5c:	701a      	strb	r2, [r3, #0]
        TCD = DHT11_Read();  // Đọc nhiệt độ phần thập phân (bỏ qua)
 8000f5e:	f7ff ff67 	bl	8000e30 <DHT11_Read>
 8000f62:	4603      	mov	r3, r0
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b20      	ldr	r3, [pc, #128]	@ (8000fe8 <DHT_ReadHumi+0xbc>)
 8000f68:	701a      	strb	r2, [r3, #0]
        SUM = DHT11_Read();  // Đọc checksum
 8000f6a:	f7ff ff61 	bl	8000e30 <DHT11_Read>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <DHT_ReadHumi+0xc0>)
 8000f74:	701a      	strb	r2, [r3, #0]

        // Kiểm tra dữ liệu hợp lệ bằng cách kiểm tra tổng kiểm tra
        if (RHI + RHD + TCI + TCD == SUM)
 8000f76:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <DHT_ReadHumi+0xb0>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b18      	ldr	r3, [pc, #96]	@ (8000fe0 <DHT_ReadHumi+0xb4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a18      	ldr	r2, [pc, #96]	@ (8000fe4 <DHT_ReadHumi+0xb8>)
 8000f84:	7812      	ldrb	r2, [r2, #0]
 8000f86:	4413      	add	r3, r2
 8000f88:	4a17      	ldr	r2, [pc, #92]	@ (8000fe8 <DHT_ReadHumi+0xbc>)
 8000f8a:	7812      	ldrb	r2, [r2, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <DHT_ReadHumi+0xc0>)
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d11c      	bne.n	8000fd0 <DHT_ReadHumi+0xa4>
        {
            // Trả về giá trị độ ẩm tính từ phần nguyên và phần thập phân
            return (float)RHI + (float)(RHD / 10.0);  // Độ ẩm
 8000f96:	4b11      	ldr	r3, [pc, #68]	@ (8000fdc <DHT_ReadHumi+0xb0>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff fe7a 	bl	8000c94 <__aeabi_ui2f>
 8000fa0:	4604      	mov	r4, r0
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <DHT_ReadHumi+0xb4>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fa2c 	bl	8000404 <__aeabi_i2d>
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <DHT_ReadHumi+0xc4>)
 8000fb2:	f7ff fbbb 	bl	800072c <__aeabi_ddiv>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	460b      	mov	r3, r1
 8000fba:	4610      	mov	r0, r2
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	f7ff fd63 	bl	8000a88 <__aeabi_d2f>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4620      	mov	r0, r4
 8000fc8:	f7ff fdb4 	bl	8000b34 <__addsf3>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	e002      	b.n	8000fd6 <DHT_ReadHumi+0xaa>
        }
        else
        {
            // Nếu checksum không hợp lệ, trả về -1 để chỉ ra lỗi
            return -1.0;
 8000fd0:	4b08      	ldr	r3, [pc, #32]	@ (8000ff4 <DHT_ReadHumi+0xc8>)
 8000fd2:	e000      	b.n	8000fd6 <DHT_ReadHumi+0xaa>
        }
    }
    else
    {
        // Nếu không nhận được phản hồi từ cảm biến, trả về -1
        return -1.0;
 8000fd4:	4b07      	ldr	r3, [pc, #28]	@ (8000ff4 <DHT_ReadHumi+0xc8>)
    }
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	bd98      	pop	{r3, r4, r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200001f8 	.word	0x200001f8
 8000fe0:	200001f9 	.word	0x200001f9
 8000fe4:	200001fa 	.word	0x200001fa
 8000fe8:	200001fb 	.word	0x200001fb
 8000fec:	200001fc 	.word	0x200001fc
 8000ff0:	40240000 	.word	0x40240000
 8000ff4:	bf800000 	.word	0xbf800000

08000ff8 <DHT_ReadTemp>:
// Hàm chỉ đọc và trả về nhiệt độ từ DHT11
float DHT_ReadTemp(void)
{
 8000ff8:	b598      	push	{r3, r4, r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
    if (DHT11_Start())  // Bắt đầu giao tiếp với DHT11
 8000ffc:	f7ff fea2 	bl	8000d44 <DHT11_Start>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d04c      	beq.n	80010a0 <DHT_ReadTemp+0xa8>
    {
        // Đọc dữ liệu từ cảm biến
        RHI = DHT11_Read();  // Đọc độ ẩm phần nguyên (bỏ qua)
 8001006:	f7ff ff13 	bl	8000e30 <DHT11_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	461a      	mov	r2, r3
 800100e:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <DHT_ReadTemp+0xb0>)
 8001010:	701a      	strb	r2, [r3, #0]
        RHD = DHT11_Read();  // Đọc độ ẩm phần thập phân (bỏ qua)
 8001012:	f7ff ff0d 	bl	8000e30 <DHT11_Read>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b24      	ldr	r3, [pc, #144]	@ (80010ac <DHT_ReadTemp+0xb4>)
 800101c:	701a      	strb	r2, [r3, #0]
        TCI = DHT11_Read();  // Đọc nhiệt độ phần nguyên
 800101e:	f7ff ff07 	bl	8000e30 <DHT11_Read>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	4b22      	ldr	r3, [pc, #136]	@ (80010b0 <DHT_ReadTemp+0xb8>)
 8001028:	701a      	strb	r2, [r3, #0]
        TCD = DHT11_Read();  // Đọc nhiệt độ phần thập phân
 800102a:	f7ff ff01 	bl	8000e30 <DHT11_Read>
 800102e:	4603      	mov	r3, r0
 8001030:	461a      	mov	r2, r3
 8001032:	4b20      	ldr	r3, [pc, #128]	@ (80010b4 <DHT_ReadTemp+0xbc>)
 8001034:	701a      	strb	r2, [r3, #0]
        SUM = DHT11_Read();  // Đọc checksum
 8001036:	f7ff fefb 	bl	8000e30 <DHT11_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	461a      	mov	r2, r3
 800103e:	4b1e      	ldr	r3, [pc, #120]	@ (80010b8 <DHT_ReadTemp+0xc0>)
 8001040:	701a      	strb	r2, [r3, #0]

        // Kiểm tra dữ liệu hợp lệ bằng cách kiểm tra tổng kiểm tra
        if (RHI + RHD + TCI + TCD == SUM)
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <DHT_ReadTemp+0xb0>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <DHT_ReadTemp+0xb4>)
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	4413      	add	r3, r2
 800104e:	4a18      	ldr	r2, [pc, #96]	@ (80010b0 <DHT_ReadTemp+0xb8>)
 8001050:	7812      	ldrb	r2, [r2, #0]
 8001052:	4413      	add	r3, r2
 8001054:	4a17      	ldr	r2, [pc, #92]	@ (80010b4 <DHT_ReadTemp+0xbc>)
 8001056:	7812      	ldrb	r2, [r2, #0]
 8001058:	4413      	add	r3, r2
 800105a:	4a17      	ldr	r2, [pc, #92]	@ (80010b8 <DHT_ReadTemp+0xc0>)
 800105c:	7812      	ldrb	r2, [r2, #0]
 800105e:	4293      	cmp	r3, r2
 8001060:	d11c      	bne.n	800109c <DHT_ReadTemp+0xa4>
        {
            // Trả về giá trị nhiệt độ tính từ phần nguyên và phần thập phân
            return (float)TCI + (float)(TCD / 10.0);  // Nhiệt độ
 8001062:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <DHT_ReadTemp+0xb8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff fe14 	bl	8000c94 <__aeabi_ui2f>
 800106c:	4604      	mov	r4, r0
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <DHT_ReadTemp+0xbc>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f9c6 	bl	8000404 <__aeabi_i2d>
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <DHT_ReadTemp+0xc4>)
 800107e:	f7ff fb55 	bl	800072c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fcfd 	bl	8000a88 <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	4619      	mov	r1, r3
 8001092:	4620      	mov	r0, r4
 8001094:	f7ff fd4e 	bl	8000b34 <__addsf3>
 8001098:	4603      	mov	r3, r0
 800109a:	e002      	b.n	80010a2 <DHT_ReadTemp+0xaa>
        }
        else
        {
            // Nếu checksum không hợp lệ, trả về -1 để chỉ ra lỗi
            return -1.0;
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <DHT_ReadTemp+0xc8>)
 800109e:	e000      	b.n	80010a2 <DHT_ReadTemp+0xaa>
        }
    }
    else
    {
        // Nếu không nhận được phản hồi từ cảm biến, trả về -1
        return -1.0;
 80010a0:	4b07      	ldr	r3, [pc, #28]	@ (80010c0 <DHT_ReadTemp+0xc8>)
    }
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	bd98      	pop	{r3, r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001f8 	.word	0x200001f8
 80010ac:	200001f9 	.word	0x200001f9
 80010b0:	200001fa 	.word	0x200001fa
 80010b4:	200001fb 	.word	0x200001fb
 80010b8:	200001fc 	.word	0x200001fc
 80010bc:	40240000 	.word	0x40240000
 80010c0:	bf800000 	.word	0xbf800000

080010c4 <microDelay>:
float hum = 0;

char strCopy[20];

void microDelay(uint16_t delay)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim1, 0);  // Reset timer count
 80010ce:	4b08      	ldr	r3, [pc, #32]	@ (80010f0 <microDelay+0x2c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim1) < delay);  // Chờ đến khi đếm đủ thời gian
 80010d6:	bf00      	nop
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <microDelay+0x2c>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d3f9      	bcc.n	80010d8 <microDelay+0x14>
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bc80      	pop	{r7}
 80010ee:	4770      	bx	lr
 80010f0:	2000025c 	.word	0x2000025c

080010f4 <HIEN_THI_OLED>:

void HIEN_THI_OLED()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
	              SSD1306_Clear();
 80010f8:	f000 fbc9 	bl	800188e <SSD1306_Clear>
	              sprintf(strCopy,"TEMP :%.1f C  ", tem);
 80010fc:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <HIEN_THI_OLED+0x60>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f991 	bl	8000428 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4913      	ldr	r1, [pc, #76]	@ (8001158 <HIEN_THI_OLED+0x64>)
 800110c:	4813      	ldr	r0, [pc, #76]	@ (800115c <HIEN_THI_OLED+0x68>)
 800110e:	f004 f961 	bl	80053d4 <siprintf>
		          SSD1306_GotoXY (0, 0);
 8001112:	2100      	movs	r1, #0
 8001114:	2000      	movs	r0, #0
 8001116:	f000 fb01 	bl	800171c <SSD1306_GotoXY>
		          SSD1306_Puts (strCopy, &Font_7x10, 1);
 800111a:	2201      	movs	r2, #1
 800111c:	4910      	ldr	r1, [pc, #64]	@ (8001160 <HIEN_THI_OLED+0x6c>)
 800111e:	480f      	ldr	r0, [pc, #60]	@ (800115c <HIEN_THI_OLED+0x68>)
 8001120:	f000 fb90 	bl	8001844 <SSD1306_Puts>
		          sprintf(strCopy,"HUMI :%.1f %%  ",hum);
 8001124:	4b0f      	ldr	r3, [pc, #60]	@ (8001164 <HIEN_THI_OLED+0x70>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f97d 	bl	8000428 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <HIEN_THI_OLED+0x74>)
 8001134:	4809      	ldr	r0, [pc, #36]	@ (800115c <HIEN_THI_OLED+0x68>)
 8001136:	f004 f94d 	bl	80053d4 <siprintf>
		          SSD1306_GotoXY (0, 30);
 800113a:	211e      	movs	r1, #30
 800113c:	2000      	movs	r0, #0
 800113e:	f000 faed 	bl	800171c <SSD1306_GotoXY>
		          SSD1306_Puts (strCopy, &Font_7x10, 1);
 8001142:	2201      	movs	r2, #1
 8001144:	4906      	ldr	r1, [pc, #24]	@ (8001160 <HIEN_THI_OLED+0x6c>)
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <HIEN_THI_OLED+0x68>)
 8001148:	f000 fb7c 	bl	8001844 <SSD1306_Puts>
		          SSD1306_UpdateScreen();
 800114c:	f000 fa42 	bl	80015d4 <SSD1306_UpdateScreen>
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002ec 	.word	0x200002ec
 8001158:	08007658 	.word	0x08007658
 800115c:	200002f4 	.word	0x200002f4
 8001160:	20000000 	.word	0x20000000
 8001164:	200002f0 	.word	0x200002f0
 8001168:	08007668 	.word	0x08007668

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001170:	f000 fe48 	bl	8001e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001174:	f000 f82a 	bl	80011cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001178:	f000 f916 	bl	80013a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 800117c:	f000 f86c 	bl	8001258 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001180:	f000 f8e8 	bl	8001354 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001184:	f000 f896 	bl	80012b4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8001188:	480d      	ldr	r0, [pc, #52]	@ (80011c0 <main+0x54>)
 800118a:	f002 fc5f 	bl	8003a4c <HAL_TIM_Base_Start>
    SSD1306_Init();
 800118e:	f000 f95d 	bl	800144c <SSD1306_Init>


  while (1)
  {
    /* USER CODE END WHILE */
      tem =DHT_ReadTemp();
 8001192:	f7ff ff31 	bl	8000ff8 <DHT_ReadTemp>
 8001196:	4603      	mov	r3, r0
 8001198:	4a0a      	ldr	r2, [pc, #40]	@ (80011c4 <main+0x58>)
 800119a:	6013      	str	r3, [r2, #0]
      HAL_Delay(1000);
 800119c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a0:	f000 fe92 	bl	8001ec8 <HAL_Delay>
      hum =DHT_ReadHumi();// Đọc dữ liệu từ cảm biến DHT11
 80011a4:	f7ff fec2 	bl	8000f2c <DHT_ReadHumi>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <main+0x5c>)
 80011ac:	6013      	str	r3, [r2, #0]
	          HIEN_THI_OLED(); // Hiển thị dữ liệu trên màn hình OLED
 80011ae:	f7ff ffa1 	bl	80010f4 <HIEN_THI_OLED>
	          HAL_Delay(1000); // Đợi 1 giây trước khi đọc lại
 80011b2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b6:	f000 fe87 	bl	8001ec8 <HAL_Delay>
      tem =DHT_ReadTemp();
 80011ba:	bf00      	nop
 80011bc:	e7e9      	b.n	8001192 <main+0x26>
 80011be:	bf00      	nop
 80011c0:	2000025c 	.word	0x2000025c
 80011c4:	200002ec 	.word	0x200002ec
 80011c8:	200002f0 	.word	0x200002f0

080011cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b090      	sub	sp, #64	@ 0x40
 80011d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011d2:	f107 0318 	add.w	r3, r7, #24
 80011d6:	2228      	movs	r2, #40	@ 0x28
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 f95d 	bl	800549a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001200:	2302      	movs	r3, #2
 8001202:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001204:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001208:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800120a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800120e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001210:	f107 0318 	add.w	r3, r7, #24
 8001214:	4618      	mov	r0, r3
 8001216:	f001 ffb9 	bl	800318c <HAL_RCC_OscConfig>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001220:	f000 f90e 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001224:	230f      	movs	r3, #15
 8001226:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001228:	2302      	movs	r3, #2
 800122a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800123a:	1d3b      	adds	r3, r7, #4
 800123c:	2102      	movs	r1, #2
 800123e:	4618      	mov	r0, r3
 8001240:	f002 fa26 	bl	8003690 <HAL_RCC_ClockConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800124a:	f000 f8f9 	bl	8001440 <Error_Handler>
  }
}
 800124e:	bf00      	nop
 8001250:	3740      	adds	r7, #64	@ 0x40
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800125e:	4a13      	ldr	r2, [pc, #76]	@ (80012ac <MX_I2C1_Init+0x54>)
 8001260:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001264:	4a12      	ldr	r2, [pc, #72]	@ (80012b0 <MX_I2C1_Init+0x58>)
 8001266:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800126e:	4b0e      	ldr	r3, [pc, #56]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001274:	4b0c      	ldr	r3, [pc, #48]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800127a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800127c:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001282:	4b09      	ldr	r3, [pc, #36]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001288:	4b07      	ldr	r3, [pc, #28]	@ (80012a8 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800128e:	4b06      	ldr	r3, [pc, #24]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001294:	4804      	ldr	r0, [pc, #16]	@ (80012a8 <MX_I2C1_Init+0x50>)
 8001296:	f001 f9af 	bl	80025f8 <HAL_I2C_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a0:	f000 f8ce 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000208 	.word	0x20000208
 80012ac:	40005400 	.word	0x40005400
 80012b0:	00061a80 	.word	0x00061a80

080012b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0308 	add.w	r3, r7, #8
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	463b      	mov	r3, r7
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012d0:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_TIM1_Init+0x98>)
 80012d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001350 <MX_TIM1_Init+0x9c>)
 80012d4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72 - 1;
 80012d6:	4b1d      	ldr	r3, [pc, #116]	@ (800134c <MX_TIM1_Init+0x98>)
 80012d8:	2247      	movs	r2, #71	@ 0x47
 80012da:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_TIM1_Init+0x98>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 80012e2:	4b1a      	ldr	r3, [pc, #104]	@ (800134c <MX_TIM1_Init+0x98>)
 80012e4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012e8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <MX_TIM1_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012f0:	4b16      	ldr	r3, [pc, #88]	@ (800134c <MX_TIM1_Init+0x98>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <MX_TIM1_Init+0x98>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <MX_TIM1_Init+0x98>)
 80012fe:	f002 fb55 	bl	80039ac <HAL_TIM_Base_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001308:	f000 f89a 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001312:	f107 0308 	add.w	r3, r7, #8
 8001316:	4619      	mov	r1, r3
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <MX_TIM1_Init+0x98>)
 800131a:	f002 fbe1 	bl	8003ae0 <HAL_TIM_ConfigClockSource>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001324:	f000 f88c 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4619      	mov	r1, r3
 8001334:	4805      	ldr	r0, [pc, #20]	@ (800134c <MX_TIM1_Init+0x98>)
 8001336:	f002 fd9f 	bl	8003e78 <HAL_TIMEx_MasterConfigSynchronization>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001340:	f000 f87e 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001344:	bf00      	nop
 8001346:	3718      	adds	r7, #24
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	2000025c 	.word	0x2000025c
 8001350:	40012c00 	.word	0x40012c00

08001354 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_USART1_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800138c:	f002 fdd2 	bl	8003f34 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 f853 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002a4 	.word	0x200002a4
 80013a4:	40013800 	.word	0x40013800

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013c2:	f043 0320 	orr.w	r3, r3, #32
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013da:	f043 0304 	orr.w	r3, r3, #4
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0304 	and.w	r3, r3, #4
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a11      	ldr	r2, [pc, #68]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013f2:	f043 0308 	orr.w	r3, r3, #8
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001438 <MX_GPIO_Init+0x90>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800140a:	480c      	ldr	r0, [pc, #48]	@ (800143c <MX_GPIO_Init+0x94>)
 800140c:	f001 f8db 	bl	80025c6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001410:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_GPIO_Init+0x94>)
 800142a:	f000 ff31 	bl	8002290 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40010c00 	.word	0x40010c00

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001452:	f000 fa25 	bl	80018a0 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001456:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800145a:	2201      	movs	r2, #1
 800145c:	2178      	movs	r1, #120	@ 0x78
 800145e:	485b      	ldr	r0, [pc, #364]	@ (80015cc <SSD1306_Init+0x180>)
 8001460:	f001 fb0c 	bl	8002a7c <HAL_I2C_IsDeviceReady>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800146a:	2300      	movs	r3, #0
 800146c:	e0a9      	b.n	80015c2 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800146e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001472:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001474:	e002      	b.n	800147c <SSD1306_Init+0x30>
		p--;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3b01      	subs	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f9      	bne.n	8001476 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001482:	22ae      	movs	r2, #174	@ 0xae
 8001484:	2100      	movs	r1, #0
 8001486:	2078      	movs	r0, #120	@ 0x78
 8001488:	f000 fa84 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 800148c:	2220      	movs	r2, #32
 800148e:	2100      	movs	r1, #0
 8001490:	2078      	movs	r0, #120	@ 0x78
 8001492:	f000 fa7f 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001496:	2210      	movs	r2, #16
 8001498:	2100      	movs	r1, #0
 800149a:	2078      	movs	r0, #120	@ 0x78
 800149c:	f000 fa7a 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80014a0:	22b0      	movs	r2, #176	@ 0xb0
 80014a2:	2100      	movs	r1, #0
 80014a4:	2078      	movs	r0, #120	@ 0x78
 80014a6:	f000 fa75 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80014aa:	22c8      	movs	r2, #200	@ 0xc8
 80014ac:	2100      	movs	r1, #0
 80014ae:	2078      	movs	r0, #120	@ 0x78
 80014b0:	f000 fa70 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80014b4:	2200      	movs	r2, #0
 80014b6:	2100      	movs	r1, #0
 80014b8:	2078      	movs	r0, #120	@ 0x78
 80014ba:	f000 fa6b 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80014be:	2210      	movs	r2, #16
 80014c0:	2100      	movs	r1, #0
 80014c2:	2078      	movs	r0, #120	@ 0x78
 80014c4:	f000 fa66 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80014c8:	2240      	movs	r2, #64	@ 0x40
 80014ca:	2100      	movs	r1, #0
 80014cc:	2078      	movs	r0, #120	@ 0x78
 80014ce:	f000 fa61 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80014d2:	2281      	movs	r2, #129	@ 0x81
 80014d4:	2100      	movs	r1, #0
 80014d6:	2078      	movs	r0, #120	@ 0x78
 80014d8:	f000 fa5c 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80014dc:	22ff      	movs	r2, #255	@ 0xff
 80014de:	2100      	movs	r1, #0
 80014e0:	2078      	movs	r0, #120	@ 0x78
 80014e2:	f000 fa57 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80014e6:	22a1      	movs	r2, #161	@ 0xa1
 80014e8:	2100      	movs	r1, #0
 80014ea:	2078      	movs	r0, #120	@ 0x78
 80014ec:	f000 fa52 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014f0:	22a6      	movs	r2, #166	@ 0xa6
 80014f2:	2100      	movs	r1, #0
 80014f4:	2078      	movs	r0, #120	@ 0x78
 80014f6:	f000 fa4d 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014fa:	22a8      	movs	r2, #168	@ 0xa8
 80014fc:	2100      	movs	r1, #0
 80014fe:	2078      	movs	r0, #120	@ 0x78
 8001500:	f000 fa48 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001504:	223f      	movs	r2, #63	@ 0x3f
 8001506:	2100      	movs	r1, #0
 8001508:	2078      	movs	r0, #120	@ 0x78
 800150a:	f000 fa43 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800150e:	22a4      	movs	r2, #164	@ 0xa4
 8001510:	2100      	movs	r1, #0
 8001512:	2078      	movs	r0, #120	@ 0x78
 8001514:	f000 fa3e 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001518:	22d3      	movs	r2, #211	@ 0xd3
 800151a:	2100      	movs	r1, #0
 800151c:	2078      	movs	r0, #120	@ 0x78
 800151e:	f000 fa39 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001522:	2200      	movs	r2, #0
 8001524:	2100      	movs	r1, #0
 8001526:	2078      	movs	r0, #120	@ 0x78
 8001528:	f000 fa34 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800152c:	22d5      	movs	r2, #213	@ 0xd5
 800152e:	2100      	movs	r1, #0
 8001530:	2078      	movs	r0, #120	@ 0x78
 8001532:	f000 fa2f 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001536:	22f0      	movs	r2, #240	@ 0xf0
 8001538:	2100      	movs	r1, #0
 800153a:	2078      	movs	r0, #120	@ 0x78
 800153c:	f000 fa2a 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001540:	22d9      	movs	r2, #217	@ 0xd9
 8001542:	2100      	movs	r1, #0
 8001544:	2078      	movs	r0, #120	@ 0x78
 8001546:	f000 fa25 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800154a:	2222      	movs	r2, #34	@ 0x22
 800154c:	2100      	movs	r1, #0
 800154e:	2078      	movs	r0, #120	@ 0x78
 8001550:	f000 fa20 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001554:	22da      	movs	r2, #218	@ 0xda
 8001556:	2100      	movs	r1, #0
 8001558:	2078      	movs	r0, #120	@ 0x78
 800155a:	f000 fa1b 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800155e:	2212      	movs	r2, #18
 8001560:	2100      	movs	r1, #0
 8001562:	2078      	movs	r0, #120	@ 0x78
 8001564:	f000 fa16 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001568:	22db      	movs	r2, #219	@ 0xdb
 800156a:	2100      	movs	r1, #0
 800156c:	2078      	movs	r0, #120	@ 0x78
 800156e:	f000 fa11 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001572:	2220      	movs	r2, #32
 8001574:	2100      	movs	r1, #0
 8001576:	2078      	movs	r0, #120	@ 0x78
 8001578:	f000 fa0c 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800157c:	228d      	movs	r2, #141	@ 0x8d
 800157e:	2100      	movs	r1, #0
 8001580:	2078      	movs	r0, #120	@ 0x78
 8001582:	f000 fa07 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001586:	2214      	movs	r2, #20
 8001588:	2100      	movs	r1, #0
 800158a:	2078      	movs	r0, #120	@ 0x78
 800158c:	f000 fa02 	bl	8001994 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001590:	22af      	movs	r2, #175	@ 0xaf
 8001592:	2100      	movs	r1, #0
 8001594:	2078      	movs	r0, #120	@ 0x78
 8001596:	f000 f9fd 	bl	8001994 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800159a:	222e      	movs	r2, #46	@ 0x2e
 800159c:	2100      	movs	r1, #0
 800159e:	2078      	movs	r0, #120	@ 0x78
 80015a0:	f000 f9f8 	bl	8001994 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80015a4:	2000      	movs	r0, #0
 80015a6:	f000 f843 	bl	8001630 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80015aa:	f000 f813 	bl	80015d4 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <SSD1306_Init+0x184>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <SSD1306_Init+0x184>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80015ba:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <SSD1306_Init+0x184>)
 80015bc:	2201      	movs	r2, #1
 80015be:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80015c0:	2301      	movs	r3, #1
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000208 	.word	0x20000208
 80015d0:	20000708 	.word	0x20000708

080015d4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	71fb      	strb	r3, [r7, #7]
 80015de:	e01d      	b.n	800161c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	3b50      	subs	r3, #80	@ 0x50
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	2100      	movs	r1, #0
 80015ea:	2078      	movs	r0, #120	@ 0x78
 80015ec:	f000 f9d2 	bl	8001994 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015f0:	2200      	movs	r2, #0
 80015f2:	2100      	movs	r1, #0
 80015f4:	2078      	movs	r0, #120	@ 0x78
 80015f6:	f000 f9cd 	bl	8001994 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015fa:	2210      	movs	r2, #16
 80015fc:	2100      	movs	r1, #0
 80015fe:	2078      	movs	r0, #120	@ 0x78
 8001600:	f000 f9c8 	bl	8001994 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	01db      	lsls	r3, r3, #7
 8001608:	4a08      	ldr	r2, [pc, #32]	@ (800162c <SSD1306_UpdateScreen+0x58>)
 800160a:	441a      	add	r2, r3
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	2140      	movs	r1, #64	@ 0x40
 8001610:	2078      	movs	r0, #120	@ 0x78
 8001612:	f000 f959 	bl	80018c8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	3301      	adds	r3, #1
 800161a:	71fb      	strb	r3, [r7, #7]
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b07      	cmp	r3, #7
 8001620:	d9de      	bls.n	80015e0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001622:	bf00      	nop
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000308 	.word	0x20000308

08001630 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <SSD1306_Fill+0x14>
 8001640:	2300      	movs	r3, #0
 8001642:	e000      	b.n	8001646 <SSD1306_Fill+0x16>
 8001644:	23ff      	movs	r3, #255	@ 0xff
 8001646:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800164a:	4619      	mov	r1, r3
 800164c:	4803      	ldr	r0, [pc, #12]	@ (800165c <SSD1306_Fill+0x2c>)
 800164e:	f003 ff24 	bl	800549a <memset>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000308 	.word	0x20000308

08001660 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	80fb      	strh	r3, [r7, #6]
 800166a:	460b      	mov	r3, r1
 800166c:	80bb      	strh	r3, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	70fb      	strb	r3, [r7, #3]
	if (
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	2b7f      	cmp	r3, #127	@ 0x7f
 8001676:	d848      	bhi.n	800170a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	2b3f      	cmp	r3, #63	@ 0x3f
 800167c:	d845      	bhi.n	800170a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800167e:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <SSD1306_DrawPixel+0xb4>)
 8001680:	791b      	ldrb	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001686:	78fb      	ldrb	r3, [r7, #3]
 8001688:	2b00      	cmp	r3, #0
 800168a:	bf0c      	ite	eq
 800168c:	2301      	moveq	r3, #1
 800168e:	2300      	movne	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d11a      	bne.n	80016d0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800169a:	88fa      	ldrh	r2, [r7, #6]
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	08db      	lsrs	r3, r3, #3
 80016a0:	b298      	uxth	r0, r3
 80016a2:	4603      	mov	r3, r0
 80016a4:	01db      	lsls	r3, r3, #7
 80016a6:	4413      	add	r3, r2
 80016a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001718 <SSD1306_DrawPixel+0xb8>)
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	f003 0307 	and.w	r3, r3, #7
 80016b4:	2101      	movs	r1, #1
 80016b6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b259      	sxtb	r1, r3
 80016c0:	88fa      	ldrh	r2, [r7, #6]
 80016c2:	4603      	mov	r3, r0
 80016c4:	01db      	lsls	r3, r3, #7
 80016c6:	4413      	add	r3, r2
 80016c8:	b2c9      	uxtb	r1, r1
 80016ca:	4a13      	ldr	r2, [pc, #76]	@ (8001718 <SSD1306_DrawPixel+0xb8>)
 80016cc:	54d1      	strb	r1, [r2, r3]
 80016ce:	e01d      	b.n	800170c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80016d0:	88fa      	ldrh	r2, [r7, #6]
 80016d2:	88bb      	ldrh	r3, [r7, #4]
 80016d4:	08db      	lsrs	r3, r3, #3
 80016d6:	b298      	uxth	r0, r3
 80016d8:	4603      	mov	r3, r0
 80016da:	01db      	lsls	r3, r3, #7
 80016dc:	4413      	add	r3, r2
 80016de:	4a0e      	ldr	r2, [pc, #56]	@ (8001718 <SSD1306_DrawPixel+0xb8>)
 80016e0:	5cd3      	ldrb	r3, [r2, r3]
 80016e2:	b25a      	sxtb	r2, r3
 80016e4:	88bb      	ldrh	r3, [r7, #4]
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	2101      	movs	r1, #1
 80016ec:	fa01 f303 	lsl.w	r3, r1, r3
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	43db      	mvns	r3, r3
 80016f4:	b25b      	sxtb	r3, r3
 80016f6:	4013      	ands	r3, r2
 80016f8:	b259      	sxtb	r1, r3
 80016fa:	88fa      	ldrh	r2, [r7, #6]
 80016fc:	4603      	mov	r3, r0
 80016fe:	01db      	lsls	r3, r3, #7
 8001700:	4413      	add	r3, r2
 8001702:	b2c9      	uxtb	r1, r1
 8001704:	4a04      	ldr	r2, [pc, #16]	@ (8001718 <SSD1306_DrawPixel+0xb8>)
 8001706:	54d1      	strb	r1, [r2, r3]
 8001708:	e000      	b.n	800170c <SSD1306_DrawPixel+0xac>
		return;
 800170a:	bf00      	nop
	}
}
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	bc80      	pop	{r7}
 8001712:	4770      	bx	lr
 8001714:	20000708 	.word	0x20000708
 8001718:	20000308 	.word	0x20000308

0800171c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	460a      	mov	r2, r1
 8001726:	80fb      	strh	r3, [r7, #6]
 8001728:	4613      	mov	r3, r2
 800172a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800172c:	4a05      	ldr	r2, [pc, #20]	@ (8001744 <SSD1306_GotoXY+0x28>)
 800172e:	88fb      	ldrh	r3, [r7, #6]
 8001730:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001732:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <SSD1306_GotoXY+0x28>)
 8001734:	88bb      	ldrh	r3, [r7, #4]
 8001736:	8053      	strh	r3, [r2, #2]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bc80      	pop	{r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000708 	.word	0x20000708

08001748 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
 8001754:	4613      	mov	r3, r2
 8001756:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001758:	4b39      	ldr	r3, [pc, #228]	@ (8001840 <SSD1306_Putc+0xf8>)
 800175a:	881b      	ldrh	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
	if (
 8001764:	2b7f      	cmp	r3, #127	@ 0x7f
 8001766:	dc07      	bgt.n	8001778 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <SSD1306_Putc+0xf8>)
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	461a      	mov	r2, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	785b      	ldrb	r3, [r3, #1]
 8001772:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001774:	2b3f      	cmp	r3, #63	@ 0x3f
 8001776:	dd01      	ble.n	800177c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001778:	2300      	movs	r3, #0
 800177a:	e05d      	b.n	8001838 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	e04b      	b.n	800181a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	3b20      	subs	r3, #32
 800178a:	6839      	ldr	r1, [r7, #0]
 800178c:	7849      	ldrb	r1, [r1, #1]
 800178e:	fb01 f303 	mul.w	r3, r1, r3
 8001792:	4619      	mov	r1, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	440b      	add	r3, r1
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	e030      	b.n	8001808 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d010      	beq.n	80017d8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <SSD1306_Putc+0xf8>)
 80017b8:	881a      	ldrh	r2, [r3, #0]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4413      	add	r3, r2
 80017c0:	b298      	uxth	r0, r3
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <SSD1306_Putc+0xf8>)
 80017c4:	885a      	ldrh	r2, [r3, #2]
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	79ba      	ldrb	r2, [r7, #6]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f7ff ff45 	bl	8001660 <SSD1306_DrawPixel>
 80017d6:	e014      	b.n	8001802 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <SSD1306_Putc+0xf8>)
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	b298      	uxth	r0, r3
 80017e4:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <SSD1306_Putc+0xf8>)
 80017e6:	885a      	ldrh	r2, [r3, #2]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b299      	uxth	r1, r3
 80017f0:	79bb      	ldrb	r3, [r7, #6]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	2301      	moveq	r3, #1
 80017f8:	2300      	movne	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f7ff ff2f 	bl	8001660 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	3301      	adds	r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4293      	cmp	r3, r2
 8001812:	d3c8      	bcc.n	80017a6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	785b      	ldrb	r3, [r3, #1]
 800181e:	461a      	mov	r2, r3
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4293      	cmp	r3, r2
 8001824:	d3ad      	bcc.n	8001782 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001826:	4b06      	ldr	r3, [pc, #24]	@ (8001840 <SSD1306_Putc+0xf8>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	7812      	ldrb	r2, [r2, #0]
 800182e:	4413      	add	r3, r2
 8001830:	b29a      	uxth	r2, r3
 8001832:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <SSD1306_Putc+0xf8>)
 8001834:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001836:	79fb      	ldrb	r3, [r7, #7]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20000708 	.word	0x20000708

08001844 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	4613      	mov	r3, r2
 8001850:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001852:	e012      	b.n	800187a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	79fa      	ldrb	r2, [r7, #7]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff ff73 	bl	8001748 <SSD1306_Putc>
 8001862:	4603      	mov	r3, r0
 8001864:	461a      	mov	r2, r3
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d002      	beq.n	8001874 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	e008      	b.n	8001886 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1e8      	bne.n	8001854 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	781b      	ldrb	r3, [r3, #0]
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001892:	2000      	movs	r0, #0
 8001894:	f7ff fecc 	bl	8001630 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001898:	f7ff fe9c 	bl	80015d4 <SSD1306_UpdateScreen>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}

080018a0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <ssd1306_I2C_Init+0x24>)
 80018a8:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018aa:	e002      	b.n	80018b2 <ssd1306_I2C_Init+0x12>
		p--;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	607b      	str	r3, [r7, #4]
	while(p>0)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f9      	bne.n	80018ac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80018b8:	bf00      	nop
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	0003d090 	.word	0x0003d090

080018c8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80018c8:	b590      	push	{r4, r7, lr}
 80018ca:	b0c7      	sub	sp, #284	@ 0x11c
 80018cc:	af02      	add	r7, sp, #8
 80018ce:	4604      	mov	r4, r0
 80018d0:	4608      	mov	r0, r1
 80018d2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80018d6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80018da:	600a      	str	r2, [r1, #0]
 80018dc:	4619      	mov	r1, r3
 80018de:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018e2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80018e6:	4622      	mov	r2, r4
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018ee:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80018f2:	4602      	mov	r2, r0
 80018f4:	701a      	strb	r2, [r3, #0]
 80018f6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80018fa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80018fe:	460a      	mov	r2, r1
 8001900:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001902:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800190a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800190e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001912:	7812      	ldrb	r2, [r2, #0]
 8001914:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800191c:	e015      	b.n	800194a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800191e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001922:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001926:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	441a      	add	r2, r3
 800192e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001932:	3301      	adds	r3, #1
 8001934:	7811      	ldrb	r1, [r2, #0]
 8001936:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800193a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800193e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001940:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001944:	3301      	adds	r3, #1
 8001946:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800194a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800194e:	b29b      	uxth	r3, r3
 8001950:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001954:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001958:	8812      	ldrh	r2, [r2, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d8df      	bhi.n	800191e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800195e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001962:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b299      	uxth	r1, r3
 800196a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800196e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	3301      	adds	r3, #1
 8001976:	b29b      	uxth	r3, r3
 8001978:	f107 020c 	add.w	r2, r7, #12
 800197c:	200a      	movs	r0, #10
 800197e:	9000      	str	r0, [sp, #0]
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <ssd1306_I2C_WriteMulti+0xc8>)
 8001982:	f000 ff7d 	bl	8002880 <HAL_I2C_Master_Transmit>
}
 8001986:	bf00      	nop
 8001988:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	20000208 	.word	0x20000208

08001994 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af02      	add	r7, sp, #8
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	460b      	mov	r3, r1
 80019a0:	71bb      	strb	r3, [r7, #6]
 80019a2:	4613      	mov	r3, r2
 80019a4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80019aa:	797b      	ldrb	r3, [r7, #5]
 80019ac:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	b299      	uxth	r1, r3
 80019b2:	f107 020c 	add.w	r2, r7, #12
 80019b6:	230a      	movs	r3, #10
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2302      	movs	r3, #2
 80019bc:	4803      	ldr	r0, [pc, #12]	@ (80019cc <ssd1306_I2C_Write+0x38>)
 80019be:	f000 ff5f 	bl	8002880 <HAL_I2C_Master_Transmit>
}
 80019c2:	bf00      	nop
 80019c4:	3710      	adds	r7, #16
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000208 	.word	0x20000208

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019d6:	4b15      	ldr	r3, [pc, #84]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	4a14      	ldr	r2, [pc, #80]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6193      	str	r3, [r2, #24]
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b0f      	ldr	r3, [pc, #60]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f0:	69db      	ldr	r3, [r3, #28]
 80019f2:	4a0e      	ldr	r2, [pc, #56]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019f8:	61d3      	str	r3, [r2, #28]
 80019fa:	4b0c      	ldr	r3, [pc, #48]	@ (8001a2c <HAL_MspInit+0x5c>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001a06:	4b0a      	ldr	r3, [pc, #40]	@ (8001a30 <HAL_MspInit+0x60>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_MspInit+0x60>)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a22:	bf00      	nop
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40010000 	.word	0x40010000

08001a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0310 	add.w	r3, r7, #16
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a15      	ldr	r2, [pc, #84]	@ (8001aa4 <HAL_I2C_MspInit+0x70>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d123      	bne.n	8001a9c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a5a:	f043 0308 	orr.w	r3, r3, #8
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0308 	and.w	r3, r3, #8
 8001a68:	60fb      	str	r3, [r7, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a6c:	23c0      	movs	r3, #192	@ 0xc0
 8001a6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a70:	2312      	movs	r3, #18
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a74:	2303      	movs	r3, #3
 8001a76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480b      	ldr	r0, [pc, #44]	@ (8001aac <HAL_I2C_MspInit+0x78>)
 8001a80:	f000 fc06 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a84:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	4a07      	ldr	r2, [pc, #28]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a8a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a8e:	61d3      	str	r3, [r2, #28]
 8001a90:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_I2C_MspInit+0x74>)
 8001a92:	69db      	ldr	r3, [r3, #28]
 8001a94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a9c:	bf00      	nop
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40010c00 	.word	0x40010c00

08001ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b085      	sub	sp, #20
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	@ (8001b08 <HAL_TIM_Base_MspInit+0x58>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d10c      	bne.n	8001adc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	4a11      	ldr	r2, [pc, #68]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ac8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001acc:	6193      	str	r3, [r2, #24]
 8001ace:	4b0f      	ldr	r3, [pc, #60]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ad0:	699b      	ldr	r3, [r3, #24]
 8001ad2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ada:	e010      	b.n	8001afe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM4)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a0b      	ldr	r2, [pc, #44]	@ (8001b10 <HAL_TIM_Base_MspInit+0x60>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d10b      	bne.n	8001afe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ae6:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a08      	ldr	r2, [pc, #32]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b06      	ldr	r3, [pc, #24]	@ (8001b0c <HAL_TIM_Base_MspInit+0x5c>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0304 	and.w	r3, r3, #4
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
}
 8001afe:	bf00      	nop
 8001b00:	3714      	adds	r7, #20
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40000800 	.word	0x40000800

08001b14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b088      	sub	sp, #32
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0310 	add.w	r3, r7, #16
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a20      	ldr	r2, [pc, #128]	@ (8001bb0 <HAL_UART_MspInit+0x9c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d139      	bne.n	8001ba8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b34:	4b1f      	ldr	r3, [pc, #124]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b3e:	6193      	str	r3, [r2, #24]
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a18      	ldr	r2, [pc, #96]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b52:	f043 0304 	orr.w	r3, r3, #4
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b16      	ldr	r3, [pc, #88]	@ (8001bb4 <HAL_UART_MspInit+0xa0>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b64:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	4619      	mov	r1, r3
 8001b78:	480f      	ldr	r0, [pc, #60]	@ (8001bb8 <HAL_UART_MspInit+0xa4>)
 8001b7a:	f000 fb89 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	4619      	mov	r1, r3
 8001b92:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <HAL_UART_MspInit+0xa4>)
 8001b94:	f000 fb7c 	bl	8002290 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	2025      	movs	r0, #37	@ 0x25
 8001b9e:	f000 fa8e 	bl	80020be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba2:	2025      	movs	r0, #37	@ 0x25
 8001ba4:	f000 faa7 	bl	80020f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ba8:	bf00      	nop
 8001baa:	3720      	adds	r7, #32
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40013800 	.word	0x40013800
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	40010800 	.word	0x40010800

08001bbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <NMI_Handler+0x4>

08001bc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <HardFault_Handler+0x4>

08001bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <MemManage_Handler+0x4>

08001bd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <BusFault_Handler+0x4>

08001bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <UsageFault_Handler+0x4>

08001be4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0c:	f000 f940 	bl	8001e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c10:	bf00      	nop
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USART1_IRQHandler+0x10>)
 8001c1a:	f002 f9db 	bl	8003fd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200002a4 	.word	0x200002a4

08001c28 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return 1;
 8001c2c:	2301      	movs	r3, #1
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bc80      	pop	{r7}
 8001c34:	4770      	bx	lr

08001c36 <_kill>:

int _kill(int pid, int sig)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c40:	f003 fc7e 	bl	8005540 <__errno>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2216      	movs	r2, #22
 8001c48:	601a      	str	r2, [r3, #0]
  return -1;
 8001c4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_exit>:

void _exit (int status)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c5e:	f04f 31ff 	mov.w	r1, #4294967295
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffe7 	bl	8001c36 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c68:	bf00      	nop
 8001c6a:	e7fd      	b.n	8001c68 <_exit+0x12>

08001c6c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e00a      	b.n	8001c94 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c7e:	f3af 8000 	nop.w
 8001c82:	4601      	mov	r1, r0
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	1c5a      	adds	r2, r3, #1
 8001c88:	60ba      	str	r2, [r7, #8]
 8001c8a:	b2ca      	uxtb	r2, r1
 8001c8c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf0      	blt.n	8001c7e <_read+0x12>
  }

  return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	60f8      	str	r0, [r7, #12]
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e009      	b.n	8001ccc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	60ba      	str	r2, [r7, #8]
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	617b      	str	r3, [r7, #20]
 8001ccc:	697a      	ldr	r2, [r7, #20]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	dbf1      	blt.n	8001cb8 <_write+0x12>
  }
  return len;
 8001cd4:	687b      	ldr	r3, [r7, #4]
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_close>:

int _close(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d04:	605a      	str	r2, [r3, #4]
  return 0;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bc80      	pop	{r7}
 8001d10:	4770      	bx	lr

08001d12 <_isatty>:

int _isatty(int file)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d48:	4a14      	ldr	r2, [pc, #80]	@ (8001d9c <_sbrk+0x5c>)
 8001d4a:	4b15      	ldr	r3, [pc, #84]	@ (8001da0 <_sbrk+0x60>)
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d54:	4b13      	ldr	r3, [pc, #76]	@ (8001da4 <_sbrk+0x64>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_sbrk+0x64>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	@ (8001da8 <_sbrk+0x68>)
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d62:	4b10      	ldr	r3, [pc, #64]	@ (8001da4 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d207      	bcs.n	8001d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d70:	f003 fbe6 	bl	8005540 <__errno>
 8001d74:	4603      	mov	r3, r0
 8001d76:	220c      	movs	r2, #12
 8001d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7e:	e009      	b.n	8001d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d80:	4b08      	ldr	r3, [pc, #32]	@ (8001da4 <_sbrk+0x64>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d86:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <_sbrk+0x64>)
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	4a05      	ldr	r2, [pc, #20]	@ (8001da4 <_sbrk+0x64>)
 8001d90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d92:	68fb      	ldr	r3, [r7, #12]
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3718      	adds	r7, #24
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20005000 	.word	0x20005000
 8001da0:	00000400 	.word	0x00000400
 8001da4:	20000710 	.word	0x20000710
 8001da8:	20000868 	.word	0x20000868

08001dac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr

08001db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db8:	f7ff fff8 	bl	8001dac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dbc:	480b      	ldr	r0, [pc, #44]	@ (8001dec <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dbe:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc4:	e002      	b.n	8001dcc <LoopCopyDataInit>

08001dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dca:	3304      	adds	r3, #4

08001dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dd0:	d3f9      	bcc.n	8001dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dd2:	4a09      	ldr	r2, [pc, #36]	@ (8001df8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dd4:	4c09      	ldr	r4, [pc, #36]	@ (8001dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd8:	e001      	b.n	8001dde <LoopFillZerobss>

08001dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ddc:	3204      	adds	r2, #4

08001dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001de0:	d3fb      	bcc.n	8001dda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001de2:	f003 fbb3 	bl	800554c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de6:	f7ff f9c1 	bl	800116c <main>
  bx lr
 8001dea:	4770      	bx	lr
  ldr r0, =_sdata
 8001dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001df0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001df4:	080081b8 	.word	0x080081b8
  ldr r2, =_sbss
 8001df8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001dfc:	20000864 	.word	0x20000864

08001e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e00:	e7fe      	b.n	8001e00 <ADC1_2_IRQHandler>
	...

08001e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <HAL_Init+0x28>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a07      	ldr	r2, [pc, #28]	@ (8001e2c <HAL_Init+0x28>)
 8001e0e:	f043 0310 	orr.w	r3, r3, #16
 8001e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e14:	2003      	movs	r0, #3
 8001e16:	f000 f947 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e1a:	200f      	movs	r0, #15
 8001e1c:	f000 f808 	bl	8001e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e20:	f7ff fdd6 	bl	80019d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40022000 	.word	0x40022000

08001e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x54>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	4b12      	ldr	r3, [pc, #72]	@ (8001e88 <HAL_InitTick+0x58>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4619      	mov	r1, r3
 8001e42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f000 f95f 	bl	8002112 <HAL_SYSTICK_Config>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00e      	b.n	8001e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0f      	cmp	r3, #15
 8001e62:	d80a      	bhi.n	8001e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e64:	2200      	movs	r2, #0
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f000 f927 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e70:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <HAL_InitTick+0x5c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e000      	b.n	8001e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000008 	.word	0x20000008
 8001e88:	20000010 	.word	0x20000010
 8001e8c:	2000000c 	.word	0x2000000c

08001e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x1c>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4413      	add	r3, r2
 8001ea0:	4a03      	ldr	r2, [pc, #12]	@ (8001eb0 <HAL_IncTick+0x20>)
 8001ea2:	6013      	str	r3, [r2, #0]
}
 8001ea4:	bf00      	nop
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	20000010 	.word	0x20000010
 8001eb0:	20000714 	.word	0x20000714

08001eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b02      	ldr	r3, [pc, #8]	@ (8001ec4 <HAL_GetTick+0x10>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bc80      	pop	{r7}
 8001ec2:	4770      	bx	lr
 8001ec4:	20000714 	.word	0x20000714

08001ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_GetTick>
 8001ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee0:	d005      	beq.n	8001eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f0c <HAL_Delay+0x44>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	4413      	add	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eee:	bf00      	nop
 8001ef0:	f7ff ffe0 	bl	8001eb4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d8f7      	bhi.n	8001ef0 <HAL_Delay+0x28>
  {
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000010 	.word	0x20000010

08001f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f20:	4b0c      	ldr	r3, [pc, #48]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f26:	68ba      	ldr	r2, [r7, #8]
 8001f28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f42:	4a04      	ldr	r2, [pc, #16]	@ (8001f54 <__NVIC_SetPriorityGrouping+0x44>)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	60d3      	str	r3, [r2, #12]
}
 8001f48:	bf00      	nop
 8001f4a:	3714      	adds	r7, #20
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f5c:	4b04      	ldr	r3, [pc, #16]	@ (8001f70 <__NVIC_GetPriorityGrouping+0x18>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0a1b      	lsrs	r3, r3, #8
 8001f62:	f003 0307 	and.w	r3, r3, #7
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	db0b      	blt.n	8001f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	f003 021f 	and.w	r2, r3, #31
 8001f8c:	4906      	ldr	r1, [pc, #24]	@ (8001fa8 <__NVIC_EnableIRQ+0x34>)
 8001f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	2001      	movs	r0, #1
 8001f96:	fa00 f202 	lsl.w	r2, r0, r2
 8001f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bc80      	pop	{r7}
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100

08001fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	6039      	str	r1, [r7, #0]
 8001fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	db0a      	blt.n	8001fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	b2da      	uxtb	r2, r3
 8001fc4:	490c      	ldr	r1, [pc, #48]	@ (8001ff8 <__NVIC_SetPriority+0x4c>)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	0112      	lsls	r2, r2, #4
 8001fcc:	b2d2      	uxtb	r2, r2
 8001fce:	440b      	add	r3, r1
 8001fd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd4:	e00a      	b.n	8001fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	4908      	ldr	r1, [pc, #32]	@ (8001ffc <__NVIC_SetPriority+0x50>)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	3b04      	subs	r3, #4
 8001fe4:	0112      	lsls	r2, r2, #4
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	440b      	add	r3, r1
 8001fea:	761a      	strb	r2, [r3, #24]
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000e100 	.word	0xe000e100
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	@ 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f1c3 0307 	rsb	r3, r3, #7
 800201a:	2b04      	cmp	r3, #4
 800201c:	bf28      	it	cs
 800201e:	2304      	movcs	r3, #4
 8002020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	3304      	adds	r3, #4
 8002026:	2b06      	cmp	r3, #6
 8002028:	d902      	bls.n	8002030 <NVIC_EncodePriority+0x30>
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	3b03      	subs	r3, #3
 800202e:	e000      	b.n	8002032 <NVIC_EncodePriority+0x32>
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002034:	f04f 32ff 	mov.w	r2, #4294967295
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43da      	mvns	r2, r3
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	401a      	ands	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002048:	f04f 31ff 	mov.w	r1, #4294967295
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	fa01 f303 	lsl.w	r3, r1, r3
 8002052:	43d9      	mvns	r1, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002058:	4313      	orrs	r3, r2
         );
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	@ 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295
 8002088:	f7ff ff90 	bl	8001fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff2d 	bl	8001f10 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff42 	bl	8001f58 <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff90 	bl	8002000 <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5f 	bl	8001fac <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	4603      	mov	r3, r0
 80020fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff ff35 	bl	8001f74 <__NVIC_EnableIRQ>
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7ff ffa2 	bl	8002064 <SysTick_Config>
 8002120:	4603      	mov	r3, r0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800212a:	b480      	push	{r7}
 800212c:	b085      	sub	sp, #20
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002132:	2300      	movs	r3, #0
 8002134:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d008      	beq.n	8002154 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2204      	movs	r2, #4
 8002146:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e020      	b.n	8002196 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f022 020e 	bic.w	r2, r2, #14
 8002162:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f022 0201 	bic.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d005      	beq.n	80021c4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2204      	movs	r2, #4
 80021bc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	73fb      	strb	r3, [r7, #15]
 80021c2:	e051      	b.n	8002268 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 020e 	bic.w	r2, r2, #14
 80021d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0201 	bic.w	r2, r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a22      	ldr	r2, [pc, #136]	@ (8002274 <HAL_DMA_Abort_IT+0xd4>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d029      	beq.n	8002242 <HAL_DMA_Abort_IT+0xa2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a21      	ldr	r2, [pc, #132]	@ (8002278 <HAL_DMA_Abort_IT+0xd8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d022      	beq.n	800223e <HAL_DMA_Abort_IT+0x9e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <HAL_DMA_Abort_IT+0xdc>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d01a      	beq.n	8002238 <HAL_DMA_Abort_IT+0x98>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1e      	ldr	r2, [pc, #120]	@ (8002280 <HAL_DMA_Abort_IT+0xe0>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d012      	beq.n	8002232 <HAL_DMA_Abort_IT+0x92>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <HAL_DMA_Abort_IT+0xe4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00a      	beq.n	800222c <HAL_DMA_Abort_IT+0x8c>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <HAL_DMA_Abort_IT+0xe8>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d102      	bne.n	8002226 <HAL_DMA_Abort_IT+0x86>
 8002220:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002224:	e00e      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002226:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800222a:	e00b      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 800222c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002230:	e008      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002232:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002236:	e005      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002238:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800223c:	e002      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 800223e:	2310      	movs	r3, #16
 8002240:	e000      	b.n	8002244 <HAL_DMA_Abort_IT+0xa4>
 8002242:	2301      	movs	r3, #1
 8002244:	4a11      	ldr	r2, [pc, #68]	@ (800228c <HAL_DMA_Abort_IT+0xec>)
 8002246:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	4798      	blx	r3
    } 
  }
  return status;
 8002268:	7bfb      	ldrb	r3, [r7, #15]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40020008 	.word	0x40020008
 8002278:	4002001c 	.word	0x4002001c
 800227c:	40020030 	.word	0x40020030
 8002280:	40020044 	.word	0x40020044
 8002284:	40020058 	.word	0x40020058
 8002288:	4002006c 	.word	0x4002006c
 800228c:	40020000 	.word	0x40020000

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b08b      	sub	sp, #44	@ 0x2c
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800229e:	2300      	movs	r3, #0
 80022a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	e169      	b.n	8002578 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022a4:	2201      	movs	r2, #1
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69fa      	ldr	r2, [r7, #28]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8158 	bne.w	8002572 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002530 <HAL_GPIO_Init+0x2a0>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d05e      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022cc:	4a98      	ldr	r2, [pc, #608]	@ (8002530 <HAL_GPIO_Init+0x2a0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d875      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022d2:	4a98      	ldr	r2, [pc, #608]	@ (8002534 <HAL_GPIO_Init+0x2a4>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d058      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022d8:	4a96      	ldr	r2, [pc, #600]	@ (8002534 <HAL_GPIO_Init+0x2a4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d86f      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022de:	4a96      	ldr	r2, [pc, #600]	@ (8002538 <HAL_GPIO_Init+0x2a8>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d052      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022e4:	4a94      	ldr	r2, [pc, #592]	@ (8002538 <HAL_GPIO_Init+0x2a8>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d869      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022ea:	4a94      	ldr	r2, [pc, #592]	@ (800253c <HAL_GPIO_Init+0x2ac>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d04c      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022f0:	4a92      	ldr	r2, [pc, #584]	@ (800253c <HAL_GPIO_Init+0x2ac>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d863      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 80022f6:	4a92      	ldr	r2, [pc, #584]	@ (8002540 <HAL_GPIO_Init+0x2b0>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d046      	beq.n	800238a <HAL_GPIO_Init+0xfa>
 80022fc:	4a90      	ldr	r2, [pc, #576]	@ (8002540 <HAL_GPIO_Init+0x2b0>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d85d      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 8002302:	2b12      	cmp	r3, #18
 8002304:	d82a      	bhi.n	800235c <HAL_GPIO_Init+0xcc>
 8002306:	2b12      	cmp	r3, #18
 8002308:	d859      	bhi.n	80023be <HAL_GPIO_Init+0x12e>
 800230a:	a201      	add	r2, pc, #4	@ (adr r2, 8002310 <HAL_GPIO_Init+0x80>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	0800238b 	.word	0x0800238b
 8002314:	08002365 	.word	0x08002365
 8002318:	08002377 	.word	0x08002377
 800231c:	080023b9 	.word	0x080023b9
 8002320:	080023bf 	.word	0x080023bf
 8002324:	080023bf 	.word	0x080023bf
 8002328:	080023bf 	.word	0x080023bf
 800232c:	080023bf 	.word	0x080023bf
 8002330:	080023bf 	.word	0x080023bf
 8002334:	080023bf 	.word	0x080023bf
 8002338:	080023bf 	.word	0x080023bf
 800233c:	080023bf 	.word	0x080023bf
 8002340:	080023bf 	.word	0x080023bf
 8002344:	080023bf 	.word	0x080023bf
 8002348:	080023bf 	.word	0x080023bf
 800234c:	080023bf 	.word	0x080023bf
 8002350:	080023bf 	.word	0x080023bf
 8002354:	0800236d 	.word	0x0800236d
 8002358:	08002381 	.word	0x08002381
 800235c:	4a79      	ldr	r2, [pc, #484]	@ (8002544 <HAL_GPIO_Init+0x2b4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002362:	e02c      	b.n	80023be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	623b      	str	r3, [r7, #32]
          break;
 800236a:	e029      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	3304      	adds	r3, #4
 8002372:	623b      	str	r3, [r7, #32]
          break;
 8002374:	e024      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	3308      	adds	r3, #8
 800237c:	623b      	str	r3, [r7, #32]
          break;
 800237e:	e01f      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	330c      	adds	r3, #12
 8002386:	623b      	str	r3, [r7, #32]
          break;
 8002388:	e01a      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d102      	bne.n	8002398 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002392:	2304      	movs	r3, #4
 8002394:	623b      	str	r3, [r7, #32]
          break;
 8002396:	e013      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d105      	bne.n	80023ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023a0:	2308      	movs	r3, #8
 80023a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	611a      	str	r2, [r3, #16]
          break;
 80023aa:	e009      	b.n	80023c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ac:	2308      	movs	r3, #8
 80023ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69fa      	ldr	r2, [r7, #28]
 80023b4:	615a      	str	r2, [r3, #20]
          break;
 80023b6:	e003      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e000      	b.n	80023c0 <HAL_GPIO_Init+0x130>
          break;
 80023be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2bff      	cmp	r3, #255	@ 0xff
 80023c4:	d801      	bhi.n	80023ca <HAL_GPIO_Init+0x13a>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	e001      	b.n	80023ce <HAL_GPIO_Init+0x13e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	3304      	adds	r3, #4
 80023ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	2bff      	cmp	r3, #255	@ 0xff
 80023d4:	d802      	bhi.n	80023dc <HAL_GPIO_Init+0x14c>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	e002      	b.n	80023e2 <HAL_GPIO_Init+0x152>
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	3b08      	subs	r3, #8
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	210f      	movs	r1, #15
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	fa01 f303 	lsl.w	r3, r1, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	401a      	ands	r2, r3
 80023f4:	6a39      	ldr	r1, [r7, #32]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	fa01 f303 	lsl.w	r3, r1, r3
 80023fc:	431a      	orrs	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	f000 80b1 	beq.w	8002572 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002410:	4b4d      	ldr	r3, [pc, #308]	@ (8002548 <HAL_GPIO_Init+0x2b8>)
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	4a4c      	ldr	r2, [pc, #304]	@ (8002548 <HAL_GPIO_Init+0x2b8>)
 8002416:	f043 0301 	orr.w	r3, r3, #1
 800241a:	6193      	str	r3, [r2, #24]
 800241c:	4b4a      	ldr	r3, [pc, #296]	@ (8002548 <HAL_GPIO_Init+0x2b8>)
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002428:	4a48      	ldr	r2, [pc, #288]	@ (800254c <HAL_GPIO_Init+0x2bc>)
 800242a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242c:	089b      	lsrs	r3, r3, #2
 800242e:	3302      	adds	r3, #2
 8002430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002434:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	f003 0303 	and.w	r3, r3, #3
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	220f      	movs	r2, #15
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4013      	ands	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a40      	ldr	r2, [pc, #256]	@ (8002550 <HAL_GPIO_Init+0x2c0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d013      	beq.n	800247c <HAL_GPIO_Init+0x1ec>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a3f      	ldr	r2, [pc, #252]	@ (8002554 <HAL_GPIO_Init+0x2c4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00d      	beq.n	8002478 <HAL_GPIO_Init+0x1e8>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	4a3e      	ldr	r2, [pc, #248]	@ (8002558 <HAL_GPIO_Init+0x2c8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d007      	beq.n	8002474 <HAL_GPIO_Init+0x1e4>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a3d      	ldr	r2, [pc, #244]	@ (800255c <HAL_GPIO_Init+0x2cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d101      	bne.n	8002470 <HAL_GPIO_Init+0x1e0>
 800246c:	2303      	movs	r3, #3
 800246e:	e006      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002470:	2304      	movs	r3, #4
 8002472:	e004      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002474:	2302      	movs	r3, #2
 8002476:	e002      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 8002478:	2301      	movs	r3, #1
 800247a:	e000      	b.n	800247e <HAL_GPIO_Init+0x1ee>
 800247c:	2300      	movs	r3, #0
 800247e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002480:	f002 0203 	and.w	r2, r2, #3
 8002484:	0092      	lsls	r2, r2, #2
 8002486:	4093      	lsls	r3, r2
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800248e:	492f      	ldr	r1, [pc, #188]	@ (800254c <HAL_GPIO_Init+0x2bc>)
 8002490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002492:	089b      	lsrs	r3, r3, #2
 8002494:	3302      	adds	r3, #2
 8002496:	68fa      	ldr	r2, [r7, #12]
 8002498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	492c      	ldr	r1, [pc, #176]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4928      	ldr	r1, [pc, #160]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d006      	beq.n	80024de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80024d0:	4b23      	ldr	r3, [pc, #140]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4922      	ldr	r1, [pc, #136]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60cb      	str	r3, [r1, #12]
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80024de:	4b20      	ldr	r3, [pc, #128]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024e0:	68da      	ldr	r2, [r3, #12]
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	491e      	ldr	r1, [pc, #120]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d006      	beq.n	8002506 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4918      	ldr	r1, [pc, #96]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002506:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	43db      	mvns	r3, r3
 800250e:	4914      	ldr	r1, [pc, #80]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002510:	4013      	ands	r3, r2
 8002512:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d021      	beq.n	8002564 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002520:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	490e      	ldr	r1, [pc, #56]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
 800252c:	e021      	b.n	8002572 <HAL_GPIO_Init+0x2e2>
 800252e:	bf00      	nop
 8002530:	10320000 	.word	0x10320000
 8002534:	10310000 	.word	0x10310000
 8002538:	10220000 	.word	0x10220000
 800253c:	10210000 	.word	0x10210000
 8002540:	10120000 	.word	0x10120000
 8002544:	10110000 	.word	0x10110000
 8002548:	40021000 	.word	0x40021000
 800254c:	40010000 	.word	0x40010000
 8002550:	40010800 	.word	0x40010800
 8002554:	40010c00 	.word	0x40010c00
 8002558:	40011000 	.word	0x40011000
 800255c:	40011400 	.word	0x40011400
 8002560:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_GPIO_Init+0x304>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	43db      	mvns	r3, r3
 800256c:	4909      	ldr	r1, [pc, #36]	@ (8002594 <HAL_GPIO_Init+0x304>)
 800256e:	4013      	ands	r3, r2
 8002570:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	3301      	adds	r3, #1
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	f47f ae8e 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	372c      	adds	r7, #44	@ 0x2c
 800258e:	46bd      	mov	sp, r7
 8002590:	bc80      	pop	{r7}
 8002592:	4770      	bx	lr
 8002594:	40010400 	.word	0x40010400

08002598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e001      	b.n	80025ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bc80      	pop	{r7}
 80025c4:	4770      	bx	lr

080025c6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c6:	b480      	push	{r7}
 80025c8:	b083      	sub	sp, #12
 80025ca:	af00      	add	r7, sp, #0
 80025cc:	6078      	str	r0, [r7, #4]
 80025ce:	460b      	mov	r3, r1
 80025d0:	807b      	strh	r3, [r7, #2]
 80025d2:	4613      	mov	r3, r2
 80025d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d6:	787b      	ldrb	r3, [r7, #1]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025dc:	887a      	ldrh	r2, [r7, #2]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e2:	e003      	b.n	80025ec <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025e4:	887b      	ldrh	r3, [r7, #2]
 80025e6:	041a      	lsls	r2, r3, #16
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	611a      	str	r2, [r3, #16]
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr
	...

080025f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d101      	bne.n	800260a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12b      	b.n	8002862 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fa08 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	@ 0x24
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800264a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800265a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800265c:	f001 f960 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 8002660:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	4a81      	ldr	r2, [pc, #516]	@ (800286c <HAL_I2C_Init+0x274>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d807      	bhi.n	800267c <HAL_I2C_Init+0x84>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	4a80      	ldr	r2, [pc, #512]	@ (8002870 <HAL_I2C_Init+0x278>)
 8002670:	4293      	cmp	r3, r2
 8002672:	bf94      	ite	ls
 8002674:	2301      	movls	r3, #1
 8002676:	2300      	movhi	r3, #0
 8002678:	b2db      	uxtb	r3, r3
 800267a:	e006      	b.n	800268a <HAL_I2C_Init+0x92>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	4a7d      	ldr	r2, [pc, #500]	@ (8002874 <HAL_I2C_Init+0x27c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	bf94      	ite	ls
 8002684:	2301      	movls	r3, #1
 8002686:	2300      	movhi	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0e7      	b.n	8002862 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	4a78      	ldr	r2, [pc, #480]	@ (8002878 <HAL_I2C_Init+0x280>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0c9b      	lsrs	r3, r3, #18
 800269c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	430a      	orrs	r2, r1
 80026b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	4a6a      	ldr	r2, [pc, #424]	@ (800286c <HAL_I2C_Init+0x274>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d802      	bhi.n	80026cc <HAL_I2C_Init+0xd4>
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	3301      	adds	r3, #1
 80026ca:	e009      	b.n	80026e0 <HAL_I2C_Init+0xe8>
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026d2:	fb02 f303 	mul.w	r3, r2, r3
 80026d6:	4a69      	ldr	r2, [pc, #420]	@ (800287c <HAL_I2C_Init+0x284>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	495c      	ldr	r1, [pc, #368]	@ (800286c <HAL_I2C_Init+0x274>)
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d819      	bhi.n	8002734 <HAL_I2C_Init+0x13c>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e59      	subs	r1, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fbb1 f3f3 	udiv	r3, r1, r3
 800270e:	1c59      	adds	r1, r3, #1
 8002710:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002714:	400b      	ands	r3, r1
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_I2C_Init+0x138>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1e59      	subs	r1, r3, #1
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fbb1 f3f3 	udiv	r3, r1, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	e051      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002730:	2304      	movs	r3, #4
 8002732:	e04f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d111      	bne.n	8002760 <HAL_I2C_Init+0x168>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1e58      	subs	r0, r3, #1
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6859      	ldr	r1, [r3, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	440b      	add	r3, r1
 800274a:	fbb0 f3f3 	udiv	r3, r0, r3
 800274e:	3301      	adds	r3, #1
 8002750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf0c      	ite	eq
 8002758:	2301      	moveq	r3, #1
 800275a:	2300      	movne	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e012      	b.n	8002786 <HAL_I2C_Init+0x18e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf0c      	ite	eq
 8002780:	2301      	moveq	r3, #1
 8002782:	2300      	movne	r3, #0
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b00      	cmp	r3, #0
 8002788:	d001      	beq.n	800278e <HAL_I2C_Init+0x196>
 800278a:	2301      	movs	r3, #1
 800278c:	e022      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10e      	bne.n	80027b4 <HAL_I2C_Init+0x1bc>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1e58      	subs	r0, r3, #1
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6859      	ldr	r1, [r3, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	440b      	add	r3, r1
 80027a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a8:	3301      	adds	r3, #1
 80027aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027b2:	e00f      	b.n	80027d4 <HAL_I2C_Init+0x1dc>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	1e58      	subs	r0, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	460b      	mov	r3, r1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	0099      	lsls	r1, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ca:	3301      	adds	r3, #1
 80027cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027d4:	6879      	ldr	r1, [r7, #4]
 80027d6:	6809      	ldr	r1, [r1, #0]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69da      	ldr	r2, [r3, #28]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002802:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6911      	ldr	r1, [r2, #16]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68d2      	ldr	r2, [r2, #12]
 800280e:	4311      	orrs	r1, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	430b      	orrs	r3, r1
 8002816:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	695a      	ldr	r2, [r3, #20]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	000186a0 	.word	0x000186a0
 8002870:	001e847f 	.word	0x001e847f
 8002874:	003d08ff 	.word	0x003d08ff
 8002878:	431bde83 	.word	0x431bde83
 800287c:	10624dd3 	.word	0x10624dd3

08002880 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b088      	sub	sp, #32
 8002884:	af02      	add	r7, sp, #8
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	461a      	mov	r2, r3
 800288c:	460b      	mov	r3, r1
 800288e:	817b      	strh	r3, [r7, #10]
 8002890:	4613      	mov	r3, r2
 8002892:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002894:	f7ff fb0e 	bl	8001eb4 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	f040 80e0 	bne.w	8002a68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2319      	movs	r3, #25
 80028ae:	2201      	movs	r2, #1
 80028b0:	4970      	ldr	r1, [pc, #448]	@ (8002a74 <HAL_I2C_Master_Transmit+0x1f4>)
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f000 fa92 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028be:	2302      	movs	r3, #2
 80028c0:	e0d3      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_I2C_Master_Transmit+0x50>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e0cc      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0301 	and.w	r3, r3, #1
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d007      	beq.n	80028f6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002904:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2221      	movs	r2, #33	@ 0x21
 800290a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2210      	movs	r2, #16
 8002912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	893a      	ldrh	r2, [r7, #8]
 8002926:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29a      	uxth	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	4a50      	ldr	r2, [pc, #320]	@ (8002a78 <HAL_I2C_Master_Transmit+0x1f8>)
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002938:	8979      	ldrh	r1, [r7, #10]
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	6a3a      	ldr	r2, [r7, #32]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 f9ca 	bl	8002cd8 <I2C_MasterRequestWrite>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e08d      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	613b      	str	r3, [r7, #16]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002964:	e066      	b.n	8002a34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	6a39      	ldr	r1, [r7, #32]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 fb50 	bl	8003010 <I2C_WaitOnTXEFlagUntilTimeout>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00d      	beq.n	8002992 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	2b04      	cmp	r3, #4
 800297c:	d107      	bne.n	800298e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800298c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06b      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d11b      	bne.n	8002a08 <HAL_I2C_Master_Transmit+0x188>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d017      	beq.n	8002a08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	781a      	ldrb	r2, [r3, #0]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e8:	1c5a      	adds	r2, r3, #1
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	6a39      	ldr	r1, [r7, #32]
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 fb47 	bl	80030a0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00d      	beq.n	8002a34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e01a      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d194      	bne.n	8002966 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2220      	movs	r2, #32
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	e000      	b.n	8002a6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a68:	2302      	movs	r3, #2
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	00100002 	.word	0x00100002
 8002a78:	ffff0000 	.word	0xffff0000

08002a7c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	@ 0x28
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a8c:	f7ff fa12 	bl	8001eb4 <HAL_GetTick>
 8002a90:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 8111 	bne.w	8002cc6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2319      	movs	r3, #25
 8002aaa:	2201      	movs	r2, #1
 8002aac:	4988      	ldr	r1, [pc, #544]	@ (8002cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f000 f994 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
 8002abc:	e104      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_I2C_IsDeviceReady+0x50>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e0fd      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d007      	beq.n	8002af2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 0201 	orr.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2224      	movs	r2, #36	@ 0x24
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a70      	ldr	r2, [pc, #448]	@ (8002cd4 <HAL_I2C_IsDeviceReady+0x258>)
 8002b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b24:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f952 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00d      	beq.n	8002b5a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b4c:	d103      	bne.n	8002b56 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b54:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e0b6      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002b68:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f9a3 	bl	8001eb4 <HAL_GetTick>
 8002b6e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695b      	ldr	r3, [r3, #20]
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	bf0c      	ite	eq
 8002b7e:	2301      	moveq	r3, #1
 8002b80:	2300      	movne	r3, #0
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b94:	bf0c      	ite	eq
 8002b96:	2301      	moveq	r3, #1
 8002b98:	2300      	movne	r3, #0
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b9e:	e025      	b.n	8002bec <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ba0:	f7ff f988 	bl	8001eb4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d302      	bcc.n	8002bb6 <HAL_I2C_IsDeviceReady+0x13a>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d103      	bne.n	8002bbe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	22a0      	movs	r2, #160	@ 0xa0
 8002bba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	bf0c      	ite	eq
 8002bcc:	2301      	moveq	r3, #1
 8002bce:	2300      	movne	r3, #0
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002bf6:	d005      	beq.n	8002c04 <HAL_I2C_IsDeviceReady+0x188>
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d102      	bne.n	8002c04 <HAL_I2C_IsDeviceReady+0x188>
 8002bfe:	7dbb      	ldrb	r3, [r7, #22]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0cd      	beq.n	8002ba0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d129      	bne.n	8002c6e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c28:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	613b      	str	r3, [r7, #16]
 8002c3e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2319      	movs	r3, #25
 8002c46:	2201      	movs	r2, #1
 8002c48:	4921      	ldr	r1, [pc, #132]	@ (8002cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 f8c6 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e036      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e02c      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c7c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c86:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2319      	movs	r3, #25
 8002c8e:	2201      	movs	r2, #1
 8002c90:	490f      	ldr	r1, [pc, #60]	@ (8002cd0 <HAL_I2C_IsDeviceReady+0x254>)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8a2 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e012      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	f4ff af32 	bcc.w	8002b16 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	00100002 	.word	0x00100002
 8002cd4:	ffff0000 	.word	0xffff0000

08002cd8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	607a      	str	r2, [r7, #4]
 8002ce2:	603b      	str	r3, [r7, #0]
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	2b08      	cmp	r3, #8
 8002cf2:	d006      	beq.n	8002d02 <I2C_MasterRequestWrite+0x2a>
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d003      	beq.n	8002d02 <I2C_MasterRequestWrite+0x2a>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002d00:	d108      	bne.n	8002d14 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	e00b      	b.n	8002d2c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d18:	2b12      	cmp	r3, #18
 8002d1a:	d107      	bne.n	8002d2c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f84f 	bl	8002ddc <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d52:	d103      	bne.n	8002d5c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e035      	b.n	8002dcc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d68:	d108      	bne.n	8002d7c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d6a:	897b      	ldrh	r3, [r7, #10]
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d78:	611a      	str	r2, [r3, #16]
 8002d7a:	e01b      	b.n	8002db4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d7c:	897b      	ldrh	r3, [r7, #10]
 8002d7e:	11db      	asrs	r3, r3, #7
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 0306 	and.w	r3, r3, #6
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	f063 030f 	orn	r3, r3, #15
 8002d8c:	b2da      	uxtb	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	490e      	ldr	r1, [pc, #56]	@ (8002dd4 <I2C_MasterRequestWrite+0xfc>)
 8002d9a:	68f8      	ldr	r0, [r7, #12]
 8002d9c:	f000 f898 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e010      	b.n	8002dcc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002daa:	897b      	ldrh	r3, [r7, #10]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4907      	ldr	r1, [pc, #28]	@ (8002dd8 <I2C_MasterRequestWrite+0x100>)
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f888 	bl	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	00010008 	.word	0x00010008
 8002dd8:	00010002 	.word	0x00010002

08002ddc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	603b      	str	r3, [r7, #0]
 8002de8:	4613      	mov	r3, r2
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dec:	e048      	b.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d044      	beq.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002df6:	f7ff f85d 	bl	8001eb4 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	683a      	ldr	r2, [r7, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d302      	bcc.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d139      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10d      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	e00c      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d116      	bne.n	8002e80 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e6c:	f043 0220 	orr.w	r2, r3, #32
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e023      	b.n	8002ec8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	0c1b      	lsrs	r3, r3, #16
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d10d      	bne.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	43da      	mvns	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	4013      	ands	r3, r2
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	e00c      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	43da      	mvns	r2, r3
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	b29b      	uxth	r3, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bf0c      	ite	eq
 8002eb8:	2301      	moveq	r3, #1
 8002eba:	2300      	movne	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	79fb      	ldrb	r3, [r7, #7]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d093      	beq.n	8002dee <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
 8002edc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ede:	e071      	b.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eee:	d123      	bne.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efe:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f08:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f24:	f043 0204 	orr.w	r2, r3, #4
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e067      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3e:	d041      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f40:	f7fe ffb8 	bl	8001eb4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d302      	bcc.n	8002f56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d136      	bne.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	0c1b      	lsrs	r3, r3, #16
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10c      	bne.n	8002f7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e00b      	b.n	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf14      	ite	ne
 8002f8c:	2301      	movne	r3, #1
 8002f8e:	2300      	moveq	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d016      	beq.n	8002fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e021      	b.n	8003008 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10c      	bne.n	8002fe8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	e00b      	b.n	8003000 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	bf14      	ite	ne
 8002ffa:	2301      	movne	r3, #1
 8002ffc:	2300      	moveq	r3, #0
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f af6d 	bne.w	8002ee0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301c:	e034      	b.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f886 	bl	8003130 <I2C_IsAcknowledgeFailed>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e034      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d028      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7fe ff3d 	bl	8001eb4 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d11d      	bne.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003056:	2b80      	cmp	r3, #128	@ 0x80
 8003058:	d016      	beq.n	8003088 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003074:	f043 0220 	orr.w	r2, r3, #32
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e007      	b.n	8003098 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003092:	2b80      	cmp	r3, #128	@ 0x80
 8003094:	d1c3      	bne.n	800301e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ac:	e034      	b.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f83e 	bl	8003130 <I2C_IsAcknowledgeFailed>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e034      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d028      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c6:	f7fe fef5 	bl	8001eb4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d302      	bcc.n	80030dc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d11d      	bne.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b04      	cmp	r3, #4
 80030e8:	d016      	beq.n	8003118 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003104:	f043 0220 	orr.w	r2, r3, #32
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e007      	b.n	8003128 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f003 0304 	and.w	r3, r3, #4
 8003122:	2b04      	cmp	r3, #4
 8003124:	d1c3      	bne.n	80030ae <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003146:	d11b      	bne.n	8003180 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003150:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316c:	f043 0204 	orr.w	r2, r3, #4
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e000      	b.n	8003182 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b086      	sub	sp, #24
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e272      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 8087 	beq.w	80032ba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031ac:	4b92      	ldr	r3, [pc, #584]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 030c 	and.w	r3, r3, #12
 80031b4:	2b04      	cmp	r3, #4
 80031b6:	d00c      	beq.n	80031d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b8:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d112      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
 80031c4:	4b8c      	ldr	r3, [pc, #560]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031d0:	d10b      	bne.n	80031ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d2:	4b89      	ldr	r3, [pc, #548]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d06c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x12c>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d168      	bne.n	80032b8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e24c      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x76>
 80031f4:	4b80      	ldr	r3, [pc, #512]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a7f      	ldr	r2, [pc, #508]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031fe:	6013      	str	r3, [r2, #0]
 8003200:	e02e      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x98>
 800320a:	4b7b      	ldr	r3, [pc, #492]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a7a      	ldr	r2, [pc, #488]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003210:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003214:	6013      	str	r3, [r2, #0]
 8003216:	4b78      	ldr	r3, [pc, #480]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a77      	ldr	r2, [pc, #476]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800321c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0xbc>
 800322e:	4b72      	ldr	r3, [pc, #456]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a71      	ldr	r2, [pc, #452]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b6f      	ldr	r3, [pc, #444]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6e      	ldr	r2, [pc, #440]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xd4>
 8003248:	4b6b      	ldr	r3, [pc, #428]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a6a      	ldr	r2, [pc, #424]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b68      	ldr	r3, [pc, #416]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a67      	ldr	r2, [pc, #412]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7fe fe24 	bl	8001eb4 <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fe20 	bl	8001eb4 <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e200      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b5d      	ldr	r3, [pc, #372]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xe4>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fe10 	bl	8001eb4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7fe fe0c 	bl	8001eb4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1ec      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b53      	ldr	r3, [pc, #332]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x10c>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032c6:	4b4c      	ldr	r3, [pc, #304]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032d2:	4b49      	ldr	r3, [pc, #292]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
 80032de:	4b46      	ldr	r3, [pc, #280]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b43      	ldr	r3, [pc, #268]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1c0      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3d      	ldr	r3, [pc, #244]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	695b      	ldr	r3, [r3, #20]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4939      	ldr	r1, [pc, #228]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b36      	ldr	r3, [pc, #216]	@ (80033fc <HAL_RCC_OscConfig+0x270>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fdc5 	bl	8001eb4 <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe fdc1 	bl	8001eb4 <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1a1      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2d      	ldr	r3, [pc, #180]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b2a      	ldr	r3, [pc, #168]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	695b      	ldr	r3, [r3, #20]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4927      	ldr	r1, [pc, #156]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b26      	ldr	r3, [pc, #152]	@ (80033fc <HAL_RCC_OscConfig+0x270>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe fda4 	bl	8001eb4 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe fda0 	bl	8001eb4 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e180      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d03a      	beq.n	8003410 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d019      	beq.n	80033d6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b17      	ldr	r3, [pc, #92]	@ (8003400 <HAL_RCC_OscConfig+0x274>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe fd84 	bl	8001eb4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe fd80 	bl	8001eb4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e160      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0d      	ldr	r3, [pc, #52]	@ (80033f8 <HAL_RCC_OscConfig+0x26c>)
 80033c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ce:	2001      	movs	r0, #1
 80033d0:	f000 face 	bl	8003970 <RCC_Delay>
 80033d4:	e01c      	b.n	8003410 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <HAL_RCC_OscConfig+0x274>)
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033dc:	f7fe fd6a 	bl	8001eb4 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e2:	e00f      	b.n	8003404 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033e4:	f7fe fd66 	bl	8001eb4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d908      	bls.n	8003404 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e146      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
 80033f6:	bf00      	nop
 80033f8:	40021000 	.word	0x40021000
 80033fc:	42420000 	.word	0x42420000
 8003400:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003404:	4b92      	ldr	r3, [pc, #584]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e9      	bne.n	80033e4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0304 	and.w	r3, r3, #4
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80a6 	beq.w	800356a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341e:	2300      	movs	r3, #0
 8003420:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003422:	4b8b      	ldr	r3, [pc, #556]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10d      	bne.n	800344a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342e:	4b88      	ldr	r3, [pc, #544]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	4a87      	ldr	r2, [pc, #540]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003438:	61d3      	str	r3, [r2, #28]
 800343a:	4b85      	ldr	r3, [pc, #532]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b82      	ldr	r3, [pc, #520]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b7f      	ldr	r3, [pc, #508]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7e      	ldr	r2, [pc, #504]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fe fd27 	bl	8001eb4 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fe fd23 	bl	8001eb4 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b64      	cmp	r3, #100	@ 0x64
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e103      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b75      	ldr	r3, [pc, #468]	@ (8003654 <HAL_RCC_OscConfig+0x4c8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x312>
 8003490:	4b6f      	ldr	r3, [pc, #444]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4a6e      	ldr	r2, [pc, #440]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6213      	str	r3, [r2, #32]
 800349c:	e02d      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x334>
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	6a1b      	ldr	r3, [r3, #32]
 80034aa:	4a69      	ldr	r2, [pc, #420]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	f023 0301 	bic.w	r3, r3, #1
 80034b0:	6213      	str	r3, [r2, #32]
 80034b2:	4b67      	ldr	r3, [pc, #412]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	4a66      	ldr	r2, [pc, #408]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f023 0304 	bic.w	r3, r3, #4
 80034bc:	6213      	str	r3, [r2, #32]
 80034be:	e01c      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	2b05      	cmp	r3, #5
 80034c6:	d10c      	bne.n	80034e2 <HAL_RCC_OscConfig+0x356>
 80034c8:	4b61      	ldr	r3, [pc, #388]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ca:	6a1b      	ldr	r3, [r3, #32]
 80034cc:	4a60      	ldr	r2, [pc, #384]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	f043 0304 	orr.w	r3, r3, #4
 80034d2:	6213      	str	r3, [r2, #32]
 80034d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034d6:	6a1b      	ldr	r3, [r3, #32]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6213      	str	r3, [r2, #32]
 80034e0:	e00b      	b.n	80034fa <HAL_RCC_OscConfig+0x36e>
 80034e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	6213      	str	r3, [r2, #32]
 80034ee:	4b58      	ldr	r3, [pc, #352]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	4a57      	ldr	r2, [pc, #348]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80034f4:	f023 0304 	bic.w	r3, r3, #4
 80034f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d015      	beq.n	800352e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003502:	f7fe fcd7 	bl	8001eb4 <HAL_GetTick>
 8003506:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003508:	e00a      	b.n	8003520 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800350a:	f7fe fcd3 	bl	8001eb4 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003518:	4293      	cmp	r3, r2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0b1      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003520:	4b4b      	ldr	r3, [pc, #300]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0ee      	beq.n	800350a <HAL_RCC_OscConfig+0x37e>
 800352c:	e014      	b.n	8003558 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fe fcc1 	bl	8001eb4 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003534:	e00a      	b.n	800354c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003536:	f7fe fcbd 	bl	8001eb4 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003544:	4293      	cmp	r3, r2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e09b      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354c:	4b40      	ldr	r3, [pc, #256]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ee      	bne.n	8003536 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003558:	7dfb      	ldrb	r3, [r7, #23]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d105      	bne.n	800356a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355e:	4b3c      	ldr	r3, [pc, #240]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	4a3b      	ldr	r2, [pc, #236]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003568:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69db      	ldr	r3, [r3, #28]
 800356e:	2b00      	cmp	r3, #0
 8003570:	f000 8087 	beq.w	8003682 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003574:	4b36      	ldr	r3, [pc, #216]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f003 030c 	and.w	r3, r3, #12
 800357c:	2b08      	cmp	r3, #8
 800357e:	d061      	beq.n	8003644 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	69db      	ldr	r3, [r3, #28]
 8003584:	2b02      	cmp	r3, #2
 8003586:	d146      	bne.n	8003616 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003588:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358e:	f7fe fc91 	bl	8001eb4 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003596:	f7fe fc8d 	bl	8001eb4 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e06d      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a8:	4b29      	ldr	r3, [pc, #164]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1f0      	bne.n	8003596 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035bc:	d108      	bne.n	80035d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035be:	4b24      	ldr	r3, [pc, #144]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	4921      	ldr	r1, [pc, #132]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a19      	ldr	r1, [r3, #32]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e0:	430b      	orrs	r3, r1
 80035e2:	491b      	ldr	r1, [pc, #108]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ee:	f7fe fc61 	bl	8001eb4 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f6:	f7fe fc5d 	bl	8001eb4 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b02      	cmp	r3, #2
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e03d      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003608:	4b11      	ldr	r3, [pc, #68]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x46a>
 8003614:	e035      	b.n	8003682 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003616:	4b10      	ldr	r3, [pc, #64]	@ (8003658 <HAL_RCC_OscConfig+0x4cc>)
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361c:	f7fe fc4a 	bl	8001eb4 <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003624:	f7fe fc46 	bl	8001eb4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e026      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003636:	4b06      	ldr	r3, [pc, #24]	@ (8003650 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x498>
 8003642:	e01e      	b.n	8003682 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d107      	bne.n	800365c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e019      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
 8003650:	40021000 	.word	0x40021000
 8003654:	40007000 	.word	0x40007000
 8003658:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <HAL_RCC_OscConfig+0x500>)
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6a1b      	ldr	r3, [r3, #32]
 800366c:	429a      	cmp	r2, r3
 800366e:	d106      	bne.n	800367e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800367a:	429a      	cmp	r2, r3
 800367c:	d001      	beq.n	8003682 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e000      	b.n	8003684 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40021000 	.word	0x40021000

08003690 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0d0      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0307 	and.w	r3, r3, #7
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b67      	ldr	r3, [pc, #412]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 0207 	bic.w	r2, r3, #7
 80036ba:	4965      	ldr	r1, [pc, #404]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b63      	ldr	r3, [pc, #396]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e0b8      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d020      	beq.n	8003722 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0304 	and.w	r3, r3, #4
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d005      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036ec:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	4a58      	ldr	r2, [pc, #352]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80036f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80036f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0308 	and.w	r3, r3, #8
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003704:	4b53      	ldr	r3, [pc, #332]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	4a52      	ldr	r2, [pc, #328]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800370a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800370e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003710:	4b50      	ldr	r3, [pc, #320]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	494d      	ldr	r1, [pc, #308]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d040      	beq.n	80037b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d107      	bne.n	8003746 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	4b47      	ldr	r3, [pc, #284]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d115      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e07f      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b41      	ldr	r3, [pc, #260]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e073      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375e:	4b3d      	ldr	r3, [pc, #244]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06b      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800376e:	4b39      	ldr	r3, [pc, #228]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f023 0203 	bic.w	r2, r3, #3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	4936      	ldr	r1, [pc, #216]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800377c:	4313      	orrs	r3, r2
 800377e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003780:	f7fe fb98 	bl	8001eb4 <HAL_GetTick>
 8003784:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003786:	e00a      	b.n	800379e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003788:	f7fe fb94 	bl	8001eb4 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003796:	4293      	cmp	r3, r2
 8003798:	d901      	bls.n	800379e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e053      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	4b2d      	ldr	r3, [pc, #180]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f003 020c 	and.w	r2, r3, #12
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d1eb      	bne.n	8003788 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037b0:	4b27      	ldr	r3, [pc, #156]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d210      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037be:	4b24      	ldr	r3, [pc, #144]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f023 0207 	bic.w	r2, r3, #7
 80037c6:	4922      	ldr	r1, [pc, #136]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ce:	4b20      	ldr	r3, [pc, #128]	@ (8003850 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	429a      	cmp	r2, r3
 80037da:	d001      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e032      	b.n	8003846 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4916      	ldr	r1, [pc, #88]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380a:	4b12      	ldr	r3, [pc, #72]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	490e      	ldr	r1, [pc, #56]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800381e:	f000 f821 	bl	8003864 <HAL_RCC_GetSysClockFreq>
 8003822:	4602      	mov	r2, r0
 8003824:	4b0b      	ldr	r3, [pc, #44]	@ (8003854 <HAL_RCC_ClockConfig+0x1c4>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	490a      	ldr	r1, [pc, #40]	@ (8003858 <HAL_RCC_ClockConfig+0x1c8>)
 8003830:	5ccb      	ldrb	r3, [r1, r3]
 8003832:	fa22 f303 	lsr.w	r3, r2, r3
 8003836:	4a09      	ldr	r2, [pc, #36]	@ (800385c <HAL_RCC_ClockConfig+0x1cc>)
 8003838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800383a:	4b09      	ldr	r3, [pc, #36]	@ (8003860 <HAL_RCC_ClockConfig+0x1d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f7fe faf6 	bl	8001e30 <HAL_InitTick>

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	40022000 	.word	0x40022000
 8003854:	40021000 	.word	0x40021000
 8003858:	08007e10 	.word	0x08007e10
 800385c:	20000008 	.word	0x20000008
 8003860:	2000000c 	.word	0x2000000c

08003864 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003864:	b480      	push	{r7}
 8003866:	b087      	sub	sp, #28
 8003868:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
 8003872:	2300      	movs	r3, #0
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	2300      	movs	r3, #0
 8003878:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800387e:	4b1e      	ldr	r3, [pc, #120]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d002      	beq.n	8003894 <HAL_RCC_GetSysClockFreq+0x30>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d003      	beq.n	800389a <HAL_RCC_GetSysClockFreq+0x36>
 8003892:	e027      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003894:	4b19      	ldr	r3, [pc, #100]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 8003896:	613b      	str	r3, [r7, #16]
      break;
 8003898:	e027      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	0c9b      	lsrs	r3, r3, #18
 800389e:	f003 030f 	and.w	r3, r3, #15
 80038a2:	4a17      	ldr	r2, [pc, #92]	@ (8003900 <HAL_RCC_GetSysClockFreq+0x9c>)
 80038a4:	5cd3      	ldrb	r3, [r2, r3]
 80038a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d010      	beq.n	80038d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038b2:	4b11      	ldr	r3, [pc, #68]	@ (80038f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	0c5b      	lsrs	r3, r3, #17
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	4a11      	ldr	r2, [pc, #68]	@ (8003904 <HAL_RCC_GetSysClockFreq+0xa0>)
 80038be:	5cd3      	ldrb	r3, [r2, r3]
 80038c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a0d      	ldr	r2, [pc, #52]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 80038c6:	fb03 f202 	mul.w	r2, r3, r2
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e004      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a0c      	ldr	r2, [pc, #48]	@ (8003908 <HAL_RCC_GetSysClockFreq+0xa4>)
 80038d8:	fb02 f303 	mul.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	613b      	str	r3, [r7, #16]
      break;
 80038e2:	e002      	b.n	80038ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetSysClockFreq+0x98>)
 80038e6:	613b      	str	r3, [r7, #16]
      break;
 80038e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ea:	693b      	ldr	r3, [r7, #16]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	371c      	adds	r7, #28
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop
 80038f8:	40021000 	.word	0x40021000
 80038fc:	007a1200 	.word	0x007a1200
 8003900:	08007e28 	.word	0x08007e28
 8003904:	08007e38 	.word	0x08007e38
 8003908:	003d0900 	.word	0x003d0900

0800390c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800390c:	b480      	push	{r7}
 800390e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003910:	4b02      	ldr	r3, [pc, #8]	@ (800391c <HAL_RCC_GetHCLKFreq+0x10>)
 8003912:	681b      	ldr	r3, [r3, #0]
}
 8003914:	4618      	mov	r0, r3
 8003916:	46bd      	mov	sp, r7
 8003918:	bc80      	pop	{r7}
 800391a:	4770      	bx	lr
 800391c:	20000008 	.word	0x20000008

08003920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003924:	f7ff fff2 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003928:	4602      	mov	r2, r0
 800392a:	4b05      	ldr	r3, [pc, #20]	@ (8003940 <HAL_RCC_GetPCLK1Freq+0x20>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	f003 0307 	and.w	r3, r3, #7
 8003934:	4903      	ldr	r1, [pc, #12]	@ (8003944 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003936:	5ccb      	ldrb	r3, [r1, r3]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
}
 800393c:	4618      	mov	r0, r3
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	08007e20 	.word	0x08007e20

08003948 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800394c:	f7ff ffde 	bl	800390c <HAL_RCC_GetHCLKFreq>
 8003950:	4602      	mov	r2, r0
 8003952:	4b05      	ldr	r3, [pc, #20]	@ (8003968 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	0adb      	lsrs	r3, r3, #11
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	4903      	ldr	r1, [pc, #12]	@ (800396c <HAL_RCC_GetPCLK2Freq+0x24>)
 800395e:	5ccb      	ldrb	r3, [r1, r3]
 8003960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003964:	4618      	mov	r0, r3
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40021000 	.word	0x40021000
 800396c:	08007e20 	.word	0x08007e20

08003970 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003978:	4b0a      	ldr	r3, [pc, #40]	@ (80039a4 <RCC_Delay+0x34>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a0a      	ldr	r2, [pc, #40]	@ (80039a8 <RCC_Delay+0x38>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a5b      	lsrs	r3, r3, #9
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	fb02 f303 	mul.w	r3, r2, r3
 800398a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800398c:	bf00      	nop
  }
  while (Delay --);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1e5a      	subs	r2, r3, #1
 8003992:	60fa      	str	r2, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f9      	bne.n	800398c <RCC_Delay+0x1c>
}
 8003998:	bf00      	nop
 800399a:	bf00      	nop
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr
 80039a4:	20000008 	.word	0x20000008
 80039a8:	10624dd3 	.word	0x10624dd3

080039ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d101      	bne.n	80039be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e041      	b.n	8003a42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7fe f86c 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2202      	movs	r2, #2
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4619      	mov	r1, r3
 80039ea:	4610      	mov	r0, r2
 80039ec:	f000 f940 	bl	8003c70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a40:	2300      	movs	r3, #0
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3708      	adds	r7, #8
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
	...

08003a4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d001      	beq.n	8003a64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e032      	b.n	8003aca <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_TIM_Base_Start+0x88>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <HAL_TIM_Base_Start+0x48>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a7e:	d009      	beq.n	8003a94 <HAL_TIM_Base_Start+0x48>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <HAL_TIM_Base_Start+0x8c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <HAL_TIM_Base_Start+0x48>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a13      	ldr	r2, [pc, #76]	@ (8003adc <HAL_TIM_Base_Start+0x90>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d111      	bne.n	8003ab8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0307 	and.w	r3, r3, #7
 8003a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b06      	cmp	r3, #6
 8003aa4:	d010      	beq.n	8003ac8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f042 0201 	orr.w	r2, r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab6:	e007      	b.n	8003ac8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0201 	orr.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3714      	adds	r7, #20
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bc80      	pop	{r7}
 8003ad2:	4770      	bx	lr
 8003ad4:	40012c00 	.word	0x40012c00
 8003ad8:	40000400 	.word	0x40000400
 8003adc:	40000800 	.word	0x40000800

08003ae0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_TIM_ConfigClockSource+0x1c>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0b4      	b.n	8003c66 <HAL_TIM_ConfigClockSource+0x186>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68ba      	ldr	r2, [r7, #8]
 8003b2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b34:	d03e      	beq.n	8003bb4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3a:	f200 8087 	bhi.w	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b42:	f000 8086 	beq.w	8003c52 <HAL_TIM_ConfigClockSource+0x172>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	d87f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4c:	2b70      	cmp	r3, #112	@ 0x70
 8003b4e:	d01a      	beq.n	8003b86 <HAL_TIM_ConfigClockSource+0xa6>
 8003b50:	2b70      	cmp	r3, #112	@ 0x70
 8003b52:	d87b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b54:	2b60      	cmp	r3, #96	@ 0x60
 8003b56:	d050      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x11a>
 8003b58:	2b60      	cmp	r3, #96	@ 0x60
 8003b5a:	d877      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b50      	cmp	r3, #80	@ 0x50
 8003b5e:	d03c      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0xfa>
 8003b60:	2b50      	cmp	r3, #80	@ 0x50
 8003b62:	d873      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b40      	cmp	r3, #64	@ 0x40
 8003b66:	d058      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x13a>
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d86f      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b30      	cmp	r3, #48	@ 0x30
 8003b6e:	d064      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d86b      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b20      	cmp	r3, #32
 8003b76:	d060      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d867      	bhi.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d05c      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b10      	cmp	r3, #16
 8003b82:	d05a      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	e062      	b.n	8003c4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	f000 f950 	bl	8003e3a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ba8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	609a      	str	r2, [r3, #8]
      break;
 8003bb2:	e04f      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	f000 f939 	bl	8003e3a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bd6:	609a      	str	r2, [r3, #8]
      break;
 8003bd8:	e03c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 f8b0 	bl	8003d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2150      	movs	r1, #80	@ 0x50
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 f907 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e02c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 f8ce 	bl	8003da8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2160      	movs	r1, #96	@ 0x60
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f8f7 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003c18:	e01c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 f890 	bl	8003d4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2140      	movs	r1, #64	@ 0x40
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 f8e7 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003c38:	e00c      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4619      	mov	r1, r3
 8003c44:	4610      	mov	r0, r2
 8003c46:	f000 f8de 	bl	8003e06 <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e003      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c50:	e000      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b085      	sub	sp, #20
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a2f      	ldr	r2, [pc, #188]	@ (8003d40 <TIM_Base_SetConfig+0xd0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d00b      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c8e:	d007      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a2c      	ldr	r2, [pc, #176]	@ (8003d44 <TIM_Base_SetConfig+0xd4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0x30>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d48 <TIM_Base_SetConfig+0xd8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d108      	bne.n	8003cb2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a22      	ldr	r2, [pc, #136]	@ (8003d40 <TIM_Base_SetConfig+0xd0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc0:	d007      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003d44 <TIM_Base_SetConfig+0xd4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_Base_SetConfig+0x62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8003d48 <TIM_Base_SetConfig+0xd8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d108      	bne.n	8003ce4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d40 <TIM_Base_SetConfig+0xd0>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d103      	bne.n	8003d18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f023 0201 	bic.w	r2, r3, #1
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	611a      	str	r2, [r3, #16]
  }
}
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	40012c00 	.word	0x40012c00
 8003d44:	40000400 	.word	0x40000400
 8003d48:	40000800 	.word	0x40000800

08003d4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a1b      	ldr	r3, [r3, #32]
 8003d62:	f023 0201 	bic.w	r2, r3, #1
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f023 030a 	bic.w	r3, r3, #10
 8003d88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	621a      	str	r2, [r3, #32]
}
 8003d9e:	bf00      	nop
 8003da0:	371c      	adds	r7, #28
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr

08003da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a1b      	ldr	r3, [r3, #32]
 8003dbe:	f023 0210 	bic.w	r2, r3, #16
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	031b      	lsls	r3, r3, #12
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003de4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr

08003e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	f043 0307 	orr.w	r3, r3, #7
 8003e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	609a      	str	r2, [r3, #8]
}
 8003e30:	bf00      	nop
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b087      	sub	sp, #28
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	60f8      	str	r0, [r7, #12]
 8003e42:	60b9      	str	r1, [r7, #8]
 8003e44:	607a      	str	r2, [r7, #4]
 8003e46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	021a      	lsls	r2, r3, #8
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	431a      	orrs	r2, r3
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr

08003e78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e88:	2b01      	cmp	r3, #1
 8003e8a:	d101      	bne.n	8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	e046      	b.n	8003f1e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d00e      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d009      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a12      	ldr	r2, [pc, #72]	@ (8003f2c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d004      	beq.n	8003ef2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a10      	ldr	r2, [pc, #64]	@ (8003f30 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d10c      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ef8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	68ba      	ldr	r2, [r7, #8]
 8003f0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3714      	adds	r7, #20
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr
 8003f28:	40012c00 	.word	0x40012c00
 8003f2c:	40000400 	.word	0x40000400
 8003f30:	40000800 	.word	0x40000800

08003f34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e042      	b.n	8003fcc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fd fdda 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2224      	movs	r2, #36	@ 0x24
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fc7f 	bl	800487c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	695a      	ldr	r2, [r3, #20]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2220      	movs	r2, #32
 8003fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3708      	adds	r7, #8
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004000:	2300      	movs	r3, #0
 8004002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004012:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10f      	bne.n	800403a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800401a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800401e:	f003 0320 	and.w	r3, r3, #32
 8004022:	2b00      	cmp	r3, #0
 8004024:	d009      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
 8004026:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b00      	cmp	r3, #0
 8004030:	d003      	beq.n	800403a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 fb63 	bl	80046fe <UART_Receive_IT>
      return;
 8004038:	e25b      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800403a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 80de 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
 8004044:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004048:	f003 0301 	and.w	r3, r3, #1
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004054:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 80d1 	beq.w	8004200 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800405e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
 800406a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800406e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	f043 0201 	orr.w	r2, r3, #1
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
 800408e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409e:	f043 0202 	orr.w	r2, r3, #2
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
 80040b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	f043 0204 	orr.w	r2, r3, #4
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d011      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
 80040d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040da:	f003 0320 	and.w	r3, r3, #32
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d105      	bne.n	80040ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040f2:	f043 0208 	orr.w	r2, r3, #8
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 81f2 	beq.w	80044e8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004104:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d008      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
 8004110:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004114:	f003 0320 	and.w	r3, r3, #32
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 faee 	bl	80046fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_UART_IRQHandler+0x17a>
 8004146:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d04f      	beq.n	80041ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f9f8 	bl	8004544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800415e:	2b00      	cmp	r3, #0
 8004160:	d041      	beq.n	80041e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3314      	adds	r3, #20
 8004168:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004170:	e853 3f00 	ldrex	r3, [r3]
 8004174:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004178:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800417c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004180:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	3314      	adds	r3, #20
 800418a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800418e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004192:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004196:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800419a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80041a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1d9      	bne.n	8004162 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d013      	beq.n	80041de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ba:	4a7e      	ldr	r2, [pc, #504]	@ (80043b4 <HAL_UART_IRQHandler+0x3e0>)
 80041bc:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd ffec 	bl	80021a0 <HAL_DMA_Abort_IT>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d016      	beq.n	80041fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80041d8:	4610      	mov	r0, r2
 80041da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041dc:	e00e      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f99c 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e4:	e00a      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f998 	bl	800451c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ec:	e006      	b.n	80041fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f994 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80041fa:	e175      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	bf00      	nop
    return;
 80041fe:	e173      	b.n	80044e8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004204:	2b01      	cmp	r3, #1
 8004206:	f040 814f 	bne.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800420a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8148 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004218:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8141 	beq.w	80044a8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004226:	2300      	movs	r3, #0
 8004228:	60bb      	str	r3, [r7, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	60bb      	str	r3, [r7, #8]
 800423a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80b6 	beq.w	80043b8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004258:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8145 	beq.w	80044ec <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800426a:	429a      	cmp	r2, r3
 800426c:	f080 813e 	bcs.w	80044ec <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004276:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b20      	cmp	r3, #32
 8004280:	f000 8088 	beq.w	8004394 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800429a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800429e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	330c      	adds	r3, #12
 80042ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80042b0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80042bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80042c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1d9      	bne.n	8004284 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80042e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80042f4:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80042f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80042fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004306:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e1      	bne.n	80042d0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3314      	adds	r3, #20
 8004312:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800431c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800431e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004322:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004330:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004332:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004336:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800433e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e3      	bne.n	800430c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	330c      	adds	r3, #12
 8004358:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004362:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004364:	f023 0310 	bic.w	r3, r3, #16
 8004368:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004376:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004378:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800437c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800437e:	e841 2300 	strex	r3, r2, [r1]
 8004382:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1e3      	bne.n	8004352 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fecb 	bl	800212a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2202      	movs	r2, #2
 8004398:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f8bf 	bl	800452e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b0:	e09c      	b.n	80044ec <HAL_UART_IRQHandler+0x518>
 80043b2:	bf00      	nop
 80043b4:	08004609 	.word	0x08004609
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	1ad3      	subs	r3, r2, r3
 80043c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 808e 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8089 	beq.w	80044f0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	330c      	adds	r3, #12
 80043e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043e8:	e853 3f00 	ldrex	r3, [r3]
 80043ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	330c      	adds	r3, #12
 80043fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004402:	647a      	str	r2, [r7, #68]	@ 0x44
 8004404:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004406:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004408:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800440a:	e841 2300 	strex	r3, r2, [r1]
 800440e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1e3      	bne.n	80043de <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3314      	adds	r3, #20
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	623b      	str	r3, [r7, #32]
   return(result);
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f023 0301 	bic.w	r3, r3, #1
 800442c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3314      	adds	r3, #20
 8004436:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800443a:	633a      	str	r2, [r7, #48]	@ 0x30
 800443c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004440:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004442:	e841 2300 	strex	r3, r2, [r1]
 8004446:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1e3      	bne.n	8004416 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	e853 3f00 	ldrex	r3, [r3]
 800446a:	60fb      	str	r3, [r7, #12]
   return(result);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0310 	bic.w	r3, r3, #16
 8004472:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	330c      	adds	r3, #12
 800447c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004480:	61fa      	str	r2, [r7, #28]
 8004482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	69b9      	ldr	r1, [r7, #24]
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	617b      	str	r3, [r7, #20]
   return(result);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e3      	bne.n	800445c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800449a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f844 	bl	800452e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a6:	e023      	b.n	80044f0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d009      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
 80044b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f000 f8b5 	bl	8004630 <UART_Transmit_IT>
    return;
 80044c6:	e014      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00e      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
 80044d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d008      	beq.n	80044f2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f8f4 	bl	80046ce <UART_EndTransmit_IT>
    return;
 80044e6:	e004      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
    return;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <HAL_UART_IRQHandler+0x51e>
      return;
 80044f0:	bf00      	nop
  }
}
 80044f2:	37e8      	adds	r7, #232	@ 0xe8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	bc80      	pop	{r7}
 8004508:	4770      	bx	lr

0800450a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	bc80      	pop	{r7}
 800452c:	4770      	bx	lr

0800452e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800452e:	b480      	push	{r7}
 8004530:	b083      	sub	sp, #12
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800453a:	bf00      	nop
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	bc80      	pop	{r7}
 8004542:	4770      	bx	lr

08004544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004544:	b480      	push	{r7}
 8004546:	b095      	sub	sp, #84	@ 0x54
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800455c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	330c      	adds	r3, #12
 800456a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800456c:	643a      	str	r2, [r7, #64]	@ 0x40
 800456e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800457a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e5      	bne.n	800454c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3314      	adds	r3, #20
 8004586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f023 0301 	bic.w	r3, r3, #1
 8004596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	3314      	adds	r3, #20
 800459e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e5      	bne.n	8004580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d119      	bne.n	80045f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045dc:	61ba      	str	r2, [r7, #24]
 80045de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6979      	ldr	r1, [r7, #20]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	613b      	str	r3, [r7, #16]
   return(result);
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045fe:	bf00      	nop
 8004600:	3754      	adds	r7, #84	@ 0x54
 8004602:	46bd      	mov	sp, r7
 8004604:	bc80      	pop	{r7}
 8004606:	4770      	bx	lr

08004608 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f7ff ff7a 	bl	800451c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004628:	bf00      	nop
 800462a:	3710      	adds	r7, #16
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800463e:	b2db      	uxtb	r3, r3
 8004640:	2b21      	cmp	r3, #33	@ 0x21
 8004642:	d13e      	bne.n	80046c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800464c:	d114      	bne.n	8004678 <UART_Transmit_IT+0x48>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d110      	bne.n	8004678 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	881b      	ldrh	r3, [r3, #0]
 8004660:	461a      	mov	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800466a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a1b      	ldr	r3, [r3, #32]
 8004670:	1c9a      	adds	r2, r3, #2
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	621a      	str	r2, [r3, #32]
 8004676:	e008      	b.n	800468a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	1c59      	adds	r1, r3, #1
 800467e:	687a      	ldr	r2, [r7, #4]
 8004680:	6211      	str	r1, [r2, #32]
 8004682:	781a      	ldrb	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800468e:	b29b      	uxth	r3, r3
 8004690:	3b01      	subs	r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	4619      	mov	r1, r3
 8004698:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10f      	bne.n	80046be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	e000      	b.n	80046c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
  }
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bc80      	pop	{r7}
 80046cc:	4770      	bx	lr

080046ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b082      	sub	sp, #8
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68da      	ldr	r2, [r3, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff ff02 	bl	80044f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}

080046fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b08c      	sub	sp, #48	@ 0x30
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b22      	cmp	r3, #34	@ 0x22
 8004710:	f040 80ae 	bne.w	8004870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800471c:	d117      	bne.n	800474e <UART_Receive_IT+0x50>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d113      	bne.n	800474e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004726:	2300      	movs	r3, #0
 8004728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	b29b      	uxth	r3, r3
 8004738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473c:	b29a      	uxth	r2, r3
 800473e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004746:	1c9a      	adds	r2, r3, #2
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	629a      	str	r2, [r3, #40]	@ 0x28
 800474c:	e026      	b.n	800479c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004754:	2300      	movs	r3, #0
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004760:	d007      	beq.n	8004772 <UART_Receive_IT+0x74>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <UART_Receive_IT+0x82>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	e008      	b.n	8004792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800478c:	b2da      	uxtb	r2, r3
 800478e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4619      	mov	r1, r3
 80047aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d15d      	bne.n	800486c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68da      	ldr	r2, [r3, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0220 	bic.w	r2, r2, #32
 80047be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0201 	bic.w	r2, r2, #1
 80047de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d135      	bne.n	8004862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	e853 3f00 	ldrex	r3, [r3]
 800480a:	613b      	str	r3, [r7, #16]
   return(result);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f023 0310 	bic.w	r3, r3, #16
 8004812:	627b      	str	r3, [r7, #36]	@ 0x24
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	330c      	adds	r3, #12
 800481a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800481c:	623a      	str	r2, [r7, #32]
 800481e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004820:	69f9      	ldr	r1, [r7, #28]
 8004822:	6a3a      	ldr	r2, [r7, #32]
 8004824:	e841 2300 	strex	r3, r2, [r1]
 8004828:	61bb      	str	r3, [r7, #24]
   return(result);
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d1e5      	bne.n	80047fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	2b10      	cmp	r3, #16
 800483c:	d10a      	bne.n	8004854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	60fb      	str	r3, [r7, #12]
 8004852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fe67 	bl	800452e <HAL_UARTEx_RxEventCallback>
 8004860:	e002      	b.n	8004868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7ff fe51 	bl	800450a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004868:	2300      	movs	r3, #0
 800486a:	e002      	b.n	8004872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800486c:	2300      	movs	r3, #0
 800486e:	e000      	b.n	8004872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004870:	2302      	movs	r3, #2
  }
}
 8004872:	4618      	mov	r0, r3
 8004874:	3730      	adds	r7, #48	@ 0x30
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048b6:	f023 030c 	bic.w	r3, r3, #12
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	6812      	ldr	r2, [r2, #0]
 80048be:	68b9      	ldr	r1, [r7, #8]
 80048c0:	430b      	orrs	r3, r1
 80048c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a2c      	ldr	r2, [pc, #176]	@ (8004990 <UART_SetConfig+0x114>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d103      	bne.n	80048ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80048e4:	f7ff f830 	bl	8003948 <HAL_RCC_GetPCLK2Freq>
 80048e8:	60f8      	str	r0, [r7, #12]
 80048ea:	e002      	b.n	80048f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7ff f818 	bl	8003920 <HAL_RCC_GetPCLK1Freq>
 80048f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	4613      	mov	r3, r2
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	009a      	lsls	r2, r3, #2
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	fbb2 f3f3 	udiv	r3, r2, r3
 8004908:	4a22      	ldr	r2, [pc, #136]	@ (8004994 <UART_SetConfig+0x118>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	095b      	lsrs	r3, r3, #5
 8004910:	0119      	lsls	r1, r3, #4
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4613      	mov	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	4413      	add	r3, r2
 800491a:	009a      	lsls	r2, r3, #2
 800491c:	441a      	add	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	fbb2 f2f3 	udiv	r2, r2, r3
 8004928:	4b1a      	ldr	r3, [pc, #104]	@ (8004994 <UART_SetConfig+0x118>)
 800492a:	fba3 0302 	umull	r0, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	2064      	movs	r0, #100	@ 0x64
 8004932:	fb00 f303 	mul.w	r3, r0, r3
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	011b      	lsls	r3, r3, #4
 800493a:	3332      	adds	r3, #50	@ 0x32
 800493c:	4a15      	ldr	r2, [pc, #84]	@ (8004994 <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004948:	4419      	add	r1, r3
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009a      	lsls	r2, r3, #2
 8004954:	441a      	add	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004960:	4b0c      	ldr	r3, [pc, #48]	@ (8004994 <UART_SetConfig+0x118>)
 8004962:	fba3 0302 	umull	r0, r3, r3, r2
 8004966:	095b      	lsrs	r3, r3, #5
 8004968:	2064      	movs	r0, #100	@ 0x64
 800496a:	fb00 f303 	mul.w	r3, r0, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	3332      	adds	r3, #50	@ 0x32
 8004974:	4a07      	ldr	r2, [pc, #28]	@ (8004994 <UART_SetConfig+0x118>)
 8004976:	fba2 2303 	umull	r2, r3, r2, r3
 800497a:	095b      	lsrs	r3, r3, #5
 800497c:	f003 020f 	and.w	r2, r3, #15
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	440a      	add	r2, r1
 8004986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004988:	bf00      	nop
 800498a:	3710      	adds	r7, #16
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	40013800 	.word	0x40013800
 8004994:	51eb851f 	.word	0x51eb851f

08004998 <__cvt>:
 8004998:	2b00      	cmp	r3, #0
 800499a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800499e:	461d      	mov	r5, r3
 80049a0:	bfbb      	ittet	lt
 80049a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80049a6:	461d      	movlt	r5, r3
 80049a8:	2300      	movge	r3, #0
 80049aa:	232d      	movlt	r3, #45	@ 0x2d
 80049ac:	b088      	sub	sp, #32
 80049ae:	4614      	mov	r4, r2
 80049b0:	bfb8      	it	lt
 80049b2:	4614      	movlt	r4, r2
 80049b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80049b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80049b8:	7013      	strb	r3, [r2, #0]
 80049ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80049bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80049c0:	f023 0820 	bic.w	r8, r3, #32
 80049c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049c8:	d005      	beq.n	80049d6 <__cvt+0x3e>
 80049ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049ce:	d100      	bne.n	80049d2 <__cvt+0x3a>
 80049d0:	3601      	adds	r6, #1
 80049d2:	2302      	movs	r3, #2
 80049d4:	e000      	b.n	80049d8 <__cvt+0x40>
 80049d6:	2303      	movs	r3, #3
 80049d8:	aa07      	add	r2, sp, #28
 80049da:	9204      	str	r2, [sp, #16]
 80049dc:	aa06      	add	r2, sp, #24
 80049de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80049e2:	e9cd 3600 	strd	r3, r6, [sp]
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	f000 fe6d 	bl	80056c8 <_dtoa_r>
 80049ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049f2:	4607      	mov	r7, r0
 80049f4:	d119      	bne.n	8004a2a <__cvt+0x92>
 80049f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80049f8:	07db      	lsls	r3, r3, #31
 80049fa:	d50e      	bpl.n	8004a1a <__cvt+0x82>
 80049fc:	eb00 0906 	add.w	r9, r0, r6
 8004a00:	2200      	movs	r2, #0
 8004a02:	2300      	movs	r3, #0
 8004a04:	4620      	mov	r0, r4
 8004a06:	4629      	mov	r1, r5
 8004a08:	f7fb ffce 	bl	80009a8 <__aeabi_dcmpeq>
 8004a0c:	b108      	cbz	r0, 8004a12 <__cvt+0x7a>
 8004a0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004a12:	2230      	movs	r2, #48	@ 0x30
 8004a14:	9b07      	ldr	r3, [sp, #28]
 8004a16:	454b      	cmp	r3, r9
 8004a18:	d31e      	bcc.n	8004a58 <__cvt+0xc0>
 8004a1a:	4638      	mov	r0, r7
 8004a1c:	9b07      	ldr	r3, [sp, #28]
 8004a1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004a20:	1bdb      	subs	r3, r3, r7
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	b008      	add	sp, #32
 8004a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a2e:	eb00 0906 	add.w	r9, r0, r6
 8004a32:	d1e5      	bne.n	8004a00 <__cvt+0x68>
 8004a34:	7803      	ldrb	r3, [r0, #0]
 8004a36:	2b30      	cmp	r3, #48	@ 0x30
 8004a38:	d10a      	bne.n	8004a50 <__cvt+0xb8>
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	4620      	mov	r0, r4
 8004a40:	4629      	mov	r1, r5
 8004a42:	f7fb ffb1 	bl	80009a8 <__aeabi_dcmpeq>
 8004a46:	b918      	cbnz	r0, 8004a50 <__cvt+0xb8>
 8004a48:	f1c6 0601 	rsb	r6, r6, #1
 8004a4c:	f8ca 6000 	str.w	r6, [sl]
 8004a50:	f8da 3000 	ldr.w	r3, [sl]
 8004a54:	4499      	add	r9, r3
 8004a56:	e7d3      	b.n	8004a00 <__cvt+0x68>
 8004a58:	1c59      	adds	r1, r3, #1
 8004a5a:	9107      	str	r1, [sp, #28]
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	e7d9      	b.n	8004a14 <__cvt+0x7c>

08004a60 <__exponent>:
 8004a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a62:	2900      	cmp	r1, #0
 8004a64:	bfb6      	itet	lt
 8004a66:	232d      	movlt	r3, #45	@ 0x2d
 8004a68:	232b      	movge	r3, #43	@ 0x2b
 8004a6a:	4249      	neglt	r1, r1
 8004a6c:	2909      	cmp	r1, #9
 8004a6e:	7002      	strb	r2, [r0, #0]
 8004a70:	7043      	strb	r3, [r0, #1]
 8004a72:	dd29      	ble.n	8004ac8 <__exponent+0x68>
 8004a74:	f10d 0307 	add.w	r3, sp, #7
 8004a78:	461d      	mov	r5, r3
 8004a7a:	270a      	movs	r7, #10
 8004a7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a80:	461a      	mov	r2, r3
 8004a82:	fb07 1416 	mls	r4, r7, r6, r1
 8004a86:	3430      	adds	r4, #48	@ 0x30
 8004a88:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	2c63      	cmp	r4, #99	@ 0x63
 8004a90:	4631      	mov	r1, r6
 8004a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a96:	dcf1      	bgt.n	8004a7c <__exponent+0x1c>
 8004a98:	3130      	adds	r1, #48	@ 0x30
 8004a9a:	1e94      	subs	r4, r2, #2
 8004a9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004aa0:	4623      	mov	r3, r4
 8004aa2:	1c41      	adds	r1, r0, #1
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	d30a      	bcc.n	8004abe <__exponent+0x5e>
 8004aa8:	f10d 0309 	add.w	r3, sp, #9
 8004aac:	1a9b      	subs	r3, r3, r2
 8004aae:	42ac      	cmp	r4, r5
 8004ab0:	bf88      	it	hi
 8004ab2:	2300      	movhi	r3, #0
 8004ab4:	3302      	adds	r3, #2
 8004ab6:	4403      	add	r3, r0
 8004ab8:	1a18      	subs	r0, r3, r0
 8004aba:	b003      	add	sp, #12
 8004abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004abe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ac2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ac6:	e7ed      	b.n	8004aa4 <__exponent+0x44>
 8004ac8:	2330      	movs	r3, #48	@ 0x30
 8004aca:	3130      	adds	r1, #48	@ 0x30
 8004acc:	7083      	strb	r3, [r0, #2]
 8004ace:	70c1      	strb	r1, [r0, #3]
 8004ad0:	1d03      	adds	r3, r0, #4
 8004ad2:	e7f1      	b.n	8004ab8 <__exponent+0x58>

08004ad4 <_printf_float>:
 8004ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad8:	b091      	sub	sp, #68	@ 0x44
 8004ada:	460c      	mov	r4, r1
 8004adc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004ae0:	4616      	mov	r6, r2
 8004ae2:	461f      	mov	r7, r3
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	f000 fce1 	bl	80054ac <_localeconv_r>
 8004aea:	6803      	ldr	r3, [r0, #0]
 8004aec:	4618      	mov	r0, r3
 8004aee:	9308      	str	r3, [sp, #32]
 8004af0:	f7fb fb2e 	bl	8000150 <strlen>
 8004af4:	2300      	movs	r3, #0
 8004af6:	930e      	str	r3, [sp, #56]	@ 0x38
 8004af8:	f8d8 3000 	ldr.w	r3, [r8]
 8004afc:	9009      	str	r0, [sp, #36]	@ 0x24
 8004afe:	3307      	adds	r3, #7
 8004b00:	f023 0307 	bic.w	r3, r3, #7
 8004b04:	f103 0208 	add.w	r2, r3, #8
 8004b08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b0c:	f8d4 b000 	ldr.w	fp, [r4]
 8004b10:	f8c8 2000 	str.w	r2, [r8]
 8004b14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004da0 <_printf_float+0x2cc>)
 8004b30:	f7fb ff6c 	bl	8000a0c <__aeabi_dcmpun>
 8004b34:	bb70      	cbnz	r0, 8004b94 <_printf_float+0xc0>
 8004b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3e:	4b98      	ldr	r3, [pc, #608]	@ (8004da0 <_printf_float+0x2cc>)
 8004b40:	f7fb ff46 	bl	80009d0 <__aeabi_dcmple>
 8004b44:	bb30      	cbnz	r0, 8004b94 <_printf_float+0xc0>
 8004b46:	2200      	movs	r2, #0
 8004b48:	2300      	movs	r3, #0
 8004b4a:	4640      	mov	r0, r8
 8004b4c:	4649      	mov	r1, r9
 8004b4e:	f7fb ff35 	bl	80009bc <__aeabi_dcmplt>
 8004b52:	b110      	cbz	r0, 8004b5a <_printf_float+0x86>
 8004b54:	232d      	movs	r3, #45	@ 0x2d
 8004b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b5a:	4a92      	ldr	r2, [pc, #584]	@ (8004da4 <_printf_float+0x2d0>)
 8004b5c:	4b92      	ldr	r3, [pc, #584]	@ (8004da8 <_printf_float+0x2d4>)
 8004b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b62:	bf94      	ite	ls
 8004b64:	4690      	movls	r8, r2
 8004b66:	4698      	movhi	r8, r3
 8004b68:	2303      	movs	r3, #3
 8004b6a:	f04f 0900 	mov.w	r9, #0
 8004b6e:	6123      	str	r3, [r4, #16]
 8004b70:	f02b 0304 	bic.w	r3, fp, #4
 8004b74:	6023      	str	r3, [r4, #0]
 8004b76:	4633      	mov	r3, r6
 8004b78:	4621      	mov	r1, r4
 8004b7a:	4628      	mov	r0, r5
 8004b7c:	9700      	str	r7, [sp, #0]
 8004b7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004b80:	f000 f9d4 	bl	8004f2c <_printf_common>
 8004b84:	3001      	adds	r0, #1
 8004b86:	f040 8090 	bne.w	8004caa <_printf_float+0x1d6>
 8004b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8004b8e:	b011      	add	sp, #68	@ 0x44
 8004b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b94:	4642      	mov	r2, r8
 8004b96:	464b      	mov	r3, r9
 8004b98:	4640      	mov	r0, r8
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	f7fb ff36 	bl	8000a0c <__aeabi_dcmpun>
 8004ba0:	b148      	cbz	r0, 8004bb6 <_printf_float+0xe2>
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bfb8      	it	lt
 8004ba8:	232d      	movlt	r3, #45	@ 0x2d
 8004baa:	4a80      	ldr	r2, [pc, #512]	@ (8004dac <_printf_float+0x2d8>)
 8004bac:	bfb8      	it	lt
 8004bae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8004db0 <_printf_float+0x2dc>)
 8004bb4:	e7d3      	b.n	8004b5e <_printf_float+0x8a>
 8004bb6:	6863      	ldr	r3, [r4, #4]
 8004bb8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004bbc:	1c5a      	adds	r2, r3, #1
 8004bbe:	d13f      	bne.n	8004c40 <_printf_float+0x16c>
 8004bc0:	2306      	movs	r3, #6
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004bca:	6023      	str	r3, [r4, #0]
 8004bcc:	9206      	str	r2, [sp, #24]
 8004bce:	aa0e      	add	r2, sp, #56	@ 0x38
 8004bd0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004bd4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004bd6:	9203      	str	r2, [sp, #12]
 8004bd8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004bdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004be0:	6863      	ldr	r3, [r4, #4]
 8004be2:	4642      	mov	r2, r8
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	4628      	mov	r0, r5
 8004be8:	464b      	mov	r3, r9
 8004bea:	910a      	str	r1, [sp, #40]	@ 0x28
 8004bec:	f7ff fed4 	bl	8004998 <__cvt>
 8004bf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004bf2:	4680      	mov	r8, r0
 8004bf4:	2947      	cmp	r1, #71	@ 0x47
 8004bf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004bf8:	d128      	bne.n	8004c4c <_printf_float+0x178>
 8004bfa:	1cc8      	adds	r0, r1, #3
 8004bfc:	db02      	blt.n	8004c04 <_printf_float+0x130>
 8004bfe:	6863      	ldr	r3, [r4, #4]
 8004c00:	4299      	cmp	r1, r3
 8004c02:	dd40      	ble.n	8004c86 <_printf_float+0x1b2>
 8004c04:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c08:	fa5f fa8a 	uxtb.w	sl, sl
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	3901      	subs	r1, #1
 8004c10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c14:	910d      	str	r1, [sp, #52]	@ 0x34
 8004c16:	f7ff ff23 	bl	8004a60 <__exponent>
 8004c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c1c:	4681      	mov	r9, r0
 8004c1e:	1813      	adds	r3, r2, r0
 8004c20:	2a01      	cmp	r2, #1
 8004c22:	6123      	str	r3, [r4, #16]
 8004c24:	dc02      	bgt.n	8004c2c <_printf_float+0x158>
 8004c26:	6822      	ldr	r2, [r4, #0]
 8004c28:	07d2      	lsls	r2, r2, #31
 8004c2a:	d501      	bpl.n	8004c30 <_printf_float+0x15c>
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	6123      	str	r3, [r4, #16]
 8004c30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d09e      	beq.n	8004b76 <_printf_float+0xa2>
 8004c38:	232d      	movs	r3, #45	@ 0x2d
 8004c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c3e:	e79a      	b.n	8004b76 <_printf_float+0xa2>
 8004c40:	2947      	cmp	r1, #71	@ 0x47
 8004c42:	d1bf      	bne.n	8004bc4 <_printf_float+0xf0>
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1bd      	bne.n	8004bc4 <_printf_float+0xf0>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e7ba      	b.n	8004bc2 <_printf_float+0xee>
 8004c4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c50:	d9dc      	bls.n	8004c0c <_printf_float+0x138>
 8004c52:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c56:	d118      	bne.n	8004c8a <_printf_float+0x1b6>
 8004c58:	2900      	cmp	r1, #0
 8004c5a:	6863      	ldr	r3, [r4, #4]
 8004c5c:	dd0b      	ble.n	8004c76 <_printf_float+0x1a2>
 8004c5e:	6121      	str	r1, [r4, #16]
 8004c60:	b913      	cbnz	r3, 8004c68 <_printf_float+0x194>
 8004c62:	6822      	ldr	r2, [r4, #0]
 8004c64:	07d0      	lsls	r0, r2, #31
 8004c66:	d502      	bpl.n	8004c6e <_printf_float+0x19a>
 8004c68:	3301      	adds	r3, #1
 8004c6a:	440b      	add	r3, r1
 8004c6c:	6123      	str	r3, [r4, #16]
 8004c6e:	f04f 0900 	mov.w	r9, #0
 8004c72:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c74:	e7dc      	b.n	8004c30 <_printf_float+0x15c>
 8004c76:	b913      	cbnz	r3, 8004c7e <_printf_float+0x1aa>
 8004c78:	6822      	ldr	r2, [r4, #0]
 8004c7a:	07d2      	lsls	r2, r2, #31
 8004c7c:	d501      	bpl.n	8004c82 <_printf_float+0x1ae>
 8004c7e:	3302      	adds	r3, #2
 8004c80:	e7f4      	b.n	8004c6c <_printf_float+0x198>
 8004c82:	2301      	movs	r3, #1
 8004c84:	e7f2      	b.n	8004c6c <_printf_float+0x198>
 8004c86:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004c8c:	4299      	cmp	r1, r3
 8004c8e:	db05      	blt.n	8004c9c <_printf_float+0x1c8>
 8004c90:	6823      	ldr	r3, [r4, #0]
 8004c92:	6121      	str	r1, [r4, #16]
 8004c94:	07d8      	lsls	r0, r3, #31
 8004c96:	d5ea      	bpl.n	8004c6e <_printf_float+0x19a>
 8004c98:	1c4b      	adds	r3, r1, #1
 8004c9a:	e7e7      	b.n	8004c6c <_printf_float+0x198>
 8004c9c:	2900      	cmp	r1, #0
 8004c9e:	bfcc      	ite	gt
 8004ca0:	2201      	movgt	r2, #1
 8004ca2:	f1c1 0202 	rsble	r2, r1, #2
 8004ca6:	4413      	add	r3, r2
 8004ca8:	e7e0      	b.n	8004c6c <_printf_float+0x198>
 8004caa:	6823      	ldr	r3, [r4, #0]
 8004cac:	055a      	lsls	r2, r3, #21
 8004cae:	d407      	bmi.n	8004cc0 <_printf_float+0x1ec>
 8004cb0:	6923      	ldr	r3, [r4, #16]
 8004cb2:	4642      	mov	r2, r8
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	d12b      	bne.n	8004d16 <_printf_float+0x242>
 8004cbe:	e764      	b.n	8004b8a <_printf_float+0xb6>
 8004cc0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cc4:	f240 80dc 	bls.w	8004e80 <_printf_float+0x3ac>
 8004cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	f7fb fe6a 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d033      	beq.n	8004d40 <_printf_float+0x26c>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	4631      	mov	r1, r6
 8004cdc:	4628      	mov	r0, r5
 8004cde:	4a35      	ldr	r2, [pc, #212]	@ (8004db4 <_printf_float+0x2e0>)
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af51 	beq.w	8004b8a <_printf_float+0xb6>
 8004ce8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004cec:	4543      	cmp	r3, r8
 8004cee:	db02      	blt.n	8004cf6 <_printf_float+0x222>
 8004cf0:	6823      	ldr	r3, [r4, #0]
 8004cf2:	07d8      	lsls	r0, r3, #31
 8004cf4:	d50f      	bpl.n	8004d16 <_printf_float+0x242>
 8004cf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	47b8      	blx	r7
 8004d00:	3001      	adds	r0, #1
 8004d02:	f43f af42 	beq.w	8004b8a <_printf_float+0xb6>
 8004d06:	f04f 0900 	mov.w	r9, #0
 8004d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d0e:	f104 0a1a 	add.w	sl, r4, #26
 8004d12:	45c8      	cmp	r8, r9
 8004d14:	dc09      	bgt.n	8004d2a <_printf_float+0x256>
 8004d16:	6823      	ldr	r3, [r4, #0]
 8004d18:	079b      	lsls	r3, r3, #30
 8004d1a:	f100 8102 	bmi.w	8004f22 <_printf_float+0x44e>
 8004d1e:	68e0      	ldr	r0, [r4, #12]
 8004d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d22:	4298      	cmp	r0, r3
 8004d24:	bfb8      	it	lt
 8004d26:	4618      	movlt	r0, r3
 8004d28:	e731      	b.n	8004b8e <_printf_float+0xba>
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4652      	mov	r2, sl
 8004d2e:	4631      	mov	r1, r6
 8004d30:	4628      	mov	r0, r5
 8004d32:	47b8      	blx	r7
 8004d34:	3001      	adds	r0, #1
 8004d36:	f43f af28 	beq.w	8004b8a <_printf_float+0xb6>
 8004d3a:	f109 0901 	add.w	r9, r9, #1
 8004d3e:	e7e8      	b.n	8004d12 <_printf_float+0x23e>
 8004d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	dc38      	bgt.n	8004db8 <_printf_float+0x2e4>
 8004d46:	2301      	movs	r3, #1
 8004d48:	4631      	mov	r1, r6
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	4a19      	ldr	r2, [pc, #100]	@ (8004db4 <_printf_float+0x2e0>)
 8004d4e:	47b8      	blx	r7
 8004d50:	3001      	adds	r0, #1
 8004d52:	f43f af1a 	beq.w	8004b8a <_printf_float+0xb6>
 8004d56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004d5a:	ea59 0303 	orrs.w	r3, r9, r3
 8004d5e:	d102      	bne.n	8004d66 <_printf_float+0x292>
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	07d9      	lsls	r1, r3, #31
 8004d64:	d5d7      	bpl.n	8004d16 <_printf_float+0x242>
 8004d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d6a:	4631      	mov	r1, r6
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	47b8      	blx	r7
 8004d70:	3001      	adds	r0, #1
 8004d72:	f43f af0a 	beq.w	8004b8a <_printf_float+0xb6>
 8004d76:	f04f 0a00 	mov.w	sl, #0
 8004d7a:	f104 0b1a 	add.w	fp, r4, #26
 8004d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d80:	425b      	negs	r3, r3
 8004d82:	4553      	cmp	r3, sl
 8004d84:	dc01      	bgt.n	8004d8a <_printf_float+0x2b6>
 8004d86:	464b      	mov	r3, r9
 8004d88:	e793      	b.n	8004cb2 <_printf_float+0x1de>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	465a      	mov	r2, fp
 8004d8e:	4631      	mov	r1, r6
 8004d90:	4628      	mov	r0, r5
 8004d92:	47b8      	blx	r7
 8004d94:	3001      	adds	r0, #1
 8004d96:	f43f aef8 	beq.w	8004b8a <_printf_float+0xb6>
 8004d9a:	f10a 0a01 	add.w	sl, sl, #1
 8004d9e:	e7ee      	b.n	8004d7e <_printf_float+0x2aa>
 8004da0:	7fefffff 	.word	0x7fefffff
 8004da4:	08007e3a 	.word	0x08007e3a
 8004da8:	08007e3e 	.word	0x08007e3e
 8004dac:	08007e42 	.word	0x08007e42
 8004db0:	08007e46 	.word	0x08007e46
 8004db4:	08007e4a 	.word	0x08007e4a
 8004db8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004dbe:	4553      	cmp	r3, sl
 8004dc0:	bfa8      	it	ge
 8004dc2:	4653      	movge	r3, sl
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	4699      	mov	r9, r3
 8004dc8:	dc36      	bgt.n	8004e38 <_printf_float+0x364>
 8004dca:	f04f 0b00 	mov.w	fp, #0
 8004dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004dd2:	f104 021a 	add.w	r2, r4, #26
 8004dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004dda:	eba3 0309 	sub.w	r3, r3, r9
 8004dde:	455b      	cmp	r3, fp
 8004de0:	dc31      	bgt.n	8004e46 <_printf_float+0x372>
 8004de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004de4:	459a      	cmp	sl, r3
 8004de6:	dc3a      	bgt.n	8004e5e <_printf_float+0x38a>
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	07da      	lsls	r2, r3, #31
 8004dec:	d437      	bmi.n	8004e5e <_printf_float+0x38a>
 8004dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004df0:	ebaa 0903 	sub.w	r9, sl, r3
 8004df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004df6:	ebaa 0303 	sub.w	r3, sl, r3
 8004dfa:	4599      	cmp	r9, r3
 8004dfc:	bfa8      	it	ge
 8004dfe:	4699      	movge	r9, r3
 8004e00:	f1b9 0f00 	cmp.w	r9, #0
 8004e04:	dc33      	bgt.n	8004e6e <_printf_float+0x39a>
 8004e06:	f04f 0800 	mov.w	r8, #0
 8004e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e0e:	f104 0b1a 	add.w	fp, r4, #26
 8004e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004e14:	ebaa 0303 	sub.w	r3, sl, r3
 8004e18:	eba3 0309 	sub.w	r3, r3, r9
 8004e1c:	4543      	cmp	r3, r8
 8004e1e:	f77f af7a 	ble.w	8004d16 <_printf_float+0x242>
 8004e22:	2301      	movs	r3, #1
 8004e24:	465a      	mov	r2, fp
 8004e26:	4631      	mov	r1, r6
 8004e28:	4628      	mov	r0, r5
 8004e2a:	47b8      	blx	r7
 8004e2c:	3001      	adds	r0, #1
 8004e2e:	f43f aeac 	beq.w	8004b8a <_printf_float+0xb6>
 8004e32:	f108 0801 	add.w	r8, r8, #1
 8004e36:	e7ec      	b.n	8004e12 <_printf_float+0x33e>
 8004e38:	4642      	mov	r2, r8
 8004e3a:	4631      	mov	r1, r6
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	47b8      	blx	r7
 8004e40:	3001      	adds	r0, #1
 8004e42:	d1c2      	bne.n	8004dca <_printf_float+0x2f6>
 8004e44:	e6a1      	b.n	8004b8a <_printf_float+0xb6>
 8004e46:	2301      	movs	r3, #1
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4628      	mov	r0, r5
 8004e4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004e4e:	47b8      	blx	r7
 8004e50:	3001      	adds	r0, #1
 8004e52:	f43f ae9a 	beq.w	8004b8a <_printf_float+0xb6>
 8004e56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e58:	f10b 0b01 	add.w	fp, fp, #1
 8004e5c:	e7bb      	b.n	8004dd6 <_printf_float+0x302>
 8004e5e:	4631      	mov	r1, r6
 8004e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004e64:	4628      	mov	r0, r5
 8004e66:	47b8      	blx	r7
 8004e68:	3001      	adds	r0, #1
 8004e6a:	d1c0      	bne.n	8004dee <_printf_float+0x31a>
 8004e6c:	e68d      	b.n	8004b8a <_printf_float+0xb6>
 8004e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e70:	464b      	mov	r3, r9
 8004e72:	4631      	mov	r1, r6
 8004e74:	4628      	mov	r0, r5
 8004e76:	4442      	add	r2, r8
 8004e78:	47b8      	blx	r7
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d1c3      	bne.n	8004e06 <_printf_float+0x332>
 8004e7e:	e684      	b.n	8004b8a <_printf_float+0xb6>
 8004e80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004e84:	f1ba 0f01 	cmp.w	sl, #1
 8004e88:	dc01      	bgt.n	8004e8e <_printf_float+0x3ba>
 8004e8a:	07db      	lsls	r3, r3, #31
 8004e8c:	d536      	bpl.n	8004efc <_printf_float+0x428>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	4642      	mov	r2, r8
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	f43f ae76 	beq.w	8004b8a <_printf_float+0xb6>
 8004e9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ea2:	4631      	mov	r1, r6
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	47b8      	blx	r7
 8004ea8:	3001      	adds	r0, #1
 8004eaa:	f43f ae6e 	beq.w	8004b8a <_printf_float+0xb6>
 8004eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004eba:	f7fb fd75 	bl	80009a8 <__aeabi_dcmpeq>
 8004ebe:	b9c0      	cbnz	r0, 8004ef2 <_printf_float+0x41e>
 8004ec0:	4653      	mov	r3, sl
 8004ec2:	f108 0201 	add.w	r2, r8, #1
 8004ec6:	4631      	mov	r1, r6
 8004ec8:	4628      	mov	r0, r5
 8004eca:	47b8      	blx	r7
 8004ecc:	3001      	adds	r0, #1
 8004ece:	d10c      	bne.n	8004eea <_printf_float+0x416>
 8004ed0:	e65b      	b.n	8004b8a <_printf_float+0xb6>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	465a      	mov	r2, fp
 8004ed6:	4631      	mov	r1, r6
 8004ed8:	4628      	mov	r0, r5
 8004eda:	47b8      	blx	r7
 8004edc:	3001      	adds	r0, #1
 8004ede:	f43f ae54 	beq.w	8004b8a <_printf_float+0xb6>
 8004ee2:	f108 0801 	add.w	r8, r8, #1
 8004ee6:	45d0      	cmp	r8, sl
 8004ee8:	dbf3      	blt.n	8004ed2 <_printf_float+0x3fe>
 8004eea:	464b      	mov	r3, r9
 8004eec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ef0:	e6e0      	b.n	8004cb4 <_printf_float+0x1e0>
 8004ef2:	f04f 0800 	mov.w	r8, #0
 8004ef6:	f104 0b1a 	add.w	fp, r4, #26
 8004efa:	e7f4      	b.n	8004ee6 <_printf_float+0x412>
 8004efc:	2301      	movs	r3, #1
 8004efe:	4642      	mov	r2, r8
 8004f00:	e7e1      	b.n	8004ec6 <_printf_float+0x3f2>
 8004f02:	2301      	movs	r3, #1
 8004f04:	464a      	mov	r2, r9
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f ae3c 	beq.w	8004b8a <_printf_float+0xb6>
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	68e3      	ldr	r3, [r4, #12]
 8004f18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004f1a:	1a5b      	subs	r3, r3, r1
 8004f1c:	4543      	cmp	r3, r8
 8004f1e:	dcf0      	bgt.n	8004f02 <_printf_float+0x42e>
 8004f20:	e6fd      	b.n	8004d1e <_printf_float+0x24a>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	f104 0919 	add.w	r9, r4, #25
 8004f2a:	e7f4      	b.n	8004f16 <_printf_float+0x442>

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4698      	mov	r8, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	4607      	mov	r7, r0
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	bfb8      	it	lt
 8004f3e:	4613      	movlt	r3, r2
 8004f40:	6033      	str	r3, [r6, #0]
 8004f42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f46:	460c      	mov	r4, r1
 8004f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc2b      	bgt.n	8004fcc <_printf_common+0xa0>
 8004f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f78:	6822      	ldr	r2, [r4, #0]
 8004f7a:	3b00      	subs	r3, #0
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d430      	bmi.n	8004fe6 <_printf_common+0xba>
 8004f84:	4641      	mov	r1, r8
 8004f86:	4638      	mov	r0, r7
 8004f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f8c:	47c8      	blx	r9
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d023      	beq.n	8004fda <_printf_common+0xae>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	6922      	ldr	r2, [r4, #16]
 8004f96:	f003 0306 	and.w	r3, r3, #6
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	bf14      	ite	ne
 8004f9e:	2500      	movne	r5, #0
 8004fa0:	6833      	ldreq	r3, [r6, #0]
 8004fa2:	f04f 0600 	mov.w	r6, #0
 8004fa6:	bf08      	it	eq
 8004fa8:	68e5      	ldreq	r5, [r4, #12]
 8004faa:	f104 041a 	add.w	r4, r4, #26
 8004fae:	bf08      	it	eq
 8004fb0:	1aed      	subeq	r5, r5, r3
 8004fb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004fb6:	bf08      	it	eq
 8004fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bfc4      	itt	gt
 8004fc0:	1a9b      	subgt	r3, r3, r2
 8004fc2:	18ed      	addgt	r5, r5, r3
 8004fc4:	42b5      	cmp	r5, r6
 8004fc6:	d11a      	bne.n	8004ffe <_printf_common+0xd2>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e008      	b.n	8004fde <_printf_common+0xb2>
 8004fcc:	2301      	movs	r3, #1
 8004fce:	4652      	mov	r2, sl
 8004fd0:	4641      	mov	r1, r8
 8004fd2:	4638      	mov	r0, r7
 8004fd4:	47c8      	blx	r9
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d103      	bne.n	8004fe2 <_printf_common+0xb6>
 8004fda:	f04f 30ff 	mov.w	r0, #4294967295
 8004fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fe2:	3501      	adds	r5, #1
 8004fe4:	e7c1      	b.n	8004f6a <_printf_common+0x3e>
 8004fe6:	2030      	movs	r0, #48	@ 0x30
 8004fe8:	18e1      	adds	r1, r4, r3
 8004fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ff4:	4422      	add	r2, r4
 8004ff6:	3302      	adds	r3, #2
 8004ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ffc:	e7c2      	b.n	8004f84 <_printf_common+0x58>
 8004ffe:	2301      	movs	r3, #1
 8005000:	4622      	mov	r2, r4
 8005002:	4641      	mov	r1, r8
 8005004:	4638      	mov	r0, r7
 8005006:	47c8      	blx	r9
 8005008:	3001      	adds	r0, #1
 800500a:	d0e6      	beq.n	8004fda <_printf_common+0xae>
 800500c:	3601      	adds	r6, #1
 800500e:	e7d9      	b.n	8004fc4 <_printf_common+0x98>

08005010 <_printf_i>:
 8005010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	7e0f      	ldrb	r7, [r1, #24]
 8005016:	4691      	mov	r9, r2
 8005018:	2f78      	cmp	r7, #120	@ 0x78
 800501a:	4680      	mov	r8, r0
 800501c:	460c      	mov	r4, r1
 800501e:	469a      	mov	sl, r3
 8005020:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005026:	d807      	bhi.n	8005038 <_printf_i+0x28>
 8005028:	2f62      	cmp	r7, #98	@ 0x62
 800502a:	d80a      	bhi.n	8005042 <_printf_i+0x32>
 800502c:	2f00      	cmp	r7, #0
 800502e:	f000 80d3 	beq.w	80051d8 <_printf_i+0x1c8>
 8005032:	2f58      	cmp	r7, #88	@ 0x58
 8005034:	f000 80ba 	beq.w	80051ac <_printf_i+0x19c>
 8005038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800503c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005040:	e03a      	b.n	80050b8 <_printf_i+0xa8>
 8005042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005046:	2b15      	cmp	r3, #21
 8005048:	d8f6      	bhi.n	8005038 <_printf_i+0x28>
 800504a:	a101      	add	r1, pc, #4	@ (adr r1, 8005050 <_printf_i+0x40>)
 800504c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005050:	080050a9 	.word	0x080050a9
 8005054:	080050bd 	.word	0x080050bd
 8005058:	08005039 	.word	0x08005039
 800505c:	08005039 	.word	0x08005039
 8005060:	08005039 	.word	0x08005039
 8005064:	08005039 	.word	0x08005039
 8005068:	080050bd 	.word	0x080050bd
 800506c:	08005039 	.word	0x08005039
 8005070:	08005039 	.word	0x08005039
 8005074:	08005039 	.word	0x08005039
 8005078:	08005039 	.word	0x08005039
 800507c:	080051bf 	.word	0x080051bf
 8005080:	080050e7 	.word	0x080050e7
 8005084:	08005179 	.word	0x08005179
 8005088:	08005039 	.word	0x08005039
 800508c:	08005039 	.word	0x08005039
 8005090:	080051e1 	.word	0x080051e1
 8005094:	08005039 	.word	0x08005039
 8005098:	080050e7 	.word	0x080050e7
 800509c:	08005039 	.word	0x08005039
 80050a0:	08005039 	.word	0x08005039
 80050a4:	08005181 	.word	0x08005181
 80050a8:	6833      	ldr	r3, [r6, #0]
 80050aa:	1d1a      	adds	r2, r3, #4
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6032      	str	r2, [r6, #0]
 80050b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050b8:	2301      	movs	r3, #1
 80050ba:	e09e      	b.n	80051fa <_printf_i+0x1ea>
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	6820      	ldr	r0, [r4, #0]
 80050c0:	1d19      	adds	r1, r3, #4
 80050c2:	6031      	str	r1, [r6, #0]
 80050c4:	0606      	lsls	r6, r0, #24
 80050c6:	d501      	bpl.n	80050cc <_printf_i+0xbc>
 80050c8:	681d      	ldr	r5, [r3, #0]
 80050ca:	e003      	b.n	80050d4 <_printf_i+0xc4>
 80050cc:	0645      	lsls	r5, r0, #25
 80050ce:	d5fb      	bpl.n	80050c8 <_printf_i+0xb8>
 80050d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050d4:	2d00      	cmp	r5, #0
 80050d6:	da03      	bge.n	80050e0 <_printf_i+0xd0>
 80050d8:	232d      	movs	r3, #45	@ 0x2d
 80050da:	426d      	negs	r5, r5
 80050dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050e0:	230a      	movs	r3, #10
 80050e2:	4859      	ldr	r0, [pc, #356]	@ (8005248 <_printf_i+0x238>)
 80050e4:	e011      	b.n	800510a <_printf_i+0xfa>
 80050e6:	6821      	ldr	r1, [r4, #0]
 80050e8:	6833      	ldr	r3, [r6, #0]
 80050ea:	0608      	lsls	r0, r1, #24
 80050ec:	f853 5b04 	ldr.w	r5, [r3], #4
 80050f0:	d402      	bmi.n	80050f8 <_printf_i+0xe8>
 80050f2:	0649      	lsls	r1, r1, #25
 80050f4:	bf48      	it	mi
 80050f6:	b2ad      	uxthmi	r5, r5
 80050f8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050fa:	6033      	str	r3, [r6, #0]
 80050fc:	bf14      	ite	ne
 80050fe:	230a      	movne	r3, #10
 8005100:	2308      	moveq	r3, #8
 8005102:	4851      	ldr	r0, [pc, #324]	@ (8005248 <_printf_i+0x238>)
 8005104:	2100      	movs	r1, #0
 8005106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800510a:	6866      	ldr	r6, [r4, #4]
 800510c:	2e00      	cmp	r6, #0
 800510e:	bfa8      	it	ge
 8005110:	6821      	ldrge	r1, [r4, #0]
 8005112:	60a6      	str	r6, [r4, #8]
 8005114:	bfa4      	itt	ge
 8005116:	f021 0104 	bicge.w	r1, r1, #4
 800511a:	6021      	strge	r1, [r4, #0]
 800511c:	b90d      	cbnz	r5, 8005122 <_printf_i+0x112>
 800511e:	2e00      	cmp	r6, #0
 8005120:	d04b      	beq.n	80051ba <_printf_i+0x1aa>
 8005122:	4616      	mov	r6, r2
 8005124:	fbb5 f1f3 	udiv	r1, r5, r3
 8005128:	fb03 5711 	mls	r7, r3, r1, r5
 800512c:	5dc7      	ldrb	r7, [r0, r7]
 800512e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005132:	462f      	mov	r7, r5
 8005134:	42bb      	cmp	r3, r7
 8005136:	460d      	mov	r5, r1
 8005138:	d9f4      	bls.n	8005124 <_printf_i+0x114>
 800513a:	2b08      	cmp	r3, #8
 800513c:	d10b      	bne.n	8005156 <_printf_i+0x146>
 800513e:	6823      	ldr	r3, [r4, #0]
 8005140:	07df      	lsls	r7, r3, #31
 8005142:	d508      	bpl.n	8005156 <_printf_i+0x146>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	6861      	ldr	r1, [r4, #4]
 8005148:	4299      	cmp	r1, r3
 800514a:	bfde      	ittt	le
 800514c:	2330      	movle	r3, #48	@ 0x30
 800514e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005152:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005156:	1b92      	subs	r2, r2, r6
 8005158:	6122      	str	r2, [r4, #16]
 800515a:	464b      	mov	r3, r9
 800515c:	4621      	mov	r1, r4
 800515e:	4640      	mov	r0, r8
 8005160:	f8cd a000 	str.w	sl, [sp]
 8005164:	aa03      	add	r2, sp, #12
 8005166:	f7ff fee1 	bl	8004f2c <_printf_common>
 800516a:	3001      	adds	r0, #1
 800516c:	d14a      	bne.n	8005204 <_printf_i+0x1f4>
 800516e:	f04f 30ff 	mov.w	r0, #4294967295
 8005172:	b004      	add	sp, #16
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	6823      	ldr	r3, [r4, #0]
 800517a:	f043 0320 	orr.w	r3, r3, #32
 800517e:	6023      	str	r3, [r4, #0]
 8005180:	2778      	movs	r7, #120	@ 0x78
 8005182:	4832      	ldr	r0, [pc, #200]	@ (800524c <_printf_i+0x23c>)
 8005184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005188:	6823      	ldr	r3, [r4, #0]
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	061f      	lsls	r7, r3, #24
 800518e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005192:	d402      	bmi.n	800519a <_printf_i+0x18a>
 8005194:	065f      	lsls	r7, r3, #25
 8005196:	bf48      	it	mi
 8005198:	b2ad      	uxthmi	r5, r5
 800519a:	6031      	str	r1, [r6, #0]
 800519c:	07d9      	lsls	r1, r3, #31
 800519e:	bf44      	itt	mi
 80051a0:	f043 0320 	orrmi.w	r3, r3, #32
 80051a4:	6023      	strmi	r3, [r4, #0]
 80051a6:	b11d      	cbz	r5, 80051b0 <_printf_i+0x1a0>
 80051a8:	2310      	movs	r3, #16
 80051aa:	e7ab      	b.n	8005104 <_printf_i+0xf4>
 80051ac:	4826      	ldr	r0, [pc, #152]	@ (8005248 <_printf_i+0x238>)
 80051ae:	e7e9      	b.n	8005184 <_printf_i+0x174>
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	f023 0320 	bic.w	r3, r3, #32
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	e7f6      	b.n	80051a8 <_printf_i+0x198>
 80051ba:	4616      	mov	r6, r2
 80051bc:	e7bd      	b.n	800513a <_printf_i+0x12a>
 80051be:	6833      	ldr	r3, [r6, #0]
 80051c0:	6825      	ldr	r5, [r4, #0]
 80051c2:	1d18      	adds	r0, r3, #4
 80051c4:	6961      	ldr	r1, [r4, #20]
 80051c6:	6030      	str	r0, [r6, #0]
 80051c8:	062e      	lsls	r6, r5, #24
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	d501      	bpl.n	80051d2 <_printf_i+0x1c2>
 80051ce:	6019      	str	r1, [r3, #0]
 80051d0:	e002      	b.n	80051d8 <_printf_i+0x1c8>
 80051d2:	0668      	lsls	r0, r5, #25
 80051d4:	d5fb      	bpl.n	80051ce <_printf_i+0x1be>
 80051d6:	8019      	strh	r1, [r3, #0]
 80051d8:	2300      	movs	r3, #0
 80051da:	4616      	mov	r6, r2
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	e7bc      	b.n	800515a <_printf_i+0x14a>
 80051e0:	6833      	ldr	r3, [r6, #0]
 80051e2:	2100      	movs	r1, #0
 80051e4:	1d1a      	adds	r2, r3, #4
 80051e6:	6032      	str	r2, [r6, #0]
 80051e8:	681e      	ldr	r6, [r3, #0]
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	4630      	mov	r0, r6
 80051ee:	f000 f9d4 	bl	800559a <memchr>
 80051f2:	b108      	cbz	r0, 80051f8 <_printf_i+0x1e8>
 80051f4:	1b80      	subs	r0, r0, r6
 80051f6:	6060      	str	r0, [r4, #4]
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	6123      	str	r3, [r4, #16]
 80051fc:	2300      	movs	r3, #0
 80051fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005202:	e7aa      	b.n	800515a <_printf_i+0x14a>
 8005204:	4632      	mov	r2, r6
 8005206:	4649      	mov	r1, r9
 8005208:	4640      	mov	r0, r8
 800520a:	6923      	ldr	r3, [r4, #16]
 800520c:	47d0      	blx	sl
 800520e:	3001      	adds	r0, #1
 8005210:	d0ad      	beq.n	800516e <_printf_i+0x15e>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	079b      	lsls	r3, r3, #30
 8005216:	d413      	bmi.n	8005240 <_printf_i+0x230>
 8005218:	68e0      	ldr	r0, [r4, #12]
 800521a:	9b03      	ldr	r3, [sp, #12]
 800521c:	4298      	cmp	r0, r3
 800521e:	bfb8      	it	lt
 8005220:	4618      	movlt	r0, r3
 8005222:	e7a6      	b.n	8005172 <_printf_i+0x162>
 8005224:	2301      	movs	r3, #1
 8005226:	4632      	mov	r2, r6
 8005228:	4649      	mov	r1, r9
 800522a:	4640      	mov	r0, r8
 800522c:	47d0      	blx	sl
 800522e:	3001      	adds	r0, #1
 8005230:	d09d      	beq.n	800516e <_printf_i+0x15e>
 8005232:	3501      	adds	r5, #1
 8005234:	68e3      	ldr	r3, [r4, #12]
 8005236:	9903      	ldr	r1, [sp, #12]
 8005238:	1a5b      	subs	r3, r3, r1
 800523a:	42ab      	cmp	r3, r5
 800523c:	dcf2      	bgt.n	8005224 <_printf_i+0x214>
 800523e:	e7eb      	b.n	8005218 <_printf_i+0x208>
 8005240:	2500      	movs	r5, #0
 8005242:	f104 0619 	add.w	r6, r4, #25
 8005246:	e7f5      	b.n	8005234 <_printf_i+0x224>
 8005248:	08007e4c 	.word	0x08007e4c
 800524c:	08007e5d 	.word	0x08007e5d

08005250 <std>:
 8005250:	2300      	movs	r3, #0
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	e9c0 3300 	strd	r3, r3, [r0]
 800525a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525e:	6083      	str	r3, [r0, #8]
 8005260:	8181      	strh	r1, [r0, #12]
 8005262:	6643      	str	r3, [r0, #100]	@ 0x64
 8005264:	81c2      	strh	r2, [r0, #14]
 8005266:	6183      	str	r3, [r0, #24]
 8005268:	4619      	mov	r1, r3
 800526a:	2208      	movs	r2, #8
 800526c:	305c      	adds	r0, #92	@ 0x5c
 800526e:	f000 f914 	bl	800549a <memset>
 8005272:	4b0d      	ldr	r3, [pc, #52]	@ (80052a8 <std+0x58>)
 8005274:	6224      	str	r4, [r4, #32]
 8005276:	6263      	str	r3, [r4, #36]	@ 0x24
 8005278:	4b0c      	ldr	r3, [pc, #48]	@ (80052ac <std+0x5c>)
 800527a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <std+0x60>)
 800527e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005280:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <std+0x64>)
 8005282:	6323      	str	r3, [r4, #48]	@ 0x30
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <std+0x68>)
 8005286:	429c      	cmp	r4, r3
 8005288:	d006      	beq.n	8005298 <std+0x48>
 800528a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800528e:	4294      	cmp	r4, r2
 8005290:	d002      	beq.n	8005298 <std+0x48>
 8005292:	33d0      	adds	r3, #208	@ 0xd0
 8005294:	429c      	cmp	r4, r3
 8005296:	d105      	bne.n	80052a4 <std+0x54>
 8005298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f000 b978 	b.w	8005594 <__retarget_lock_init_recursive>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	08005415 	.word	0x08005415
 80052ac:	08005437 	.word	0x08005437
 80052b0:	0800546f 	.word	0x0800546f
 80052b4:	08005493 	.word	0x08005493
 80052b8:	20000718 	.word	0x20000718

080052bc <stdio_exit_handler>:
 80052bc:	4a02      	ldr	r2, [pc, #8]	@ (80052c8 <stdio_exit_handler+0xc>)
 80052be:	4903      	ldr	r1, [pc, #12]	@ (80052cc <stdio_exit_handler+0x10>)
 80052c0:	4803      	ldr	r0, [pc, #12]	@ (80052d0 <stdio_exit_handler+0x14>)
 80052c2:	f000 b869 	b.w	8005398 <_fwalk_sglue>
 80052c6:	bf00      	nop
 80052c8:	20000014 	.word	0x20000014
 80052cc:	08006f05 	.word	0x08006f05
 80052d0:	20000024 	.word	0x20000024

080052d4 <cleanup_stdio>:
 80052d4:	6841      	ldr	r1, [r0, #4]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <cleanup_stdio+0x34>)
 80052d8:	b510      	push	{r4, lr}
 80052da:	4299      	cmp	r1, r3
 80052dc:	4604      	mov	r4, r0
 80052de:	d001      	beq.n	80052e4 <cleanup_stdio+0x10>
 80052e0:	f001 fe10 	bl	8006f04 <_fflush_r>
 80052e4:	68a1      	ldr	r1, [r4, #8]
 80052e6:	4b09      	ldr	r3, [pc, #36]	@ (800530c <cleanup_stdio+0x38>)
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <cleanup_stdio+0x1e>
 80052ec:	4620      	mov	r0, r4
 80052ee:	f001 fe09 	bl	8006f04 <_fflush_r>
 80052f2:	68e1      	ldr	r1, [r4, #12]
 80052f4:	4b06      	ldr	r3, [pc, #24]	@ (8005310 <cleanup_stdio+0x3c>)
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d004      	beq.n	8005304 <cleanup_stdio+0x30>
 80052fa:	4620      	mov	r0, r4
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f001 be00 	b.w	8006f04 <_fflush_r>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop
 8005308:	20000718 	.word	0x20000718
 800530c:	20000780 	.word	0x20000780
 8005310:	200007e8 	.word	0x200007e8

08005314 <global_stdio_init.part.0>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4b0b      	ldr	r3, [pc, #44]	@ (8005344 <global_stdio_init.part.0+0x30>)
 8005318:	4c0b      	ldr	r4, [pc, #44]	@ (8005348 <global_stdio_init.part.0+0x34>)
 800531a:	4a0c      	ldr	r2, [pc, #48]	@ (800534c <global_stdio_init.part.0+0x38>)
 800531c:	4620      	mov	r0, r4
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	2104      	movs	r1, #4
 8005322:	2200      	movs	r2, #0
 8005324:	f7ff ff94 	bl	8005250 <std>
 8005328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800532c:	2201      	movs	r2, #1
 800532e:	2109      	movs	r1, #9
 8005330:	f7ff ff8e 	bl	8005250 <std>
 8005334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005338:	2202      	movs	r2, #2
 800533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533e:	2112      	movs	r1, #18
 8005340:	f7ff bf86 	b.w	8005250 <std>
 8005344:	20000850 	.word	0x20000850
 8005348:	20000718 	.word	0x20000718
 800534c:	080052bd 	.word	0x080052bd

08005350 <__sfp_lock_acquire>:
 8005350:	4801      	ldr	r0, [pc, #4]	@ (8005358 <__sfp_lock_acquire+0x8>)
 8005352:	f000 b920 	b.w	8005596 <__retarget_lock_acquire_recursive>
 8005356:	bf00      	nop
 8005358:	20000859 	.word	0x20000859

0800535c <__sfp_lock_release>:
 800535c:	4801      	ldr	r0, [pc, #4]	@ (8005364 <__sfp_lock_release+0x8>)
 800535e:	f000 b91b 	b.w	8005598 <__retarget_lock_release_recursive>
 8005362:	bf00      	nop
 8005364:	20000859 	.word	0x20000859

08005368 <__sinit>:
 8005368:	b510      	push	{r4, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	f7ff fff0 	bl	8005350 <__sfp_lock_acquire>
 8005370:	6a23      	ldr	r3, [r4, #32]
 8005372:	b11b      	cbz	r3, 800537c <__sinit+0x14>
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005378:	f7ff bff0 	b.w	800535c <__sfp_lock_release>
 800537c:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <__sinit+0x28>)
 800537e:	6223      	str	r3, [r4, #32]
 8005380:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <__sinit+0x2c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f5      	bne.n	8005374 <__sinit+0xc>
 8005388:	f7ff ffc4 	bl	8005314 <global_stdio_init.part.0>
 800538c:	e7f2      	b.n	8005374 <__sinit+0xc>
 800538e:	bf00      	nop
 8005390:	080052d5 	.word	0x080052d5
 8005394:	20000850 	.word	0x20000850

08005398 <_fwalk_sglue>:
 8005398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539c:	4607      	mov	r7, r0
 800539e:	4688      	mov	r8, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	2600      	movs	r6, #0
 80053a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a8:	f1b9 0901 	subs.w	r9, r9, #1
 80053ac:	d505      	bpl.n	80053ba <_fwalk_sglue+0x22>
 80053ae:	6824      	ldr	r4, [r4, #0]
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d1f7      	bne.n	80053a4 <_fwalk_sglue+0xc>
 80053b4:	4630      	mov	r0, r6
 80053b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d907      	bls.n	80053d0 <_fwalk_sglue+0x38>
 80053c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c4:	3301      	adds	r3, #1
 80053c6:	d003      	beq.n	80053d0 <_fwalk_sglue+0x38>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	4306      	orrs	r6, r0
 80053d0:	3568      	adds	r5, #104	@ 0x68
 80053d2:	e7e9      	b.n	80053a8 <_fwalk_sglue+0x10>

080053d4 <siprintf>:
 80053d4:	b40e      	push	{r1, r2, r3}
 80053d6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053da:	b500      	push	{lr}
 80053dc:	b09c      	sub	sp, #112	@ 0x70
 80053de:	ab1d      	add	r3, sp, #116	@ 0x74
 80053e0:	9002      	str	r0, [sp, #8]
 80053e2:	9006      	str	r0, [sp, #24]
 80053e4:	9107      	str	r1, [sp, #28]
 80053e6:	9104      	str	r1, [sp, #16]
 80053e8:	4808      	ldr	r0, [pc, #32]	@ (800540c <siprintf+0x38>)
 80053ea:	4909      	ldr	r1, [pc, #36]	@ (8005410 <siprintf+0x3c>)
 80053ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f0:	9105      	str	r1, [sp, #20]
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	a902      	add	r1, sp, #8
 80053f6:	9301      	str	r3, [sp, #4]
 80053f8:	f001 fc08 	bl	8006c0c <_svfiprintf_r>
 80053fc:	2200      	movs	r2, #0
 80053fe:	9b02      	ldr	r3, [sp, #8]
 8005400:	701a      	strb	r2, [r3, #0]
 8005402:	b01c      	add	sp, #112	@ 0x70
 8005404:	f85d eb04 	ldr.w	lr, [sp], #4
 8005408:	b003      	add	sp, #12
 800540a:	4770      	bx	lr
 800540c:	20000020 	.word	0x20000020
 8005410:	ffff0208 	.word	0xffff0208

08005414 <__sread>:
 8005414:	b510      	push	{r4, lr}
 8005416:	460c      	mov	r4, r1
 8005418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800541c:	f000 f86c 	bl	80054f8 <_read_r>
 8005420:	2800      	cmp	r0, #0
 8005422:	bfab      	itete	ge
 8005424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005426:	89a3      	ldrhlt	r3, [r4, #12]
 8005428:	181b      	addge	r3, r3, r0
 800542a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800542e:	bfac      	ite	ge
 8005430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005432:	81a3      	strhlt	r3, [r4, #12]
 8005434:	bd10      	pop	{r4, pc}

08005436 <__swrite>:
 8005436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800543a:	461f      	mov	r7, r3
 800543c:	898b      	ldrh	r3, [r1, #12]
 800543e:	4605      	mov	r5, r0
 8005440:	05db      	lsls	r3, r3, #23
 8005442:	460c      	mov	r4, r1
 8005444:	4616      	mov	r6, r2
 8005446:	d505      	bpl.n	8005454 <__swrite+0x1e>
 8005448:	2302      	movs	r3, #2
 800544a:	2200      	movs	r2, #0
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f840 	bl	80054d4 <_lseek_r>
 8005454:	89a3      	ldrh	r3, [r4, #12]
 8005456:	4632      	mov	r2, r6
 8005458:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800545c:	81a3      	strh	r3, [r4, #12]
 800545e:	4628      	mov	r0, r5
 8005460:	463b      	mov	r3, r7
 8005462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800546a:	f000 b857 	b.w	800551c <_write_r>

0800546e <__sseek>:
 800546e:	b510      	push	{r4, lr}
 8005470:	460c      	mov	r4, r1
 8005472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005476:	f000 f82d 	bl	80054d4 <_lseek_r>
 800547a:	1c43      	adds	r3, r0, #1
 800547c:	89a3      	ldrh	r3, [r4, #12]
 800547e:	bf15      	itete	ne
 8005480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800548a:	81a3      	strheq	r3, [r4, #12]
 800548c:	bf18      	it	ne
 800548e:	81a3      	strhne	r3, [r4, #12]
 8005490:	bd10      	pop	{r4, pc}

08005492 <__sclose>:
 8005492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005496:	f000 b80d 	b.w	80054b4 <_close_r>

0800549a <memset>:
 800549a:	4603      	mov	r3, r0
 800549c:	4402      	add	r2, r0
 800549e:	4293      	cmp	r3, r2
 80054a0:	d100      	bne.n	80054a4 <memset+0xa>
 80054a2:	4770      	bx	lr
 80054a4:	f803 1b01 	strb.w	r1, [r3], #1
 80054a8:	e7f9      	b.n	800549e <memset+0x4>
	...

080054ac <_localeconv_r>:
 80054ac:	4800      	ldr	r0, [pc, #0]	@ (80054b0 <_localeconv_r+0x4>)
 80054ae:	4770      	bx	lr
 80054b0:	20000160 	.word	0x20000160

080054b4 <_close_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	2300      	movs	r3, #0
 80054b8:	4d05      	ldr	r5, [pc, #20]	@ (80054d0 <_close_r+0x1c>)
 80054ba:	4604      	mov	r4, r0
 80054bc:	4608      	mov	r0, r1
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	f7fc fc0d 	bl	8001cde <_close>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_close_r+0x1a>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_close_r+0x1a>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000854 	.word	0x20000854

080054d4 <_lseek_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4604      	mov	r4, r0
 80054d8:	4608      	mov	r0, r1
 80054da:	4611      	mov	r1, r2
 80054dc:	2200      	movs	r2, #0
 80054de:	4d05      	ldr	r5, [pc, #20]	@ (80054f4 <_lseek_r+0x20>)
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc fc1f 	bl	8001d26 <_lseek>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_lseek_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_lseek_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000854 	.word	0x20000854

080054f8 <_read_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4604      	mov	r4, r0
 80054fc:	4608      	mov	r0, r1
 80054fe:	4611      	mov	r1, r2
 8005500:	2200      	movs	r2, #0
 8005502:	4d05      	ldr	r5, [pc, #20]	@ (8005518 <_read_r+0x20>)
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc fbb0 	bl	8001c6c <_read>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_read_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_read_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000854 	.word	0x20000854

0800551c <_write_r>:
 800551c:	b538      	push	{r3, r4, r5, lr}
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	4611      	mov	r1, r2
 8005524:	2200      	movs	r2, #0
 8005526:	4d05      	ldr	r5, [pc, #20]	@ (800553c <_write_r+0x20>)
 8005528:	602a      	str	r2, [r5, #0]
 800552a:	461a      	mov	r2, r3
 800552c:	f7fc fbbb 	bl	8001ca6 <_write>
 8005530:	1c43      	adds	r3, r0, #1
 8005532:	d102      	bne.n	800553a <_write_r+0x1e>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	b103      	cbz	r3, 800553a <_write_r+0x1e>
 8005538:	6023      	str	r3, [r4, #0]
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20000854 	.word	0x20000854

08005540 <__errno>:
 8005540:	4b01      	ldr	r3, [pc, #4]	@ (8005548 <__errno+0x8>)
 8005542:	6818      	ldr	r0, [r3, #0]
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	20000020 	.word	0x20000020

0800554c <__libc_init_array>:
 800554c:	b570      	push	{r4, r5, r6, lr}
 800554e:	2600      	movs	r6, #0
 8005550:	4d0c      	ldr	r5, [pc, #48]	@ (8005584 <__libc_init_array+0x38>)
 8005552:	4c0d      	ldr	r4, [pc, #52]	@ (8005588 <__libc_init_array+0x3c>)
 8005554:	1b64      	subs	r4, r4, r5
 8005556:	10a4      	asrs	r4, r4, #2
 8005558:	42a6      	cmp	r6, r4
 800555a:	d109      	bne.n	8005570 <__libc_init_array+0x24>
 800555c:	f002 f86e 	bl	800763c <_init>
 8005560:	2600      	movs	r6, #0
 8005562:	4d0a      	ldr	r5, [pc, #40]	@ (800558c <__libc_init_array+0x40>)
 8005564:	4c0a      	ldr	r4, [pc, #40]	@ (8005590 <__libc_init_array+0x44>)
 8005566:	1b64      	subs	r4, r4, r5
 8005568:	10a4      	asrs	r4, r4, #2
 800556a:	42a6      	cmp	r6, r4
 800556c:	d105      	bne.n	800557a <__libc_init_array+0x2e>
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	f855 3b04 	ldr.w	r3, [r5], #4
 8005574:	4798      	blx	r3
 8005576:	3601      	adds	r6, #1
 8005578:	e7ee      	b.n	8005558 <__libc_init_array+0xc>
 800557a:	f855 3b04 	ldr.w	r3, [r5], #4
 800557e:	4798      	blx	r3
 8005580:	3601      	adds	r6, #1
 8005582:	e7f2      	b.n	800556a <__libc_init_array+0x1e>
 8005584:	080081b0 	.word	0x080081b0
 8005588:	080081b0 	.word	0x080081b0
 800558c:	080081b0 	.word	0x080081b0
 8005590:	080081b4 	.word	0x080081b4

08005594 <__retarget_lock_init_recursive>:
 8005594:	4770      	bx	lr

08005596 <__retarget_lock_acquire_recursive>:
 8005596:	4770      	bx	lr

08005598 <__retarget_lock_release_recursive>:
 8005598:	4770      	bx	lr

0800559a <memchr>:
 800559a:	4603      	mov	r3, r0
 800559c:	b510      	push	{r4, lr}
 800559e:	b2c9      	uxtb	r1, r1
 80055a0:	4402      	add	r2, r0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	4618      	mov	r0, r3
 80055a6:	d101      	bne.n	80055ac <memchr+0x12>
 80055a8:	2000      	movs	r0, #0
 80055aa:	e003      	b.n	80055b4 <memchr+0x1a>
 80055ac:	7804      	ldrb	r4, [r0, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	428c      	cmp	r4, r1
 80055b2:	d1f6      	bne.n	80055a2 <memchr+0x8>
 80055b4:	bd10      	pop	{r4, pc}

080055b6 <quorem>:
 80055b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ba:	6903      	ldr	r3, [r0, #16]
 80055bc:	690c      	ldr	r4, [r1, #16]
 80055be:	4607      	mov	r7, r0
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	db7e      	blt.n	80056c2 <quorem+0x10c>
 80055c4:	3c01      	subs	r4, #1
 80055c6:	00a3      	lsls	r3, r4, #2
 80055c8:	f100 0514 	add.w	r5, r0, #20
 80055cc:	f101 0814 	add.w	r8, r1, #20
 80055d0:	9300      	str	r3, [sp, #0]
 80055d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055d6:	9301      	str	r3, [sp, #4]
 80055d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055e0:	3301      	adds	r3, #1
 80055e2:	429a      	cmp	r2, r3
 80055e4:	fbb2 f6f3 	udiv	r6, r2, r3
 80055e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055ec:	d32e      	bcc.n	800564c <quorem+0x96>
 80055ee:	f04f 0a00 	mov.w	sl, #0
 80055f2:	46c4      	mov	ip, r8
 80055f4:	46ae      	mov	lr, r5
 80055f6:	46d3      	mov	fp, sl
 80055f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055fc:	b298      	uxth	r0, r3
 80055fe:	fb06 a000 	mla	r0, r6, r0, sl
 8005602:	0c1b      	lsrs	r3, r3, #16
 8005604:	0c02      	lsrs	r2, r0, #16
 8005606:	fb06 2303 	mla	r3, r6, r3, r2
 800560a:	f8de 2000 	ldr.w	r2, [lr]
 800560e:	b280      	uxth	r0, r0
 8005610:	b292      	uxth	r2, r2
 8005612:	1a12      	subs	r2, r2, r0
 8005614:	445a      	add	r2, fp
 8005616:	f8de 0000 	ldr.w	r0, [lr]
 800561a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800561e:	b29b      	uxth	r3, r3
 8005620:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005624:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005628:	b292      	uxth	r2, r2
 800562a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800562e:	45e1      	cmp	r9, ip
 8005630:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005634:	f84e 2b04 	str.w	r2, [lr], #4
 8005638:	d2de      	bcs.n	80055f8 <quorem+0x42>
 800563a:	9b00      	ldr	r3, [sp, #0]
 800563c:	58eb      	ldr	r3, [r5, r3]
 800563e:	b92b      	cbnz	r3, 800564c <quorem+0x96>
 8005640:	9b01      	ldr	r3, [sp, #4]
 8005642:	3b04      	subs	r3, #4
 8005644:	429d      	cmp	r5, r3
 8005646:	461a      	mov	r2, r3
 8005648:	d32f      	bcc.n	80056aa <quorem+0xf4>
 800564a:	613c      	str	r4, [r7, #16]
 800564c:	4638      	mov	r0, r7
 800564e:	f001 f979 	bl	8006944 <__mcmp>
 8005652:	2800      	cmp	r0, #0
 8005654:	db25      	blt.n	80056a2 <quorem+0xec>
 8005656:	4629      	mov	r1, r5
 8005658:	2000      	movs	r0, #0
 800565a:	f858 2b04 	ldr.w	r2, [r8], #4
 800565e:	f8d1 c000 	ldr.w	ip, [r1]
 8005662:	fa1f fe82 	uxth.w	lr, r2
 8005666:	fa1f f38c 	uxth.w	r3, ip
 800566a:	eba3 030e 	sub.w	r3, r3, lr
 800566e:	4403      	add	r3, r0
 8005670:	0c12      	lsrs	r2, r2, #16
 8005672:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005676:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800567a:	b29b      	uxth	r3, r3
 800567c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005680:	45c1      	cmp	r9, r8
 8005682:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005686:	f841 3b04 	str.w	r3, [r1], #4
 800568a:	d2e6      	bcs.n	800565a <quorem+0xa4>
 800568c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005690:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005694:	b922      	cbnz	r2, 80056a0 <quorem+0xea>
 8005696:	3b04      	subs	r3, #4
 8005698:	429d      	cmp	r5, r3
 800569a:	461a      	mov	r2, r3
 800569c:	d30b      	bcc.n	80056b6 <quorem+0x100>
 800569e:	613c      	str	r4, [r7, #16]
 80056a0:	3601      	adds	r6, #1
 80056a2:	4630      	mov	r0, r6
 80056a4:	b003      	add	sp, #12
 80056a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056aa:	6812      	ldr	r2, [r2, #0]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	d1cb      	bne.n	800564a <quorem+0x94>
 80056b2:	3c01      	subs	r4, #1
 80056b4:	e7c6      	b.n	8005644 <quorem+0x8e>
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	3b04      	subs	r3, #4
 80056ba:	2a00      	cmp	r2, #0
 80056bc:	d1ef      	bne.n	800569e <quorem+0xe8>
 80056be:	3c01      	subs	r4, #1
 80056c0:	e7ea      	b.n	8005698 <quorem+0xe2>
 80056c2:	2000      	movs	r0, #0
 80056c4:	e7ee      	b.n	80056a4 <quorem+0xee>
	...

080056c8 <_dtoa_r>:
 80056c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056cc:	4614      	mov	r4, r2
 80056ce:	461d      	mov	r5, r3
 80056d0:	69c7      	ldr	r7, [r0, #28]
 80056d2:	b097      	sub	sp, #92	@ 0x5c
 80056d4:	4683      	mov	fp, r0
 80056d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80056da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80056dc:	b97f      	cbnz	r7, 80056fe <_dtoa_r+0x36>
 80056de:	2010      	movs	r0, #16
 80056e0:	f000 fe02 	bl	80062e8 <malloc>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f8cb 001c 	str.w	r0, [fp, #28]
 80056ea:	b920      	cbnz	r0, 80056f6 <_dtoa_r+0x2e>
 80056ec:	21ef      	movs	r1, #239	@ 0xef
 80056ee:	4ba8      	ldr	r3, [pc, #672]	@ (8005990 <_dtoa_r+0x2c8>)
 80056f0:	48a8      	ldr	r0, [pc, #672]	@ (8005994 <_dtoa_r+0x2cc>)
 80056f2:	f001 fc67 	bl	8006fc4 <__assert_func>
 80056f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056fa:	6007      	str	r7, [r0, #0]
 80056fc:	60c7      	str	r7, [r0, #12]
 80056fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	b159      	cbz	r1, 800571e <_dtoa_r+0x56>
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	2301      	movs	r3, #1
 800570a:	4093      	lsls	r3, r2
 800570c:	604a      	str	r2, [r1, #4]
 800570e:	608b      	str	r3, [r1, #8]
 8005710:	4658      	mov	r0, fp
 8005712:	f000 fedf 	bl	80064d4 <_Bfree>
 8005716:	2200      	movs	r2, #0
 8005718:	f8db 301c 	ldr.w	r3, [fp, #28]
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	1e2b      	subs	r3, r5, #0
 8005720:	bfaf      	iteee	ge
 8005722:	2300      	movge	r3, #0
 8005724:	2201      	movlt	r2, #1
 8005726:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800572a:	9303      	strlt	r3, [sp, #12]
 800572c:	bfa8      	it	ge
 800572e:	6033      	strge	r3, [r6, #0]
 8005730:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005734:	4b98      	ldr	r3, [pc, #608]	@ (8005998 <_dtoa_r+0x2d0>)
 8005736:	bfb8      	it	lt
 8005738:	6032      	strlt	r2, [r6, #0]
 800573a:	ea33 0308 	bics.w	r3, r3, r8
 800573e:	d112      	bne.n	8005766 <_dtoa_r+0x9e>
 8005740:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005744:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800574c:	4323      	orrs	r3, r4
 800574e:	f000 8550 	beq.w	80061f2 <_dtoa_r+0xb2a>
 8005752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005754:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800599c <_dtoa_r+0x2d4>
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8552 	beq.w	8006202 <_dtoa_r+0xb3a>
 800575e:	f10a 0303 	add.w	r3, sl, #3
 8005762:	f000 bd4c 	b.w	80061fe <_dtoa_r+0xb36>
 8005766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800576a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800576e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005772:	2200      	movs	r2, #0
 8005774:	2300      	movs	r3, #0
 8005776:	f7fb f917 	bl	80009a8 <__aeabi_dcmpeq>
 800577a:	4607      	mov	r7, r0
 800577c:	b158      	cbz	r0, 8005796 <_dtoa_r+0xce>
 800577e:	2301      	movs	r3, #1
 8005780:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005782:	6013      	str	r3, [r2, #0]
 8005784:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005786:	b113      	cbz	r3, 800578e <_dtoa_r+0xc6>
 8005788:	4b85      	ldr	r3, [pc, #532]	@ (80059a0 <_dtoa_r+0x2d8>)
 800578a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80059a4 <_dtoa_r+0x2dc>
 8005792:	f000 bd36 	b.w	8006202 <_dtoa_r+0xb3a>
 8005796:	ab14      	add	r3, sp, #80	@ 0x50
 8005798:	9301      	str	r3, [sp, #4]
 800579a:	ab15      	add	r3, sp, #84	@ 0x54
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	4658      	mov	r0, fp
 80057a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80057a4:	f001 f97e 	bl	8006aa4 <__d2b>
 80057a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80057ac:	4681      	mov	r9, r0
 80057ae:	2e00      	cmp	r6, #0
 80057b0:	d077      	beq.n	80058a2 <_dtoa_r+0x1da>
 80057b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80057b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057c8:	9712      	str	r7, [sp, #72]	@ 0x48
 80057ca:	4619      	mov	r1, r3
 80057cc:	2200      	movs	r2, #0
 80057ce:	4b76      	ldr	r3, [pc, #472]	@ (80059a8 <_dtoa_r+0x2e0>)
 80057d0:	f7fa fcca 	bl	8000168 <__aeabi_dsub>
 80057d4:	a368      	add	r3, pc, #416	@ (adr r3, 8005978 <_dtoa_r+0x2b0>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	f7fa fe7d 	bl	80004d8 <__aeabi_dmul>
 80057de:	a368      	add	r3, pc, #416	@ (adr r3, 8005980 <_dtoa_r+0x2b8>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa fcc2 	bl	800016c <__adddf3>
 80057e8:	4604      	mov	r4, r0
 80057ea:	4630      	mov	r0, r6
 80057ec:	460d      	mov	r5, r1
 80057ee:	f7fa fe09 	bl	8000404 <__aeabi_i2d>
 80057f2:	a365      	add	r3, pc, #404	@ (adr r3, 8005988 <_dtoa_r+0x2c0>)
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f7fa fe6e 	bl	80004d8 <__aeabi_dmul>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4620      	mov	r0, r4
 8005802:	4629      	mov	r1, r5
 8005804:	f7fa fcb2 	bl	800016c <__adddf3>
 8005808:	4604      	mov	r4, r0
 800580a:	460d      	mov	r5, r1
 800580c:	f7fb f914 	bl	8000a38 <__aeabi_d2iz>
 8005810:	2200      	movs	r2, #0
 8005812:	4607      	mov	r7, r0
 8005814:	2300      	movs	r3, #0
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fb f8cf 	bl	80009bc <__aeabi_dcmplt>
 800581e:	b140      	cbz	r0, 8005832 <_dtoa_r+0x16a>
 8005820:	4638      	mov	r0, r7
 8005822:	f7fa fdef 	bl	8000404 <__aeabi_i2d>
 8005826:	4622      	mov	r2, r4
 8005828:	462b      	mov	r3, r5
 800582a:	f7fb f8bd 	bl	80009a8 <__aeabi_dcmpeq>
 800582e:	b900      	cbnz	r0, 8005832 <_dtoa_r+0x16a>
 8005830:	3f01      	subs	r7, #1
 8005832:	2f16      	cmp	r7, #22
 8005834:	d853      	bhi.n	80058de <_dtoa_r+0x216>
 8005836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800583a:	4b5c      	ldr	r3, [pc, #368]	@ (80059ac <_dtoa_r+0x2e4>)
 800583c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005844:	f7fb f8ba 	bl	80009bc <__aeabi_dcmplt>
 8005848:	2800      	cmp	r0, #0
 800584a:	d04a      	beq.n	80058e2 <_dtoa_r+0x21a>
 800584c:	2300      	movs	r3, #0
 800584e:	3f01      	subs	r7, #1
 8005850:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005852:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005854:	1b9b      	subs	r3, r3, r6
 8005856:	1e5a      	subs	r2, r3, #1
 8005858:	bf46      	itte	mi
 800585a:	f1c3 0801 	rsbmi	r8, r3, #1
 800585e:	2300      	movmi	r3, #0
 8005860:	f04f 0800 	movpl.w	r8, #0
 8005864:	9209      	str	r2, [sp, #36]	@ 0x24
 8005866:	bf48      	it	mi
 8005868:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800586a:	2f00      	cmp	r7, #0
 800586c:	db3b      	blt.n	80058e6 <_dtoa_r+0x21e>
 800586e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005870:	970e      	str	r7, [sp, #56]	@ 0x38
 8005872:	443b      	add	r3, r7
 8005874:	9309      	str	r3, [sp, #36]	@ 0x24
 8005876:	2300      	movs	r3, #0
 8005878:	930a      	str	r3, [sp, #40]	@ 0x28
 800587a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800587c:	2b09      	cmp	r3, #9
 800587e:	d866      	bhi.n	800594e <_dtoa_r+0x286>
 8005880:	2b05      	cmp	r3, #5
 8005882:	bfc4      	itt	gt
 8005884:	3b04      	subgt	r3, #4
 8005886:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005888:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800588a:	bfc8      	it	gt
 800588c:	2400      	movgt	r4, #0
 800588e:	f1a3 0302 	sub.w	r3, r3, #2
 8005892:	bfd8      	it	le
 8005894:	2401      	movle	r4, #1
 8005896:	2b03      	cmp	r3, #3
 8005898:	d864      	bhi.n	8005964 <_dtoa_r+0x29c>
 800589a:	e8df f003 	tbb	[pc, r3]
 800589e:	382b      	.short	0x382b
 80058a0:	5636      	.short	0x5636
 80058a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058a6:	441e      	add	r6, r3
 80058a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058ac:	2b20      	cmp	r3, #32
 80058ae:	bfc1      	itttt	gt
 80058b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80058b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058c0:	bfd6      	itet	le
 80058c2:	f1c3 0320 	rsble	r3, r3, #32
 80058c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80058ca:	fa04 f003 	lslle.w	r0, r4, r3
 80058ce:	f7fa fd89 	bl	80003e4 <__aeabi_ui2d>
 80058d2:	2201      	movs	r2, #1
 80058d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058d8:	3e01      	subs	r6, #1
 80058da:	9212      	str	r2, [sp, #72]	@ 0x48
 80058dc:	e775      	b.n	80057ca <_dtoa_r+0x102>
 80058de:	2301      	movs	r3, #1
 80058e0:	e7b6      	b.n	8005850 <_dtoa_r+0x188>
 80058e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80058e4:	e7b5      	b.n	8005852 <_dtoa_r+0x18a>
 80058e6:	427b      	negs	r3, r7
 80058e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80058ea:	2300      	movs	r3, #0
 80058ec:	eba8 0807 	sub.w	r8, r8, r7
 80058f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80058f2:	e7c2      	b.n	800587a <_dtoa_r+0x1b2>
 80058f4:	2300      	movs	r3, #0
 80058f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dc35      	bgt.n	800596a <_dtoa_r+0x2a2>
 80058fe:	2301      	movs	r3, #1
 8005900:	461a      	mov	r2, r3
 8005902:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005906:	9221      	str	r2, [sp, #132]	@ 0x84
 8005908:	e00b      	b.n	8005922 <_dtoa_r+0x25a>
 800590a:	2301      	movs	r3, #1
 800590c:	e7f3      	b.n	80058f6 <_dtoa_r+0x22e>
 800590e:	2300      	movs	r3, #0
 8005910:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005914:	18fb      	adds	r3, r7, r3
 8005916:	9308      	str	r3, [sp, #32]
 8005918:	3301      	adds	r3, #1
 800591a:	2b01      	cmp	r3, #1
 800591c:	9307      	str	r3, [sp, #28]
 800591e:	bfb8      	it	lt
 8005920:	2301      	movlt	r3, #1
 8005922:	2100      	movs	r1, #0
 8005924:	2204      	movs	r2, #4
 8005926:	f8db 001c 	ldr.w	r0, [fp, #28]
 800592a:	f102 0514 	add.w	r5, r2, #20
 800592e:	429d      	cmp	r5, r3
 8005930:	d91f      	bls.n	8005972 <_dtoa_r+0x2aa>
 8005932:	6041      	str	r1, [r0, #4]
 8005934:	4658      	mov	r0, fp
 8005936:	f000 fd8d 	bl	8006454 <_Balloc>
 800593a:	4682      	mov	sl, r0
 800593c:	2800      	cmp	r0, #0
 800593e:	d139      	bne.n	80059b4 <_dtoa_r+0x2ec>
 8005940:	4602      	mov	r2, r0
 8005942:	f240 11af 	movw	r1, #431	@ 0x1af
 8005946:	4b1a      	ldr	r3, [pc, #104]	@ (80059b0 <_dtoa_r+0x2e8>)
 8005948:	e6d2      	b.n	80056f0 <_dtoa_r+0x28>
 800594a:	2301      	movs	r3, #1
 800594c:	e7e0      	b.n	8005910 <_dtoa_r+0x248>
 800594e:	2401      	movs	r4, #1
 8005950:	2300      	movs	r3, #0
 8005952:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005954:	9320      	str	r3, [sp, #128]	@ 0x80
 8005956:	f04f 33ff 	mov.w	r3, #4294967295
 800595a:	2200      	movs	r2, #0
 800595c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005960:	2312      	movs	r3, #18
 8005962:	e7d0      	b.n	8005906 <_dtoa_r+0x23e>
 8005964:	2301      	movs	r3, #1
 8005966:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005968:	e7f5      	b.n	8005956 <_dtoa_r+0x28e>
 800596a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800596c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005970:	e7d7      	b.n	8005922 <_dtoa_r+0x25a>
 8005972:	3101      	adds	r1, #1
 8005974:	0052      	lsls	r2, r2, #1
 8005976:	e7d8      	b.n	800592a <_dtoa_r+0x262>
 8005978:	636f4361 	.word	0x636f4361
 800597c:	3fd287a7 	.word	0x3fd287a7
 8005980:	8b60c8b3 	.word	0x8b60c8b3
 8005984:	3fc68a28 	.word	0x3fc68a28
 8005988:	509f79fb 	.word	0x509f79fb
 800598c:	3fd34413 	.word	0x3fd34413
 8005990:	08007e7b 	.word	0x08007e7b
 8005994:	08007e92 	.word	0x08007e92
 8005998:	7ff00000 	.word	0x7ff00000
 800599c:	08007e77 	.word	0x08007e77
 80059a0:	08007e4b 	.word	0x08007e4b
 80059a4:	08007e4a 	.word	0x08007e4a
 80059a8:	3ff80000 	.word	0x3ff80000
 80059ac:	08007f88 	.word	0x08007f88
 80059b0:	08007eea 	.word	0x08007eea
 80059b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059b8:	6018      	str	r0, [r3, #0]
 80059ba:	9b07      	ldr	r3, [sp, #28]
 80059bc:	2b0e      	cmp	r3, #14
 80059be:	f200 80a4 	bhi.w	8005b0a <_dtoa_r+0x442>
 80059c2:	2c00      	cmp	r4, #0
 80059c4:	f000 80a1 	beq.w	8005b0a <_dtoa_r+0x442>
 80059c8:	2f00      	cmp	r7, #0
 80059ca:	dd33      	ble.n	8005a34 <_dtoa_r+0x36c>
 80059cc:	4b86      	ldr	r3, [pc, #536]	@ (8005be8 <_dtoa_r+0x520>)
 80059ce:	f007 020f 	and.w	r2, r7, #15
 80059d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059d6:	05f8      	lsls	r0, r7, #23
 80059d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80059dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80059e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059e4:	d516      	bpl.n	8005a14 <_dtoa_r+0x34c>
 80059e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ea:	4b80      	ldr	r3, [pc, #512]	@ (8005bec <_dtoa_r+0x524>)
 80059ec:	2603      	movs	r6, #3
 80059ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059f2:	f7fa fe9b 	bl	800072c <__aeabi_ddiv>
 80059f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059fa:	f004 040f 	and.w	r4, r4, #15
 80059fe:	4d7b      	ldr	r5, [pc, #492]	@ (8005bec <_dtoa_r+0x524>)
 8005a00:	b954      	cbnz	r4, 8005a18 <_dtoa_r+0x350>
 8005a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a0a:	f7fa fe8f 	bl	800072c <__aeabi_ddiv>
 8005a0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a12:	e028      	b.n	8005a66 <_dtoa_r+0x39e>
 8005a14:	2602      	movs	r6, #2
 8005a16:	e7f2      	b.n	80059fe <_dtoa_r+0x336>
 8005a18:	07e1      	lsls	r1, r4, #31
 8005a1a:	d508      	bpl.n	8005a2e <_dtoa_r+0x366>
 8005a1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a24:	f7fa fd58 	bl	80004d8 <__aeabi_dmul>
 8005a28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a2c:	3601      	adds	r6, #1
 8005a2e:	1064      	asrs	r4, r4, #1
 8005a30:	3508      	adds	r5, #8
 8005a32:	e7e5      	b.n	8005a00 <_dtoa_r+0x338>
 8005a34:	f000 80d2 	beq.w	8005bdc <_dtoa_r+0x514>
 8005a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a3c:	427c      	negs	r4, r7
 8005a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8005be8 <_dtoa_r+0x520>)
 8005a40:	f004 020f 	and.w	r2, r4, #15
 8005a44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4c:	f7fa fd44 	bl	80004d8 <__aeabi_dmul>
 8005a50:	2602      	movs	r6, #2
 8005a52:	2300      	movs	r3, #0
 8005a54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a58:	4d64      	ldr	r5, [pc, #400]	@ (8005bec <_dtoa_r+0x524>)
 8005a5a:	1124      	asrs	r4, r4, #4
 8005a5c:	2c00      	cmp	r4, #0
 8005a5e:	f040 80b2 	bne.w	8005bc6 <_dtoa_r+0x4fe>
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1d3      	bne.n	8005a0e <_dtoa_r+0x346>
 8005a66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80b7 	beq.w	8005be0 <_dtoa_r+0x518>
 8005a72:	2200      	movs	r2, #0
 8005a74:	4620      	mov	r0, r4
 8005a76:	4629      	mov	r1, r5
 8005a78:	4b5d      	ldr	r3, [pc, #372]	@ (8005bf0 <_dtoa_r+0x528>)
 8005a7a:	f7fa ff9f 	bl	80009bc <__aeabi_dcmplt>
 8005a7e:	2800      	cmp	r0, #0
 8005a80:	f000 80ae 	beq.w	8005be0 <_dtoa_r+0x518>
 8005a84:	9b07      	ldr	r3, [sp, #28]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	f000 80aa 	beq.w	8005be0 <_dtoa_r+0x518>
 8005a8c:	9b08      	ldr	r3, [sp, #32]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd37      	ble.n	8005b02 <_dtoa_r+0x43a>
 8005a92:	1e7b      	subs	r3, r7, #1
 8005a94:	4620      	mov	r0, r4
 8005a96:	9304      	str	r3, [sp, #16]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4b55      	ldr	r3, [pc, #340]	@ (8005bf4 <_dtoa_r+0x52c>)
 8005a9e:	f7fa fd1b 	bl	80004d8 <__aeabi_dmul>
 8005aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aa6:	9c08      	ldr	r4, [sp, #32]
 8005aa8:	3601      	adds	r6, #1
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f7fa fcaa 	bl	8000404 <__aeabi_i2d>
 8005ab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ab4:	f7fa fd10 	bl	80004d8 <__aeabi_dmul>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4b4f      	ldr	r3, [pc, #316]	@ (8005bf8 <_dtoa_r+0x530>)
 8005abc:	f7fa fb56 	bl	800016c <__adddf3>
 8005ac0:	4605      	mov	r5, r0
 8005ac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ac6:	2c00      	cmp	r4, #0
 8005ac8:	f040 809a 	bne.w	8005c00 <_dtoa_r+0x538>
 8005acc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	4b4a      	ldr	r3, [pc, #296]	@ (8005bfc <_dtoa_r+0x534>)
 8005ad4:	f7fa fb48 	bl	8000168 <__aeabi_dsub>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	460b      	mov	r3, r1
 8005adc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ae0:	462a      	mov	r2, r5
 8005ae2:	4633      	mov	r3, r6
 8005ae4:	f7fa ff88 	bl	80009f8 <__aeabi_dcmpgt>
 8005ae8:	2800      	cmp	r0, #0
 8005aea:	f040 828e 	bne.w	800600a <_dtoa_r+0x942>
 8005aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af2:	462a      	mov	r2, r5
 8005af4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005af8:	f7fa ff60 	bl	80009bc <__aeabi_dcmplt>
 8005afc:	2800      	cmp	r0, #0
 8005afe:	f040 8127 	bne.w	8005d50 <_dtoa_r+0x688>
 8005b02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005b06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005b0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f2c0 8163 	blt.w	8005dd8 <_dtoa_r+0x710>
 8005b12:	2f0e      	cmp	r7, #14
 8005b14:	f300 8160 	bgt.w	8005dd8 <_dtoa_r+0x710>
 8005b18:	4b33      	ldr	r3, [pc, #204]	@ (8005be8 <_dtoa_r+0x520>)
 8005b1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	da03      	bge.n	8005b34 <_dtoa_r+0x46c>
 8005b2c:	9b07      	ldr	r3, [sp, #28]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f340 8100 	ble.w	8005d34 <_dtoa_r+0x66c>
 8005b34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b38:	4656      	mov	r6, sl
 8005b3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	4629      	mov	r1, r5
 8005b42:	f7fa fdf3 	bl	800072c <__aeabi_ddiv>
 8005b46:	f7fa ff77 	bl	8000a38 <__aeabi_d2iz>
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	f7fa fc5a 	bl	8000404 <__aeabi_i2d>
 8005b50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b54:	f7fa fcc0 	bl	80004d8 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa fb02 	bl	8000168 <__aeabi_dsub>
 8005b64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b68:	9d07      	ldr	r5, [sp, #28]
 8005b6a:	f806 4b01 	strb.w	r4, [r6], #1
 8005b6e:	eba6 040a 	sub.w	r4, r6, sl
 8005b72:	42a5      	cmp	r5, r4
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	f040 8116 	bne.w	8005da8 <_dtoa_r+0x6e0>
 8005b7c:	f7fa faf6 	bl	800016c <__adddf3>
 8005b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b84:	4604      	mov	r4, r0
 8005b86:	460d      	mov	r5, r1
 8005b88:	f7fa ff36 	bl	80009f8 <__aeabi_dcmpgt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	f040 80f8 	bne.w	8005d82 <_dtoa_r+0x6ba>
 8005b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b96:	4620      	mov	r0, r4
 8005b98:	4629      	mov	r1, r5
 8005b9a:	f7fa ff05 	bl	80009a8 <__aeabi_dcmpeq>
 8005b9e:	b118      	cbz	r0, 8005ba8 <_dtoa_r+0x4e0>
 8005ba0:	f018 0f01 	tst.w	r8, #1
 8005ba4:	f040 80ed 	bne.w	8005d82 <_dtoa_r+0x6ba>
 8005ba8:	4649      	mov	r1, r9
 8005baa:	4658      	mov	r0, fp
 8005bac:	f000 fc92 	bl	80064d4 <_Bfree>
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	7033      	strb	r3, [r6, #0]
 8005bb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005bb6:	3701      	adds	r7, #1
 8005bb8:	601f      	str	r7, [r3, #0]
 8005bba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f000 8320 	beq.w	8006202 <_dtoa_r+0xb3a>
 8005bc2:	601e      	str	r6, [r3, #0]
 8005bc4:	e31d      	b.n	8006202 <_dtoa_r+0xb3a>
 8005bc6:	07e2      	lsls	r2, r4, #31
 8005bc8:	d505      	bpl.n	8005bd6 <_dtoa_r+0x50e>
 8005bca:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bce:	f7fa fc83 	bl	80004d8 <__aeabi_dmul>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	3601      	adds	r6, #1
 8005bd6:	1064      	asrs	r4, r4, #1
 8005bd8:	3508      	adds	r5, #8
 8005bda:	e73f      	b.n	8005a5c <_dtoa_r+0x394>
 8005bdc:	2602      	movs	r6, #2
 8005bde:	e742      	b.n	8005a66 <_dtoa_r+0x39e>
 8005be0:	9c07      	ldr	r4, [sp, #28]
 8005be2:	9704      	str	r7, [sp, #16]
 8005be4:	e761      	b.n	8005aaa <_dtoa_r+0x3e2>
 8005be6:	bf00      	nop
 8005be8:	08007f88 	.word	0x08007f88
 8005bec:	08007f60 	.word	0x08007f60
 8005bf0:	3ff00000 	.word	0x3ff00000
 8005bf4:	40240000 	.word	0x40240000
 8005bf8:	401c0000 	.word	0x401c0000
 8005bfc:	40140000 	.word	0x40140000
 8005c00:	4b70      	ldr	r3, [pc, #448]	@ (8005dc4 <_dtoa_r+0x6fc>)
 8005c02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005c08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c0c:	4454      	add	r4, sl
 8005c0e:	2900      	cmp	r1, #0
 8005c10:	d045      	beq.n	8005c9e <_dtoa_r+0x5d6>
 8005c12:	2000      	movs	r0, #0
 8005c14:	496c      	ldr	r1, [pc, #432]	@ (8005dc8 <_dtoa_r+0x700>)
 8005c16:	f7fa fd89 	bl	800072c <__aeabi_ddiv>
 8005c1a:	4633      	mov	r3, r6
 8005c1c:	462a      	mov	r2, r5
 8005c1e:	f7fa faa3 	bl	8000168 <__aeabi_dsub>
 8005c22:	4656      	mov	r6, sl
 8005c24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2c:	f7fa ff04 	bl	8000a38 <__aeabi_d2iz>
 8005c30:	4605      	mov	r5, r0
 8005c32:	f7fa fbe7 	bl	8000404 <__aeabi_i2d>
 8005c36:	4602      	mov	r2, r0
 8005c38:	460b      	mov	r3, r1
 8005c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3e:	f7fa fa93 	bl	8000168 <__aeabi_dsub>
 8005c42:	4602      	mov	r2, r0
 8005c44:	460b      	mov	r3, r1
 8005c46:	3530      	adds	r5, #48	@ 0x30
 8005c48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c50:	f806 5b01 	strb.w	r5, [r6], #1
 8005c54:	f7fa feb2 	bl	80009bc <__aeabi_dcmplt>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d163      	bne.n	8005d24 <_dtoa_r+0x65c>
 8005c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c60:	2000      	movs	r0, #0
 8005c62:	495a      	ldr	r1, [pc, #360]	@ (8005dcc <_dtoa_r+0x704>)
 8005c64:	f7fa fa80 	bl	8000168 <__aeabi_dsub>
 8005c68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c6c:	f7fa fea6 	bl	80009bc <__aeabi_dcmplt>
 8005c70:	2800      	cmp	r0, #0
 8005c72:	f040 8087 	bne.w	8005d84 <_dtoa_r+0x6bc>
 8005c76:	42a6      	cmp	r6, r4
 8005c78:	f43f af43 	beq.w	8005b02 <_dtoa_r+0x43a>
 8005c7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c80:	2200      	movs	r2, #0
 8005c82:	4b53      	ldr	r3, [pc, #332]	@ (8005dd0 <_dtoa_r+0x708>)
 8005c84:	f7fa fc28 	bl	80004d8 <__aeabi_dmul>
 8005c88:	2200      	movs	r2, #0
 8005c8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c92:	4b4f      	ldr	r3, [pc, #316]	@ (8005dd0 <_dtoa_r+0x708>)
 8005c94:	f7fa fc20 	bl	80004d8 <__aeabi_dmul>
 8005c98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c9c:	e7c4      	b.n	8005c28 <_dtoa_r+0x560>
 8005c9e:	4631      	mov	r1, r6
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	f7fa fc19 	bl	80004d8 <__aeabi_dmul>
 8005ca6:	4656      	mov	r6, sl
 8005ca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005cac:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa fec1 	bl	8000a38 <__aeabi_d2iz>
 8005cb6:	4605      	mov	r5, r0
 8005cb8:	f7fa fba4 	bl	8000404 <__aeabi_i2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cc4:	f7fa fa50 	bl	8000168 <__aeabi_dsub>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	3530      	adds	r5, #48	@ 0x30
 8005cce:	f806 5b01 	strb.w	r5, [r6], #1
 8005cd2:	42a6      	cmp	r6, r4
 8005cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cd8:	f04f 0200 	mov.w	r2, #0
 8005cdc:	d124      	bne.n	8005d28 <_dtoa_r+0x660>
 8005cde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ce2:	4b39      	ldr	r3, [pc, #228]	@ (8005dc8 <_dtoa_r+0x700>)
 8005ce4:	f7fa fa42 	bl	800016c <__adddf3>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cf0:	f7fa fe82 	bl	80009f8 <__aeabi_dcmpgt>
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	d145      	bne.n	8005d84 <_dtoa_r+0x6bc>
 8005cf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cfc:	2000      	movs	r0, #0
 8005cfe:	4932      	ldr	r1, [pc, #200]	@ (8005dc8 <_dtoa_r+0x700>)
 8005d00:	f7fa fa32 	bl	8000168 <__aeabi_dsub>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d0c:	f7fa fe56 	bl	80009bc <__aeabi_dcmplt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	f43f aef6 	beq.w	8005b02 <_dtoa_r+0x43a>
 8005d16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005d18:	1e73      	subs	r3, r6, #1
 8005d1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005d20:	2b30      	cmp	r3, #48	@ 0x30
 8005d22:	d0f8      	beq.n	8005d16 <_dtoa_r+0x64e>
 8005d24:	9f04      	ldr	r7, [sp, #16]
 8005d26:	e73f      	b.n	8005ba8 <_dtoa_r+0x4e0>
 8005d28:	4b29      	ldr	r3, [pc, #164]	@ (8005dd0 <_dtoa_r+0x708>)
 8005d2a:	f7fa fbd5 	bl	80004d8 <__aeabi_dmul>
 8005d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d32:	e7bc      	b.n	8005cae <_dtoa_r+0x5e6>
 8005d34:	d10c      	bne.n	8005d50 <_dtoa_r+0x688>
 8005d36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	4b25      	ldr	r3, [pc, #148]	@ (8005dd4 <_dtoa_r+0x70c>)
 8005d3e:	f7fa fbcb 	bl	80004d8 <__aeabi_dmul>
 8005d42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d46:	f7fa fe4d 	bl	80009e4 <__aeabi_dcmpge>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f000 815b 	beq.w	8006006 <_dtoa_r+0x93e>
 8005d50:	2400      	movs	r4, #0
 8005d52:	4625      	mov	r5, r4
 8005d54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d56:	4656      	mov	r6, sl
 8005d58:	43db      	mvns	r3, r3
 8005d5a:	9304      	str	r3, [sp, #16]
 8005d5c:	2700      	movs	r7, #0
 8005d5e:	4621      	mov	r1, r4
 8005d60:	4658      	mov	r0, fp
 8005d62:	f000 fbb7 	bl	80064d4 <_Bfree>
 8005d66:	2d00      	cmp	r5, #0
 8005d68:	d0dc      	beq.n	8005d24 <_dtoa_r+0x65c>
 8005d6a:	b12f      	cbz	r7, 8005d78 <_dtoa_r+0x6b0>
 8005d6c:	42af      	cmp	r7, r5
 8005d6e:	d003      	beq.n	8005d78 <_dtoa_r+0x6b0>
 8005d70:	4639      	mov	r1, r7
 8005d72:	4658      	mov	r0, fp
 8005d74:	f000 fbae 	bl	80064d4 <_Bfree>
 8005d78:	4629      	mov	r1, r5
 8005d7a:	4658      	mov	r0, fp
 8005d7c:	f000 fbaa 	bl	80064d4 <_Bfree>
 8005d80:	e7d0      	b.n	8005d24 <_dtoa_r+0x65c>
 8005d82:	9704      	str	r7, [sp, #16]
 8005d84:	4633      	mov	r3, r6
 8005d86:	461e      	mov	r6, r3
 8005d88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d8c:	2a39      	cmp	r2, #57	@ 0x39
 8005d8e:	d107      	bne.n	8005da0 <_dtoa_r+0x6d8>
 8005d90:	459a      	cmp	sl, r3
 8005d92:	d1f8      	bne.n	8005d86 <_dtoa_r+0x6be>
 8005d94:	9a04      	ldr	r2, [sp, #16]
 8005d96:	3201      	adds	r2, #1
 8005d98:	9204      	str	r2, [sp, #16]
 8005d9a:	2230      	movs	r2, #48	@ 0x30
 8005d9c:	f88a 2000 	strb.w	r2, [sl]
 8005da0:	781a      	ldrb	r2, [r3, #0]
 8005da2:	3201      	adds	r2, #1
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	e7bd      	b.n	8005d24 <_dtoa_r+0x65c>
 8005da8:	2200      	movs	r2, #0
 8005daa:	4b09      	ldr	r3, [pc, #36]	@ (8005dd0 <_dtoa_r+0x708>)
 8005dac:	f7fa fb94 	bl	80004d8 <__aeabi_dmul>
 8005db0:	2200      	movs	r2, #0
 8005db2:	2300      	movs	r3, #0
 8005db4:	4604      	mov	r4, r0
 8005db6:	460d      	mov	r5, r1
 8005db8:	f7fa fdf6 	bl	80009a8 <__aeabi_dcmpeq>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f43f aebc 	beq.w	8005b3a <_dtoa_r+0x472>
 8005dc2:	e6f1      	b.n	8005ba8 <_dtoa_r+0x4e0>
 8005dc4:	08007f88 	.word	0x08007f88
 8005dc8:	3fe00000 	.word	0x3fe00000
 8005dcc:	3ff00000 	.word	0x3ff00000
 8005dd0:	40240000 	.word	0x40240000
 8005dd4:	40140000 	.word	0x40140000
 8005dd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005dda:	2a00      	cmp	r2, #0
 8005ddc:	f000 80db 	beq.w	8005f96 <_dtoa_r+0x8ce>
 8005de0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005de2:	2a01      	cmp	r2, #1
 8005de4:	f300 80bf 	bgt.w	8005f66 <_dtoa_r+0x89e>
 8005de8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	f000 80b7 	beq.w	8005f5e <_dtoa_r+0x896>
 8005df0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005df4:	4646      	mov	r6, r8
 8005df6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005df8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	441a      	add	r2, r3
 8005dfe:	4658      	mov	r0, fp
 8005e00:	4498      	add	r8, r3
 8005e02:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e04:	f000 fc1a 	bl	800663c <__i2b>
 8005e08:	4605      	mov	r5, r0
 8005e0a:	b15e      	cbz	r6, 8005e24 <_dtoa_r+0x75c>
 8005e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dd08      	ble.n	8005e24 <_dtoa_r+0x75c>
 8005e12:	42b3      	cmp	r3, r6
 8005e14:	bfa8      	it	ge
 8005e16:	4633      	movge	r3, r6
 8005e18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e1a:	eba8 0803 	sub.w	r8, r8, r3
 8005e1e:	1af6      	subs	r6, r6, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e26:	b1f3      	cbz	r3, 8005e66 <_dtoa_r+0x79e>
 8005e28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f000 80b7 	beq.w	8005f9e <_dtoa_r+0x8d6>
 8005e30:	b18c      	cbz	r4, 8005e56 <_dtoa_r+0x78e>
 8005e32:	4629      	mov	r1, r5
 8005e34:	4622      	mov	r2, r4
 8005e36:	4658      	mov	r0, fp
 8005e38:	f000 fcbe 	bl	80067b8 <__pow5mult>
 8005e3c:	464a      	mov	r2, r9
 8005e3e:	4601      	mov	r1, r0
 8005e40:	4605      	mov	r5, r0
 8005e42:	4658      	mov	r0, fp
 8005e44:	f000 fc10 	bl	8006668 <__multiply>
 8005e48:	4649      	mov	r1, r9
 8005e4a:	9004      	str	r0, [sp, #16]
 8005e4c:	4658      	mov	r0, fp
 8005e4e:	f000 fb41 	bl	80064d4 <_Bfree>
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	4699      	mov	r9, r3
 8005e56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e58:	1b1a      	subs	r2, r3, r4
 8005e5a:	d004      	beq.n	8005e66 <_dtoa_r+0x79e>
 8005e5c:	4649      	mov	r1, r9
 8005e5e:	4658      	mov	r0, fp
 8005e60:	f000 fcaa 	bl	80067b8 <__pow5mult>
 8005e64:	4681      	mov	r9, r0
 8005e66:	2101      	movs	r1, #1
 8005e68:	4658      	mov	r0, fp
 8005e6a:	f000 fbe7 	bl	800663c <__i2b>
 8005e6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e70:	4604      	mov	r4, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 81c9 	beq.w	800620a <_dtoa_r+0xb42>
 8005e78:	461a      	mov	r2, r3
 8005e7a:	4601      	mov	r1, r0
 8005e7c:	4658      	mov	r0, fp
 8005e7e:	f000 fc9b 	bl	80067b8 <__pow5mult>
 8005e82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e84:	4604      	mov	r4, r0
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	f300 808f 	bgt.w	8005faa <_dtoa_r+0x8e2>
 8005e8c:	9b02      	ldr	r3, [sp, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	f040 8087 	bne.w	8005fa2 <_dtoa_r+0x8da>
 8005e94:	9b03      	ldr	r3, [sp, #12]
 8005e96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f040 8083 	bne.w	8005fa6 <_dtoa_r+0x8de>
 8005ea0:	9b03      	ldr	r3, [sp, #12]
 8005ea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ea6:	0d1b      	lsrs	r3, r3, #20
 8005ea8:	051b      	lsls	r3, r3, #20
 8005eaa:	b12b      	cbz	r3, 8005eb8 <_dtoa_r+0x7f0>
 8005eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eae:	f108 0801 	add.w	r8, r8, #1
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005eba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 81aa 	beq.w	8006216 <_dtoa_r+0xb4e>
 8005ec2:	6923      	ldr	r3, [r4, #16]
 8005ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ec8:	6918      	ldr	r0, [r3, #16]
 8005eca:	f000 fb6b 	bl	80065a4 <__hi0bits>
 8005ece:	f1c0 0020 	rsb	r0, r0, #32
 8005ed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ed4:	4418      	add	r0, r3
 8005ed6:	f010 001f 	ands.w	r0, r0, #31
 8005eda:	d071      	beq.n	8005fc0 <_dtoa_r+0x8f8>
 8005edc:	f1c0 0320 	rsb	r3, r0, #32
 8005ee0:	2b04      	cmp	r3, #4
 8005ee2:	dd65      	ble.n	8005fb0 <_dtoa_r+0x8e8>
 8005ee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ee6:	f1c0 001c 	rsb	r0, r0, #28
 8005eea:	4403      	add	r3, r0
 8005eec:	4480      	add	r8, r0
 8005eee:	4406      	add	r6, r0
 8005ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ef2:	f1b8 0f00 	cmp.w	r8, #0
 8005ef6:	dd05      	ble.n	8005f04 <_dtoa_r+0x83c>
 8005ef8:	4649      	mov	r1, r9
 8005efa:	4642      	mov	r2, r8
 8005efc:	4658      	mov	r0, fp
 8005efe:	f000 fcb5 	bl	800686c <__lshift>
 8005f02:	4681      	mov	r9, r0
 8005f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	dd05      	ble.n	8005f16 <_dtoa_r+0x84e>
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	4658      	mov	r0, fp
 8005f10:	f000 fcac 	bl	800686c <__lshift>
 8005f14:	4604      	mov	r4, r0
 8005f16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d053      	beq.n	8005fc4 <_dtoa_r+0x8fc>
 8005f1c:	4621      	mov	r1, r4
 8005f1e:	4648      	mov	r0, r9
 8005f20:	f000 fd10 	bl	8006944 <__mcmp>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	da4d      	bge.n	8005fc4 <_dtoa_r+0x8fc>
 8005f28:	1e7b      	subs	r3, r7, #1
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	9304      	str	r3, [sp, #16]
 8005f2e:	220a      	movs	r2, #10
 8005f30:	2300      	movs	r3, #0
 8005f32:	4658      	mov	r0, fp
 8005f34:	f000 faf0 	bl	8006518 <__multadd>
 8005f38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f3a:	4681      	mov	r9, r0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 816c 	beq.w	800621a <_dtoa_r+0xb52>
 8005f42:	2300      	movs	r3, #0
 8005f44:	4629      	mov	r1, r5
 8005f46:	220a      	movs	r2, #10
 8005f48:	4658      	mov	r0, fp
 8005f4a:	f000 fae5 	bl	8006518 <__multadd>
 8005f4e:	9b08      	ldr	r3, [sp, #32]
 8005f50:	4605      	mov	r5, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dc61      	bgt.n	800601a <_dtoa_r+0x952>
 8005f56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	dc3b      	bgt.n	8005fd4 <_dtoa_r+0x90c>
 8005f5c:	e05d      	b.n	800601a <_dtoa_r+0x952>
 8005f5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f60:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f64:	e746      	b.n	8005df4 <_dtoa_r+0x72c>
 8005f66:	9b07      	ldr	r3, [sp, #28]
 8005f68:	1e5c      	subs	r4, r3, #1
 8005f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f6c:	42a3      	cmp	r3, r4
 8005f6e:	bfbf      	itttt	lt
 8005f70:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f72:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8005f74:	1ae3      	sublt	r3, r4, r3
 8005f76:	18d2      	addlt	r2, r2, r3
 8005f78:	bfa8      	it	ge
 8005f7a:	1b1c      	subge	r4, r3, r4
 8005f7c:	9b07      	ldr	r3, [sp, #28]
 8005f7e:	bfbe      	ittt	lt
 8005f80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f82:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8005f84:	2400      	movlt	r4, #0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb5      	itete	lt
 8005f8a:	eba8 0603 	sublt.w	r6, r8, r3
 8005f8e:	4646      	movge	r6, r8
 8005f90:	2300      	movlt	r3, #0
 8005f92:	9b07      	ldrge	r3, [sp, #28]
 8005f94:	e730      	b.n	8005df8 <_dtoa_r+0x730>
 8005f96:	4646      	mov	r6, r8
 8005f98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f9c:	e735      	b.n	8005e0a <_dtoa_r+0x742>
 8005f9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fa0:	e75c      	b.n	8005e5c <_dtoa_r+0x794>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	e788      	b.n	8005eb8 <_dtoa_r+0x7f0>
 8005fa6:	9b02      	ldr	r3, [sp, #8]
 8005fa8:	e786      	b.n	8005eb8 <_dtoa_r+0x7f0>
 8005faa:	2300      	movs	r3, #0
 8005fac:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fae:	e788      	b.n	8005ec2 <_dtoa_r+0x7fa>
 8005fb0:	d09f      	beq.n	8005ef2 <_dtoa_r+0x82a>
 8005fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fb4:	331c      	adds	r3, #28
 8005fb6:	441a      	add	r2, r3
 8005fb8:	4498      	add	r8, r3
 8005fba:	441e      	add	r6, r3
 8005fbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fbe:	e798      	b.n	8005ef2 <_dtoa_r+0x82a>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	e7f6      	b.n	8005fb2 <_dtoa_r+0x8ea>
 8005fc4:	9b07      	ldr	r3, [sp, #28]
 8005fc6:	9704      	str	r7, [sp, #16]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc20      	bgt.n	800600e <_dtoa_r+0x946>
 8005fcc:	9308      	str	r3, [sp, #32]
 8005fce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	dd1e      	ble.n	8006012 <_dtoa_r+0x94a>
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f47f aebc 	bne.w	8005d54 <_dtoa_r+0x68c>
 8005fdc:	4621      	mov	r1, r4
 8005fde:	2205      	movs	r2, #5
 8005fe0:	4658      	mov	r0, fp
 8005fe2:	f000 fa99 	bl	8006518 <__multadd>
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	4604      	mov	r4, r0
 8005fea:	4648      	mov	r0, r9
 8005fec:	f000 fcaa 	bl	8006944 <__mcmp>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	f77f aeaf 	ble.w	8005d54 <_dtoa_r+0x68c>
 8005ff6:	2331      	movs	r3, #49	@ 0x31
 8005ff8:	4656      	mov	r6, sl
 8005ffa:	f806 3b01 	strb.w	r3, [r6], #1
 8005ffe:	9b04      	ldr	r3, [sp, #16]
 8006000:	3301      	adds	r3, #1
 8006002:	9304      	str	r3, [sp, #16]
 8006004:	e6aa      	b.n	8005d5c <_dtoa_r+0x694>
 8006006:	9c07      	ldr	r4, [sp, #28]
 8006008:	9704      	str	r7, [sp, #16]
 800600a:	4625      	mov	r5, r4
 800600c:	e7f3      	b.n	8005ff6 <_dtoa_r+0x92e>
 800600e:	9b07      	ldr	r3, [sp, #28]
 8006010:	9308      	str	r3, [sp, #32]
 8006012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8104 	beq.w	8006222 <_dtoa_r+0xb5a>
 800601a:	2e00      	cmp	r6, #0
 800601c:	dd05      	ble.n	800602a <_dtoa_r+0x962>
 800601e:	4629      	mov	r1, r5
 8006020:	4632      	mov	r2, r6
 8006022:	4658      	mov	r0, fp
 8006024:	f000 fc22 	bl	800686c <__lshift>
 8006028:	4605      	mov	r5, r0
 800602a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800602c:	2b00      	cmp	r3, #0
 800602e:	d05a      	beq.n	80060e6 <_dtoa_r+0xa1e>
 8006030:	4658      	mov	r0, fp
 8006032:	6869      	ldr	r1, [r5, #4]
 8006034:	f000 fa0e 	bl	8006454 <_Balloc>
 8006038:	4606      	mov	r6, r0
 800603a:	b928      	cbnz	r0, 8006048 <_dtoa_r+0x980>
 800603c:	4602      	mov	r2, r0
 800603e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006042:	4b83      	ldr	r3, [pc, #524]	@ (8006250 <_dtoa_r+0xb88>)
 8006044:	f7ff bb54 	b.w	80056f0 <_dtoa_r+0x28>
 8006048:	692a      	ldr	r2, [r5, #16]
 800604a:	f105 010c 	add.w	r1, r5, #12
 800604e:	3202      	adds	r2, #2
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	300c      	adds	r0, #12
 8006054:	f000 ffa8 	bl	8006fa8 <memcpy>
 8006058:	2201      	movs	r2, #1
 800605a:	4631      	mov	r1, r6
 800605c:	4658      	mov	r0, fp
 800605e:	f000 fc05 	bl	800686c <__lshift>
 8006062:	462f      	mov	r7, r5
 8006064:	4605      	mov	r5, r0
 8006066:	f10a 0301 	add.w	r3, sl, #1
 800606a:	9307      	str	r3, [sp, #28]
 800606c:	9b08      	ldr	r3, [sp, #32]
 800606e:	4453      	add	r3, sl
 8006070:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006072:	9b02      	ldr	r3, [sp, #8]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	930a      	str	r3, [sp, #40]	@ 0x28
 800607a:	9b07      	ldr	r3, [sp, #28]
 800607c:	4621      	mov	r1, r4
 800607e:	3b01      	subs	r3, #1
 8006080:	4648      	mov	r0, r9
 8006082:	9302      	str	r3, [sp, #8]
 8006084:	f7ff fa97 	bl	80055b6 <quorem>
 8006088:	4639      	mov	r1, r7
 800608a:	9008      	str	r0, [sp, #32]
 800608c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006090:	4648      	mov	r0, r9
 8006092:	f000 fc57 	bl	8006944 <__mcmp>
 8006096:	462a      	mov	r2, r5
 8006098:	9009      	str	r0, [sp, #36]	@ 0x24
 800609a:	4621      	mov	r1, r4
 800609c:	4658      	mov	r0, fp
 800609e:	f000 fc6d 	bl	800697c <__mdiff>
 80060a2:	68c2      	ldr	r2, [r0, #12]
 80060a4:	4606      	mov	r6, r0
 80060a6:	bb02      	cbnz	r2, 80060ea <_dtoa_r+0xa22>
 80060a8:	4601      	mov	r1, r0
 80060aa:	4648      	mov	r0, r9
 80060ac:	f000 fc4a 	bl	8006944 <__mcmp>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4631      	mov	r1, r6
 80060b4:	4658      	mov	r0, fp
 80060b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80060b8:	f000 fa0c 	bl	80064d4 <_Bfree>
 80060bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060c0:	9e07      	ldr	r6, [sp, #28]
 80060c2:	ea43 0102 	orr.w	r1, r3, r2
 80060c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060c8:	4319      	orrs	r1, r3
 80060ca:	d110      	bne.n	80060ee <_dtoa_r+0xa26>
 80060cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060d0:	d029      	beq.n	8006126 <_dtoa_r+0xa5e>
 80060d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	dd02      	ble.n	80060de <_dtoa_r+0xa16>
 80060d8:	9b08      	ldr	r3, [sp, #32]
 80060da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80060de:	9b02      	ldr	r3, [sp, #8]
 80060e0:	f883 8000 	strb.w	r8, [r3]
 80060e4:	e63b      	b.n	8005d5e <_dtoa_r+0x696>
 80060e6:	4628      	mov	r0, r5
 80060e8:	e7bb      	b.n	8006062 <_dtoa_r+0x99a>
 80060ea:	2201      	movs	r2, #1
 80060ec:	e7e1      	b.n	80060b2 <_dtoa_r+0x9ea>
 80060ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	db04      	blt.n	80060fe <_dtoa_r+0xa36>
 80060f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80060f6:	430b      	orrs	r3, r1
 80060f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060fa:	430b      	orrs	r3, r1
 80060fc:	d120      	bne.n	8006140 <_dtoa_r+0xa78>
 80060fe:	2a00      	cmp	r2, #0
 8006100:	dded      	ble.n	80060de <_dtoa_r+0xa16>
 8006102:	4649      	mov	r1, r9
 8006104:	2201      	movs	r2, #1
 8006106:	4658      	mov	r0, fp
 8006108:	f000 fbb0 	bl	800686c <__lshift>
 800610c:	4621      	mov	r1, r4
 800610e:	4681      	mov	r9, r0
 8006110:	f000 fc18 	bl	8006944 <__mcmp>
 8006114:	2800      	cmp	r0, #0
 8006116:	dc03      	bgt.n	8006120 <_dtoa_r+0xa58>
 8006118:	d1e1      	bne.n	80060de <_dtoa_r+0xa16>
 800611a:	f018 0f01 	tst.w	r8, #1
 800611e:	d0de      	beq.n	80060de <_dtoa_r+0xa16>
 8006120:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006124:	d1d8      	bne.n	80060d8 <_dtoa_r+0xa10>
 8006126:	2339      	movs	r3, #57	@ 0x39
 8006128:	9a02      	ldr	r2, [sp, #8]
 800612a:	7013      	strb	r3, [r2, #0]
 800612c:	4633      	mov	r3, r6
 800612e:	461e      	mov	r6, r3
 8006130:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006134:	3b01      	subs	r3, #1
 8006136:	2a39      	cmp	r2, #57	@ 0x39
 8006138:	d052      	beq.n	80061e0 <_dtoa_r+0xb18>
 800613a:	3201      	adds	r2, #1
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	e60e      	b.n	8005d5e <_dtoa_r+0x696>
 8006140:	2a00      	cmp	r2, #0
 8006142:	dd07      	ble.n	8006154 <_dtoa_r+0xa8c>
 8006144:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006148:	d0ed      	beq.n	8006126 <_dtoa_r+0xa5e>
 800614a:	9a02      	ldr	r2, [sp, #8]
 800614c:	f108 0301 	add.w	r3, r8, #1
 8006150:	7013      	strb	r3, [r2, #0]
 8006152:	e604      	b.n	8005d5e <_dtoa_r+0x696>
 8006154:	9b07      	ldr	r3, [sp, #28]
 8006156:	9a07      	ldr	r2, [sp, #28]
 8006158:	f803 8c01 	strb.w	r8, [r3, #-1]
 800615c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800615e:	4293      	cmp	r3, r2
 8006160:	d028      	beq.n	80061b4 <_dtoa_r+0xaec>
 8006162:	4649      	mov	r1, r9
 8006164:	2300      	movs	r3, #0
 8006166:	220a      	movs	r2, #10
 8006168:	4658      	mov	r0, fp
 800616a:	f000 f9d5 	bl	8006518 <__multadd>
 800616e:	42af      	cmp	r7, r5
 8006170:	4681      	mov	r9, r0
 8006172:	f04f 0300 	mov.w	r3, #0
 8006176:	f04f 020a 	mov.w	r2, #10
 800617a:	4639      	mov	r1, r7
 800617c:	4658      	mov	r0, fp
 800617e:	d107      	bne.n	8006190 <_dtoa_r+0xac8>
 8006180:	f000 f9ca 	bl	8006518 <__multadd>
 8006184:	4607      	mov	r7, r0
 8006186:	4605      	mov	r5, r0
 8006188:	9b07      	ldr	r3, [sp, #28]
 800618a:	3301      	adds	r3, #1
 800618c:	9307      	str	r3, [sp, #28]
 800618e:	e774      	b.n	800607a <_dtoa_r+0x9b2>
 8006190:	f000 f9c2 	bl	8006518 <__multadd>
 8006194:	4629      	mov	r1, r5
 8006196:	4607      	mov	r7, r0
 8006198:	2300      	movs	r3, #0
 800619a:	220a      	movs	r2, #10
 800619c:	4658      	mov	r0, fp
 800619e:	f000 f9bb 	bl	8006518 <__multadd>
 80061a2:	4605      	mov	r5, r0
 80061a4:	e7f0      	b.n	8006188 <_dtoa_r+0xac0>
 80061a6:	9b08      	ldr	r3, [sp, #32]
 80061a8:	2700      	movs	r7, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	bfcc      	ite	gt
 80061ae:	461e      	movgt	r6, r3
 80061b0:	2601      	movle	r6, #1
 80061b2:	4456      	add	r6, sl
 80061b4:	4649      	mov	r1, r9
 80061b6:	2201      	movs	r2, #1
 80061b8:	4658      	mov	r0, fp
 80061ba:	f000 fb57 	bl	800686c <__lshift>
 80061be:	4621      	mov	r1, r4
 80061c0:	4681      	mov	r9, r0
 80061c2:	f000 fbbf 	bl	8006944 <__mcmp>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	dcb0      	bgt.n	800612c <_dtoa_r+0xa64>
 80061ca:	d102      	bne.n	80061d2 <_dtoa_r+0xb0a>
 80061cc:	f018 0f01 	tst.w	r8, #1
 80061d0:	d1ac      	bne.n	800612c <_dtoa_r+0xa64>
 80061d2:	4633      	mov	r3, r6
 80061d4:	461e      	mov	r6, r3
 80061d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061da:	2a30      	cmp	r2, #48	@ 0x30
 80061dc:	d0fa      	beq.n	80061d4 <_dtoa_r+0xb0c>
 80061de:	e5be      	b.n	8005d5e <_dtoa_r+0x696>
 80061e0:	459a      	cmp	sl, r3
 80061e2:	d1a4      	bne.n	800612e <_dtoa_r+0xa66>
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	3301      	adds	r3, #1
 80061e8:	9304      	str	r3, [sp, #16]
 80061ea:	2331      	movs	r3, #49	@ 0x31
 80061ec:	f88a 3000 	strb.w	r3, [sl]
 80061f0:	e5b5      	b.n	8005d5e <_dtoa_r+0x696>
 80061f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006254 <_dtoa_r+0xb8c>
 80061f8:	b11b      	cbz	r3, 8006202 <_dtoa_r+0xb3a>
 80061fa:	f10a 0308 	add.w	r3, sl, #8
 80061fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006200:	6013      	str	r3, [r2, #0]
 8006202:	4650      	mov	r0, sl
 8006204:	b017      	add	sp, #92	@ 0x5c
 8006206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800620c:	2b01      	cmp	r3, #1
 800620e:	f77f ae3d 	ble.w	8005e8c <_dtoa_r+0x7c4>
 8006212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006214:	930a      	str	r3, [sp, #40]	@ 0x28
 8006216:	2001      	movs	r0, #1
 8006218:	e65b      	b.n	8005ed2 <_dtoa_r+0x80a>
 800621a:	9b08      	ldr	r3, [sp, #32]
 800621c:	2b00      	cmp	r3, #0
 800621e:	f77f aed6 	ble.w	8005fce <_dtoa_r+0x906>
 8006222:	4656      	mov	r6, sl
 8006224:	4621      	mov	r1, r4
 8006226:	4648      	mov	r0, r9
 8006228:	f7ff f9c5 	bl	80055b6 <quorem>
 800622c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006230:	9b08      	ldr	r3, [sp, #32]
 8006232:	f806 8b01 	strb.w	r8, [r6], #1
 8006236:	eba6 020a 	sub.w	r2, r6, sl
 800623a:	4293      	cmp	r3, r2
 800623c:	ddb3      	ble.n	80061a6 <_dtoa_r+0xade>
 800623e:	4649      	mov	r1, r9
 8006240:	2300      	movs	r3, #0
 8006242:	220a      	movs	r2, #10
 8006244:	4658      	mov	r0, fp
 8006246:	f000 f967 	bl	8006518 <__multadd>
 800624a:	4681      	mov	r9, r0
 800624c:	e7ea      	b.n	8006224 <_dtoa_r+0xb5c>
 800624e:	bf00      	nop
 8006250:	08007eea 	.word	0x08007eea
 8006254:	08007e6e 	.word	0x08007e6e

08006258 <_free_r>:
 8006258:	b538      	push	{r3, r4, r5, lr}
 800625a:	4605      	mov	r5, r0
 800625c:	2900      	cmp	r1, #0
 800625e:	d040      	beq.n	80062e2 <_free_r+0x8a>
 8006260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006264:	1f0c      	subs	r4, r1, #4
 8006266:	2b00      	cmp	r3, #0
 8006268:	bfb8      	it	lt
 800626a:	18e4      	addlt	r4, r4, r3
 800626c:	f000 f8e6 	bl	800643c <__malloc_lock>
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <_free_r+0x8c>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	b933      	cbnz	r3, 8006284 <_free_r+0x2c>
 8006276:	6063      	str	r3, [r4, #4]
 8006278:	6014      	str	r4, [r2, #0]
 800627a:	4628      	mov	r0, r5
 800627c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006280:	f000 b8e2 	b.w	8006448 <__malloc_unlock>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d908      	bls.n	800629a <_free_r+0x42>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	1821      	adds	r1, r4, r0
 800628c:	428b      	cmp	r3, r1
 800628e:	bf01      	itttt	eq
 8006290:	6819      	ldreq	r1, [r3, #0]
 8006292:	685b      	ldreq	r3, [r3, #4]
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	e7ed      	b.n	8006276 <_free_r+0x1e>
 800629a:	461a      	mov	r2, r3
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	b10b      	cbz	r3, 80062a4 <_free_r+0x4c>
 80062a0:	42a3      	cmp	r3, r4
 80062a2:	d9fa      	bls.n	800629a <_free_r+0x42>
 80062a4:	6811      	ldr	r1, [r2, #0]
 80062a6:	1850      	adds	r0, r2, r1
 80062a8:	42a0      	cmp	r0, r4
 80062aa:	d10b      	bne.n	80062c4 <_free_r+0x6c>
 80062ac:	6820      	ldr	r0, [r4, #0]
 80062ae:	4401      	add	r1, r0
 80062b0:	1850      	adds	r0, r2, r1
 80062b2:	4283      	cmp	r3, r0
 80062b4:	6011      	str	r1, [r2, #0]
 80062b6:	d1e0      	bne.n	800627a <_free_r+0x22>
 80062b8:	6818      	ldr	r0, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	4408      	add	r0, r1
 80062be:	6010      	str	r0, [r2, #0]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	e7da      	b.n	800627a <_free_r+0x22>
 80062c4:	d902      	bls.n	80062cc <_free_r+0x74>
 80062c6:	230c      	movs	r3, #12
 80062c8:	602b      	str	r3, [r5, #0]
 80062ca:	e7d6      	b.n	800627a <_free_r+0x22>
 80062cc:	6820      	ldr	r0, [r4, #0]
 80062ce:	1821      	adds	r1, r4, r0
 80062d0:	428b      	cmp	r3, r1
 80062d2:	bf01      	itttt	eq
 80062d4:	6819      	ldreq	r1, [r3, #0]
 80062d6:	685b      	ldreq	r3, [r3, #4]
 80062d8:	1809      	addeq	r1, r1, r0
 80062da:	6021      	streq	r1, [r4, #0]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	6054      	str	r4, [r2, #4]
 80062e0:	e7cb      	b.n	800627a <_free_r+0x22>
 80062e2:	bd38      	pop	{r3, r4, r5, pc}
 80062e4:	20000860 	.word	0x20000860

080062e8 <malloc>:
 80062e8:	4b02      	ldr	r3, [pc, #8]	@ (80062f4 <malloc+0xc>)
 80062ea:	4601      	mov	r1, r0
 80062ec:	6818      	ldr	r0, [r3, #0]
 80062ee:	f000 b825 	b.w	800633c <_malloc_r>
 80062f2:	bf00      	nop
 80062f4:	20000020 	.word	0x20000020

080062f8 <sbrk_aligned>:
 80062f8:	b570      	push	{r4, r5, r6, lr}
 80062fa:	4e0f      	ldr	r6, [pc, #60]	@ (8006338 <sbrk_aligned+0x40>)
 80062fc:	460c      	mov	r4, r1
 80062fe:	6831      	ldr	r1, [r6, #0]
 8006300:	4605      	mov	r5, r0
 8006302:	b911      	cbnz	r1, 800630a <sbrk_aligned+0x12>
 8006304:	f000 fe40 	bl	8006f88 <_sbrk_r>
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	4621      	mov	r1, r4
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fe3b 	bl	8006f88 <_sbrk_r>
 8006312:	1c43      	adds	r3, r0, #1
 8006314:	d103      	bne.n	800631e <sbrk_aligned+0x26>
 8006316:	f04f 34ff 	mov.w	r4, #4294967295
 800631a:	4620      	mov	r0, r4
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d0f8      	beq.n	800631a <sbrk_aligned+0x22>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fe2c 	bl	8006f88 <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d1f2      	bne.n	800631a <sbrk_aligned+0x22>
 8006334:	e7ef      	b.n	8006316 <sbrk_aligned+0x1e>
 8006336:	bf00      	nop
 8006338:	2000085c 	.word	0x2000085c

0800633c <_malloc_r>:
 800633c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006340:	1ccd      	adds	r5, r1, #3
 8006342:	f025 0503 	bic.w	r5, r5, #3
 8006346:	3508      	adds	r5, #8
 8006348:	2d0c      	cmp	r5, #12
 800634a:	bf38      	it	cc
 800634c:	250c      	movcc	r5, #12
 800634e:	2d00      	cmp	r5, #0
 8006350:	4606      	mov	r6, r0
 8006352:	db01      	blt.n	8006358 <_malloc_r+0x1c>
 8006354:	42a9      	cmp	r1, r5
 8006356:	d904      	bls.n	8006362 <_malloc_r+0x26>
 8006358:	230c      	movs	r3, #12
 800635a:	6033      	str	r3, [r6, #0]
 800635c:	2000      	movs	r0, #0
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006438 <_malloc_r+0xfc>
 8006366:	f000 f869 	bl	800643c <__malloc_lock>
 800636a:	f8d8 3000 	ldr.w	r3, [r8]
 800636e:	461c      	mov	r4, r3
 8006370:	bb44      	cbnz	r4, 80063c4 <_malloc_r+0x88>
 8006372:	4629      	mov	r1, r5
 8006374:	4630      	mov	r0, r6
 8006376:	f7ff ffbf 	bl	80062f8 <sbrk_aligned>
 800637a:	1c43      	adds	r3, r0, #1
 800637c:	4604      	mov	r4, r0
 800637e:	d158      	bne.n	8006432 <_malloc_r+0xf6>
 8006380:	f8d8 4000 	ldr.w	r4, [r8]
 8006384:	4627      	mov	r7, r4
 8006386:	2f00      	cmp	r7, #0
 8006388:	d143      	bne.n	8006412 <_malloc_r+0xd6>
 800638a:	2c00      	cmp	r4, #0
 800638c:	d04b      	beq.n	8006426 <_malloc_r+0xea>
 800638e:	6823      	ldr	r3, [r4, #0]
 8006390:	4639      	mov	r1, r7
 8006392:	4630      	mov	r0, r6
 8006394:	eb04 0903 	add.w	r9, r4, r3
 8006398:	f000 fdf6 	bl	8006f88 <_sbrk_r>
 800639c:	4581      	cmp	r9, r0
 800639e:	d142      	bne.n	8006426 <_malloc_r+0xea>
 80063a0:	6821      	ldr	r1, [r4, #0]
 80063a2:	4630      	mov	r0, r6
 80063a4:	1a6d      	subs	r5, r5, r1
 80063a6:	4629      	mov	r1, r5
 80063a8:	f7ff ffa6 	bl	80062f8 <sbrk_aligned>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d03a      	beq.n	8006426 <_malloc_r+0xea>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	442b      	add	r3, r5
 80063b4:	6023      	str	r3, [r4, #0]
 80063b6:	f8d8 3000 	ldr.w	r3, [r8]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	bb62      	cbnz	r2, 8006418 <_malloc_r+0xdc>
 80063be:	f8c8 7000 	str.w	r7, [r8]
 80063c2:	e00f      	b.n	80063e4 <_malloc_r+0xa8>
 80063c4:	6822      	ldr	r2, [r4, #0]
 80063c6:	1b52      	subs	r2, r2, r5
 80063c8:	d420      	bmi.n	800640c <_malloc_r+0xd0>
 80063ca:	2a0b      	cmp	r2, #11
 80063cc:	d917      	bls.n	80063fe <_malloc_r+0xc2>
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	42a3      	cmp	r3, r4
 80063d2:	6025      	str	r5, [r4, #0]
 80063d4:	bf18      	it	ne
 80063d6:	6059      	strne	r1, [r3, #4]
 80063d8:	6863      	ldr	r3, [r4, #4]
 80063da:	bf08      	it	eq
 80063dc:	f8c8 1000 	streq.w	r1, [r8]
 80063e0:	5162      	str	r2, [r4, r5]
 80063e2:	604b      	str	r3, [r1, #4]
 80063e4:	4630      	mov	r0, r6
 80063e6:	f000 f82f 	bl	8006448 <__malloc_unlock>
 80063ea:	f104 000b 	add.w	r0, r4, #11
 80063ee:	1d23      	adds	r3, r4, #4
 80063f0:	f020 0007 	bic.w	r0, r0, #7
 80063f4:	1ac2      	subs	r2, r0, r3
 80063f6:	bf1c      	itt	ne
 80063f8:	1a1b      	subne	r3, r3, r0
 80063fa:	50a3      	strne	r3, [r4, r2]
 80063fc:	e7af      	b.n	800635e <_malloc_r+0x22>
 80063fe:	6862      	ldr	r2, [r4, #4]
 8006400:	42a3      	cmp	r3, r4
 8006402:	bf0c      	ite	eq
 8006404:	f8c8 2000 	streq.w	r2, [r8]
 8006408:	605a      	strne	r2, [r3, #4]
 800640a:	e7eb      	b.n	80063e4 <_malloc_r+0xa8>
 800640c:	4623      	mov	r3, r4
 800640e:	6864      	ldr	r4, [r4, #4]
 8006410:	e7ae      	b.n	8006370 <_malloc_r+0x34>
 8006412:	463c      	mov	r4, r7
 8006414:	687f      	ldr	r7, [r7, #4]
 8006416:	e7b6      	b.n	8006386 <_malloc_r+0x4a>
 8006418:	461a      	mov	r2, r3
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	42a3      	cmp	r3, r4
 800641e:	d1fb      	bne.n	8006418 <_malloc_r+0xdc>
 8006420:	2300      	movs	r3, #0
 8006422:	6053      	str	r3, [r2, #4]
 8006424:	e7de      	b.n	80063e4 <_malloc_r+0xa8>
 8006426:	230c      	movs	r3, #12
 8006428:	4630      	mov	r0, r6
 800642a:	6033      	str	r3, [r6, #0]
 800642c:	f000 f80c 	bl	8006448 <__malloc_unlock>
 8006430:	e794      	b.n	800635c <_malloc_r+0x20>
 8006432:	6005      	str	r5, [r0, #0]
 8006434:	e7d6      	b.n	80063e4 <_malloc_r+0xa8>
 8006436:	bf00      	nop
 8006438:	20000860 	.word	0x20000860

0800643c <__malloc_lock>:
 800643c:	4801      	ldr	r0, [pc, #4]	@ (8006444 <__malloc_lock+0x8>)
 800643e:	f7ff b8aa 	b.w	8005596 <__retarget_lock_acquire_recursive>
 8006442:	bf00      	nop
 8006444:	20000858 	.word	0x20000858

08006448 <__malloc_unlock>:
 8006448:	4801      	ldr	r0, [pc, #4]	@ (8006450 <__malloc_unlock+0x8>)
 800644a:	f7ff b8a5 	b.w	8005598 <__retarget_lock_release_recursive>
 800644e:	bf00      	nop
 8006450:	20000858 	.word	0x20000858

08006454 <_Balloc>:
 8006454:	b570      	push	{r4, r5, r6, lr}
 8006456:	69c6      	ldr	r6, [r0, #28]
 8006458:	4604      	mov	r4, r0
 800645a:	460d      	mov	r5, r1
 800645c:	b976      	cbnz	r6, 800647c <_Balloc+0x28>
 800645e:	2010      	movs	r0, #16
 8006460:	f7ff ff42 	bl	80062e8 <malloc>
 8006464:	4602      	mov	r2, r0
 8006466:	61e0      	str	r0, [r4, #28]
 8006468:	b920      	cbnz	r0, 8006474 <_Balloc+0x20>
 800646a:	216b      	movs	r1, #107	@ 0x6b
 800646c:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <_Balloc+0x78>)
 800646e:	4818      	ldr	r0, [pc, #96]	@ (80064d0 <_Balloc+0x7c>)
 8006470:	f000 fda8 	bl	8006fc4 <__assert_func>
 8006474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006478:	6006      	str	r6, [r0, #0]
 800647a:	60c6      	str	r6, [r0, #12]
 800647c:	69e6      	ldr	r6, [r4, #28]
 800647e:	68f3      	ldr	r3, [r6, #12]
 8006480:	b183      	cbz	r3, 80064a4 <_Balloc+0x50>
 8006482:	69e3      	ldr	r3, [r4, #28]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800648a:	b9b8      	cbnz	r0, 80064bc <_Balloc+0x68>
 800648c:	2101      	movs	r1, #1
 800648e:	fa01 f605 	lsl.w	r6, r1, r5
 8006492:	1d72      	adds	r2, r6, #5
 8006494:	4620      	mov	r0, r4
 8006496:	0092      	lsls	r2, r2, #2
 8006498:	f000 fdb2 	bl	8007000 <_calloc_r>
 800649c:	b160      	cbz	r0, 80064b8 <_Balloc+0x64>
 800649e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064a2:	e00e      	b.n	80064c2 <_Balloc+0x6e>
 80064a4:	2221      	movs	r2, #33	@ 0x21
 80064a6:	2104      	movs	r1, #4
 80064a8:	4620      	mov	r0, r4
 80064aa:	f000 fda9 	bl	8007000 <_calloc_r>
 80064ae:	69e3      	ldr	r3, [r4, #28]
 80064b0:	60f0      	str	r0, [r6, #12]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d1e4      	bne.n	8006482 <_Balloc+0x2e>
 80064b8:	2000      	movs	r0, #0
 80064ba:	bd70      	pop	{r4, r5, r6, pc}
 80064bc:	6802      	ldr	r2, [r0, #0]
 80064be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064c2:	2300      	movs	r3, #0
 80064c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064c8:	e7f7      	b.n	80064ba <_Balloc+0x66>
 80064ca:	bf00      	nop
 80064cc:	08007e7b 	.word	0x08007e7b
 80064d0:	08007efb 	.word	0x08007efb

080064d4 <_Bfree>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	69c6      	ldr	r6, [r0, #28]
 80064d8:	4605      	mov	r5, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	b976      	cbnz	r6, 80064fc <_Bfree+0x28>
 80064de:	2010      	movs	r0, #16
 80064e0:	f7ff ff02 	bl	80062e8 <malloc>
 80064e4:	4602      	mov	r2, r0
 80064e6:	61e8      	str	r0, [r5, #28]
 80064e8:	b920      	cbnz	r0, 80064f4 <_Bfree+0x20>
 80064ea:	218f      	movs	r1, #143	@ 0x8f
 80064ec:	4b08      	ldr	r3, [pc, #32]	@ (8006510 <_Bfree+0x3c>)
 80064ee:	4809      	ldr	r0, [pc, #36]	@ (8006514 <_Bfree+0x40>)
 80064f0:	f000 fd68 	bl	8006fc4 <__assert_func>
 80064f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064f8:	6006      	str	r6, [r0, #0]
 80064fa:	60c6      	str	r6, [r0, #12]
 80064fc:	b13c      	cbz	r4, 800650e <_Bfree+0x3a>
 80064fe:	69eb      	ldr	r3, [r5, #28]
 8006500:	6862      	ldr	r2, [r4, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006508:	6021      	str	r1, [r4, #0]
 800650a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800650e:	bd70      	pop	{r4, r5, r6, pc}
 8006510:	08007e7b 	.word	0x08007e7b
 8006514:	08007efb 	.word	0x08007efb

08006518 <__multadd>:
 8006518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800651c:	4607      	mov	r7, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461e      	mov	r6, r3
 8006522:	2000      	movs	r0, #0
 8006524:	690d      	ldr	r5, [r1, #16]
 8006526:	f101 0c14 	add.w	ip, r1, #20
 800652a:	f8dc 3000 	ldr.w	r3, [ip]
 800652e:	3001      	adds	r0, #1
 8006530:	b299      	uxth	r1, r3
 8006532:	fb02 6101 	mla	r1, r2, r1, r6
 8006536:	0c1e      	lsrs	r6, r3, #16
 8006538:	0c0b      	lsrs	r3, r1, #16
 800653a:	fb02 3306 	mla	r3, r2, r6, r3
 800653e:	b289      	uxth	r1, r1
 8006540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006544:	4285      	cmp	r5, r0
 8006546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800654a:	f84c 1b04 	str.w	r1, [ip], #4
 800654e:	dcec      	bgt.n	800652a <__multadd+0x12>
 8006550:	b30e      	cbz	r6, 8006596 <__multadd+0x7e>
 8006552:	68a3      	ldr	r3, [r4, #8]
 8006554:	42ab      	cmp	r3, r5
 8006556:	dc19      	bgt.n	800658c <__multadd+0x74>
 8006558:	6861      	ldr	r1, [r4, #4]
 800655a:	4638      	mov	r0, r7
 800655c:	3101      	adds	r1, #1
 800655e:	f7ff ff79 	bl	8006454 <_Balloc>
 8006562:	4680      	mov	r8, r0
 8006564:	b928      	cbnz	r0, 8006572 <__multadd+0x5a>
 8006566:	4602      	mov	r2, r0
 8006568:	21ba      	movs	r1, #186	@ 0xba
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <__multadd+0x84>)
 800656c:	480c      	ldr	r0, [pc, #48]	@ (80065a0 <__multadd+0x88>)
 800656e:	f000 fd29 	bl	8006fc4 <__assert_func>
 8006572:	6922      	ldr	r2, [r4, #16]
 8006574:	f104 010c 	add.w	r1, r4, #12
 8006578:	3202      	adds	r2, #2
 800657a:	0092      	lsls	r2, r2, #2
 800657c:	300c      	adds	r0, #12
 800657e:	f000 fd13 	bl	8006fa8 <memcpy>
 8006582:	4621      	mov	r1, r4
 8006584:	4638      	mov	r0, r7
 8006586:	f7ff ffa5 	bl	80064d4 <_Bfree>
 800658a:	4644      	mov	r4, r8
 800658c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006590:	3501      	adds	r5, #1
 8006592:	615e      	str	r6, [r3, #20]
 8006594:	6125      	str	r5, [r4, #16]
 8006596:	4620      	mov	r0, r4
 8006598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800659c:	08007eea 	.word	0x08007eea
 80065a0:	08007efb 	.word	0x08007efb

080065a4 <__hi0bits>:
 80065a4:	4603      	mov	r3, r0
 80065a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065aa:	bf3a      	itte	cc
 80065ac:	0403      	lslcc	r3, r0, #16
 80065ae:	2010      	movcc	r0, #16
 80065b0:	2000      	movcs	r0, #0
 80065b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065b6:	bf3c      	itt	cc
 80065b8:	021b      	lslcc	r3, r3, #8
 80065ba:	3008      	addcc	r0, #8
 80065bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065c0:	bf3c      	itt	cc
 80065c2:	011b      	lslcc	r3, r3, #4
 80065c4:	3004      	addcc	r0, #4
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065ca:	bf3c      	itt	cc
 80065cc:	009b      	lslcc	r3, r3, #2
 80065ce:	3002      	addcc	r0, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	db05      	blt.n	80065e0 <__hi0bits+0x3c>
 80065d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80065d8:	f100 0001 	add.w	r0, r0, #1
 80065dc:	bf08      	it	eq
 80065de:	2020      	moveq	r0, #32
 80065e0:	4770      	bx	lr

080065e2 <__lo0bits>:
 80065e2:	6803      	ldr	r3, [r0, #0]
 80065e4:	4602      	mov	r2, r0
 80065e6:	f013 0007 	ands.w	r0, r3, #7
 80065ea:	d00b      	beq.n	8006604 <__lo0bits+0x22>
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d421      	bmi.n	8006634 <__lo0bits+0x52>
 80065f0:	0798      	lsls	r0, r3, #30
 80065f2:	bf49      	itett	mi
 80065f4:	085b      	lsrmi	r3, r3, #1
 80065f6:	089b      	lsrpl	r3, r3, #2
 80065f8:	2001      	movmi	r0, #1
 80065fa:	6013      	strmi	r3, [r2, #0]
 80065fc:	bf5c      	itt	pl
 80065fe:	2002      	movpl	r0, #2
 8006600:	6013      	strpl	r3, [r2, #0]
 8006602:	4770      	bx	lr
 8006604:	b299      	uxth	r1, r3
 8006606:	b909      	cbnz	r1, 800660c <__lo0bits+0x2a>
 8006608:	2010      	movs	r0, #16
 800660a:	0c1b      	lsrs	r3, r3, #16
 800660c:	b2d9      	uxtb	r1, r3
 800660e:	b909      	cbnz	r1, 8006614 <__lo0bits+0x32>
 8006610:	3008      	adds	r0, #8
 8006612:	0a1b      	lsrs	r3, r3, #8
 8006614:	0719      	lsls	r1, r3, #28
 8006616:	bf04      	itt	eq
 8006618:	091b      	lsreq	r3, r3, #4
 800661a:	3004      	addeq	r0, #4
 800661c:	0799      	lsls	r1, r3, #30
 800661e:	bf04      	itt	eq
 8006620:	089b      	lsreq	r3, r3, #2
 8006622:	3002      	addeq	r0, #2
 8006624:	07d9      	lsls	r1, r3, #31
 8006626:	d403      	bmi.n	8006630 <__lo0bits+0x4e>
 8006628:	085b      	lsrs	r3, r3, #1
 800662a:	f100 0001 	add.w	r0, r0, #1
 800662e:	d003      	beq.n	8006638 <__lo0bits+0x56>
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	4770      	bx	lr
 8006634:	2000      	movs	r0, #0
 8006636:	4770      	bx	lr
 8006638:	2020      	movs	r0, #32
 800663a:	4770      	bx	lr

0800663c <__i2b>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	2101      	movs	r1, #1
 8006642:	f7ff ff07 	bl	8006454 <_Balloc>
 8006646:	4602      	mov	r2, r0
 8006648:	b928      	cbnz	r0, 8006656 <__i2b+0x1a>
 800664a:	f240 1145 	movw	r1, #325	@ 0x145
 800664e:	4b04      	ldr	r3, [pc, #16]	@ (8006660 <__i2b+0x24>)
 8006650:	4804      	ldr	r0, [pc, #16]	@ (8006664 <__i2b+0x28>)
 8006652:	f000 fcb7 	bl	8006fc4 <__assert_func>
 8006656:	2301      	movs	r3, #1
 8006658:	6144      	str	r4, [r0, #20]
 800665a:	6103      	str	r3, [r0, #16]
 800665c:	bd10      	pop	{r4, pc}
 800665e:	bf00      	nop
 8006660:	08007eea 	.word	0x08007eea
 8006664:	08007efb 	.word	0x08007efb

08006668 <__multiply>:
 8006668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800666c:	4614      	mov	r4, r2
 800666e:	690a      	ldr	r2, [r1, #16]
 8006670:	6923      	ldr	r3, [r4, #16]
 8006672:	460f      	mov	r7, r1
 8006674:	429a      	cmp	r2, r3
 8006676:	bfa2      	ittt	ge
 8006678:	4623      	movge	r3, r4
 800667a:	460c      	movge	r4, r1
 800667c:	461f      	movge	r7, r3
 800667e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006682:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006686:	68a3      	ldr	r3, [r4, #8]
 8006688:	6861      	ldr	r1, [r4, #4]
 800668a:	eb0a 0609 	add.w	r6, sl, r9
 800668e:	42b3      	cmp	r3, r6
 8006690:	b085      	sub	sp, #20
 8006692:	bfb8      	it	lt
 8006694:	3101      	addlt	r1, #1
 8006696:	f7ff fedd 	bl	8006454 <_Balloc>
 800669a:	b930      	cbnz	r0, 80066aa <__multiply+0x42>
 800669c:	4602      	mov	r2, r0
 800669e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066a2:	4b43      	ldr	r3, [pc, #268]	@ (80067b0 <__multiply+0x148>)
 80066a4:	4843      	ldr	r0, [pc, #268]	@ (80067b4 <__multiply+0x14c>)
 80066a6:	f000 fc8d 	bl	8006fc4 <__assert_func>
 80066aa:	f100 0514 	add.w	r5, r0, #20
 80066ae:	462b      	mov	r3, r5
 80066b0:	2200      	movs	r2, #0
 80066b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066b6:	4543      	cmp	r3, r8
 80066b8:	d321      	bcc.n	80066fe <__multiply+0x96>
 80066ba:	f107 0114 	add.w	r1, r7, #20
 80066be:	f104 0214 	add.w	r2, r4, #20
 80066c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80066c6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80066ca:	9302      	str	r3, [sp, #8]
 80066cc:	1b13      	subs	r3, r2, r4
 80066ce:	3b15      	subs	r3, #21
 80066d0:	f023 0303 	bic.w	r3, r3, #3
 80066d4:	3304      	adds	r3, #4
 80066d6:	f104 0715 	add.w	r7, r4, #21
 80066da:	42ba      	cmp	r2, r7
 80066dc:	bf38      	it	cc
 80066de:	2304      	movcc	r3, #4
 80066e0:	9301      	str	r3, [sp, #4]
 80066e2:	9b02      	ldr	r3, [sp, #8]
 80066e4:	9103      	str	r1, [sp, #12]
 80066e6:	428b      	cmp	r3, r1
 80066e8:	d80c      	bhi.n	8006704 <__multiply+0x9c>
 80066ea:	2e00      	cmp	r6, #0
 80066ec:	dd03      	ble.n	80066f6 <__multiply+0x8e>
 80066ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d05a      	beq.n	80067ac <__multiply+0x144>
 80066f6:	6106      	str	r6, [r0, #16]
 80066f8:	b005      	add	sp, #20
 80066fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066fe:	f843 2b04 	str.w	r2, [r3], #4
 8006702:	e7d8      	b.n	80066b6 <__multiply+0x4e>
 8006704:	f8b1 a000 	ldrh.w	sl, [r1]
 8006708:	f1ba 0f00 	cmp.w	sl, #0
 800670c:	d023      	beq.n	8006756 <__multiply+0xee>
 800670e:	46a9      	mov	r9, r5
 8006710:	f04f 0c00 	mov.w	ip, #0
 8006714:	f104 0e14 	add.w	lr, r4, #20
 8006718:	f85e 7b04 	ldr.w	r7, [lr], #4
 800671c:	f8d9 3000 	ldr.w	r3, [r9]
 8006720:	fa1f fb87 	uxth.w	fp, r7
 8006724:	b29b      	uxth	r3, r3
 8006726:	fb0a 330b 	mla	r3, sl, fp, r3
 800672a:	4463      	add	r3, ip
 800672c:	f8d9 c000 	ldr.w	ip, [r9]
 8006730:	0c3f      	lsrs	r7, r7, #16
 8006732:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006736:	fb0a c707 	mla	r7, sl, r7, ip
 800673a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006744:	4572      	cmp	r2, lr
 8006746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800674a:	f849 3b04 	str.w	r3, [r9], #4
 800674e:	d8e3      	bhi.n	8006718 <__multiply+0xb0>
 8006750:	9b01      	ldr	r3, [sp, #4]
 8006752:	f845 c003 	str.w	ip, [r5, r3]
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	3104      	adds	r1, #4
 800675a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800675e:	f1b9 0f00 	cmp.w	r9, #0
 8006762:	d021      	beq.n	80067a8 <__multiply+0x140>
 8006764:	46ae      	mov	lr, r5
 8006766:	f04f 0a00 	mov.w	sl, #0
 800676a:	682b      	ldr	r3, [r5, #0]
 800676c:	f104 0c14 	add.w	ip, r4, #20
 8006770:	f8bc b000 	ldrh.w	fp, [ip]
 8006774:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006778:	b29b      	uxth	r3, r3
 800677a:	fb09 770b 	mla	r7, r9, fp, r7
 800677e:	4457      	add	r7, sl
 8006780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006784:	f84e 3b04 	str.w	r3, [lr], #4
 8006788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800678c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006790:	f8be 3000 	ldrh.w	r3, [lr]
 8006794:	4562      	cmp	r2, ip
 8006796:	fb09 330a 	mla	r3, r9, sl, r3
 800679a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800679e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067a2:	d8e5      	bhi.n	8006770 <__multiply+0x108>
 80067a4:	9f01      	ldr	r7, [sp, #4]
 80067a6:	51eb      	str	r3, [r5, r7]
 80067a8:	3504      	adds	r5, #4
 80067aa:	e79a      	b.n	80066e2 <__multiply+0x7a>
 80067ac:	3e01      	subs	r6, #1
 80067ae:	e79c      	b.n	80066ea <__multiply+0x82>
 80067b0:	08007eea 	.word	0x08007eea
 80067b4:	08007efb 	.word	0x08007efb

080067b8 <__pow5mult>:
 80067b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067bc:	4615      	mov	r5, r2
 80067be:	f012 0203 	ands.w	r2, r2, #3
 80067c2:	4607      	mov	r7, r0
 80067c4:	460e      	mov	r6, r1
 80067c6:	d007      	beq.n	80067d8 <__pow5mult+0x20>
 80067c8:	4c25      	ldr	r4, [pc, #148]	@ (8006860 <__pow5mult+0xa8>)
 80067ca:	3a01      	subs	r2, #1
 80067cc:	2300      	movs	r3, #0
 80067ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067d2:	f7ff fea1 	bl	8006518 <__multadd>
 80067d6:	4606      	mov	r6, r0
 80067d8:	10ad      	asrs	r5, r5, #2
 80067da:	d03d      	beq.n	8006858 <__pow5mult+0xa0>
 80067dc:	69fc      	ldr	r4, [r7, #28]
 80067de:	b97c      	cbnz	r4, 8006800 <__pow5mult+0x48>
 80067e0:	2010      	movs	r0, #16
 80067e2:	f7ff fd81 	bl	80062e8 <malloc>
 80067e6:	4602      	mov	r2, r0
 80067e8:	61f8      	str	r0, [r7, #28]
 80067ea:	b928      	cbnz	r0, 80067f8 <__pow5mult+0x40>
 80067ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067f0:	4b1c      	ldr	r3, [pc, #112]	@ (8006864 <__pow5mult+0xac>)
 80067f2:	481d      	ldr	r0, [pc, #116]	@ (8006868 <__pow5mult+0xb0>)
 80067f4:	f000 fbe6 	bl	8006fc4 <__assert_func>
 80067f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067fc:	6004      	str	r4, [r0, #0]
 80067fe:	60c4      	str	r4, [r0, #12]
 8006800:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006808:	b94c      	cbnz	r4, 800681e <__pow5mult+0x66>
 800680a:	f240 2171 	movw	r1, #625	@ 0x271
 800680e:	4638      	mov	r0, r7
 8006810:	f7ff ff14 	bl	800663c <__i2b>
 8006814:	2300      	movs	r3, #0
 8006816:	4604      	mov	r4, r0
 8006818:	f8c8 0008 	str.w	r0, [r8, #8]
 800681c:	6003      	str	r3, [r0, #0]
 800681e:	f04f 0900 	mov.w	r9, #0
 8006822:	07eb      	lsls	r3, r5, #31
 8006824:	d50a      	bpl.n	800683c <__pow5mult+0x84>
 8006826:	4631      	mov	r1, r6
 8006828:	4622      	mov	r2, r4
 800682a:	4638      	mov	r0, r7
 800682c:	f7ff ff1c 	bl	8006668 <__multiply>
 8006830:	4680      	mov	r8, r0
 8006832:	4631      	mov	r1, r6
 8006834:	4638      	mov	r0, r7
 8006836:	f7ff fe4d 	bl	80064d4 <_Bfree>
 800683a:	4646      	mov	r6, r8
 800683c:	106d      	asrs	r5, r5, #1
 800683e:	d00b      	beq.n	8006858 <__pow5mult+0xa0>
 8006840:	6820      	ldr	r0, [r4, #0]
 8006842:	b938      	cbnz	r0, 8006854 <__pow5mult+0x9c>
 8006844:	4622      	mov	r2, r4
 8006846:	4621      	mov	r1, r4
 8006848:	4638      	mov	r0, r7
 800684a:	f7ff ff0d 	bl	8006668 <__multiply>
 800684e:	6020      	str	r0, [r4, #0]
 8006850:	f8c0 9000 	str.w	r9, [r0]
 8006854:	4604      	mov	r4, r0
 8006856:	e7e4      	b.n	8006822 <__pow5mult+0x6a>
 8006858:	4630      	mov	r0, r6
 800685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685e:	bf00      	nop
 8006860:	08007f54 	.word	0x08007f54
 8006864:	08007e7b 	.word	0x08007e7b
 8006868:	08007efb 	.word	0x08007efb

0800686c <__lshift>:
 800686c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006870:	460c      	mov	r4, r1
 8006872:	4607      	mov	r7, r0
 8006874:	4691      	mov	r9, r2
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	6849      	ldr	r1, [r1, #4]
 800687a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800687e:	68a3      	ldr	r3, [r4, #8]
 8006880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006884:	f108 0601 	add.w	r6, r8, #1
 8006888:	42b3      	cmp	r3, r6
 800688a:	db0b      	blt.n	80068a4 <__lshift+0x38>
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff fde1 	bl	8006454 <_Balloc>
 8006892:	4605      	mov	r5, r0
 8006894:	b948      	cbnz	r0, 80068aa <__lshift+0x3e>
 8006896:	4602      	mov	r2, r0
 8006898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800689c:	4b27      	ldr	r3, [pc, #156]	@ (800693c <__lshift+0xd0>)
 800689e:	4828      	ldr	r0, [pc, #160]	@ (8006940 <__lshift+0xd4>)
 80068a0:	f000 fb90 	bl	8006fc4 <__assert_func>
 80068a4:	3101      	adds	r1, #1
 80068a6:	005b      	lsls	r3, r3, #1
 80068a8:	e7ee      	b.n	8006888 <__lshift+0x1c>
 80068aa:	2300      	movs	r3, #0
 80068ac:	f100 0114 	add.w	r1, r0, #20
 80068b0:	f100 0210 	add.w	r2, r0, #16
 80068b4:	4618      	mov	r0, r3
 80068b6:	4553      	cmp	r3, sl
 80068b8:	db33      	blt.n	8006922 <__lshift+0xb6>
 80068ba:	6920      	ldr	r0, [r4, #16]
 80068bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068c0:	f104 0314 	add.w	r3, r4, #20
 80068c4:	f019 091f 	ands.w	r9, r9, #31
 80068c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068d0:	d02b      	beq.n	800692a <__lshift+0xbe>
 80068d2:	468a      	mov	sl, r1
 80068d4:	2200      	movs	r2, #0
 80068d6:	f1c9 0e20 	rsb	lr, r9, #32
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	fa00 f009 	lsl.w	r0, r0, r9
 80068e0:	4310      	orrs	r0, r2
 80068e2:	f84a 0b04 	str.w	r0, [sl], #4
 80068e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ea:	459c      	cmp	ip, r3
 80068ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80068f0:	d8f3      	bhi.n	80068da <__lshift+0x6e>
 80068f2:	ebac 0304 	sub.w	r3, ip, r4
 80068f6:	3b15      	subs	r3, #21
 80068f8:	f023 0303 	bic.w	r3, r3, #3
 80068fc:	3304      	adds	r3, #4
 80068fe:	f104 0015 	add.w	r0, r4, #21
 8006902:	4584      	cmp	ip, r0
 8006904:	bf38      	it	cc
 8006906:	2304      	movcc	r3, #4
 8006908:	50ca      	str	r2, [r1, r3]
 800690a:	b10a      	cbz	r2, 8006910 <__lshift+0xa4>
 800690c:	f108 0602 	add.w	r6, r8, #2
 8006910:	3e01      	subs	r6, #1
 8006912:	4638      	mov	r0, r7
 8006914:	4621      	mov	r1, r4
 8006916:	612e      	str	r6, [r5, #16]
 8006918:	f7ff fddc 	bl	80064d4 <_Bfree>
 800691c:	4628      	mov	r0, r5
 800691e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006922:	f842 0f04 	str.w	r0, [r2, #4]!
 8006926:	3301      	adds	r3, #1
 8006928:	e7c5      	b.n	80068b6 <__lshift+0x4a>
 800692a:	3904      	subs	r1, #4
 800692c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006930:	459c      	cmp	ip, r3
 8006932:	f841 2f04 	str.w	r2, [r1, #4]!
 8006936:	d8f9      	bhi.n	800692c <__lshift+0xc0>
 8006938:	e7ea      	b.n	8006910 <__lshift+0xa4>
 800693a:	bf00      	nop
 800693c:	08007eea 	.word	0x08007eea
 8006940:	08007efb 	.word	0x08007efb

08006944 <__mcmp>:
 8006944:	4603      	mov	r3, r0
 8006946:	690a      	ldr	r2, [r1, #16]
 8006948:	6900      	ldr	r0, [r0, #16]
 800694a:	b530      	push	{r4, r5, lr}
 800694c:	1a80      	subs	r0, r0, r2
 800694e:	d10e      	bne.n	800696e <__mcmp+0x2a>
 8006950:	3314      	adds	r3, #20
 8006952:	3114      	adds	r1, #20
 8006954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800695c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006964:	4295      	cmp	r5, r2
 8006966:	d003      	beq.n	8006970 <__mcmp+0x2c>
 8006968:	d205      	bcs.n	8006976 <__mcmp+0x32>
 800696a:	f04f 30ff 	mov.w	r0, #4294967295
 800696e:	bd30      	pop	{r4, r5, pc}
 8006970:	42a3      	cmp	r3, r4
 8006972:	d3f3      	bcc.n	800695c <__mcmp+0x18>
 8006974:	e7fb      	b.n	800696e <__mcmp+0x2a>
 8006976:	2001      	movs	r0, #1
 8006978:	e7f9      	b.n	800696e <__mcmp+0x2a>
	...

0800697c <__mdiff>:
 800697c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	4689      	mov	r9, r1
 8006982:	4606      	mov	r6, r0
 8006984:	4611      	mov	r1, r2
 8006986:	4648      	mov	r0, r9
 8006988:	4614      	mov	r4, r2
 800698a:	f7ff ffdb 	bl	8006944 <__mcmp>
 800698e:	1e05      	subs	r5, r0, #0
 8006990:	d112      	bne.n	80069b8 <__mdiff+0x3c>
 8006992:	4629      	mov	r1, r5
 8006994:	4630      	mov	r0, r6
 8006996:	f7ff fd5d 	bl	8006454 <_Balloc>
 800699a:	4602      	mov	r2, r0
 800699c:	b928      	cbnz	r0, 80069aa <__mdiff+0x2e>
 800699e:	f240 2137 	movw	r1, #567	@ 0x237
 80069a2:	4b3e      	ldr	r3, [pc, #248]	@ (8006a9c <__mdiff+0x120>)
 80069a4:	483e      	ldr	r0, [pc, #248]	@ (8006aa0 <__mdiff+0x124>)
 80069a6:	f000 fb0d 	bl	8006fc4 <__assert_func>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069b0:	4610      	mov	r0, r2
 80069b2:	b003      	add	sp, #12
 80069b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b8:	bfbc      	itt	lt
 80069ba:	464b      	movlt	r3, r9
 80069bc:	46a1      	movlt	r9, r4
 80069be:	4630      	mov	r0, r6
 80069c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069c4:	bfba      	itte	lt
 80069c6:	461c      	movlt	r4, r3
 80069c8:	2501      	movlt	r5, #1
 80069ca:	2500      	movge	r5, #0
 80069cc:	f7ff fd42 	bl	8006454 <_Balloc>
 80069d0:	4602      	mov	r2, r0
 80069d2:	b918      	cbnz	r0, 80069dc <__mdiff+0x60>
 80069d4:	f240 2145 	movw	r1, #581	@ 0x245
 80069d8:	4b30      	ldr	r3, [pc, #192]	@ (8006a9c <__mdiff+0x120>)
 80069da:	e7e3      	b.n	80069a4 <__mdiff+0x28>
 80069dc:	f100 0b14 	add.w	fp, r0, #20
 80069e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069e4:	f109 0310 	add.w	r3, r9, #16
 80069e8:	60c5      	str	r5, [r0, #12]
 80069ea:	f04f 0c00 	mov.w	ip, #0
 80069ee:	f109 0514 	add.w	r5, r9, #20
 80069f2:	46d9      	mov	r9, fp
 80069f4:	6926      	ldr	r6, [r4, #16]
 80069f6:	f104 0e14 	add.w	lr, r4, #20
 80069fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a02:	9301      	str	r3, [sp, #4]
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a0e:	b281      	uxth	r1, r0
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	fa1f f38a 	uxth.w	r3, sl
 8006a16:	1a5b      	subs	r3, r3, r1
 8006a18:	0c00      	lsrs	r0, r0, #16
 8006a1a:	4463      	add	r3, ip
 8006a1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a2a:	4576      	cmp	r6, lr
 8006a2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a30:	f849 3b04 	str.w	r3, [r9], #4
 8006a34:	d8e6      	bhi.n	8006a04 <__mdiff+0x88>
 8006a36:	1b33      	subs	r3, r6, r4
 8006a38:	3b15      	subs	r3, #21
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	3415      	adds	r4, #21
 8006a40:	3304      	adds	r3, #4
 8006a42:	42a6      	cmp	r6, r4
 8006a44:	bf38      	it	cc
 8006a46:	2304      	movcc	r3, #4
 8006a48:	441d      	add	r5, r3
 8006a4a:	445b      	add	r3, fp
 8006a4c:	461e      	mov	r6, r3
 8006a4e:	462c      	mov	r4, r5
 8006a50:	4544      	cmp	r4, r8
 8006a52:	d30e      	bcc.n	8006a72 <__mdiff+0xf6>
 8006a54:	f108 0103 	add.w	r1, r8, #3
 8006a58:	1b49      	subs	r1, r1, r5
 8006a5a:	f021 0103 	bic.w	r1, r1, #3
 8006a5e:	3d03      	subs	r5, #3
 8006a60:	45a8      	cmp	r8, r5
 8006a62:	bf38      	it	cc
 8006a64:	2100      	movcc	r1, #0
 8006a66:	440b      	add	r3, r1
 8006a68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a6c:	b199      	cbz	r1, 8006a96 <__mdiff+0x11a>
 8006a6e:	6117      	str	r7, [r2, #16]
 8006a70:	e79e      	b.n	80069b0 <__mdiff+0x34>
 8006a72:	46e6      	mov	lr, ip
 8006a74:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a78:	fa1f fc81 	uxth.w	ip, r1
 8006a7c:	44f4      	add	ip, lr
 8006a7e:	0c08      	lsrs	r0, r1, #16
 8006a80:	4471      	add	r1, lr
 8006a82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a86:	b289      	uxth	r1, r1
 8006a88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a90:	f846 1b04 	str.w	r1, [r6], #4
 8006a94:	e7dc      	b.n	8006a50 <__mdiff+0xd4>
 8006a96:	3f01      	subs	r7, #1
 8006a98:	e7e6      	b.n	8006a68 <__mdiff+0xec>
 8006a9a:	bf00      	nop
 8006a9c:	08007eea 	.word	0x08007eea
 8006aa0:	08007efb 	.word	0x08007efb

08006aa4 <__d2b>:
 8006aa4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4690      	mov	r8, r2
 8006aac:	4699      	mov	r9, r3
 8006aae:	9e08      	ldr	r6, [sp, #32]
 8006ab0:	f7ff fcd0 	bl	8006454 <_Balloc>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	b930      	cbnz	r0, 8006ac6 <__d2b+0x22>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	f240 310f 	movw	r1, #783	@ 0x30f
 8006abe:	4b23      	ldr	r3, [pc, #140]	@ (8006b4c <__d2b+0xa8>)
 8006ac0:	4823      	ldr	r0, [pc, #140]	@ (8006b50 <__d2b+0xac>)
 8006ac2:	f000 fa7f 	bl	8006fc4 <__assert_func>
 8006ac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ace:	b10d      	cbz	r5, 8006ad4 <__d2b+0x30>
 8006ad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ad4:	9301      	str	r3, [sp, #4]
 8006ad6:	f1b8 0300 	subs.w	r3, r8, #0
 8006ada:	d024      	beq.n	8006b26 <__d2b+0x82>
 8006adc:	4668      	mov	r0, sp
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	f7ff fd7f 	bl	80065e2 <__lo0bits>
 8006ae4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006ae8:	b1d8      	cbz	r0, 8006b22 <__d2b+0x7e>
 8006aea:	f1c0 0320 	rsb	r3, r0, #32
 8006aee:	fa02 f303 	lsl.w	r3, r2, r3
 8006af2:	430b      	orrs	r3, r1
 8006af4:	40c2      	lsrs	r2, r0
 8006af6:	6163      	str	r3, [r4, #20]
 8006af8:	9201      	str	r2, [sp, #4]
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf0c      	ite	eq
 8006b00:	2201      	moveq	r2, #1
 8006b02:	2202      	movne	r2, #2
 8006b04:	61a3      	str	r3, [r4, #24]
 8006b06:	6122      	str	r2, [r4, #16]
 8006b08:	b1ad      	cbz	r5, 8006b36 <__d2b+0x92>
 8006b0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b0e:	4405      	add	r5, r0
 8006b10:	6035      	str	r5, [r6, #0]
 8006b12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b18:	6018      	str	r0, [r3, #0]
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	b002      	add	sp, #8
 8006b1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006b22:	6161      	str	r1, [r4, #20]
 8006b24:	e7e9      	b.n	8006afa <__d2b+0x56>
 8006b26:	a801      	add	r0, sp, #4
 8006b28:	f7ff fd5b 	bl	80065e2 <__lo0bits>
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	6163      	str	r3, [r4, #20]
 8006b32:	3020      	adds	r0, #32
 8006b34:	e7e7      	b.n	8006b06 <__d2b+0x62>
 8006b36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b3e:	6030      	str	r0, [r6, #0]
 8006b40:	6918      	ldr	r0, [r3, #16]
 8006b42:	f7ff fd2f 	bl	80065a4 <__hi0bits>
 8006b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b4a:	e7e4      	b.n	8006b16 <__d2b+0x72>
 8006b4c:	08007eea 	.word	0x08007eea
 8006b50:	08007efb 	.word	0x08007efb

08006b54 <__ssputs_r>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	461f      	mov	r7, r3
 8006b5a:	688e      	ldr	r6, [r1, #8]
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	42be      	cmp	r6, r7
 8006b60:	460c      	mov	r4, r1
 8006b62:	4690      	mov	r8, r2
 8006b64:	680b      	ldr	r3, [r1, #0]
 8006b66:	d82d      	bhi.n	8006bc4 <__ssputs_r+0x70>
 8006b68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b70:	d026      	beq.n	8006bc0 <__ssputs_r+0x6c>
 8006b72:	6965      	ldr	r5, [r4, #20]
 8006b74:	6909      	ldr	r1, [r1, #16]
 8006b76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b7a:	eba3 0901 	sub.w	r9, r3, r1
 8006b7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b82:	1c7b      	adds	r3, r7, #1
 8006b84:	444b      	add	r3, r9
 8006b86:	106d      	asrs	r5, r5, #1
 8006b88:	429d      	cmp	r5, r3
 8006b8a:	bf38      	it	cc
 8006b8c:	461d      	movcc	r5, r3
 8006b8e:	0553      	lsls	r3, r2, #21
 8006b90:	d527      	bpl.n	8006be2 <__ssputs_r+0x8e>
 8006b92:	4629      	mov	r1, r5
 8006b94:	f7ff fbd2 	bl	800633c <_malloc_r>
 8006b98:	4606      	mov	r6, r0
 8006b9a:	b360      	cbz	r0, 8006bf6 <__ssputs_r+0xa2>
 8006b9c:	464a      	mov	r2, r9
 8006b9e:	6921      	ldr	r1, [r4, #16]
 8006ba0:	f000 fa02 	bl	8006fa8 <memcpy>
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	6126      	str	r6, [r4, #16]
 8006bb2:	444e      	add	r6, r9
 8006bb4:	6026      	str	r6, [r4, #0]
 8006bb6:	463e      	mov	r6, r7
 8006bb8:	6165      	str	r5, [r4, #20]
 8006bba:	eba5 0509 	sub.w	r5, r5, r9
 8006bbe:	60a5      	str	r5, [r4, #8]
 8006bc0:	42be      	cmp	r6, r7
 8006bc2:	d900      	bls.n	8006bc6 <__ssputs_r+0x72>
 8006bc4:	463e      	mov	r6, r7
 8006bc6:	4632      	mov	r2, r6
 8006bc8:	4641      	mov	r1, r8
 8006bca:	6820      	ldr	r0, [r4, #0]
 8006bcc:	f000 f9c2 	bl	8006f54 <memmove>
 8006bd0:	2000      	movs	r0, #0
 8006bd2:	68a3      	ldr	r3, [r4, #8]
 8006bd4:	1b9b      	subs	r3, r3, r6
 8006bd6:	60a3      	str	r3, [r4, #8]
 8006bd8:	6823      	ldr	r3, [r4, #0]
 8006bda:	4433      	add	r3, r6
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be2:	462a      	mov	r2, r5
 8006be4:	f000 fa32 	bl	800704c <_realloc_r>
 8006be8:	4606      	mov	r6, r0
 8006bea:	2800      	cmp	r0, #0
 8006bec:	d1e0      	bne.n	8006bb0 <__ssputs_r+0x5c>
 8006bee:	4650      	mov	r0, sl
 8006bf0:	6921      	ldr	r1, [r4, #16]
 8006bf2:	f7ff fb31 	bl	8006258 <_free_r>
 8006bf6:	230c      	movs	r3, #12
 8006bf8:	f8ca 3000 	str.w	r3, [sl]
 8006bfc:	89a3      	ldrh	r3, [r4, #12]
 8006bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8006c02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	e7e9      	b.n	8006bde <__ssputs_r+0x8a>
	...

08006c0c <_svfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4698      	mov	r8, r3
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	4607      	mov	r7, r0
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	460d      	mov	r5, r1
 8006c1a:	4614      	mov	r4, r2
 8006c1c:	b09d      	sub	sp, #116	@ 0x74
 8006c1e:	d510      	bpl.n	8006c42 <_svfiprintf_r+0x36>
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	b973      	cbnz	r3, 8006c42 <_svfiprintf_r+0x36>
 8006c24:	2140      	movs	r1, #64	@ 0x40
 8006c26:	f7ff fb89 	bl	800633c <_malloc_r>
 8006c2a:	6028      	str	r0, [r5, #0]
 8006c2c:	6128      	str	r0, [r5, #16]
 8006c2e:	b930      	cbnz	r0, 8006c3e <_svfiprintf_r+0x32>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	b01d      	add	sp, #116	@ 0x74
 8006c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3e:	2340      	movs	r3, #64	@ 0x40
 8006c40:	616b      	str	r3, [r5, #20]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c46:	2320      	movs	r3, #32
 8006c48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c4c:	2330      	movs	r3, #48	@ 0x30
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006df0 <_svfiprintf_r+0x1e4>
 8006c5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c5e:	4623      	mov	r3, r4
 8006c60:	469a      	mov	sl, r3
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	b10a      	cbz	r2, 8006c6c <_svfiprintf_r+0x60>
 8006c68:	2a25      	cmp	r2, #37	@ 0x25
 8006c6a:	d1f9      	bne.n	8006c60 <_svfiprintf_r+0x54>
 8006c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x7e>
 8006c72:	465b      	mov	r3, fp
 8006c74:	4622      	mov	r2, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ff6b 	bl	8006b54 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80a7 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c86:	445a      	add	r2, fp
 8006c88:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 809f 	beq.w	8006dd2 <_svfiprintf_r+0x1c6>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cac:	4654      	mov	r4, sl
 8006cae:	2205      	movs	r2, #5
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	484e      	ldr	r0, [pc, #312]	@ (8006df0 <_svfiprintf_r+0x1e4>)
 8006cb6:	f7fe fc70 	bl	800559a <memchr>
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xea>
 8006cbe:	06d0      	lsls	r0, r2, #27
 8006cc0:	bf44      	itt	mi
 8006cc2:	2320      	movmi	r3, #32
 8006cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cc8:	0711      	lsls	r1, r2, #28
 8006cca:	bf44      	itt	mi
 8006ccc:	232b      	movmi	r3, #43	@ 0x2b
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xfa>
 8006cda:	4654      	mov	r4, sl
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cea:	3b30      	subs	r3, #48	@ 0x30
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d94b      	bls.n	8006d88 <_svfiprintf_r+0x17c>
 8006cf0:	b1b0      	cbz	r0, 8006d20 <_svfiprintf_r+0x114>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e014      	b.n	8006d20 <_svfiprintf_r+0x114>
 8006cf6:	eba0 0308 	sub.w	r3, r0, r8
 8006cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	46a2      	mov	sl, r4
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	e7d2      	b.n	8006cac <_svfiprintf_r+0xa0>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbb      	ittet	lt
 8006d12:	425b      	neglt	r3, r3
 8006d14:	f042 0202 	orrlt.w	r2, r2, #2
 8006d18:	9307      	strge	r3, [sp, #28]
 8006d1a:	9307      	strlt	r3, [sp, #28]
 8006d1c:	bfb8      	it	lt
 8006d1e:	9204      	strlt	r2, [sp, #16]
 8006d20:	7823      	ldrb	r3, [r4, #0]
 8006d22:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d24:	d10a      	bne.n	8006d3c <_svfiprintf_r+0x130>
 8006d26:	7863      	ldrb	r3, [r4, #1]
 8006d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d2a:	d132      	bne.n	8006d92 <_svfiprintf_r+0x186>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	3402      	adds	r4, #2
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9203      	str	r2, [sp, #12]
 8006d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006df4 <_svfiprintf_r+0x1e8>
 8006d40:	2203      	movs	r2, #3
 8006d42:	4650      	mov	r0, sl
 8006d44:	7821      	ldrb	r1, [r4, #0]
 8006d46:	f7fe fc28 	bl	800559a <memchr>
 8006d4a:	b138      	cbz	r0, 8006d5c <_svfiprintf_r+0x150>
 8006d4c:	2240      	movs	r2, #64	@ 0x40
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	eba0 000a 	sub.w	r0, r0, sl
 8006d54:	4082      	lsls	r2, r0
 8006d56:	4313      	orrs	r3, r2
 8006d58:	3401      	adds	r4, #1
 8006d5a:	9304      	str	r3, [sp, #16]
 8006d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d60:	2206      	movs	r2, #6
 8006d62:	4825      	ldr	r0, [pc, #148]	@ (8006df8 <_svfiprintf_r+0x1ec>)
 8006d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d68:	f7fe fc17 	bl	800559a <memchr>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	d036      	beq.n	8006dde <_svfiprintf_r+0x1d2>
 8006d70:	4b22      	ldr	r3, [pc, #136]	@ (8006dfc <_svfiprintf_r+0x1f0>)
 8006d72:	bb1b      	cbnz	r3, 8006dbc <_svfiprintf_r+0x1b0>
 8006d74:	9b03      	ldr	r3, [sp, #12]
 8006d76:	3307      	adds	r3, #7
 8006d78:	f023 0307 	bic.w	r3, r3, #7
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	9303      	str	r3, [sp, #12]
 8006d80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d82:	4433      	add	r3, r6
 8006d84:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d86:	e76a      	b.n	8006c5e <_svfiprintf_r+0x52>
 8006d88:	460c      	mov	r4, r1
 8006d8a:	2001      	movs	r0, #1
 8006d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d90:	e7a8      	b.n	8006ce4 <_svfiprintf_r+0xd8>
 8006d92:	2300      	movs	r3, #0
 8006d94:	f04f 0c0a 	mov.w	ip, #10
 8006d98:	4619      	mov	r1, r3
 8006d9a:	3401      	adds	r4, #1
 8006d9c:	9305      	str	r3, [sp, #20]
 8006d9e:	4620      	mov	r0, r4
 8006da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da4:	3a30      	subs	r2, #48	@ 0x30
 8006da6:	2a09      	cmp	r2, #9
 8006da8:	d903      	bls.n	8006db2 <_svfiprintf_r+0x1a6>
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d0c6      	beq.n	8006d3c <_svfiprintf_r+0x130>
 8006dae:	9105      	str	r1, [sp, #20]
 8006db0:	e7c4      	b.n	8006d3c <_svfiprintf_r+0x130>
 8006db2:	4604      	mov	r4, r0
 8006db4:	2301      	movs	r3, #1
 8006db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dba:	e7f0      	b.n	8006d9e <_svfiprintf_r+0x192>
 8006dbc:	ab03      	add	r3, sp, #12
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	462a      	mov	r2, r5
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006e00 <_svfiprintf_r+0x1f4>)
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	f7fd fe84 	bl	8004ad4 <_printf_float>
 8006dcc:	1c42      	adds	r2, r0, #1
 8006dce:	4606      	mov	r6, r0
 8006dd0:	d1d6      	bne.n	8006d80 <_svfiprintf_r+0x174>
 8006dd2:	89ab      	ldrh	r3, [r5, #12]
 8006dd4:	065b      	lsls	r3, r3, #25
 8006dd6:	f53f af2d 	bmi.w	8006c34 <_svfiprintf_r+0x28>
 8006dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ddc:	e72c      	b.n	8006c38 <_svfiprintf_r+0x2c>
 8006dde:	ab03      	add	r3, sp, #12
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	462a      	mov	r2, r5
 8006de4:	4638      	mov	r0, r7
 8006de6:	4b06      	ldr	r3, [pc, #24]	@ (8006e00 <_svfiprintf_r+0x1f4>)
 8006de8:	a904      	add	r1, sp, #16
 8006dea:	f7fe f911 	bl	8005010 <_printf_i>
 8006dee:	e7ed      	b.n	8006dcc <_svfiprintf_r+0x1c0>
 8006df0:	08008050 	.word	0x08008050
 8006df4:	08008056 	.word	0x08008056
 8006df8:	0800805a 	.word	0x0800805a
 8006dfc:	08004ad5 	.word	0x08004ad5
 8006e00:	08006b55 	.word	0x08006b55

08006e04 <__sflush_r>:
 8006e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0a:	0716      	lsls	r6, r2, #28
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	460c      	mov	r4, r1
 8006e10:	d454      	bmi.n	8006ebc <__sflush_r+0xb8>
 8006e12:	684b      	ldr	r3, [r1, #4]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	dc02      	bgt.n	8006e1e <__sflush_r+0x1a>
 8006e18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	dd48      	ble.n	8006eb0 <__sflush_r+0xac>
 8006e1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	d045      	beq.n	8006eb0 <__sflush_r+0xac>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e2a:	682f      	ldr	r7, [r5, #0]
 8006e2c:	6a21      	ldr	r1, [r4, #32]
 8006e2e:	602b      	str	r3, [r5, #0]
 8006e30:	d030      	beq.n	8006e94 <__sflush_r+0x90>
 8006e32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	0759      	lsls	r1, r3, #29
 8006e38:	d505      	bpl.n	8006e46 <__sflush_r+0x42>
 8006e3a:	6863      	ldr	r3, [r4, #4]
 8006e3c:	1ad2      	subs	r2, r2, r3
 8006e3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e40:	b10b      	cbz	r3, 8006e46 <__sflush_r+0x42>
 8006e42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e44:	1ad2      	subs	r2, r2, r3
 8006e46:	2300      	movs	r3, #0
 8006e48:	4628      	mov	r0, r5
 8006e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e4c:	6a21      	ldr	r1, [r4, #32]
 8006e4e:	47b0      	blx	r6
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	d106      	bne.n	8006e64 <__sflush_r+0x60>
 8006e56:	6829      	ldr	r1, [r5, #0]
 8006e58:	291d      	cmp	r1, #29
 8006e5a:	d82b      	bhi.n	8006eb4 <__sflush_r+0xb0>
 8006e5c:	4a28      	ldr	r2, [pc, #160]	@ (8006f00 <__sflush_r+0xfc>)
 8006e5e:	410a      	asrs	r2, r1
 8006e60:	07d6      	lsls	r6, r2, #31
 8006e62:	d427      	bmi.n	8006eb4 <__sflush_r+0xb0>
 8006e64:	2200      	movs	r2, #0
 8006e66:	6062      	str	r2, [r4, #4]
 8006e68:	6922      	ldr	r2, [r4, #16]
 8006e6a:	04d9      	lsls	r1, r3, #19
 8006e6c:	6022      	str	r2, [r4, #0]
 8006e6e:	d504      	bpl.n	8006e7a <__sflush_r+0x76>
 8006e70:	1c42      	adds	r2, r0, #1
 8006e72:	d101      	bne.n	8006e78 <__sflush_r+0x74>
 8006e74:	682b      	ldr	r3, [r5, #0]
 8006e76:	b903      	cbnz	r3, 8006e7a <__sflush_r+0x76>
 8006e78:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e7c:	602f      	str	r7, [r5, #0]
 8006e7e:	b1b9      	cbz	r1, 8006eb0 <__sflush_r+0xac>
 8006e80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e84:	4299      	cmp	r1, r3
 8006e86:	d002      	beq.n	8006e8e <__sflush_r+0x8a>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	f7ff f9e5 	bl	8006258 <_free_r>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e92:	e00d      	b.n	8006eb0 <__sflush_r+0xac>
 8006e94:	2301      	movs	r3, #1
 8006e96:	4628      	mov	r0, r5
 8006e98:	47b0      	blx	r6
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	1c50      	adds	r0, r2, #1
 8006e9e:	d1c9      	bne.n	8006e34 <__sflush_r+0x30>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d0c6      	beq.n	8006e34 <__sflush_r+0x30>
 8006ea6:	2b1d      	cmp	r3, #29
 8006ea8:	d001      	beq.n	8006eae <__sflush_r+0xaa>
 8006eaa:	2b16      	cmp	r3, #22
 8006eac:	d11d      	bne.n	8006eea <__sflush_r+0xe6>
 8006eae:	602f      	str	r7, [r5, #0]
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e021      	b.n	8006ef8 <__sflush_r+0xf4>
 8006eb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb8:	b21b      	sxth	r3, r3
 8006eba:	e01a      	b.n	8006ef2 <__sflush_r+0xee>
 8006ebc:	690f      	ldr	r7, [r1, #16]
 8006ebe:	2f00      	cmp	r7, #0
 8006ec0:	d0f6      	beq.n	8006eb0 <__sflush_r+0xac>
 8006ec2:	0793      	lsls	r3, r2, #30
 8006ec4:	bf18      	it	ne
 8006ec6:	2300      	movne	r3, #0
 8006ec8:	680e      	ldr	r6, [r1, #0]
 8006eca:	bf08      	it	eq
 8006ecc:	694b      	ldreq	r3, [r1, #20]
 8006ece:	1bf6      	subs	r6, r6, r7
 8006ed0:	600f      	str	r7, [r1, #0]
 8006ed2:	608b      	str	r3, [r1, #8]
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	ddeb      	ble.n	8006eb0 <__sflush_r+0xac>
 8006ed8:	4633      	mov	r3, r6
 8006eda:	463a      	mov	r2, r7
 8006edc:	4628      	mov	r0, r5
 8006ede:	6a21      	ldr	r1, [r4, #32]
 8006ee0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ee4:	47e0      	blx	ip
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	dc07      	bgt.n	8006efa <__sflush_r+0xf6>
 8006eea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef6:	81a3      	strh	r3, [r4, #12]
 8006ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006efa:	4407      	add	r7, r0
 8006efc:	1a36      	subs	r6, r6, r0
 8006efe:	e7e9      	b.n	8006ed4 <__sflush_r+0xd0>
 8006f00:	dfbffffe 	.word	0xdfbffffe

08006f04 <_fflush_r>:
 8006f04:	b538      	push	{r3, r4, r5, lr}
 8006f06:	690b      	ldr	r3, [r1, #16]
 8006f08:	4605      	mov	r5, r0
 8006f0a:	460c      	mov	r4, r1
 8006f0c:	b913      	cbnz	r3, 8006f14 <_fflush_r+0x10>
 8006f0e:	2500      	movs	r5, #0
 8006f10:	4628      	mov	r0, r5
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	b118      	cbz	r0, 8006f1e <_fflush_r+0x1a>
 8006f16:	6a03      	ldr	r3, [r0, #32]
 8006f18:	b90b      	cbnz	r3, 8006f1e <_fflush_r+0x1a>
 8006f1a:	f7fe fa25 	bl	8005368 <__sinit>
 8006f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f3      	beq.n	8006f0e <_fflush_r+0xa>
 8006f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f28:	07d0      	lsls	r0, r2, #31
 8006f2a:	d404      	bmi.n	8006f36 <_fflush_r+0x32>
 8006f2c:	0599      	lsls	r1, r3, #22
 8006f2e:	d402      	bmi.n	8006f36 <_fflush_r+0x32>
 8006f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f32:	f7fe fb30 	bl	8005596 <__retarget_lock_acquire_recursive>
 8006f36:	4628      	mov	r0, r5
 8006f38:	4621      	mov	r1, r4
 8006f3a:	f7ff ff63 	bl	8006e04 <__sflush_r>
 8006f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f40:	4605      	mov	r5, r0
 8006f42:	07da      	lsls	r2, r3, #31
 8006f44:	d4e4      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f46:	89a3      	ldrh	r3, [r4, #12]
 8006f48:	059b      	lsls	r3, r3, #22
 8006f4a:	d4e1      	bmi.n	8006f10 <_fflush_r+0xc>
 8006f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f4e:	f7fe fb23 	bl	8005598 <__retarget_lock_release_recursive>
 8006f52:	e7dd      	b.n	8006f10 <_fflush_r+0xc>

08006f54 <memmove>:
 8006f54:	4288      	cmp	r0, r1
 8006f56:	b510      	push	{r4, lr}
 8006f58:	eb01 0402 	add.w	r4, r1, r2
 8006f5c:	d902      	bls.n	8006f64 <memmove+0x10>
 8006f5e:	4284      	cmp	r4, r0
 8006f60:	4623      	mov	r3, r4
 8006f62:	d807      	bhi.n	8006f74 <memmove+0x20>
 8006f64:	1e43      	subs	r3, r0, #1
 8006f66:	42a1      	cmp	r1, r4
 8006f68:	d008      	beq.n	8006f7c <memmove+0x28>
 8006f6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f72:	e7f8      	b.n	8006f66 <memmove+0x12>
 8006f74:	4601      	mov	r1, r0
 8006f76:	4402      	add	r2, r0
 8006f78:	428a      	cmp	r2, r1
 8006f7a:	d100      	bne.n	8006f7e <memmove+0x2a>
 8006f7c:	bd10      	pop	{r4, pc}
 8006f7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f86:	e7f7      	b.n	8006f78 <memmove+0x24>

08006f88 <_sbrk_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	4d05      	ldr	r5, [pc, #20]	@ (8006fa4 <_sbrk_r+0x1c>)
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f7fa fed4 	bl	8001d40 <_sbrk>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_sbrk_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000854 	.word	0x20000854

08006fa8 <memcpy>:
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fb0:	d100      	bne.n	8006fb4 <memcpy+0xc>
 8006fb2:	4770      	bx	lr
 8006fb4:	b510      	push	{r4, lr}
 8006fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fc0:	d1f9      	bne.n	8006fb6 <memcpy+0xe>
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <__assert_func>:
 8006fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	4b09      	ldr	r3, [pc, #36]	@ (8006ff0 <__assert_func+0x2c>)
 8006fcc:	4605      	mov	r5, r0
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68d8      	ldr	r0, [r3, #12]
 8006fd2:	b954      	cbnz	r4, 8006fea <__assert_func+0x26>
 8006fd4:	4b07      	ldr	r3, [pc, #28]	@ (8006ff4 <__assert_func+0x30>)
 8006fd6:	461c      	mov	r4, r3
 8006fd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fdc:	9100      	str	r1, [sp, #0]
 8006fde:	462b      	mov	r3, r5
 8006fe0:	4905      	ldr	r1, [pc, #20]	@ (8006ff8 <__assert_func+0x34>)
 8006fe2:	f000 f86f 	bl	80070c4 <fiprintf>
 8006fe6:	f000 f87f 	bl	80070e8 <abort>
 8006fea:	4b04      	ldr	r3, [pc, #16]	@ (8006ffc <__assert_func+0x38>)
 8006fec:	e7f4      	b.n	8006fd8 <__assert_func+0x14>
 8006fee:	bf00      	nop
 8006ff0:	20000020 	.word	0x20000020
 8006ff4:	080080a6 	.word	0x080080a6
 8006ff8:	08008078 	.word	0x08008078
 8006ffc:	0800806b 	.word	0x0800806b

08007000 <_calloc_r>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	fba1 5402 	umull	r5, r4, r1, r2
 8007006:	b93c      	cbnz	r4, 8007018 <_calloc_r+0x18>
 8007008:	4629      	mov	r1, r5
 800700a:	f7ff f997 	bl	800633c <_malloc_r>
 800700e:	4606      	mov	r6, r0
 8007010:	b928      	cbnz	r0, 800701e <_calloc_r+0x1e>
 8007012:	2600      	movs	r6, #0
 8007014:	4630      	mov	r0, r6
 8007016:	bd70      	pop	{r4, r5, r6, pc}
 8007018:	220c      	movs	r2, #12
 800701a:	6002      	str	r2, [r0, #0]
 800701c:	e7f9      	b.n	8007012 <_calloc_r+0x12>
 800701e:	462a      	mov	r2, r5
 8007020:	4621      	mov	r1, r4
 8007022:	f7fe fa3a 	bl	800549a <memset>
 8007026:	e7f5      	b.n	8007014 <_calloc_r+0x14>

08007028 <__ascii_mbtowc>:
 8007028:	b082      	sub	sp, #8
 800702a:	b901      	cbnz	r1, 800702e <__ascii_mbtowc+0x6>
 800702c:	a901      	add	r1, sp, #4
 800702e:	b142      	cbz	r2, 8007042 <__ascii_mbtowc+0x1a>
 8007030:	b14b      	cbz	r3, 8007046 <__ascii_mbtowc+0x1e>
 8007032:	7813      	ldrb	r3, [r2, #0]
 8007034:	600b      	str	r3, [r1, #0]
 8007036:	7812      	ldrb	r2, [r2, #0]
 8007038:	1e10      	subs	r0, r2, #0
 800703a:	bf18      	it	ne
 800703c:	2001      	movne	r0, #1
 800703e:	b002      	add	sp, #8
 8007040:	4770      	bx	lr
 8007042:	4610      	mov	r0, r2
 8007044:	e7fb      	b.n	800703e <__ascii_mbtowc+0x16>
 8007046:	f06f 0001 	mvn.w	r0, #1
 800704a:	e7f8      	b.n	800703e <__ascii_mbtowc+0x16>

0800704c <_realloc_r>:
 800704c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007050:	4680      	mov	r8, r0
 8007052:	4615      	mov	r5, r2
 8007054:	460c      	mov	r4, r1
 8007056:	b921      	cbnz	r1, 8007062 <_realloc_r+0x16>
 8007058:	4611      	mov	r1, r2
 800705a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	f7ff b96d 	b.w	800633c <_malloc_r>
 8007062:	b92a      	cbnz	r2, 8007070 <_realloc_r+0x24>
 8007064:	f7ff f8f8 	bl	8006258 <_free_r>
 8007068:	2400      	movs	r4, #0
 800706a:	4620      	mov	r0, r4
 800706c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007070:	f000 f841 	bl	80070f6 <_malloc_usable_size_r>
 8007074:	4285      	cmp	r5, r0
 8007076:	4606      	mov	r6, r0
 8007078:	d802      	bhi.n	8007080 <_realloc_r+0x34>
 800707a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800707e:	d8f4      	bhi.n	800706a <_realloc_r+0x1e>
 8007080:	4629      	mov	r1, r5
 8007082:	4640      	mov	r0, r8
 8007084:	f7ff f95a 	bl	800633c <_malloc_r>
 8007088:	4607      	mov	r7, r0
 800708a:	2800      	cmp	r0, #0
 800708c:	d0ec      	beq.n	8007068 <_realloc_r+0x1c>
 800708e:	42b5      	cmp	r5, r6
 8007090:	462a      	mov	r2, r5
 8007092:	4621      	mov	r1, r4
 8007094:	bf28      	it	cs
 8007096:	4632      	movcs	r2, r6
 8007098:	f7ff ff86 	bl	8006fa8 <memcpy>
 800709c:	4621      	mov	r1, r4
 800709e:	4640      	mov	r0, r8
 80070a0:	f7ff f8da 	bl	8006258 <_free_r>
 80070a4:	463c      	mov	r4, r7
 80070a6:	e7e0      	b.n	800706a <_realloc_r+0x1e>

080070a8 <__ascii_wctomb>:
 80070a8:	4603      	mov	r3, r0
 80070aa:	4608      	mov	r0, r1
 80070ac:	b141      	cbz	r1, 80070c0 <__ascii_wctomb+0x18>
 80070ae:	2aff      	cmp	r2, #255	@ 0xff
 80070b0:	d904      	bls.n	80070bc <__ascii_wctomb+0x14>
 80070b2:	228a      	movs	r2, #138	@ 0x8a
 80070b4:	f04f 30ff 	mov.w	r0, #4294967295
 80070b8:	601a      	str	r2, [r3, #0]
 80070ba:	4770      	bx	lr
 80070bc:	2001      	movs	r0, #1
 80070be:	700a      	strb	r2, [r1, #0]
 80070c0:	4770      	bx	lr
	...

080070c4 <fiprintf>:
 80070c4:	b40e      	push	{r1, r2, r3}
 80070c6:	b503      	push	{r0, r1, lr}
 80070c8:	4601      	mov	r1, r0
 80070ca:	ab03      	add	r3, sp, #12
 80070cc:	4805      	ldr	r0, [pc, #20]	@ (80070e4 <fiprintf+0x20>)
 80070ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80070d2:	6800      	ldr	r0, [r0, #0]
 80070d4:	9301      	str	r3, [sp, #4]
 80070d6:	f000 f83d 	bl	8007154 <_vfiprintf_r>
 80070da:	b002      	add	sp, #8
 80070dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80070e0:	b003      	add	sp, #12
 80070e2:	4770      	bx	lr
 80070e4:	20000020 	.word	0x20000020

080070e8 <abort>:
 80070e8:	2006      	movs	r0, #6
 80070ea:	b508      	push	{r3, lr}
 80070ec:	f000 fa06 	bl	80074fc <raise>
 80070f0:	2001      	movs	r0, #1
 80070f2:	f7fa fdb0 	bl	8001c56 <_exit>

080070f6 <_malloc_usable_size_r>:
 80070f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070fa:	1f18      	subs	r0, r3, #4
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	bfbc      	itt	lt
 8007100:	580b      	ldrlt	r3, [r1, r0]
 8007102:	18c0      	addlt	r0, r0, r3
 8007104:	4770      	bx	lr

08007106 <__sfputc_r>:
 8007106:	6893      	ldr	r3, [r2, #8]
 8007108:	b410      	push	{r4}
 800710a:	3b01      	subs	r3, #1
 800710c:	2b00      	cmp	r3, #0
 800710e:	6093      	str	r3, [r2, #8]
 8007110:	da07      	bge.n	8007122 <__sfputc_r+0x1c>
 8007112:	6994      	ldr	r4, [r2, #24]
 8007114:	42a3      	cmp	r3, r4
 8007116:	db01      	blt.n	800711c <__sfputc_r+0x16>
 8007118:	290a      	cmp	r1, #10
 800711a:	d102      	bne.n	8007122 <__sfputc_r+0x1c>
 800711c:	bc10      	pop	{r4}
 800711e:	f000 b931 	b.w	8007384 <__swbuf_r>
 8007122:	6813      	ldr	r3, [r2, #0]
 8007124:	1c58      	adds	r0, r3, #1
 8007126:	6010      	str	r0, [r2, #0]
 8007128:	7019      	strb	r1, [r3, #0]
 800712a:	4608      	mov	r0, r1
 800712c:	bc10      	pop	{r4}
 800712e:	4770      	bx	lr

08007130 <__sfputs_r>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	4606      	mov	r6, r0
 8007134:	460f      	mov	r7, r1
 8007136:	4614      	mov	r4, r2
 8007138:	18d5      	adds	r5, r2, r3
 800713a:	42ac      	cmp	r4, r5
 800713c:	d101      	bne.n	8007142 <__sfputs_r+0x12>
 800713e:	2000      	movs	r0, #0
 8007140:	e007      	b.n	8007152 <__sfputs_r+0x22>
 8007142:	463a      	mov	r2, r7
 8007144:	4630      	mov	r0, r6
 8007146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714a:	f7ff ffdc 	bl	8007106 <__sfputc_r>
 800714e:	1c43      	adds	r3, r0, #1
 8007150:	d1f3      	bne.n	800713a <__sfputs_r+0xa>
 8007152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007154 <_vfiprintf_r>:
 8007154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007158:	460d      	mov	r5, r1
 800715a:	4614      	mov	r4, r2
 800715c:	4698      	mov	r8, r3
 800715e:	4606      	mov	r6, r0
 8007160:	b09d      	sub	sp, #116	@ 0x74
 8007162:	b118      	cbz	r0, 800716c <_vfiprintf_r+0x18>
 8007164:	6a03      	ldr	r3, [r0, #32]
 8007166:	b90b      	cbnz	r3, 800716c <_vfiprintf_r+0x18>
 8007168:	f7fe f8fe 	bl	8005368 <__sinit>
 800716c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800716e:	07d9      	lsls	r1, r3, #31
 8007170:	d405      	bmi.n	800717e <_vfiprintf_r+0x2a>
 8007172:	89ab      	ldrh	r3, [r5, #12]
 8007174:	059a      	lsls	r2, r3, #22
 8007176:	d402      	bmi.n	800717e <_vfiprintf_r+0x2a>
 8007178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800717a:	f7fe fa0c 	bl	8005596 <__retarget_lock_acquire_recursive>
 800717e:	89ab      	ldrh	r3, [r5, #12]
 8007180:	071b      	lsls	r3, r3, #28
 8007182:	d501      	bpl.n	8007188 <_vfiprintf_r+0x34>
 8007184:	692b      	ldr	r3, [r5, #16]
 8007186:	b99b      	cbnz	r3, 80071b0 <_vfiprintf_r+0x5c>
 8007188:	4629      	mov	r1, r5
 800718a:	4630      	mov	r0, r6
 800718c:	f000 f938 	bl	8007400 <__swsetup_r>
 8007190:	b170      	cbz	r0, 80071b0 <_vfiprintf_r+0x5c>
 8007192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007194:	07dc      	lsls	r4, r3, #31
 8007196:	d504      	bpl.n	80071a2 <_vfiprintf_r+0x4e>
 8007198:	f04f 30ff 	mov.w	r0, #4294967295
 800719c:	b01d      	add	sp, #116	@ 0x74
 800719e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	0598      	lsls	r0, r3, #22
 80071a6:	d4f7      	bmi.n	8007198 <_vfiprintf_r+0x44>
 80071a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071aa:	f7fe f9f5 	bl	8005598 <__retarget_lock_release_recursive>
 80071ae:	e7f3      	b.n	8007198 <_vfiprintf_r+0x44>
 80071b0:	2300      	movs	r3, #0
 80071b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b4:	2320      	movs	r3, #32
 80071b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80071ba:	2330      	movs	r3, #48	@ 0x30
 80071bc:	f04f 0901 	mov.w	r9, #1
 80071c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80071c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007370 <_vfiprintf_r+0x21c>
 80071c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80071cc:	4623      	mov	r3, r4
 80071ce:	469a      	mov	sl, r3
 80071d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071d4:	b10a      	cbz	r2, 80071da <_vfiprintf_r+0x86>
 80071d6:	2a25      	cmp	r2, #37	@ 0x25
 80071d8:	d1f9      	bne.n	80071ce <_vfiprintf_r+0x7a>
 80071da:	ebba 0b04 	subs.w	fp, sl, r4
 80071de:	d00b      	beq.n	80071f8 <_vfiprintf_r+0xa4>
 80071e0:	465b      	mov	r3, fp
 80071e2:	4622      	mov	r2, r4
 80071e4:	4629      	mov	r1, r5
 80071e6:	4630      	mov	r0, r6
 80071e8:	f7ff ffa2 	bl	8007130 <__sfputs_r>
 80071ec:	3001      	adds	r0, #1
 80071ee:	f000 80a7 	beq.w	8007340 <_vfiprintf_r+0x1ec>
 80071f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071f4:	445a      	add	r2, fp
 80071f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80071f8:	f89a 3000 	ldrb.w	r3, [sl]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	f000 809f 	beq.w	8007340 <_vfiprintf_r+0x1ec>
 8007202:	2300      	movs	r3, #0
 8007204:	f04f 32ff 	mov.w	r2, #4294967295
 8007208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800720c:	f10a 0a01 	add.w	sl, sl, #1
 8007210:	9304      	str	r3, [sp, #16]
 8007212:	9307      	str	r3, [sp, #28]
 8007214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007218:	931a      	str	r3, [sp, #104]	@ 0x68
 800721a:	4654      	mov	r4, sl
 800721c:	2205      	movs	r2, #5
 800721e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007222:	4853      	ldr	r0, [pc, #332]	@ (8007370 <_vfiprintf_r+0x21c>)
 8007224:	f7fe f9b9 	bl	800559a <memchr>
 8007228:	9a04      	ldr	r2, [sp, #16]
 800722a:	b9d8      	cbnz	r0, 8007264 <_vfiprintf_r+0x110>
 800722c:	06d1      	lsls	r1, r2, #27
 800722e:	bf44      	itt	mi
 8007230:	2320      	movmi	r3, #32
 8007232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007236:	0713      	lsls	r3, r2, #28
 8007238:	bf44      	itt	mi
 800723a:	232b      	movmi	r3, #43	@ 0x2b
 800723c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007240:	f89a 3000 	ldrb.w	r3, [sl]
 8007244:	2b2a      	cmp	r3, #42	@ 0x2a
 8007246:	d015      	beq.n	8007274 <_vfiprintf_r+0x120>
 8007248:	4654      	mov	r4, sl
 800724a:	2000      	movs	r0, #0
 800724c:	f04f 0c0a 	mov.w	ip, #10
 8007250:	9a07      	ldr	r2, [sp, #28]
 8007252:	4621      	mov	r1, r4
 8007254:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007258:	3b30      	subs	r3, #48	@ 0x30
 800725a:	2b09      	cmp	r3, #9
 800725c:	d94b      	bls.n	80072f6 <_vfiprintf_r+0x1a2>
 800725e:	b1b0      	cbz	r0, 800728e <_vfiprintf_r+0x13a>
 8007260:	9207      	str	r2, [sp, #28]
 8007262:	e014      	b.n	800728e <_vfiprintf_r+0x13a>
 8007264:	eba0 0308 	sub.w	r3, r0, r8
 8007268:	fa09 f303 	lsl.w	r3, r9, r3
 800726c:	4313      	orrs	r3, r2
 800726e:	46a2      	mov	sl, r4
 8007270:	9304      	str	r3, [sp, #16]
 8007272:	e7d2      	b.n	800721a <_vfiprintf_r+0xc6>
 8007274:	9b03      	ldr	r3, [sp, #12]
 8007276:	1d19      	adds	r1, r3, #4
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	9103      	str	r1, [sp, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	bfbb      	ittet	lt
 8007280:	425b      	neglt	r3, r3
 8007282:	f042 0202 	orrlt.w	r2, r2, #2
 8007286:	9307      	strge	r3, [sp, #28]
 8007288:	9307      	strlt	r3, [sp, #28]
 800728a:	bfb8      	it	lt
 800728c:	9204      	strlt	r2, [sp, #16]
 800728e:	7823      	ldrb	r3, [r4, #0]
 8007290:	2b2e      	cmp	r3, #46	@ 0x2e
 8007292:	d10a      	bne.n	80072aa <_vfiprintf_r+0x156>
 8007294:	7863      	ldrb	r3, [r4, #1]
 8007296:	2b2a      	cmp	r3, #42	@ 0x2a
 8007298:	d132      	bne.n	8007300 <_vfiprintf_r+0x1ac>
 800729a:	9b03      	ldr	r3, [sp, #12]
 800729c:	3402      	adds	r4, #2
 800729e:	1d1a      	adds	r2, r3, #4
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	9203      	str	r2, [sp, #12]
 80072a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072a8:	9305      	str	r3, [sp, #20]
 80072aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007374 <_vfiprintf_r+0x220>
 80072ae:	2203      	movs	r2, #3
 80072b0:	4650      	mov	r0, sl
 80072b2:	7821      	ldrb	r1, [r4, #0]
 80072b4:	f7fe f971 	bl	800559a <memchr>
 80072b8:	b138      	cbz	r0, 80072ca <_vfiprintf_r+0x176>
 80072ba:	2240      	movs	r2, #64	@ 0x40
 80072bc:	9b04      	ldr	r3, [sp, #16]
 80072be:	eba0 000a 	sub.w	r0, r0, sl
 80072c2:	4082      	lsls	r2, r0
 80072c4:	4313      	orrs	r3, r2
 80072c6:	3401      	adds	r4, #1
 80072c8:	9304      	str	r3, [sp, #16]
 80072ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ce:	2206      	movs	r2, #6
 80072d0:	4829      	ldr	r0, [pc, #164]	@ (8007378 <_vfiprintf_r+0x224>)
 80072d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072d6:	f7fe f960 	bl	800559a <memchr>
 80072da:	2800      	cmp	r0, #0
 80072dc:	d03f      	beq.n	800735e <_vfiprintf_r+0x20a>
 80072de:	4b27      	ldr	r3, [pc, #156]	@ (800737c <_vfiprintf_r+0x228>)
 80072e0:	bb1b      	cbnz	r3, 800732a <_vfiprintf_r+0x1d6>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	3307      	adds	r3, #7
 80072e6:	f023 0307 	bic.w	r3, r3, #7
 80072ea:	3308      	adds	r3, #8
 80072ec:	9303      	str	r3, [sp, #12]
 80072ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072f0:	443b      	add	r3, r7
 80072f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072f4:	e76a      	b.n	80071cc <_vfiprintf_r+0x78>
 80072f6:	460c      	mov	r4, r1
 80072f8:	2001      	movs	r0, #1
 80072fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80072fe:	e7a8      	b.n	8007252 <_vfiprintf_r+0xfe>
 8007300:	2300      	movs	r3, #0
 8007302:	f04f 0c0a 	mov.w	ip, #10
 8007306:	4619      	mov	r1, r3
 8007308:	3401      	adds	r4, #1
 800730a:	9305      	str	r3, [sp, #20]
 800730c:	4620      	mov	r0, r4
 800730e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007312:	3a30      	subs	r2, #48	@ 0x30
 8007314:	2a09      	cmp	r2, #9
 8007316:	d903      	bls.n	8007320 <_vfiprintf_r+0x1cc>
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0c6      	beq.n	80072aa <_vfiprintf_r+0x156>
 800731c:	9105      	str	r1, [sp, #20]
 800731e:	e7c4      	b.n	80072aa <_vfiprintf_r+0x156>
 8007320:	4604      	mov	r4, r0
 8007322:	2301      	movs	r3, #1
 8007324:	fb0c 2101 	mla	r1, ip, r1, r2
 8007328:	e7f0      	b.n	800730c <_vfiprintf_r+0x1b8>
 800732a:	ab03      	add	r3, sp, #12
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	462a      	mov	r2, r5
 8007330:	4630      	mov	r0, r6
 8007332:	4b13      	ldr	r3, [pc, #76]	@ (8007380 <_vfiprintf_r+0x22c>)
 8007334:	a904      	add	r1, sp, #16
 8007336:	f7fd fbcd 	bl	8004ad4 <_printf_float>
 800733a:	4607      	mov	r7, r0
 800733c:	1c78      	adds	r0, r7, #1
 800733e:	d1d6      	bne.n	80072ee <_vfiprintf_r+0x19a>
 8007340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007342:	07d9      	lsls	r1, r3, #31
 8007344:	d405      	bmi.n	8007352 <_vfiprintf_r+0x1fe>
 8007346:	89ab      	ldrh	r3, [r5, #12]
 8007348:	059a      	lsls	r2, r3, #22
 800734a:	d402      	bmi.n	8007352 <_vfiprintf_r+0x1fe>
 800734c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800734e:	f7fe f923 	bl	8005598 <__retarget_lock_release_recursive>
 8007352:	89ab      	ldrh	r3, [r5, #12]
 8007354:	065b      	lsls	r3, r3, #25
 8007356:	f53f af1f 	bmi.w	8007198 <_vfiprintf_r+0x44>
 800735a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800735c:	e71e      	b.n	800719c <_vfiprintf_r+0x48>
 800735e:	ab03      	add	r3, sp, #12
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	462a      	mov	r2, r5
 8007364:	4630      	mov	r0, r6
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <_vfiprintf_r+0x22c>)
 8007368:	a904      	add	r1, sp, #16
 800736a:	f7fd fe51 	bl	8005010 <_printf_i>
 800736e:	e7e4      	b.n	800733a <_vfiprintf_r+0x1e6>
 8007370:	08008050 	.word	0x08008050
 8007374:	08008056 	.word	0x08008056
 8007378:	0800805a 	.word	0x0800805a
 800737c:	08004ad5 	.word	0x08004ad5
 8007380:	08007131 	.word	0x08007131

08007384 <__swbuf_r>:
 8007384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007386:	460e      	mov	r6, r1
 8007388:	4614      	mov	r4, r2
 800738a:	4605      	mov	r5, r0
 800738c:	b118      	cbz	r0, 8007396 <__swbuf_r+0x12>
 800738e:	6a03      	ldr	r3, [r0, #32]
 8007390:	b90b      	cbnz	r3, 8007396 <__swbuf_r+0x12>
 8007392:	f7fd ffe9 	bl	8005368 <__sinit>
 8007396:	69a3      	ldr	r3, [r4, #24]
 8007398:	60a3      	str	r3, [r4, #8]
 800739a:	89a3      	ldrh	r3, [r4, #12]
 800739c:	071a      	lsls	r2, r3, #28
 800739e:	d501      	bpl.n	80073a4 <__swbuf_r+0x20>
 80073a0:	6923      	ldr	r3, [r4, #16]
 80073a2:	b943      	cbnz	r3, 80073b6 <__swbuf_r+0x32>
 80073a4:	4621      	mov	r1, r4
 80073a6:	4628      	mov	r0, r5
 80073a8:	f000 f82a 	bl	8007400 <__swsetup_r>
 80073ac:	b118      	cbz	r0, 80073b6 <__swbuf_r+0x32>
 80073ae:	f04f 37ff 	mov.w	r7, #4294967295
 80073b2:	4638      	mov	r0, r7
 80073b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073b6:	6823      	ldr	r3, [r4, #0]
 80073b8:	6922      	ldr	r2, [r4, #16]
 80073ba:	b2f6      	uxtb	r6, r6
 80073bc:	1a98      	subs	r0, r3, r2
 80073be:	6963      	ldr	r3, [r4, #20]
 80073c0:	4637      	mov	r7, r6
 80073c2:	4283      	cmp	r3, r0
 80073c4:	dc05      	bgt.n	80073d2 <__swbuf_r+0x4e>
 80073c6:	4621      	mov	r1, r4
 80073c8:	4628      	mov	r0, r5
 80073ca:	f7ff fd9b 	bl	8006f04 <_fflush_r>
 80073ce:	2800      	cmp	r0, #0
 80073d0:	d1ed      	bne.n	80073ae <__swbuf_r+0x2a>
 80073d2:	68a3      	ldr	r3, [r4, #8]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	60a3      	str	r3, [r4, #8]
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	6022      	str	r2, [r4, #0]
 80073de:	701e      	strb	r6, [r3, #0]
 80073e0:	6962      	ldr	r2, [r4, #20]
 80073e2:	1c43      	adds	r3, r0, #1
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d004      	beq.n	80073f2 <__swbuf_r+0x6e>
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	07db      	lsls	r3, r3, #31
 80073ec:	d5e1      	bpl.n	80073b2 <__swbuf_r+0x2e>
 80073ee:	2e0a      	cmp	r6, #10
 80073f0:	d1df      	bne.n	80073b2 <__swbuf_r+0x2e>
 80073f2:	4621      	mov	r1, r4
 80073f4:	4628      	mov	r0, r5
 80073f6:	f7ff fd85 	bl	8006f04 <_fflush_r>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d0d9      	beq.n	80073b2 <__swbuf_r+0x2e>
 80073fe:	e7d6      	b.n	80073ae <__swbuf_r+0x2a>

08007400 <__swsetup_r>:
 8007400:	b538      	push	{r3, r4, r5, lr}
 8007402:	4b29      	ldr	r3, [pc, #164]	@ (80074a8 <__swsetup_r+0xa8>)
 8007404:	4605      	mov	r5, r0
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	460c      	mov	r4, r1
 800740a:	b118      	cbz	r0, 8007414 <__swsetup_r+0x14>
 800740c:	6a03      	ldr	r3, [r0, #32]
 800740e:	b90b      	cbnz	r3, 8007414 <__swsetup_r+0x14>
 8007410:	f7fd ffaa 	bl	8005368 <__sinit>
 8007414:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007418:	0719      	lsls	r1, r3, #28
 800741a:	d422      	bmi.n	8007462 <__swsetup_r+0x62>
 800741c:	06da      	lsls	r2, r3, #27
 800741e:	d407      	bmi.n	8007430 <__swsetup_r+0x30>
 8007420:	2209      	movs	r2, #9
 8007422:	602a      	str	r2, [r5, #0]
 8007424:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	e033      	b.n	8007498 <__swsetup_r+0x98>
 8007430:	0758      	lsls	r0, r3, #29
 8007432:	d512      	bpl.n	800745a <__swsetup_r+0x5a>
 8007434:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007436:	b141      	cbz	r1, 800744a <__swsetup_r+0x4a>
 8007438:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <__swsetup_r+0x46>
 8007440:	4628      	mov	r0, r5
 8007442:	f7fe ff09 	bl	8006258 <_free_r>
 8007446:	2300      	movs	r3, #0
 8007448:	6363      	str	r3, [r4, #52]	@ 0x34
 800744a:	89a3      	ldrh	r3, [r4, #12]
 800744c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007450:	81a3      	strh	r3, [r4, #12]
 8007452:	2300      	movs	r3, #0
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6923      	ldr	r3, [r4, #16]
 8007458:	6023      	str	r3, [r4, #0]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	f043 0308 	orr.w	r3, r3, #8
 8007460:	81a3      	strh	r3, [r4, #12]
 8007462:	6923      	ldr	r3, [r4, #16]
 8007464:	b94b      	cbnz	r3, 800747a <__swsetup_r+0x7a>
 8007466:	89a3      	ldrh	r3, [r4, #12]
 8007468:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800746c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007470:	d003      	beq.n	800747a <__swsetup_r+0x7a>
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 f882 	bl	800757e <__smakebuf_r>
 800747a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800747e:	f013 0201 	ands.w	r2, r3, #1
 8007482:	d00a      	beq.n	800749a <__swsetup_r+0x9a>
 8007484:	2200      	movs	r2, #0
 8007486:	60a2      	str	r2, [r4, #8]
 8007488:	6962      	ldr	r2, [r4, #20]
 800748a:	4252      	negs	r2, r2
 800748c:	61a2      	str	r2, [r4, #24]
 800748e:	6922      	ldr	r2, [r4, #16]
 8007490:	b942      	cbnz	r2, 80074a4 <__swsetup_r+0xa4>
 8007492:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007496:	d1c5      	bne.n	8007424 <__swsetup_r+0x24>
 8007498:	bd38      	pop	{r3, r4, r5, pc}
 800749a:	0799      	lsls	r1, r3, #30
 800749c:	bf58      	it	pl
 800749e:	6962      	ldrpl	r2, [r4, #20]
 80074a0:	60a2      	str	r2, [r4, #8]
 80074a2:	e7f4      	b.n	800748e <__swsetup_r+0x8e>
 80074a4:	2000      	movs	r0, #0
 80074a6:	e7f7      	b.n	8007498 <__swsetup_r+0x98>
 80074a8:	20000020 	.word	0x20000020

080074ac <_raise_r>:
 80074ac:	291f      	cmp	r1, #31
 80074ae:	b538      	push	{r3, r4, r5, lr}
 80074b0:	4605      	mov	r5, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	d904      	bls.n	80074c0 <_raise_r+0x14>
 80074b6:	2316      	movs	r3, #22
 80074b8:	6003      	str	r3, [r0, #0]
 80074ba:	f04f 30ff 	mov.w	r0, #4294967295
 80074be:	bd38      	pop	{r3, r4, r5, pc}
 80074c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074c2:	b112      	cbz	r2, 80074ca <_raise_r+0x1e>
 80074c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074c8:	b94b      	cbnz	r3, 80074de <_raise_r+0x32>
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 f830 	bl	8007530 <_getpid_r>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4601      	mov	r1, r0
 80074d4:	4628      	mov	r0, r5
 80074d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074da:	f000 b817 	b.w	800750c <_kill_r>
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d00a      	beq.n	80074f8 <_raise_r+0x4c>
 80074e2:	1c59      	adds	r1, r3, #1
 80074e4:	d103      	bne.n	80074ee <_raise_r+0x42>
 80074e6:	2316      	movs	r3, #22
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	2001      	movs	r0, #1
 80074ec:	e7e7      	b.n	80074be <_raise_r+0x12>
 80074ee:	2100      	movs	r1, #0
 80074f0:	4620      	mov	r0, r4
 80074f2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074f6:	4798      	blx	r3
 80074f8:	2000      	movs	r0, #0
 80074fa:	e7e0      	b.n	80074be <_raise_r+0x12>

080074fc <raise>:
 80074fc:	4b02      	ldr	r3, [pc, #8]	@ (8007508 <raise+0xc>)
 80074fe:	4601      	mov	r1, r0
 8007500:	6818      	ldr	r0, [r3, #0]
 8007502:	f7ff bfd3 	b.w	80074ac <_raise_r>
 8007506:	bf00      	nop
 8007508:	20000020 	.word	0x20000020

0800750c <_kill_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	2300      	movs	r3, #0
 8007510:	4d06      	ldr	r5, [pc, #24]	@ (800752c <_kill_r+0x20>)
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f7fa fb8c 	bl	8001c36 <_kill>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d102      	bne.n	8007528 <_kill_r+0x1c>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b103      	cbz	r3, 8007528 <_kill_r+0x1c>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd38      	pop	{r3, r4, r5, pc}
 800752a:	bf00      	nop
 800752c:	20000854 	.word	0x20000854

08007530 <_getpid_r>:
 8007530:	f7fa bb7a 	b.w	8001c28 <_getpid>

08007534 <__swhatbuf_r>:
 8007534:	b570      	push	{r4, r5, r6, lr}
 8007536:	460c      	mov	r4, r1
 8007538:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800753c:	4615      	mov	r5, r2
 800753e:	2900      	cmp	r1, #0
 8007540:	461e      	mov	r6, r3
 8007542:	b096      	sub	sp, #88	@ 0x58
 8007544:	da0c      	bge.n	8007560 <__swhatbuf_r+0x2c>
 8007546:	89a3      	ldrh	r3, [r4, #12]
 8007548:	2100      	movs	r1, #0
 800754a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800754e:	bf14      	ite	ne
 8007550:	2340      	movne	r3, #64	@ 0x40
 8007552:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007556:	2000      	movs	r0, #0
 8007558:	6031      	str	r1, [r6, #0]
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	b016      	add	sp, #88	@ 0x58
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	466a      	mov	r2, sp
 8007562:	f000 f849 	bl	80075f8 <_fstat_r>
 8007566:	2800      	cmp	r0, #0
 8007568:	dbed      	blt.n	8007546 <__swhatbuf_r+0x12>
 800756a:	9901      	ldr	r1, [sp, #4]
 800756c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007570:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007574:	4259      	negs	r1, r3
 8007576:	4159      	adcs	r1, r3
 8007578:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800757c:	e7eb      	b.n	8007556 <__swhatbuf_r+0x22>

0800757e <__smakebuf_r>:
 800757e:	898b      	ldrh	r3, [r1, #12]
 8007580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007582:	079d      	lsls	r5, r3, #30
 8007584:	4606      	mov	r6, r0
 8007586:	460c      	mov	r4, r1
 8007588:	d507      	bpl.n	800759a <__smakebuf_r+0x1c>
 800758a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800758e:	6023      	str	r3, [r4, #0]
 8007590:	6123      	str	r3, [r4, #16]
 8007592:	2301      	movs	r3, #1
 8007594:	6163      	str	r3, [r4, #20]
 8007596:	b003      	add	sp, #12
 8007598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800759a:	466a      	mov	r2, sp
 800759c:	ab01      	add	r3, sp, #4
 800759e:	f7ff ffc9 	bl	8007534 <__swhatbuf_r>
 80075a2:	9f00      	ldr	r7, [sp, #0]
 80075a4:	4605      	mov	r5, r0
 80075a6:	4639      	mov	r1, r7
 80075a8:	4630      	mov	r0, r6
 80075aa:	f7fe fec7 	bl	800633c <_malloc_r>
 80075ae:	b948      	cbnz	r0, 80075c4 <__smakebuf_r+0x46>
 80075b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b4:	059a      	lsls	r2, r3, #22
 80075b6:	d4ee      	bmi.n	8007596 <__smakebuf_r+0x18>
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	f043 0302 	orr.w	r3, r3, #2
 80075c0:	81a3      	strh	r3, [r4, #12]
 80075c2:	e7e2      	b.n	800758a <__smakebuf_r+0xc>
 80075c4:	89a3      	ldrh	r3, [r4, #12]
 80075c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80075ce:	81a3      	strh	r3, [r4, #12]
 80075d0:	9b01      	ldr	r3, [sp, #4]
 80075d2:	6020      	str	r0, [r4, #0]
 80075d4:	b15b      	cbz	r3, 80075ee <__smakebuf_r+0x70>
 80075d6:	4630      	mov	r0, r6
 80075d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075dc:	f000 f81e 	bl	800761c <_isatty_r>
 80075e0:	b128      	cbz	r0, 80075ee <__smakebuf_r+0x70>
 80075e2:	89a3      	ldrh	r3, [r4, #12]
 80075e4:	f023 0303 	bic.w	r3, r3, #3
 80075e8:	f043 0301 	orr.w	r3, r3, #1
 80075ec:	81a3      	strh	r3, [r4, #12]
 80075ee:	89a3      	ldrh	r3, [r4, #12]
 80075f0:	431d      	orrs	r5, r3
 80075f2:	81a5      	strh	r5, [r4, #12]
 80075f4:	e7cf      	b.n	8007596 <__smakebuf_r+0x18>
	...

080075f8 <_fstat_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	2300      	movs	r3, #0
 80075fc:	4d06      	ldr	r5, [pc, #24]	@ (8007618 <_fstat_r+0x20>)
 80075fe:	4604      	mov	r4, r0
 8007600:	4608      	mov	r0, r1
 8007602:	4611      	mov	r1, r2
 8007604:	602b      	str	r3, [r5, #0]
 8007606:	f7fa fb75 	bl	8001cf4 <_fstat>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d102      	bne.n	8007614 <_fstat_r+0x1c>
 800760e:	682b      	ldr	r3, [r5, #0]
 8007610:	b103      	cbz	r3, 8007614 <_fstat_r+0x1c>
 8007612:	6023      	str	r3, [r4, #0]
 8007614:	bd38      	pop	{r3, r4, r5, pc}
 8007616:	bf00      	nop
 8007618:	20000854 	.word	0x20000854

0800761c <_isatty_r>:
 800761c:	b538      	push	{r3, r4, r5, lr}
 800761e:	2300      	movs	r3, #0
 8007620:	4d05      	ldr	r5, [pc, #20]	@ (8007638 <_isatty_r+0x1c>)
 8007622:	4604      	mov	r4, r0
 8007624:	4608      	mov	r0, r1
 8007626:	602b      	str	r3, [r5, #0]
 8007628:	f7fa fb73 	bl	8001d12 <_isatty>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_isatty_r+0x1a>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_isatty_r+0x1a>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	20000854 	.word	0x20000854

0800763c <_init>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr

08007648 <_fini>:
 8007648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800764a:	bf00      	nop
 800764c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800764e:	bc08      	pop	{r3}
 8007650:	469e      	mov	lr, r3
 8007652:	4770      	bx	lr
