
Da_nhiem_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c30  0800b2f8  0800b2f8  0000c2f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf28  0800bf28  0000d1e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf28  0800bf28  0000cf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf30  0800bf30  0000d1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf30  0800bf30  0000cf30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf34  0800bf34  0000cf34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800bf38  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003458  200001e0  0800c118  0000d1e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003638  0800c118  0000d638  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001be66  00000000  00000000  0000d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cee  00000000  00000000  0002906f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e8  00000000  00000000  0002cd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001382  00000000  00000000  0002e648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab2a  00000000  00000000  0002f9ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c659  00000000  00000000  0004a4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000997f7  00000000  00000000  00066b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00100344  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bbc  00000000  00000000  00100388  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00107f44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b2e0 	.word	0x0800b2e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	0800b2e0 	.word	0x0800b2e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <microDelay>:
float humi = 0;

char strCopy[20];

void microDelay (uint16_t delay)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d4e:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <microDelay+0x2c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	2200      	movs	r2, #0
 8000d54:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d56:	bf00      	nop
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <microDelay+0x2c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d3f9      	bcc.n	8000d58 <microDelay+0x14>
}
 8000d64:	bf00      	nop
 8000d66:	bf00      	nop
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bc80      	pop	{r7}
 8000d6e:	4770      	bx	lr
 8000d70:	20000258 	.word	0x20000258

08000d74 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2302      	movs	r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482c      	ldr	r0, [pc, #176]	@ (8000e54 <DHT11_Start+0xe0>)
 8000da2:	f001 fbf9 	bl	8002598 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000da6:	2200      	movs	r2, #0
 8000da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <DHT11_Start+0xe0>)
 8000dae:	f001 fd8e 	bl	80028ce <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000db2:	2014      	movs	r0, #20
 8000db4:	f001 fa3a 	bl	800222c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dbe:	4825      	ldr	r0, [pc, #148]	@ (8000e54 <DHT11_Start+0xe0>)
 8000dc0:	f001 fd85 	bl	80028ce <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000dc4:	201e      	movs	r0, #30
 8000dc6:	f7ff ffbd 	bl	8000d44 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	481f      	ldr	r0, [pc, #124]	@ (8000e54 <DHT11_Start+0xe0>)
 8000dd8:	f001 fbde 	bl	8002598 <HAL_GPIO_Init>
  microDelay (40);
 8000ddc:	2028      	movs	r0, #40	@ 0x28
 8000dde:	f7ff ffb1 	bl	8000d44 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000de2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000de6:	481b      	ldr	r0, [pc, #108]	@ (8000e54 <DHT11_Start+0xe0>)
 8000de8:	f001 fd5a 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d10c      	bne.n	8000e0c <DHT11_Start+0x98>
  {
    microDelay (80);
 8000df2:	2050      	movs	r0, #80	@ 0x50
 8000df4:	f7ff ffa6 	bl	8000d44 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000df8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfc:	4815      	ldr	r0, [pc, #84]	@ (8000e54 <DHT11_Start+0xe0>)
 8000dfe:	f001 fd4f 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <DHT11_Start+0x98>
 8000e08:	2301      	movs	r3, #1
 8000e0a:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000e0c:	f001 fa04 	bl	8002218 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a11      	ldr	r2, [pc, #68]	@ (8000e58 <DHT11_Start+0xe4>)
 8000e14:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000e16:	f001 f9ff 	bl	8002218 <HAL_GetTick>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8000e5c <DHT11_Start+0xe8>)
 8000e1e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e20:	e004      	b.n	8000e2c <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000e22:	f001 f9f9 	bl	8002218 <HAL_GetTick>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <DHT11_Start+0xe8>)
 8000e2a:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e30:	4808      	ldr	r0, [pc, #32]	@ (8000e54 <DHT11_Start+0xe0>)
 8000e32:	f001 fd35 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d006      	beq.n	8000e4a <DHT11_Start+0xd6>
 8000e3c:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <DHT11_Start+0xe4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	1c9a      	adds	r2, r3, #2
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <DHT11_Start+0xe8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d8eb      	bhi.n	8000e22 <DHT11_Start+0xae>
  }
  return Response;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40010c00 	.word	0x40010c00
 8000e58:	20000348 	.word	0x20000348
 8000e5c:	2000034c 	.word	0x2000034c

08000e60 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000e66:	2300      	movs	r3, #0
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e066      	b.n	8000f3a <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000e6c:	f001 f9d4 	bl	8002218 <HAL_GetTick>
 8000e70:	4603      	mov	r3, r0
 8000e72:	4a36      	ldr	r2, [pc, #216]	@ (8000f4c <DHT11_Read+0xec>)
 8000e74:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e76:	f001 f9cf 	bl	8002218 <HAL_GetTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a34      	ldr	r2, [pc, #208]	@ (8000f50 <DHT11_Read+0xf0>)
 8000e7e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e80:	e004      	b.n	8000e8c <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e82:	f001 f9c9 	bl	8002218 <HAL_GetTick>
 8000e86:	4603      	mov	r3, r0
 8000e88:	4a31      	ldr	r2, [pc, #196]	@ (8000f50 <DHT11_Read+0xf0>)
 8000e8a:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e90:	4830      	ldr	r0, [pc, #192]	@ (8000f54 <DHT11_Read+0xf4>)
 8000e92:	f001 fd05 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d106      	bne.n	8000eaa <DHT11_Read+0x4a>
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f4c <DHT11_Read+0xec>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	1c9a      	adds	r2, r3, #2
 8000ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f50 <DHT11_Read+0xf0>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	d8eb      	bhi.n	8000e82 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000eaa:	2028      	movs	r0, #40	@ 0x28
 8000eac:	f7ff ff4a 	bl	8000d44 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000eb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eb4:	4827      	ldr	r0, [pc, #156]	@ (8000f54 <DHT11_Read+0xf4>)
 8000eb6:	f001 fcf3 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d10e      	bne.n	8000ede <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f1c3 0307 	rsb	r3, r3, #7
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	b25b      	sxtb	r3, r3
 8000ece:	43db      	mvns	r3, r3
 8000ed0:	b25a      	sxtb	r2, r3
 8000ed2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	b25b      	sxtb	r3, r3
 8000eda:	71bb      	strb	r3, [r7, #6]
 8000edc:	e00b      	b.n	8000ef6 <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	f1c3 0307 	rsb	r3, r3, #7
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	b25a      	sxtb	r2, r3
 8000eec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	b25b      	sxtb	r3, r3
 8000ef4:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000ef6:	f001 f98f 	bl	8002218 <HAL_GetTick>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a13      	ldr	r2, [pc, #76]	@ (8000f4c <DHT11_Read+0xec>)
 8000efe:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f00:	f001 f98a 	bl	8002218 <HAL_GetTick>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a12      	ldr	r2, [pc, #72]	@ (8000f50 <DHT11_Read+0xf0>)
 8000f08:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f0a:	e004      	b.n	8000f16 <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000f0c:	f001 f984 	bl	8002218 <HAL_GetTick>
 8000f10:	4603      	mov	r3, r0
 8000f12:	4a0f      	ldr	r2, [pc, #60]	@ (8000f50 <DHT11_Read+0xf0>)
 8000f14:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f16:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f1a:	480e      	ldr	r0, [pc, #56]	@ (8000f54 <DHT11_Read+0xf4>)
 8000f1c:	f001 fcc0 	bl	80028a0 <HAL_GPIO_ReadPin>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d006      	beq.n	8000f34 <DHT11_Read+0xd4>
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <DHT11_Read+0xec>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1c9a      	adds	r2, r3, #2
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <DHT11_Read+0xf0>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d8eb      	bhi.n	8000f0c <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	3301      	adds	r3, #1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	d995      	bls.n	8000e6c <DHT11_Read+0xc>
    }
  }
  return b;
 8000f40:	79bb      	ldrb	r3, [r7, #6]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000348 	.word	0x20000348
 8000f50:	2000034c 	.word	0x2000034c
 8000f54:	40010c00 	.word	0x40010c00

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f001 f934 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f860 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f9b0 	bl	80012c8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f68:	f000 f8a2 	bl	80010b0 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000f6c:	f000 f982 	bl	8001274 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000f70:	f000 f8cc 	bl	800110c <MX_TIM1_Init>
  MX_TIM4_Init();
 8000f74:	f000 f91a 	bl	80011ac <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 8000f78:	481b      	ldr	r0, [pc, #108]	@ (8000fe8 <main+0x90>)
 8000f7a:	f002 ff1b 	bl	8003db4 <HAL_TIM_Base_Start>
    SSD1306_Init();
 8000f7e:	f000 fbbb 	bl	80016f8 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f82:	f004 f95d 	bl	8005240 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  tempMutexHandle = osMutexNew(NULL);
 8000f86:	2000      	movs	r0, #0
 8000f88:	f004 fa4f 	bl	800542a <osMutexNew>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	4a17      	ldr	r2, [pc, #92]	@ (8000fec <main+0x94>)
 8000f90:	6013      	str	r3, [r2, #0]
   humMutexHandle = osMutexNew(NULL);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f004 fa49 	bl	800542a <osMutexNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a15      	ldr	r2, [pc, #84]	@ (8000ff0 <main+0x98>)
 8000f9c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of HIEN_THI_OLED */
  HIEN_THI_OLEDHandle = osThreadNew(OLED, NULL, &HIEN_THI_OLED_attributes);
 8000f9e:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <main+0x9c>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4815      	ldr	r0, [pc, #84]	@ (8000ff8 <main+0xa0>)
 8000fa4:	f004 f994 	bl	80052d0 <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a14      	ldr	r2, [pc, #80]	@ (8000ffc <main+0xa4>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of TRUYEN_UART */
  TRUYEN_UARTHandle = osThreadNew(UART, NULL, &TRUYEN_UART_attributes);
 8000fae:	4a14      	ldr	r2, [pc, #80]	@ (8001000 <main+0xa8>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4814      	ldr	r0, [pc, #80]	@ (8001004 <main+0xac>)
 8000fb4:	f004 f98c 	bl	80052d0 <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a13      	ldr	r2, [pc, #76]	@ (8001008 <main+0xb0>)
 8000fbc:	6013      	str	r3, [r2, #0]

  /* creation of DO_NHIET_DO */
  DO_NHIET_DOHandle = osThreadNew(NHIET_DO, NULL, &DO_NHIET_DO_attributes);
 8000fbe:	4a13      	ldr	r2, [pc, #76]	@ (800100c <main+0xb4>)
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4813      	ldr	r0, [pc, #76]	@ (8001010 <main+0xb8>)
 8000fc4:	f004 f984 	bl	80052d0 <osThreadNew>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	4a12      	ldr	r2, [pc, #72]	@ (8001014 <main+0xbc>)
 8000fcc:	6013      	str	r3, [r2, #0]

  /* creation of DO_DO_AM */
  DO_DO_AMHandle = osThreadNew(DO_AM, NULL, &DO_DO_AM_attributes);
 8000fce:	4a12      	ldr	r2, [pc, #72]	@ (8001018 <main+0xc0>)
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4812      	ldr	r0, [pc, #72]	@ (800101c <main+0xc4>)
 8000fd4:	f004 f97c 	bl	80052d0 <osThreadNew>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <main+0xc8>)
 8000fdc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fde:	f004 f951 	bl	8005284 <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 8000fe2:	bf00      	nop
 8000fe4:	e7fd      	b.n	8000fe2 <main+0x8a>
 8000fe6:	bf00      	nop
 8000fe8:	20000258 	.word	0x20000258
 8000fec:	200001fc 	.word	0x200001fc
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	0800bafc 	.word	0x0800bafc
 8000ff8:	08001551 	.word	0x08001551
 8000ffc:	20000330 	.word	0x20000330
 8001000:	0800bb20 	.word	0x0800bb20
 8001004:	08001615 	.word	0x08001615
 8001008:	20000334 	.word	0x20000334
 800100c:	0800bb44 	.word	0x0800bb44
 8001010:	08001361 	.word	0x08001361
 8001014:	20000338 	.word	0x20000338
 8001018:	0800bb68 	.word	0x0800bb68
 800101c:	08001459 	.word	0x08001459
 8001020:	2000033c 	.word	0x2000033c

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	@ 0x40
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	2228      	movs	r2, #40	@ 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f008 f82d 	bl	8009092 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001060:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001062:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fa11 	bl	8003494 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001078:	f000 fb37 	bl	80016ea <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fc7e 	bl	8003998 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010a2:	f000 fb22 	bl	80016ea <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3740      	adds	r7, #64	@ 0x40
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010b6:	4a13      	ldr	r2, [pc, #76]	@ (8001104 <MX_I2C1_Init+0x54>)
 80010b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010bc:	4a12      	ldr	r2, [pc, #72]	@ (8001108 <MX_I2C1_Init+0x58>)
 80010be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010da:	4b09      	ldr	r3, [pc, #36]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e0:	4b07      	ldr	r3, [pc, #28]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ec:	4804      	ldr	r0, [pc, #16]	@ (8001100 <MX_I2C1_Init+0x50>)
 80010ee:	f001 fc07 	bl	8002900 <HAL_I2C_Init>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010f8:	f000 faf7 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000204 	.word	0x20000204
 8001104:	40005400 	.word	0x40005400
 8001108:	00061a80 	.word	0x00061a80

0800110c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001120:	463b      	mov	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001128:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800112a:	4a1f      	ldr	r2, [pc, #124]	@ (80011a8 <MX_TIM1_Init+0x9c>)
 800112c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 800112e:	4b1d      	ldr	r3, [pc, #116]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001130:	2247      	movs	r2, #71	@ 0x47
 8001132:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b1b      	ldr	r3, [pc, #108]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800113a:	4b1a      	ldr	r3, [pc, #104]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800113c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001140:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001142:	4b18      	ldr	r3, [pc, #96]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001144:	2200      	movs	r2, #0
 8001146:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001148:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800114a:	2200      	movs	r2, #0
 800114c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114e:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001150:	2200      	movs	r2, #0
 8001152:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001154:	4813      	ldr	r0, [pc, #76]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001156:	f002 fddd 	bl	8003d14 <HAL_TIM_Base_Init>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001160:	f000 fac3 	bl	80016ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800116a:	f107 0308 	add.w	r3, r7, #8
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <MX_TIM1_Init+0x98>)
 8001172:	f002 ffab 	bl	80040cc <HAL_TIM_ConfigClockSource>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800117c:	f000 fab5 	bl	80016ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	@ (80011a4 <MX_TIM1_Init+0x98>)
 800118e:	f003 f98d 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001198:	f000 faa7 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000258 	.word	0x20000258
 80011a8:	40012c00 	.word	0x40012c00

080011ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
	 __HAL_RCC_TIM4_CLK_ENABLE();
 80011b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001268 <MX_TIM4_Init+0xbc>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001268 <MX_TIM4_Init+0xbc>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b2a      	ldr	r3, [pc, #168]	@ (8001268 <MX_TIM4_Init+0xbc>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0310 	add.w	r3, r7, #16
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <MX_TIM4_Init+0xc0>)
 80011e4:	4a22      	ldr	r2, [pc, #136]	@ (8001270 <MX_TIM4_Init+0xc4>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 71;
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_TIM4_Init+0xc0>)
 80011ea:	2247      	movs	r2, #71	@ 0x47
 80011ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <MX_TIM4_Init+0xc0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_TIM4_Init+0xc0>)
 80011f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_TIM4_Init+0xc0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_TIM4_Init+0xc0>)
 8001204:	2280      	movs	r2, #128	@ 0x80
 8001206:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001208:	4818      	ldr	r0, [pc, #96]	@ (800126c <MX_TIM4_Init+0xc0>)
 800120a:	f002 fd83 	bl	8003d14 <HAL_TIM_Base_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001214:	f000 fa69 	bl	80016ea <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001218:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800121c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800121e:	f107 0310 	add.w	r3, r7, #16
 8001222:	4619      	mov	r1, r3
 8001224:	4811      	ldr	r0, [pc, #68]	@ (800126c <MX_TIM4_Init+0xc0>)
 8001226:	f002 ff51 	bl	80040cc <HAL_TIM_ConfigClockSource>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001230:	f000 fa5b 	bl	80016ea <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4619      	mov	r1, r3
 8001242:	480a      	ldr	r0, [pc, #40]	@ (800126c <MX_TIM4_Init+0xc0>)
 8001244:	f003 f932 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 800124e:	f000 fa4c 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001252:	201e      	movs	r0, #30
 8001254:	f001 f8df 	bl	8002416 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 8001258:	4804      	ldr	r0, [pc, #16]	@ (800126c <MX_TIM4_Init+0xc0>)
 800125a:	f002 fdf5 	bl	8003e48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM4_Init 2 */

}
 800125e:	bf00      	nop
 8001260:	3720      	adds	r7, #32
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	200002a0 	.word	0x200002a0
 8001270:	40000800 	.word	0x40000800

08001274 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001278:	4b11      	ldr	r3, [pc, #68]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <MX_USART1_UART_Init+0x50>)
 800127c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127e:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 8001280:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001284:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b0e      	ldr	r3, [pc, #56]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001292:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b08      	ldr	r3, [pc, #32]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012aa:	4805      	ldr	r0, [pc, #20]	@ (80012c0 <MX_USART1_UART_Init+0x4c>)
 80012ac:	f003 f96e 	bl	800458c <HAL_UART_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012b6:	f000 fa18 	bl	80016ea <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	200002e8 	.word	0x200002e8
 80012c4:	40013800 	.word	0x40013800

080012c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ce:	f107 0310 	add.w	r3, r7, #16
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <MX_GPIO_Init+0x90>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001358 <MX_GPIO_Init+0x90>)
 80012e2:	f043 0320 	orr.w	r3, r3, #32
 80012e6:	6193      	str	r3, [r2, #24]
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <MX_GPIO_Init+0x90>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	f003 0320 	and.w	r3, r3, #32
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <MX_GPIO_Init+0x90>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	4a17      	ldr	r2, [pc, #92]	@ (8001358 <MX_GPIO_Init+0x90>)
 80012fa:	f043 0304 	orr.w	r3, r3, #4
 80012fe:	6193      	str	r3, [r2, #24]
 8001300:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <MX_GPIO_Init+0x90>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	f003 0304 	and.w	r3, r3, #4
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <MX_GPIO_Init+0x90>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	4a11      	ldr	r2, [pc, #68]	@ (8001358 <MX_GPIO_Init+0x90>)
 8001312:	f043 0308 	orr.w	r3, r3, #8
 8001316:	6193      	str	r3, [r2, #24]
 8001318:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <MX_GPIO_Init+0x90>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	f003 0308 	and.w	r3, r3, #8
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001324:	2200      	movs	r2, #0
 8001326:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <MX_GPIO_Init+0x94>)
 800132c:	f001 facf 	bl	80028ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001330:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2302      	movs	r3, #2
 8001340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001342:	f107 0310 	add.w	r3, r7, #16
 8001346:	4619      	mov	r1, r3
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_GPIO_Init+0x94>)
 800134a:	f001 f925 	bl	8002598 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800134e:	bf00      	nop
 8001350:	3720      	adds	r7, #32
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	40010c00 	.word	0x40010c00

08001360 <NHIET_DO>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART */

void NHIET_DO(void *argument) {
 8001360:	b590      	push	{r4, r7, lr}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
    for (;;) {
        osMutexAcquire(tempMutexHandle, osWaitForever);
 8001368:	4b33      	ldr	r3, [pc, #204]	@ (8001438 <NHIET_DO+0xd8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	4618      	mov	r0, r3
 8001372:	f004 f8e0 	bl	8005536 <osMutexAcquire>
        if(DHT11_Start())
 8001376:	f7ff fcfd 	bl	8000d74 <DHT11_Start>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d04c      	beq.n	800141a <NHIET_DO+0xba>
       		      {
       		        RHI = DHT11_Read(); // Relative humidity integral
 8001380:	f7ff fd6e 	bl	8000e60 <DHT11_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b2c      	ldr	r3, [pc, #176]	@ (800143c <NHIET_DO+0xdc>)
 800138a:	701a      	strb	r2, [r3, #0]
       		        RHD = DHT11_Read(); // Relative humidity decimal
 800138c:	f7ff fd68 	bl	8000e60 <DHT11_Read>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b2a      	ldr	r3, [pc, #168]	@ (8001440 <NHIET_DO+0xe0>)
 8001396:	701a      	strb	r2, [r3, #0]
       		        TCI = DHT11_Read(); // Celsius integral
 8001398:	f7ff fd62 	bl	8000e60 <DHT11_Read>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b28      	ldr	r3, [pc, #160]	@ (8001444 <NHIET_DO+0xe4>)
 80013a2:	701a      	strb	r2, [r3, #0]
       		        TCD = DHT11_Read(); // Celsius decimal
 80013a4:	f7ff fd5c 	bl	8000e60 <DHT11_Read>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b26      	ldr	r3, [pc, #152]	@ (8001448 <NHIET_DO+0xe8>)
 80013ae:	701a      	strb	r2, [r3, #0]
       		        SUM = DHT11_Read(); // Check sum
 80013b0:	f7ff fd56 	bl	8000e60 <DHT11_Read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b24      	ldr	r3, [pc, #144]	@ (800144c <NHIET_DO+0xec>)
 80013ba:	701a      	strb	r2, [r3, #0]
       		        if (RHI + RHD + TCI + TCD == SUM)
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <NHIET_DO+0xdc>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001440 <NHIET_DO+0xe0>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001444 <NHIET_DO+0xe4>)
 80013ca:	7812      	ldrb	r2, [r2, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001448 <NHIET_DO+0xe8>)
 80013d0:	7812      	ldrb	r2, [r2, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a1d      	ldr	r2, [pc, #116]	@ (800144c <NHIET_DO+0xec>)
 80013d6:	7812      	ldrb	r2, [r2, #0]
 80013d8:	4293      	cmp	r3, r2
 80013da:	d11e      	bne.n	800141a <NHIET_DO+0xba>
       		        {

       		         temp = (float)TCI + (float)(TCD/10.0);
 80013dc:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <NHIET_DO+0xe4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fc57 	bl	8000c94 <__aeabi_ui2f>
 80013e6:	4604      	mov	r4, r0
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <NHIET_DO+0xe8>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff f809 	bl	8000404 <__aeabi_i2d>
 80013f2:	f04f 0200 	mov.w	r2, #0
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <NHIET_DO+0xf0>)
 80013f8:	f7ff f998 	bl	800072c <__aeabi_ddiv>
 80013fc:	4602      	mov	r2, r0
 80013fe:	460b      	mov	r3, r1
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff fb40 	bl	8000a88 <__aeabi_d2f>
 8001408:	4603      	mov	r3, r0
 800140a:	4619      	mov	r1, r3
 800140c:	4620      	mov	r0, r4
 800140e:	f7ff fb91 	bl	8000b34 <__addsf3>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <NHIET_DO+0xf4>)
 8001418:	601a      	str	r2, [r3, #0]

       }
       		      }
        osMutexRelease(tempMutexHandle);
 800141a:	4b07      	ldr	r3, [pc, #28]	@ (8001438 <NHIET_DO+0xd8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f004 f8d4 	bl	80055cc <osMutexRelease>

        HAL_Delay(500);
 8001424:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001428:	f000 ff00 	bl	800222c <HAL_Delay>
          osDelay(4500);
 800142c:	f241 1094 	movw	r0, #4500	@ 0x1194
 8001430:	f003 ffe0 	bl	80053f4 <osDelay>
        osMutexAcquire(tempMutexHandle, osWaitForever);
 8001434:	e798      	b.n	8001368 <NHIET_DO+0x8>
 8001436:	bf00      	nop
 8001438:	200001fc 	.word	0x200001fc
 800143c:	20000340 	.word	0x20000340
 8001440:	20000341 	.word	0x20000341
 8001444:	20000342 	.word	0x20000342
 8001448:	20000343 	.word	0x20000343
 800144c:	20000344 	.word	0x20000344
 8001450:	40240000 	.word	0x40240000
 8001454:	20000350 	.word	0x20000350

08001458 <DO_AM>:
    }
}

/* Task đo độ ẩm */
void DO_AM(void *argument) {
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
    for (;;) {
        osMutexAcquire(humMutexHandle, osWaitForever);
 8001460:	4b33      	ldr	r3, [pc, #204]	@ (8001530 <DO_AM+0xd8>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f04f 31ff 	mov.w	r1, #4294967295
 8001468:	4618      	mov	r0, r3
 800146a:	f004 f864 	bl	8005536 <osMutexAcquire>

   	 if(DHT11_Start())
 800146e:	f7ff fc81 	bl	8000d74 <DHT11_Start>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d04c      	beq.n	8001512 <DO_AM+0xba>
   		      {
   		        RHI = DHT11_Read(); // Relative humidity integral
 8001478:	f7ff fcf2 	bl	8000e60 <DHT11_Read>
 800147c:	4603      	mov	r3, r0
 800147e:	461a      	mov	r2, r3
 8001480:	4b2c      	ldr	r3, [pc, #176]	@ (8001534 <DO_AM+0xdc>)
 8001482:	701a      	strb	r2, [r3, #0]
   		        RHD = DHT11_Read(); // Relative humidity decimal
 8001484:	f7ff fcec 	bl	8000e60 <DHT11_Read>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b2a      	ldr	r3, [pc, #168]	@ (8001538 <DO_AM+0xe0>)
 800148e:	701a      	strb	r2, [r3, #0]
   		        TCI = DHT11_Read(); // Celsius integral
 8001490:	f7ff fce6 	bl	8000e60 <DHT11_Read>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	4b28      	ldr	r3, [pc, #160]	@ (800153c <DO_AM+0xe4>)
 800149a:	701a      	strb	r2, [r3, #0]
   		        TCD = DHT11_Read(); // Celsius decimal
 800149c:	f7ff fce0 	bl	8000e60 <DHT11_Read>
 80014a0:	4603      	mov	r3, r0
 80014a2:	461a      	mov	r2, r3
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <DO_AM+0xe8>)
 80014a6:	701a      	strb	r2, [r3, #0]
   		        SUM = DHT11_Read(); // Check sum
 80014a8:	f7ff fcda 	bl	8000e60 <DHT11_Read>
 80014ac:	4603      	mov	r3, r0
 80014ae:	461a      	mov	r2, r3
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <DO_AM+0xec>)
 80014b2:	701a      	strb	r2, [r3, #0]
   		       if (RHI + RHD + TCI + TCD == SUM)
 80014b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001534 <DO_AM+0xdc>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	461a      	mov	r2, r3
 80014ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001538 <DO_AM+0xe0>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	4413      	add	r3, r2
 80014c0:	4a1e      	ldr	r2, [pc, #120]	@ (800153c <DO_AM+0xe4>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001540 <DO_AM+0xe8>)
 80014c8:	7812      	ldrb	r2, [r2, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001544 <DO_AM+0xec>)
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d11e      	bne.n	8001512 <DO_AM+0xba>
   		       		        {
   		          humi = (float)RHI + (float)(RHD/10.0);
 80014d4:	4b17      	ldr	r3, [pc, #92]	@ (8001534 <DO_AM+0xdc>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fbdb 	bl	8000c94 <__aeabi_ui2f>
 80014de:	4604      	mov	r4, r0
 80014e0:	4b15      	ldr	r3, [pc, #84]	@ (8001538 <DO_AM+0xe0>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7fe ff8d 	bl	8000404 <__aeabi_i2d>
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <DO_AM+0xf0>)
 80014f0:	f7ff f91c 	bl	800072c <__aeabi_ddiv>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff fac4 	bl	8000a88 <__aeabi_d2f>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f7ff fb15 	bl	8000b34 <__addsf3>
 800150a:	4603      	mov	r3, r0
 800150c:	461a      	mov	r2, r3
 800150e:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <DO_AM+0xf4>)
 8001510:	601a      	str	r2, [r3, #0]



    }

} osMutexRelease(humMutexHandle);
 8001512:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <DO_AM+0xd8>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f004 f858 	bl	80055cc <osMutexRelease>

  HAL_Delay(500);
 800151c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001520:	f000 fe84 	bl	800222c <HAL_Delay>
      osDelay(5000);
 8001524:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001528:	f003 ff64 	bl	80053f4 <osDelay>
        osMutexAcquire(humMutexHandle, osWaitForever);
 800152c:	e798      	b.n	8001460 <DO_AM+0x8>
 800152e:	bf00      	nop
 8001530:	20000200 	.word	0x20000200
 8001534:	20000340 	.word	0x20000340
 8001538:	20000341 	.word	0x20000341
 800153c:	20000342 	.word	0x20000342
 8001540:	20000343 	.word	0x20000343
 8001544:	20000344 	.word	0x20000344
 8001548:	40240000 	.word	0x40240000
 800154c:	20000354 	.word	0x20000354

08001550 <OLED>:
    }
}
/* USER CODE END Header_OLED */
void OLED(void *argument) {
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
    for (;;) {
        osMutexAcquire(tempMutexHandle, osWaitForever);
 8001558:	4b26      	ldr	r3, [pc, #152]	@ (80015f4 <OLED+0xa4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	4618      	mov	r0, r3
 8001562:	f003 ffe8 	bl	8005536 <osMutexAcquire>
        osMutexAcquire(humMutexHandle, osWaitForever);
 8001566:	4b24      	ldr	r3, [pc, #144]	@ (80015f8 <OLED+0xa8>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f04f 31ff 	mov.w	r1, #4294967295
 800156e:	4618      	mov	r0, r3
 8001570:	f003 ffe1 	bl	8005536 <osMutexAcquire>

        SSD1306_Clear();
 8001574:	f000 fae1 	bl	8001b3a <SSD1306_Clear>
        sprintf(strCopy, "TEMP :%.1f C  ", temp);
 8001578:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <OLED+0xac>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe ff53 	bl	8000428 <__aeabi_f2d>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	491e      	ldr	r1, [pc, #120]	@ (8001600 <OLED+0xb0>)
 8001588:	481e      	ldr	r0, [pc, #120]	@ (8001604 <OLED+0xb4>)
 800158a:	f007 fd1f 	bl	8008fcc <siprintf>
        SSD1306_GotoXY(0, 0);
 800158e:	2100      	movs	r1, #0
 8001590:	2000      	movs	r0, #0
 8001592:	f000 fa19 	bl	80019c8 <SSD1306_GotoXY>
        SSD1306_Puts(strCopy, &Font_7x10, 1);
 8001596:	2201      	movs	r2, #1
 8001598:	491b      	ldr	r1, [pc, #108]	@ (8001608 <OLED+0xb8>)
 800159a:	481a      	ldr	r0, [pc, #104]	@ (8001604 <OLED+0xb4>)
 800159c:	f000 faa8 	bl	8001af0 <SSD1306_Puts>

        sprintf(strCopy, "HUMI :%.1f %%  ", humi);
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <OLED+0xbc>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff3f 	bl	8000428 <__aeabi_f2d>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4918      	ldr	r1, [pc, #96]	@ (8001610 <OLED+0xc0>)
 80015b0:	4814      	ldr	r0, [pc, #80]	@ (8001604 <OLED+0xb4>)
 80015b2:	f007 fd0b 	bl	8008fcc <siprintf>
        SSD1306_GotoXY(0, 30);
 80015b6:	211e      	movs	r1, #30
 80015b8:	2000      	movs	r0, #0
 80015ba:	f000 fa05 	bl	80019c8 <SSD1306_GotoXY>
        SSD1306_Puts(strCopy, &Font_7x10, 1);
 80015be:	2201      	movs	r2, #1
 80015c0:	4911      	ldr	r1, [pc, #68]	@ (8001608 <OLED+0xb8>)
 80015c2:	4810      	ldr	r0, [pc, #64]	@ (8001604 <OLED+0xb4>)
 80015c4:	f000 fa94 	bl	8001af0 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 80015c8:	f000 f95a 	bl	8001880 <SSD1306_UpdateScreen>


        osMutexRelease(tempMutexHandle);
 80015cc:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <OLED+0xa4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 fffb 	bl	80055cc <osMutexRelease>
        osMutexRelease(humMutexHandle);
 80015d6:	4b08      	ldr	r3, [pc, #32]	@ (80015f8 <OLED+0xa8>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fff6 	bl	80055cc <osMutexRelease>
        HAL_Delay(3000);
 80015e0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80015e4:	f000 fe22 	bl	800222c <HAL_Delay>
        osDelay(7000);
 80015e8:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80015ec:	f003 ff02 	bl	80053f4 <osDelay>
        osMutexAcquire(tempMutexHandle, osWaitForever);
 80015f0:	bf00      	nop
 80015f2:	e7b1      	b.n	8001558 <OLED+0x8>
 80015f4:	200001fc 	.word	0x200001fc
 80015f8:	20000200 	.word	0x20000200
 80015fc:	20000350 	.word	0x20000350
 8001600:	0800b32c 	.word	0x0800b32c
 8001604:	20000358 	.word	0x20000358
 8001608:	20000000 	.word	0x20000000
 800160c:	20000354 	.word	0x20000354
 8001610:	0800b33c 	.word	0x0800b33c

08001614 <UART>:

}
}
/* Task UART */
void UART(void *argument) {
 8001614:	b5b0      	push	{r4, r5, r7, lr}
 8001616:	b0a0      	sub	sp, #128	@ 0x80
 8001618:	af04      	add	r7, sp, #16
 800161a:	6078      	str	r0, [r7, #4]
    char buffer[100];
    for (;;) {
        osMutexAcquire(tempMutexHandle, osWaitForever);
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <UART+0xa0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	4618      	mov	r0, r3
 8001626:	f003 ff86 	bl	8005536 <osMutexAcquire>
        osMutexAcquire(humMutexHandle, osWaitForever);
 800162a:	4b23      	ldr	r3, [pc, #140]	@ (80016b8 <UART+0xa4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f04f 31ff 	mov.w	r1, #4294967295
 8001632:	4618      	mov	r0, r3
 8001634:	f003 ff7f 	bl	8005536 <osMutexAcquire>

        snprintf(buffer, sizeof(buffer), "Temperature: %.1f C, Humidity: %.1f %%\r\n", temp, humi);
 8001638:	4b20      	ldr	r3, [pc, #128]	@ (80016bc <UART+0xa8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe fef3 	bl	8000428 <__aeabi_f2d>
 8001642:	4604      	mov	r4, r0
 8001644:	460d      	mov	r5, r1
 8001646:	4b1e      	ldr	r3, [pc, #120]	@ (80016c0 <UART+0xac>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe feec 	bl	8000428 <__aeabi_f2d>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	f107 000c 	add.w	r0, r7, #12
 8001658:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800165c:	e9cd 4500 	strd	r4, r5, [sp]
 8001660:	4a18      	ldr	r2, [pc, #96]	@ (80016c4 <UART+0xb0>)
 8001662:	2164      	movs	r1, #100	@ 0x64
 8001664:	f007 fc7e 	bl	8008f64 <sniprintf>
        osMutexRelease(tempMutexHandle);
 8001668:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <UART+0xa0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f003 ffad 	bl	80055cc <osMutexRelease>
        osMutexRelease(humMutexHandle);
 8001672:	4b11      	ldr	r3, [pc, #68]	@ (80016b8 <UART+0xa4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f003 ffa8 	bl	80055cc <osMutexRelease>

        if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY) != HAL_OK) {
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe fd65 	bl	8000150 <strlen>
 8001686:	4603      	mov	r3, r0
 8001688:	b29a      	uxth	r2, r3
 800168a:	f107 010c 	add.w	r1, r7, #12
 800168e:	f04f 33ff 	mov.w	r3, #4294967295
 8001692:	480d      	ldr	r0, [pc, #52]	@ (80016c8 <UART+0xb4>)
 8001694:	f002 ffca 	bl	800462c <HAL_UART_Transmit>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <UART+0x8e>
            Error_Handler();
 800169e:	f000 f824 	bl	80016ea <Error_Handler>
        }
        HAL_Delay(2000);
 80016a2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016a6:	f000 fdc1 	bl	800222c <HAL_Delay>
            osDelay(7000);
 80016aa:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80016ae:	f003 fea1 	bl	80053f4 <osDelay>
        osMutexAcquire(tempMutexHandle, osWaitForever);
 80016b2:	e7b3      	b.n	800161c <UART+0x8>
 80016b4:	200001fc 	.word	0x200001fc
 80016b8:	20000200 	.word	0x20000200
 80016bc:	20000350 	.word	0x20000350
 80016c0:	20000354 	.word	0x20000354
 80016c4:	0800b34c 	.word	0x0800b34c
 80016c8:	200002e8 	.word	0x200002e8

080016cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016dc:	d101      	bne.n	80016e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80016de:	f000 fd89 	bl	80021f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80016e2:	bf00      	nop
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ee:	b672      	cpsid	i
}
 80016f0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f2:	bf00      	nop
 80016f4:	e7fd      	b.n	80016f2 <Error_Handler+0x8>
	...

080016f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80016fe:	f000 fa25 	bl	8001b4c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001702:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001706:	2201      	movs	r2, #1
 8001708:	2178      	movs	r1, #120	@ 0x78
 800170a:	485b      	ldr	r0, [pc, #364]	@ (8001878 <SSD1306_Init+0x180>)
 800170c:	f001 fb3a 	bl	8002d84 <HAL_I2C_IsDeviceReady>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001716:	2300      	movs	r3, #0
 8001718:	e0a9      	b.n	800186e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 800171a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800171e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001720:	e002      	b.n	8001728 <SSD1306_Init+0x30>
		p--;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	3b01      	subs	r3, #1
 8001726:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f9      	bne.n	8001722 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800172e:	22ae      	movs	r2, #174	@ 0xae
 8001730:	2100      	movs	r1, #0
 8001732:	2078      	movs	r0, #120	@ 0x78
 8001734:	f000 fa84 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	2078      	movs	r0, #120	@ 0x78
 800173e:	f000 fa7f 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001742:	2210      	movs	r2, #16
 8001744:	2100      	movs	r1, #0
 8001746:	2078      	movs	r0, #120	@ 0x78
 8001748:	f000 fa7a 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800174c:	22b0      	movs	r2, #176	@ 0xb0
 800174e:	2100      	movs	r1, #0
 8001750:	2078      	movs	r0, #120	@ 0x78
 8001752:	f000 fa75 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001756:	22c8      	movs	r2, #200	@ 0xc8
 8001758:	2100      	movs	r1, #0
 800175a:	2078      	movs	r0, #120	@ 0x78
 800175c:	f000 fa70 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2078      	movs	r0, #120	@ 0x78
 8001766:	f000 fa6b 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800176a:	2210      	movs	r2, #16
 800176c:	2100      	movs	r1, #0
 800176e:	2078      	movs	r0, #120	@ 0x78
 8001770:	f000 fa66 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001774:	2240      	movs	r2, #64	@ 0x40
 8001776:	2100      	movs	r1, #0
 8001778:	2078      	movs	r0, #120	@ 0x78
 800177a:	f000 fa61 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800177e:	2281      	movs	r2, #129	@ 0x81
 8001780:	2100      	movs	r1, #0
 8001782:	2078      	movs	r0, #120	@ 0x78
 8001784:	f000 fa5c 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001788:	22ff      	movs	r2, #255	@ 0xff
 800178a:	2100      	movs	r1, #0
 800178c:	2078      	movs	r0, #120	@ 0x78
 800178e:	f000 fa57 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001792:	22a1      	movs	r2, #161	@ 0xa1
 8001794:	2100      	movs	r1, #0
 8001796:	2078      	movs	r0, #120	@ 0x78
 8001798:	f000 fa52 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800179c:	22a6      	movs	r2, #166	@ 0xa6
 800179e:	2100      	movs	r1, #0
 80017a0:	2078      	movs	r0, #120	@ 0x78
 80017a2:	f000 fa4d 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017a6:	22a8      	movs	r2, #168	@ 0xa8
 80017a8:	2100      	movs	r1, #0
 80017aa:	2078      	movs	r0, #120	@ 0x78
 80017ac:	f000 fa48 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017b0:	223f      	movs	r2, #63	@ 0x3f
 80017b2:	2100      	movs	r1, #0
 80017b4:	2078      	movs	r0, #120	@ 0x78
 80017b6:	f000 fa43 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017ba:	22a4      	movs	r2, #164	@ 0xa4
 80017bc:	2100      	movs	r1, #0
 80017be:	2078      	movs	r0, #120	@ 0x78
 80017c0:	f000 fa3e 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017c4:	22d3      	movs	r2, #211	@ 0xd3
 80017c6:	2100      	movs	r1, #0
 80017c8:	2078      	movs	r0, #120	@ 0x78
 80017ca:	f000 fa39 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2078      	movs	r0, #120	@ 0x78
 80017d4:	f000 fa34 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80017d8:	22d5      	movs	r2, #213	@ 0xd5
 80017da:	2100      	movs	r1, #0
 80017dc:	2078      	movs	r0, #120	@ 0x78
 80017de:	f000 fa2f 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80017e2:	22f0      	movs	r2, #240	@ 0xf0
 80017e4:	2100      	movs	r1, #0
 80017e6:	2078      	movs	r0, #120	@ 0x78
 80017e8:	f000 fa2a 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80017ec:	22d9      	movs	r2, #217	@ 0xd9
 80017ee:	2100      	movs	r1, #0
 80017f0:	2078      	movs	r0, #120	@ 0x78
 80017f2:	f000 fa25 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80017f6:	2222      	movs	r2, #34	@ 0x22
 80017f8:	2100      	movs	r1, #0
 80017fa:	2078      	movs	r0, #120	@ 0x78
 80017fc:	f000 fa20 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001800:	22da      	movs	r2, #218	@ 0xda
 8001802:	2100      	movs	r1, #0
 8001804:	2078      	movs	r0, #120	@ 0x78
 8001806:	f000 fa1b 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800180a:	2212      	movs	r2, #18
 800180c:	2100      	movs	r1, #0
 800180e:	2078      	movs	r0, #120	@ 0x78
 8001810:	f000 fa16 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001814:	22db      	movs	r2, #219	@ 0xdb
 8001816:	2100      	movs	r1, #0
 8001818:	2078      	movs	r0, #120	@ 0x78
 800181a:	f000 fa11 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800181e:	2220      	movs	r2, #32
 8001820:	2100      	movs	r1, #0
 8001822:	2078      	movs	r0, #120	@ 0x78
 8001824:	f000 fa0c 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001828:	228d      	movs	r2, #141	@ 0x8d
 800182a:	2100      	movs	r1, #0
 800182c:	2078      	movs	r0, #120	@ 0x78
 800182e:	f000 fa07 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001832:	2214      	movs	r2, #20
 8001834:	2100      	movs	r1, #0
 8001836:	2078      	movs	r0, #120	@ 0x78
 8001838:	f000 fa02 	bl	8001c40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800183c:	22af      	movs	r2, #175	@ 0xaf
 800183e:	2100      	movs	r1, #0
 8001840:	2078      	movs	r0, #120	@ 0x78
 8001842:	f000 f9fd 	bl	8001c40 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001846:	222e      	movs	r2, #46	@ 0x2e
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	@ 0x78
 800184c:	f000 f9f8 	bl	8001c40 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001850:	2000      	movs	r0, #0
 8001852:	f000 f843 	bl	80018dc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001856:	f000 f813 	bl	8001880 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800185a:	4b08      	ldr	r3, [pc, #32]	@ (800187c <SSD1306_Init+0x184>)
 800185c:	2200      	movs	r2, #0
 800185e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001860:	4b06      	ldr	r3, [pc, #24]	@ (800187c <SSD1306_Init+0x184>)
 8001862:	2200      	movs	r2, #0
 8001864:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <SSD1306_Init+0x184>)
 8001868:	2201      	movs	r2, #1
 800186a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000204 	.word	0x20000204
 800187c:	2000076c 	.word	0x2000076c

08001880 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001886:	2300      	movs	r3, #0
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	e01d      	b.n	80018c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	3b50      	subs	r3, #80	@ 0x50
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
 8001894:	2100      	movs	r1, #0
 8001896:	2078      	movs	r0, #120	@ 0x78
 8001898:	f000 f9d2 	bl	8001c40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800189c:	2200      	movs	r2, #0
 800189e:	2100      	movs	r1, #0
 80018a0:	2078      	movs	r0, #120	@ 0x78
 80018a2:	f000 f9cd 	bl	8001c40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018a6:	2210      	movs	r2, #16
 80018a8:	2100      	movs	r1, #0
 80018aa:	2078      	movs	r0, #120	@ 0x78
 80018ac:	f000 f9c8 	bl	8001c40 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	01db      	lsls	r3, r3, #7
 80018b4:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <SSD1306_UpdateScreen+0x58>)
 80018b6:	441a      	add	r2, r3
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	2140      	movs	r1, #64	@ 0x40
 80018bc:	2078      	movs	r0, #120	@ 0x78
 80018be:	f000 f959 	bl	8001b74 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	3301      	adds	r3, #1
 80018c6:	71fb      	strb	r3, [r7, #7]
 80018c8:	79fb      	ldrb	r3, [r7, #7]
 80018ca:	2b07      	cmp	r3, #7
 80018cc:	d9de      	bls.n	800188c <SSD1306_UpdateScreen+0xc>
	}
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000036c 	.word	0x2000036c

080018dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4603      	mov	r3, r0
 80018e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d101      	bne.n	80018f0 <SSD1306_Fill+0x14>
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <SSD1306_Fill+0x16>
 80018f0:	23ff      	movs	r3, #255	@ 0xff
 80018f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018f6:	4619      	mov	r1, r3
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <SSD1306_Fill+0x2c>)
 80018fa:	f007 fbca 	bl	8009092 <memset>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	2000036c 	.word	0x2000036c

0800190c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
 8001916:	460b      	mov	r3, r1
 8001918:	80bb      	strh	r3, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	70fb      	strb	r3, [r7, #3]
	if (
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	2b7f      	cmp	r3, #127	@ 0x7f
 8001922:	d848      	bhi.n	80019b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	2b3f      	cmp	r3, #63	@ 0x3f
 8001928:	d845      	bhi.n	80019b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800192a:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SSD1306_DrawPixel+0xb4>)
 800192c:	791b      	ldrb	r3, [r3, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d006      	beq.n	8001940 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001932:	78fb      	ldrb	r3, [r7, #3]
 8001934:	2b00      	cmp	r3, #0
 8001936:	bf0c      	ite	eq
 8001938:	2301      	moveq	r3, #1
 800193a:	2300      	movne	r3, #0
 800193c:	b2db      	uxtb	r3, r3
 800193e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001940:	78fb      	ldrb	r3, [r7, #3]
 8001942:	2b01      	cmp	r3, #1
 8001944:	d11a      	bne.n	800197c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	88bb      	ldrh	r3, [r7, #4]
 800194a:	08db      	lsrs	r3, r3, #3
 800194c:	b298      	uxth	r0, r3
 800194e:	4603      	mov	r3, r0
 8001950:	01db      	lsls	r3, r3, #7
 8001952:	4413      	add	r3, r2
 8001954:	4a1b      	ldr	r2, [pc, #108]	@ (80019c4 <SSD1306_DrawPixel+0xb8>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	b25a      	sxtb	r2, r3
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	2101      	movs	r1, #1
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	b25b      	sxtb	r3, r3
 8001968:	4313      	orrs	r3, r2
 800196a:	b259      	sxtb	r1, r3
 800196c:	88fa      	ldrh	r2, [r7, #6]
 800196e:	4603      	mov	r3, r0
 8001970:	01db      	lsls	r3, r3, #7
 8001972:	4413      	add	r3, r2
 8001974:	b2c9      	uxtb	r1, r1
 8001976:	4a13      	ldr	r2, [pc, #76]	@ (80019c4 <SSD1306_DrawPixel+0xb8>)
 8001978:	54d1      	strb	r1, [r2, r3]
 800197a:	e01d      	b.n	80019b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800197c:	88fa      	ldrh	r2, [r7, #6]
 800197e:	88bb      	ldrh	r3, [r7, #4]
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	b298      	uxth	r0, r3
 8001984:	4603      	mov	r3, r0
 8001986:	01db      	lsls	r3, r3, #7
 8001988:	4413      	add	r3, r2
 800198a:	4a0e      	ldr	r2, [pc, #56]	@ (80019c4 <SSD1306_DrawPixel+0xb8>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	b25a      	sxtb	r2, r3
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	2101      	movs	r1, #1
 8001998:	fa01 f303 	lsl.w	r3, r1, r3
 800199c:	b25b      	sxtb	r3, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	b25b      	sxtb	r3, r3
 80019a2:	4013      	ands	r3, r2
 80019a4:	b259      	sxtb	r1, r3
 80019a6:	88fa      	ldrh	r2, [r7, #6]
 80019a8:	4603      	mov	r3, r0
 80019aa:	01db      	lsls	r3, r3, #7
 80019ac:	4413      	add	r3, r2
 80019ae:	b2c9      	uxtb	r1, r1
 80019b0:	4a04      	ldr	r2, [pc, #16]	@ (80019c4 <SSD1306_DrawPixel+0xb8>)
 80019b2:	54d1      	strb	r1, [r2, r3]
 80019b4:	e000      	b.n	80019b8 <SSD1306_DrawPixel+0xac>
		return;
 80019b6:	bf00      	nop
	}
}
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr
 80019c0:	2000076c 	.word	0x2000076c
 80019c4:	2000036c 	.word	0x2000036c

080019c8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	460a      	mov	r2, r1
 80019d2:	80fb      	strh	r3, [r7, #6]
 80019d4:	4613      	mov	r3, r2
 80019d6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80019d8:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <SSD1306_GotoXY+0x28>)
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80019de:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <SSD1306_GotoXY+0x28>)
 80019e0:	88bb      	ldrh	r3, [r7, #4]
 80019e2:	8053      	strh	r3, [r2, #2]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	2000076c 	.word	0x2000076c

080019f4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b086      	sub	sp, #24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
 8001a00:	4613      	mov	r3, r2
 8001a02:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a04:	4b39      	ldr	r3, [pc, #228]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	4413      	add	r3, r2
	if (
 8001a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a12:	dc07      	bgt.n	8001a24 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a14:	4b35      	ldr	r3, [pc, #212]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a16:	885b      	ldrh	r3, [r3, #2]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a20:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a22:	dd01      	ble.n	8001a28 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	e05d      	b.n	8001ae4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a28:	2300      	movs	r3, #0
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	e04b      	b.n	8001ac6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	79fb      	ldrb	r3, [r7, #7]
 8001a34:	3b20      	subs	r3, #32
 8001a36:	6839      	ldr	r1, [r7, #0]
 8001a38:	7849      	ldrb	r1, [r1, #1]
 8001a3a:	fb01 f303 	mul.w	r3, r1, r3
 8001a3e:	4619      	mov	r1, r3
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	440b      	add	r3, r1
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	e030      	b.n	8001ab4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d010      	beq.n	8001a84 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a62:	4b22      	ldr	r3, [pc, #136]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a64:	881a      	ldrh	r2, [r3, #0]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	b298      	uxth	r0, r3
 8001a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a70:	885a      	ldrh	r2, [r3, #2]
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	79ba      	ldrb	r2, [r7, #6]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f7ff ff45 	bl	800190c <SSD1306_DrawPixel>
 8001a82:	e014      	b.n	8001aae <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a84:	4b19      	ldr	r3, [pc, #100]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a86:	881a      	ldrh	r2, [r3, #0]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b298      	uxth	r0, r3
 8001a90:	4b16      	ldr	r3, [pc, #88]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001a92:	885a      	ldrh	r2, [r3, #2]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	4413      	add	r3, r2
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	79bb      	ldrb	r3, [r7, #6]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	f7ff ff2f 	bl	800190c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	461a      	mov	r2, r3
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d3c8      	bcc.n	8001a52 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	785b      	ldrb	r3, [r3, #1]
 8001aca:	461a      	mov	r2, r3
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d3ad      	bcc.n	8001a2e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001ad4:	881b      	ldrh	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	7812      	ldrb	r2, [r2, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	b29a      	uxth	r2, r3
 8001ade:	4b03      	ldr	r3, [pc, #12]	@ (8001aec <SSD1306_Putc+0xf8>)
 8001ae0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	2000076c 	.word	0x2000076c

08001af0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	4613      	mov	r3, r2
 8001afc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001afe:	e012      	b.n	8001b26 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	79fa      	ldrb	r2, [r7, #7]
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff ff73 	bl	80019f4 <SSD1306_Putc>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d002      	beq.n	8001b20 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	e008      	b.n	8001b32 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	3301      	adds	r3, #1
 8001b24:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1e8      	bne.n	8001b00 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	781b      	ldrb	r3, [r3, #0]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b3e:	2000      	movs	r0, #0
 8001b40:	f7ff fecc 	bl	80018dc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b44:	f7ff fe9c 	bl	8001880 <SSD1306_UpdateScreen>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b52:	4b07      	ldr	r3, [pc, #28]	@ (8001b70 <ssd1306_I2C_Init+0x24>)
 8001b54:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b56:	e002      	b.n	8001b5e <ssd1306_I2C_Init+0x12>
		p--;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	0003d090 	.word	0x0003d090

08001b74 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b0c7      	sub	sp, #284	@ 0x11c
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	4604      	mov	r4, r0
 8001b7c:	4608      	mov	r0, r1
 8001b7e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001b82:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001b86:	600a      	str	r2, [r1, #0]
 8001b88:	4619      	mov	r1, r3
 8001b8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b8e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001b92:	4622      	mov	r2, r4
 8001b94:	701a      	strb	r2, [r3, #0]
 8001b96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b9a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	701a      	strb	r2, [r3, #0]
 8001ba2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001ba6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001baa:	460a      	mov	r2, r1
 8001bac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bb6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bba:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001bbe:	7812      	ldrb	r2, [r2, #0]
 8001bc0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001bc8:	e015      	b.n	8001bf6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001bca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bd2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	441a      	add	r2, r3
 8001bda:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bde:	3301      	adds	r3, #1
 8001be0:	7811      	ldrb	r1, [r2, #0]
 8001be2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001be6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001bea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001bec:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001bf6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c00:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c04:	8812      	ldrh	r2, [r2, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d8df      	bhi.n	8001bca <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c0e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	b299      	uxth	r1, r3
 8001c16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	f107 020c 	add.w	r2, r7, #12
 8001c28:	200a      	movs	r0, #10
 8001c2a:	9000      	str	r0, [sp, #0]
 8001c2c:	4803      	ldr	r0, [pc, #12]	@ (8001c3c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c2e:	f000 ffab 	bl	8002b88 <HAL_I2C_Master_Transmit>
}
 8001c32:	bf00      	nop
 8001c34:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd90      	pop	{r4, r7, pc}
 8001c3c:	20000204 	.word	0x20000204

08001c40 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	4603      	mov	r3, r0
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	71bb      	strb	r3, [r7, #6]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c52:	79bb      	ldrb	r3, [r7, #6]
 8001c54:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c56:	797b      	ldrb	r3, [r7, #5]
 8001c58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	b299      	uxth	r1, r3
 8001c5e:	f107 020c 	add.w	r2, r7, #12
 8001c62:	230a      	movs	r3, #10
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2302      	movs	r3, #2
 8001c68:	4803      	ldr	r0, [pc, #12]	@ (8001c78 <ssd1306_I2C_Write+0x38>)
 8001c6a:	f000 ff8d 	bl	8002b88 <HAL_I2C_Master_Transmit>
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000204 	.word	0x20000204

08001c7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c82:	4b18      	ldr	r3, [pc, #96]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	4a17      	ldr	r2, [pc, #92]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6193      	str	r3, [r2, #24]
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9a:	4b12      	ldr	r3, [pc, #72]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001c9c:	69db      	ldr	r3, [r3, #28]
 8001c9e:	4a11      	ldr	r2, [pc, #68]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	61d3      	str	r3, [r2, #28]
 8001ca6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x68>)
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	210f      	movs	r1, #15
 8001cb6:	f06f 0001 	mvn.w	r0, #1
 8001cba:	f000 fb90 	bl	80023de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_MspInit+0x6c>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_MspInit+0x6c>)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cda:	bf00      	nop
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010000 	.word	0x40010000

08001cec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b088      	sub	sp, #32
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 0310 	add.w	r3, r7, #16
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a15      	ldr	r2, [pc, #84]	@ (8001d5c <HAL_I2C_MspInit+0x70>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d123      	bne.n	8001d54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b14      	ldr	r3, [pc, #80]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d12:	f043 0308 	orr.w	r3, r3, #8
 8001d16:	6193      	str	r3, [r2, #24]
 8001d18:	4b11      	ldr	r3, [pc, #68]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	f003 0308 	and.w	r3, r3, #8
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d24:	23c0      	movs	r3, #192	@ 0xc0
 8001d26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d28:	2312      	movs	r3, #18
 8001d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	@ (8001d64 <HAL_I2C_MspInit+0x78>)
 8001d38:	f000 fc2e 	bl	8002598 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	4a07      	ldr	r2, [pc, #28]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d42:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d46:	61d3      	str	r3, [r2, #28]
 8001d48:	4b05      	ldr	r3, [pc, #20]	@ (8001d60 <HAL_I2C_MspInit+0x74>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d54:	bf00      	nop
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40010c00 	.word	0x40010c00

08001d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a16      	ldr	r2, [pc, #88]	@ (8001dd0 <HAL_TIM_Base_MspInit+0x68>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d10c      	bne.n	8001d94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7a:	4b16      	ldr	r3, [pc, #88]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	4a15      	ldr	r2, [pc, #84]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d80:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001d84:	6193      	str	r3, [r2, #24]
 8001d86:	4b13      	ldr	r3, [pc, #76]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d92:	e018      	b.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM4)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a0f      	ldr	r2, [pc, #60]	@ (8001dd8 <HAL_TIM_Base_MspInit+0x70>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d113      	bne.n	8001dc6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a0c      	ldr	r2, [pc, #48]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001da4:	f043 0304 	orr.w	r3, r3, #4
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd4 <HAL_TIM_Base_MspInit+0x6c>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2105      	movs	r1, #5
 8001dba:	201e      	movs	r0, #30
 8001dbc:	f000 fb0f 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dc0:	201e      	movs	r0, #30
 8001dc2:	f000 fb28 	bl	8002416 <HAL_NVIC_EnableIRQ>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40012c00 	.word	0x40012c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40000800 	.word	0x40000800

08001ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 0310 	add.w	r3, r7, #16
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <HAL_UART_MspInit+0x9c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d139      	bne.n	8001e70 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001e02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b1c      	ldr	r3, [pc, #112]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b19      	ldr	r3, [pc, #100]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a18      	ldr	r2, [pc, #96]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b16      	ldr	r3, [pc, #88]	@ (8001e7c <HAL_UART_MspInit+0xa0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001e30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e36:	2303      	movs	r3, #3
 8001e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	4619      	mov	r1, r3
 8001e40:	480f      	ldr	r0, [pc, #60]	@ (8001e80 <HAL_UART_MspInit+0xa4>)
 8001e42:	f000 fba9 	bl	8002598 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e54:	f107 0310 	add.w	r3, r7, #16
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4809      	ldr	r0, [pc, #36]	@ (8001e80 <HAL_UART_MspInit+0xa4>)
 8001e5c:	f000 fb9c 	bl	8002598 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001e60:	2200      	movs	r2, #0
 8001e62:	2105      	movs	r1, #5
 8001e64:	2025      	movs	r0, #37	@ 0x25
 8001e66:	f000 faba 	bl	80023de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e6a:	2025      	movs	r0, #37	@ 0x25
 8001e6c:	f000 fad3 	bl	8002416 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40013800 	.word	0x40013800
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40010800 	.word	0x40010800

08001e84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08e      	sub	sp, #56	@ 0x38
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e90:	2300      	movs	r3, #0
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9a:	4b34      	ldr	r3, [pc, #208]	@ (8001f6c <HAL_InitTick+0xe8>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	4a33      	ldr	r2, [pc, #204]	@ (8001f6c <HAL_InitTick+0xe8>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	61d3      	str	r3, [r2, #28]
 8001ea6:	4b31      	ldr	r3, [pc, #196]	@ (8001f6c <HAL_InitTick+0xe8>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eb2:	f107 0210 	add.w	r2, r7, #16
 8001eb6:	f107 0314 	add.w	r3, r7, #20
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f001 fedb 	bl	8003c78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001ec2:	6a3b      	ldr	r3, [r7, #32]
 8001ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d103      	bne.n	8001ed4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ecc:	f001 feac 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8001ed0:	6378      	str	r0, [r7, #52]	@ 0x34
 8001ed2:	e004      	b.n	8001ede <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ed4:	f001 fea8 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ede:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee0:	4a23      	ldr	r2, [pc, #140]	@ (8001f70 <HAL_InitTick+0xec>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	0c9b      	lsrs	r3, r3, #18
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001eec:	4b21      	ldr	r3, [pc, #132]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001eee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001ef4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001ef6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001efa:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001efc:	4a1d      	ldr	r2, [pc, #116]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f00:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8001f02:	4b1c      	ldr	r3, [pc, #112]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f08:	4b1a      	ldr	r3, [pc, #104]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8001f14:	4817      	ldr	r0, [pc, #92]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001f16:	f001 fefd 	bl	8003d14 <HAL_TIM_Base_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001f20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d11b      	bne.n	8001f60 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001f28:	4812      	ldr	r0, [pc, #72]	@ (8001f74 <HAL_InitTick+0xf0>)
 8001f2a:	f001 ff8d 	bl	8003e48 <HAL_TIM_Base_Start_IT>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001f34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d111      	bne.n	8001f60 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f3c:	201c      	movs	r0, #28
 8001f3e:	f000 fa6a 	bl	8002416 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b0f      	cmp	r3, #15
 8001f46:	d808      	bhi.n	8001f5a <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	6879      	ldr	r1, [r7, #4]
 8001f4c:	201c      	movs	r0, #28
 8001f4e:	f000 fa46 	bl	80023de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_InitTick+0xf4>)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	e002      	b.n	8001f60 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3738      	adds	r7, #56	@ 0x38
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	431bde83 	.word	0x431bde83
 8001f74:	20000774 	.word	0x20000774
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f80:	bf00      	nop
 8001f82:	e7fd      	b.n	8001f80 <NMI_Handler+0x4>

08001f84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f88:	bf00      	nop
 8001f8a:	e7fd      	b.n	8001f88 <HardFault_Handler+0x4>

08001f8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f90:	bf00      	nop
 8001f92:	e7fd      	b.n	8001f90 <MemManage_Handler+0x4>

08001f94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <BusFault_Handler+0x4>

08001f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <UsageFault_Handler+0x4>

08001fa4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	@ (8001fc0 <TIM2_IRQHandler+0x10>)
 8001fb6:	f001 ff99 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000774 	.word	0x20000774

08001fc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fc8:	4802      	ldr	r0, [pc, #8]	@ (8001fd4 <TIM4_IRQHandler+0x10>)
 8001fca:	f001 ff8f 	bl	8003eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  // Kiểm tra nếu ngắt là do TIM4 update (tràn)

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	200002a0 	.word	0x200002a0

08001fd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001fdc:	4802      	ldr	r0, [pc, #8]	@ (8001fe8 <USART1_IRQHandler+0x10>)
 8001fde:	f002 fbb1 	bl	8004744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200002e8 	.word	0x200002e8

08001fec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return 1;
 8001ff0:	2301      	movs	r3, #1
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bc80      	pop	{r7}
 8001ff8:	4770      	bx	lr

08001ffa <_kill>:

int _kill(int pid, int sig)
{
 8001ffa:	b580      	push	{r7, lr}
 8001ffc:	b082      	sub	sp, #8
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
 8002002:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002004:	f007 f8ee 	bl	80091e4 <__errno>
 8002008:	4603      	mov	r3, r0
 800200a:	2216      	movs	r2, #22
 800200c:	601a      	str	r2, [r3, #0]
  return -1;
 800200e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002012:	4618      	mov	r0, r3
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_exit>:

void _exit (int status)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b082      	sub	sp, #8
 800201e:	af00      	add	r7, sp, #0
 8002020:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002022:	f04f 31ff 	mov.w	r1, #4294967295
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffe7 	bl	8001ffa <_kill>
  while (1) {}    /* Make sure we hang here */
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <_exit+0x12>

08002030 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	e00a      	b.n	8002058 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002042:	f3af 8000 	nop.w
 8002046:	4601      	mov	r1, r0
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	1c5a      	adds	r2, r3, #1
 800204c:	60ba      	str	r2, [r7, #8]
 800204e:	b2ca      	uxtb	r2, r1
 8002050:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf0      	blt.n	8002042 <_read+0x12>
  }

  return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	60f8      	str	r0, [r7, #12]
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002076:	2300      	movs	r3, #0
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	e009      	b.n	8002090 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	60ba      	str	r2, [r7, #8]
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4618      	mov	r0, r3
 8002086:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	3301      	adds	r3, #1
 800208e:	617b      	str	r3, [r7, #20]
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	429a      	cmp	r2, r3
 8002096:	dbf1      	blt.n	800207c <_write+0x12>
  }
  return len;
 8002098:	687b      	ldr	r3, [r7, #4]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_close>:

int _close(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80020c8:	605a      	str	r2, [r3, #4]
  return 0;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr

080020d6 <_isatty>:

int _isatty(int file)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020de:	2301      	movs	r3, #1
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr

080020ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr
	...

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	@ (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	@ (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	@ (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f007 f856 	bl	80091e4 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	@ (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	@ (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	@ (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20005000 	.word	0x20005000
 8002164:	00000400 	.word	0x00000400
 8002168:	200007bc 	.word	0x200007bc
 800216c:	20003638 	.word	0x20003638

08002170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002174:	bf00      	nop
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800217c:	f7ff fff8 	bl	8002170 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	@ (80021b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002182:	490c      	ldr	r1, [pc, #48]	@ (80021b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002184:	4a0c      	ldr	r2, [pc, #48]	@ (80021b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002188:	e002      	b.n	8002190 <LoopCopyDataInit>

0800218a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800218a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800218c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800218e:	3304      	adds	r3, #4

08002190 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002190:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002192:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002194:	d3f9      	bcc.n	800218a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002196:	4a09      	ldr	r2, [pc, #36]	@ (80021bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002198:	4c09      	ldr	r4, [pc, #36]	@ (80021c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800219c:	e001      	b.n	80021a2 <LoopFillZerobss>

0800219e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800219e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021a0:	3204      	adds	r2, #4

080021a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021a4:	d3fb      	bcc.n	800219e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021a6:	f007 f823 	bl	80091f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7fe fed5 	bl	8000f58 <main>
  bx lr
 80021ae:	4770      	bx	lr
  ldr r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021b4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80021b8:	0800bf38 	.word	0x0800bf38
  ldr r2, =_sbss
 80021bc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80021c0:	20003638 	.word	0x20003638

080021c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_Init+0x28>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_Init+0x28>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f8f5 	bl	80023c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	200f      	movs	r0, #15
 80021e0:	f7ff fe50 	bl	8001e84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fd4a 	bl	8001c7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_IncTick+0x1c>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b05      	ldr	r3, [pc, #20]	@ (8002214 <HAL_IncTick+0x20>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a03      	ldr	r2, [pc, #12]	@ (8002214 <HAL_IncTick+0x20>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000010 	.word	0x20000010
 8002214:	200007c0 	.word	0x200007c0

08002218 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  return uwTick;
 800221c:	4b02      	ldr	r3, [pc, #8]	@ (8002228 <HAL_GetTick+0x10>)
 800221e:	681b      	ldr	r3, [r3, #0]
}
 8002220:	4618      	mov	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr
 8002228:	200007c0 	.word	0x200007c0

0800222c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002234:	f7ff fff0 	bl	8002218 <HAL_GetTick>
 8002238:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002244:	d005      	beq.n	8002252 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002246:	4b0a      	ldr	r3, [pc, #40]	@ (8002270 <HAL_Delay+0x44>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	461a      	mov	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4413      	add	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002252:	bf00      	nop
 8002254:	f7ff ffe0 	bl	8002218 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	429a      	cmp	r2, r3
 8002262:	d8f7      	bhi.n	8002254 <HAL_Delay+0x28>
  {
  }
}
 8002264:	bf00      	nop
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	20000010 	.word	0x20000010

08002274 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002290:	4013      	ands	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800229c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022a6:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <__NVIC_SetPriorityGrouping+0x44>)
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	60d3      	str	r3, [r2, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bc80      	pop	{r7}
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	e000ed00 	.word	0xe000ed00

080022bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <__NVIC_GetPriorityGrouping+0x18>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	0a1b      	lsrs	r3, r3, #8
 80022c6:	f003 0307 	and.w	r3, r3, #7
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc80      	pop	{r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	db0b      	blt.n	8002302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ea:	79fb      	ldrb	r3, [r7, #7]
 80022ec:	f003 021f 	and.w	r2, r3, #31
 80022f0:	4906      	ldr	r1, [pc, #24]	@ (800230c <__NVIC_EnableIRQ+0x34>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	2001      	movs	r0, #1
 80022fa:	fa00 f202 	lsl.w	r2, r0, r2
 80022fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002302:	bf00      	nop
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	bc80      	pop	{r7}
 800230a:	4770      	bx	lr
 800230c:	e000e100 	.word	0xe000e100

08002310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002320:	2b00      	cmp	r3, #0
 8002322:	db0a      	blt.n	800233a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	b2da      	uxtb	r2, r3
 8002328:	490c      	ldr	r1, [pc, #48]	@ (800235c <__NVIC_SetPriority+0x4c>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	440b      	add	r3, r1
 8002334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002338:	e00a      	b.n	8002350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	b2da      	uxtb	r2, r3
 800233e:	4908      	ldr	r1, [pc, #32]	@ (8002360 <__NVIC_SetPriority+0x50>)
 8002340:	79fb      	ldrb	r3, [r7, #7]
 8002342:	f003 030f 	and.w	r3, r3, #15
 8002346:	3b04      	subs	r3, #4
 8002348:	0112      	lsls	r2, r2, #4
 800234a:	b2d2      	uxtb	r2, r2
 800234c:	440b      	add	r3, r1
 800234e:	761a      	strb	r2, [r3, #24]
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000e100 	.word	0xe000e100
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	@ 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f1c3 0307 	rsb	r3, r3, #7
 800237e:	2b04      	cmp	r3, #4
 8002380:	bf28      	it	cs
 8002382:	2304      	movcs	r3, #4
 8002384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3304      	adds	r3, #4
 800238a:	2b06      	cmp	r3, #6
 800238c:	d902      	bls.n	8002394 <NVIC_EncodePriority+0x30>
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	3b03      	subs	r3, #3
 8002392:	e000      	b.n	8002396 <NVIC_EncodePriority+0x32>
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	f04f 32ff 	mov.w	r2, #4294967295
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	fa02 f303 	lsl.w	r3, r2, r3
 80023a2:	43da      	mvns	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	401a      	ands	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023ac:	f04f 31ff 	mov.w	r1, #4294967295
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	fa01 f303 	lsl.w	r3, r1, r3
 80023b6:	43d9      	mvns	r1, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	4313      	orrs	r3, r2
         );
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3724      	adds	r7, #36	@ 0x24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr

080023c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff ff4f 	bl	8002274 <__NVIC_SetPriorityGrouping>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	4603      	mov	r3, r0
 80023e6:	60b9      	str	r1, [r7, #8]
 80023e8:	607a      	str	r2, [r7, #4]
 80023ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023ec:	2300      	movs	r3, #0
 80023ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f0:	f7ff ff64 	bl	80022bc <__NVIC_GetPriorityGrouping>
 80023f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	68b9      	ldr	r1, [r7, #8]
 80023fa:	6978      	ldr	r0, [r7, #20]
 80023fc:	f7ff ffb2 	bl	8002364 <NVIC_EncodePriority>
 8002400:	4602      	mov	r2, r0
 8002402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff81 	bl	8002310 <__NVIC_SetPriority>
}
 800240e:	bf00      	nop
 8002410:	3718      	adds	r7, #24
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002424:	4618      	mov	r0, r3
 8002426:	f7ff ff57 	bl	80022d8 <__NVIC_EnableIRQ>
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002432:	b480      	push	{r7}
 8002434:	b085      	sub	sp, #20
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d008      	beq.n	800245c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2204      	movs	r2, #4
 800244e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e020      	b.n	800249e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 020e 	bic.w	r2, r2, #14
 800246a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0201 	bic.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	2101      	movs	r1, #1
 8002486:	fa01 f202 	lsl.w	r2, r1, r2
 800248a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2201      	movs	r2, #1
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800249c:	7bfb      	ldrb	r3, [r7, #15]
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bc80      	pop	{r7}
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2300      	movs	r3, #0
 80024b2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d005      	beq.n	80024cc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2204      	movs	r2, #4
 80024c4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
 80024ca:	e051      	b.n	8002570 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 020e 	bic.w	r2, r2, #14
 80024da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0201 	bic.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a22      	ldr	r2, [pc, #136]	@ (800257c <HAL_DMA_Abort_IT+0xd4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d029      	beq.n	800254a <HAL_DMA_Abort_IT+0xa2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a21      	ldr	r2, [pc, #132]	@ (8002580 <HAL_DMA_Abort_IT+0xd8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d022      	beq.n	8002546 <HAL_DMA_Abort_IT+0x9e>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a1f      	ldr	r2, [pc, #124]	@ (8002584 <HAL_DMA_Abort_IT+0xdc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01a      	beq.n	8002540 <HAL_DMA_Abort_IT+0x98>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1e      	ldr	r2, [pc, #120]	@ (8002588 <HAL_DMA_Abort_IT+0xe0>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d012      	beq.n	800253a <HAL_DMA_Abort_IT+0x92>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a1c      	ldr	r2, [pc, #112]	@ (800258c <HAL_DMA_Abort_IT+0xe4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00a      	beq.n	8002534 <HAL_DMA_Abort_IT+0x8c>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1b      	ldr	r2, [pc, #108]	@ (8002590 <HAL_DMA_Abort_IT+0xe8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d102      	bne.n	800252e <HAL_DMA_Abort_IT+0x86>
 8002528:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800252c:	e00e      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800252e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002532:	e00b      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002534:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002538:	e008      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800253a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800253e:	e005      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002540:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002544:	e002      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 8002546:	2310      	movs	r3, #16
 8002548:	e000      	b.n	800254c <HAL_DMA_Abort_IT+0xa4>
 800254a:	2301      	movs	r3, #1
 800254c:	4a11      	ldr	r2, [pc, #68]	@ (8002594 <HAL_DMA_Abort_IT+0xec>)
 800254e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002564:	2b00      	cmp	r3, #0
 8002566:	d003      	beq.n	8002570 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	4798      	blx	r3
    } 
  }
  return status;
 8002570:	7bfb      	ldrb	r3, [r7, #15]
}
 8002572:	4618      	mov	r0, r3
 8002574:	3710      	adds	r7, #16
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40020008 	.word	0x40020008
 8002580:	4002001c 	.word	0x4002001c
 8002584:	40020030 	.word	0x40020030
 8002588:	40020044 	.word	0x40020044
 800258c:	40020058 	.word	0x40020058
 8002590:	4002006c 	.word	0x4002006c
 8002594:	40020000 	.word	0x40020000

08002598 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002598:	b480      	push	{r7}
 800259a:	b08b      	sub	sp, #44	@ 0x2c
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025aa:	e169      	b.n	8002880 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025ac:	2201      	movs	r2, #1
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	69fa      	ldr	r2, [r7, #28]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	f040 8158 	bne.w	800287a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a9a      	ldr	r2, [pc, #616]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d05e      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025d4:	4a98      	ldr	r2, [pc, #608]	@ (8002838 <HAL_GPIO_Init+0x2a0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d875      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025da:	4a98      	ldr	r2, [pc, #608]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d058      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025e0:	4a96      	ldr	r2, [pc, #600]	@ (800283c <HAL_GPIO_Init+0x2a4>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d86f      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025e6:	4a96      	ldr	r2, [pc, #600]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d052      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025ec:	4a94      	ldr	r2, [pc, #592]	@ (8002840 <HAL_GPIO_Init+0x2a8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d869      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025f2:	4a94      	ldr	r2, [pc, #592]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d04c      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 80025f8:	4a92      	ldr	r2, [pc, #584]	@ (8002844 <HAL_GPIO_Init+0x2ac>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d863      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 80025fe:	4a92      	ldr	r2, [pc, #584]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d046      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
 8002604:	4a90      	ldr	r2, [pc, #576]	@ (8002848 <HAL_GPIO_Init+0x2b0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d85d      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 800260a:	2b12      	cmp	r3, #18
 800260c:	d82a      	bhi.n	8002664 <HAL_GPIO_Init+0xcc>
 800260e:	2b12      	cmp	r3, #18
 8002610:	d859      	bhi.n	80026c6 <HAL_GPIO_Init+0x12e>
 8002612:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_GPIO_Init+0x80>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002693 	.word	0x08002693
 800261c:	0800266d 	.word	0x0800266d
 8002620:	0800267f 	.word	0x0800267f
 8002624:	080026c1 	.word	0x080026c1
 8002628:	080026c7 	.word	0x080026c7
 800262c:	080026c7 	.word	0x080026c7
 8002630:	080026c7 	.word	0x080026c7
 8002634:	080026c7 	.word	0x080026c7
 8002638:	080026c7 	.word	0x080026c7
 800263c:	080026c7 	.word	0x080026c7
 8002640:	080026c7 	.word	0x080026c7
 8002644:	080026c7 	.word	0x080026c7
 8002648:	080026c7 	.word	0x080026c7
 800264c:	080026c7 	.word	0x080026c7
 8002650:	080026c7 	.word	0x080026c7
 8002654:	080026c7 	.word	0x080026c7
 8002658:	080026c7 	.word	0x080026c7
 800265c:	08002675 	.word	0x08002675
 8002660:	08002689 	.word	0x08002689
 8002664:	4a79      	ldr	r2, [pc, #484]	@ (800284c <HAL_GPIO_Init+0x2b4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800266a:	e02c      	b.n	80026c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	623b      	str	r3, [r7, #32]
          break;
 8002672:	e029      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	3304      	adds	r3, #4
 800267a:	623b      	str	r3, [r7, #32]
          break;
 800267c:	e024      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	3308      	adds	r3, #8
 8002684:	623b      	str	r3, [r7, #32]
          break;
 8002686:	e01f      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	330c      	adds	r3, #12
 800268e:	623b      	str	r3, [r7, #32]
          break;
 8002690:	e01a      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d102      	bne.n	80026a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800269a:	2304      	movs	r3, #4
 800269c:	623b      	str	r3, [r7, #32]
          break;
 800269e:	e013      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d105      	bne.n	80026b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026a8:	2308      	movs	r3, #8
 80026aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69fa      	ldr	r2, [r7, #28]
 80026b0:	611a      	str	r2, [r3, #16]
          break;
 80026b2:	e009      	b.n	80026c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b4:	2308      	movs	r3, #8
 80026b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	615a      	str	r2, [r3, #20]
          break;
 80026be:	e003      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
          break;
 80026c4:	e000      	b.n	80026c8 <HAL_GPIO_Init+0x130>
          break;
 80026c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2bff      	cmp	r3, #255	@ 0xff
 80026cc:	d801      	bhi.n	80026d2 <HAL_GPIO_Init+0x13a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	e001      	b.n	80026d6 <HAL_GPIO_Init+0x13e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	3304      	adds	r3, #4
 80026d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2bff      	cmp	r3, #255	@ 0xff
 80026dc:	d802      	bhi.n	80026e4 <HAL_GPIO_Init+0x14c>
 80026de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	e002      	b.n	80026ea <HAL_GPIO_Init+0x152>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	3b08      	subs	r3, #8
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	210f      	movs	r1, #15
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	fa01 f303 	lsl.w	r3, r1, r3
 80026f8:	43db      	mvns	r3, r3
 80026fa:	401a      	ands	r2, r3
 80026fc:	6a39      	ldr	r1, [r7, #32]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 80b1 	beq.w	800287a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002718:	4b4d      	ldr	r3, [pc, #308]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271a:	699b      	ldr	r3, [r3, #24]
 800271c:	4a4c      	ldr	r2, [pc, #304]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	6193      	str	r3, [r2, #24]
 8002724:	4b4a      	ldr	r3, [pc, #296]	@ (8002850 <HAL_GPIO_Init+0x2b8>)
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002730:	4a48      	ldr	r2, [pc, #288]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	3302      	adds	r3, #2
 8002738:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800273c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	f003 0303 	and.w	r3, r3, #3
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	220f      	movs	r2, #15
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a40      	ldr	r2, [pc, #256]	@ (8002858 <HAL_GPIO_Init+0x2c0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d013      	beq.n	8002784 <HAL_GPIO_Init+0x1ec>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3f      	ldr	r2, [pc, #252]	@ (800285c <HAL_GPIO_Init+0x2c4>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d00d      	beq.n	8002780 <HAL_GPIO_Init+0x1e8>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3e      	ldr	r2, [pc, #248]	@ (8002860 <HAL_GPIO_Init+0x2c8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d007      	beq.n	800277c <HAL_GPIO_Init+0x1e4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3d      	ldr	r2, [pc, #244]	@ (8002864 <HAL_GPIO_Init+0x2cc>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d101      	bne.n	8002778 <HAL_GPIO_Init+0x1e0>
 8002774:	2303      	movs	r3, #3
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002778:	2304      	movs	r3, #4
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x1ee>
 8002784:	2300      	movs	r3, #0
 8002786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	4313      	orrs	r3, r2
 8002794:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002796:	492f      	ldr	r1, [pc, #188]	@ (8002854 <HAL_GPIO_Init+0x2bc>)
 8002798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d006      	beq.n	80027be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	492c      	ldr	r1, [pc, #176]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	608b      	str	r3, [r1, #8]
 80027bc:	e006      	b.n	80027cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027be:	4b2a      	ldr	r3, [pc, #168]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c0:	689a      	ldr	r2, [r3, #8]
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	43db      	mvns	r3, r3
 80027c6:	4928      	ldr	r1, [pc, #160]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027c8:	4013      	ands	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d006      	beq.n	80027e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4922      	ldr	r1, [pc, #136]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	491e      	ldr	r1, [pc, #120]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 80027f0:	4013      	ands	r3, r2
 80027f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d006      	beq.n	800280e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4918      	ldr	r1, [pc, #96]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	604b      	str	r3, [r1, #4]
 800280c:	e006      	b.n	800281c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800280e:	4b16      	ldr	r3, [pc, #88]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	43db      	mvns	r3, r3
 8002816:	4914      	ldr	r1, [pc, #80]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 8002818:	4013      	ands	r3, r2
 800281a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d021      	beq.n	800286c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002828:	4b0f      	ldr	r3, [pc, #60]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e021      	b.n	800287a <HAL_GPIO_Init+0x2e2>
 8002836:	bf00      	nop
 8002838:	10320000 	.word	0x10320000
 800283c:	10310000 	.word	0x10310000
 8002840:	10220000 	.word	0x10220000
 8002844:	10210000 	.word	0x10210000
 8002848:	10120000 	.word	0x10120000
 800284c:	10110000 	.word	0x10110000
 8002850:	40021000 	.word	0x40021000
 8002854:	40010000 	.word	0x40010000
 8002858:	40010800 	.word	0x40010800
 800285c:	40010c00 	.word	0x40010c00
 8002860:	40011000 	.word	0x40011000
 8002864:	40011400 	.word	0x40011400
 8002868:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <HAL_GPIO_Init+0x304>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	43db      	mvns	r3, r3
 8002874:	4909      	ldr	r1, [pc, #36]	@ (800289c <HAL_GPIO_Init+0x304>)
 8002876:	4013      	ands	r3, r2
 8002878:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287c:	3301      	adds	r3, #1
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002886:	fa22 f303 	lsr.w	r3, r2, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	f47f ae8e 	bne.w	80025ac <HAL_GPIO_Init+0x14>
  }
}
 8002890:	bf00      	nop
 8002892:	bf00      	nop
 8002894:	372c      	adds	r7, #44	@ 0x2c
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr
 800289c:	40010400 	.word	0x40010400

080028a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	887b      	ldrh	r3, [r7, #2]
 80028b2:	4013      	ands	r3, r2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d002      	beq.n	80028be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bc80      	pop	{r7}
 80028cc:	4770      	bx	lr

080028ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
 80028d6:	460b      	mov	r3, r1
 80028d8:	807b      	strh	r3, [r7, #2]
 80028da:	4613      	mov	r3, r2
 80028dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028de:	787b      	ldrb	r3, [r7, #1]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028e4:	887a      	ldrh	r2, [r7, #2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028ea:	e003      	b.n	80028f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028ec:	887b      	ldrh	r3, [r7, #2]
 80028ee:	041a      	lsls	r2, r3, #16
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	611a      	str	r2, [r3, #16]
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bc80      	pop	{r7}
 80028fc:	4770      	bx	lr
	...

08002900 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e12b      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff f9e0 	bl	8001cec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002952:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002962:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002964:	f001 f960 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8002968:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4a81      	ldr	r2, [pc, #516]	@ (8002b74 <HAL_I2C_Init+0x274>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d807      	bhi.n	8002984 <HAL_I2C_Init+0x84>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a80      	ldr	r2, [pc, #512]	@ (8002b78 <HAL_I2C_Init+0x278>)
 8002978:	4293      	cmp	r3, r2
 800297a:	bf94      	ite	ls
 800297c:	2301      	movls	r3, #1
 800297e:	2300      	movhi	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e006      	b.n	8002992 <HAL_I2C_Init+0x92>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4a7d      	ldr	r2, [pc, #500]	@ (8002b7c <HAL_I2C_Init+0x27c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	bf94      	ite	ls
 800298c:	2301      	movls	r3, #1
 800298e:	2300      	movhi	r3, #0
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e0e7      	b.n	8002b6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4a78      	ldr	r2, [pc, #480]	@ (8002b80 <HAL_I2C_Init+0x280>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68ba      	ldr	r2, [r7, #8]
 80029b6:	430a      	orrs	r2, r1
 80029b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	4a6a      	ldr	r2, [pc, #424]	@ (8002b74 <HAL_I2C_Init+0x274>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d802      	bhi.n	80029d4 <HAL_I2C_Init+0xd4>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	3301      	adds	r3, #1
 80029d2:	e009      	b.n	80029e8 <HAL_I2C_Init+0xe8>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029da:	fb02 f303 	mul.w	r3, r2, r3
 80029de:	4a69      	ldr	r2, [pc, #420]	@ (8002b84 <HAL_I2C_Init+0x284>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	3301      	adds	r3, #1
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	69db      	ldr	r3, [r3, #28]
 80029f6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029fa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	495c      	ldr	r1, [pc, #368]	@ (8002b74 <HAL_I2C_Init+0x274>)
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d819      	bhi.n	8002a3c <HAL_I2C_Init+0x13c>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1e59      	subs	r1, r3, #1
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a16:	1c59      	adds	r1, r3, #1
 8002a18:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a1c:	400b      	ands	r3, r1
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_I2C_Init+0x138>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1e59      	subs	r1, r3, #1
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a30:	3301      	adds	r3, #1
 8002a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a36:	e051      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	e04f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d111      	bne.n	8002a68 <HAL_I2C_Init+0x168>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	1e58      	subs	r0, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	e012      	b.n	8002a8e <HAL_I2C_Init+0x18e>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	440b      	add	r3, r1
 8002a76:	0099      	lsls	r1, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7e:	3301      	adds	r3, #1
 8002a80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	bf0c      	ite	eq
 8002a88:	2301      	moveq	r3, #1
 8002a8a:	2300      	movne	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x196>
 8002a92:	2301      	movs	r3, #1
 8002a94:	e022      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10e      	bne.n	8002abc <HAL_I2C_Init+0x1bc>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1e58      	subs	r0, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	440b      	add	r3, r1
 8002aac:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aba:	e00f      	b.n	8002adc <HAL_I2C_Init+0x1dc>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1e58      	subs	r0, r3, #1
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6859      	ldr	r1, [r3, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	0099      	lsls	r1, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ad8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002adc:	6879      	ldr	r1, [r7, #4]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	69da      	ldr	r2, [r3, #28]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	431a      	orrs	r2, r3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	430a      	orrs	r2, r1
 8002afe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	6911      	ldr	r1, [r2, #16]
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68d2      	ldr	r2, [r2, #12]
 8002b16:	4311      	orrs	r1, r2
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	000186a0 	.word	0x000186a0
 8002b78:	001e847f 	.word	0x001e847f
 8002b7c:	003d08ff 	.word	0x003d08ff
 8002b80:	431bde83 	.word	0x431bde83
 8002b84:	10624dd3 	.word	0x10624dd3

08002b88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b088      	sub	sp, #32
 8002b8c:	af02      	add	r7, sp, #8
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	607a      	str	r2, [r7, #4]
 8002b92:	461a      	mov	r2, r3
 8002b94:	460b      	mov	r3, r1
 8002b96:	817b      	strh	r3, [r7, #10]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff fb3c 	bl	8002218 <HAL_GetTick>
 8002ba0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b20      	cmp	r3, #32
 8002bac:	f040 80e0 	bne.w	8002d70 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	9300      	str	r3, [sp, #0]
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4970      	ldr	r1, [pc, #448]	@ (8002d7c <HAL_I2C_Master_Transmit+0x1f4>)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 fa92 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e0d3      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_I2C_Master_Transmit+0x50>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e0cc      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d007      	beq.n	8002bfe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f042 0201 	orr.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c0c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2221      	movs	r2, #33	@ 0x21
 8002c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2210      	movs	r2, #16
 8002c1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	893a      	ldrh	r2, [r7, #8]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	4a50      	ldr	r2, [pc, #320]	@ (8002d80 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c40:	8979      	ldrh	r1, [r7, #10]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	6a3a      	ldr	r2, [r7, #32]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 f9ca 	bl	8002fe0 <I2C_MasterRequestWrite>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e08d      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c6c:	e066      	b.n	8002d3c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c6e:	697a      	ldr	r2, [r7, #20]
 8002c70:	6a39      	ldr	r1, [r7, #32]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fb50 	bl	8003318 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00d      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d107      	bne.n	8002c96 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06b      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0304 	and.w	r3, r3, #4
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	d11b      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0x188>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d017      	beq.n	8002d10 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	3b01      	subs	r3, #1
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	6a39      	ldr	r1, [r7, #32]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 fb47 	bl	80033a8 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00d      	beq.n	8002d3c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d107      	bne.n	8002d38 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d36:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e01a      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d194      	bne.n	8002c6e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	e000      	b.n	8002d72 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d70:	2302      	movs	r3, #2
  }
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	00100002 	.word	0x00100002
 8002d80:	ffff0000 	.word	0xffff0000

08002d84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff fa40 	bl	8002218 <HAL_GetTick>
 8002d98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 8111 	bne.w	8002fce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	4988      	ldr	r1, [pc, #544]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f994 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e104      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_IsDeviceReady+0x50>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0fd      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d007      	beq.n	8002dfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2224      	movs	r2, #36	@ 0x24
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	@ (8002fdc <HAL_I2C_IsDeviceReady+0x258>)
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f952 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e54:	d103      	bne.n	8002e5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0b6      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e72:	f7ff f9d1 	bl	8002218 <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ea6:	e025      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7ff f9b6 	bl	8002218 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <HAL_I2C_IsDeviceReady+0x13a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22a0      	movs	r2, #160	@ 0xa0
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002efe:	d005      	beq.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f06:	7dbb      	ldrb	r3, [r7, #22]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0cd      	beq.n	8002ea8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d129      	bne.n	8002f76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f8c6 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e036      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e02c      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	490f      	ldr	r1, [pc, #60]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8a2 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e012      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	f4ff af32 	bcc.w	8002e1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d006      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d003      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003008:	d108      	bne.n	800301c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e00b      	b.n	8003034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	2b12      	cmp	r3, #18
 8003022:	d107      	bne.n	8003034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f84f 	bl	80030e4 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800305a:	d103      	bne.n	8003064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e035      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003070:	d108      	bne.n	8003084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e01b      	b.n	80030bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003084:	897b      	ldrh	r3, [r7, #10]
 8003086:	11db      	asrs	r3, r3, #7
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0306 	and.w	r3, r3, #6
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f063 030f 	orn	r3, r3, #15
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <I2C_MasterRequestWrite+0xfc>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f898 	bl	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e010      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4907      	ldr	r1, [pc, #28]	@ (80030e0 <I2C_MasterRequestWrite+0x100>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f888 	bl	80031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	00010008 	.word	0x00010008
 80030e0:	00010002 	.word	0x00010002

080030e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	4613      	mov	r3, r2
 80030f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f4:	e048      	b.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fc:	d044      	beq.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fe:	f7ff f88b 	bl	8002218 <HAL_GetTick>
 8003102:	4602      	mov	r2, r0
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	1ad3      	subs	r3, r2, r3
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d302      	bcc.n	8003114 <I2C_WaitOnFlagUntilTimeout+0x30>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d139      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b01      	cmp	r3, #1
 800311c:	d10d      	bne.n	800313a <I2C_WaitOnFlagUntilTimeout+0x56>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	e00c      	b.n	8003154 <I2C_WaitOnFlagUntilTimeout+0x70>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	429a      	cmp	r2, r3
 8003158:	d116      	bne.n	8003188 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2220      	movs	r2, #32
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003174:	f043 0220 	orr.w	r2, r3, #32
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e023      	b.n	80031d0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d10d      	bne.n	80031ae <I2C_WaitOnFlagUntilTimeout+0xca>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	43da      	mvns	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	e00c      	b.n	80031c8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	699b      	ldr	r3, [r3, #24]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	4013      	ands	r3, r2
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	79fb      	ldrb	r3, [r7, #7]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d093      	beq.n	80030f6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e6:	e071      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f6:	d123      	bne.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003206:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003210:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2200      	movs	r2, #0
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800322c:	f043 0204 	orr.w	r2, r3, #4
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2200      	movs	r2, #0
 8003238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e067      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003246:	d041      	beq.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003248:	f7fe ffe6 	bl	8002218 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d136      	bne.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b01      	cmp	r3, #1
 8003266:	d10c      	bne.n	8003282 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	4013      	ands	r3, r2
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	bf14      	ite	ne
 800327a:	2301      	movne	r3, #1
 800327c:	2300      	moveq	r3, #0
 800327e:	b2db      	uxtb	r3, r3
 8003280:	e00b      	b.n	800329a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	43da      	mvns	r2, r3
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	4013      	ands	r3, r2
 800328e:	b29b      	uxth	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	bf14      	ite	ne
 8003294:	2301      	movne	r3, #1
 8003296:	2300      	moveq	r3, #0
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2220      	movs	r2, #32
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b8:	f043 0220 	orr.w	r2, r3, #32
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e021      	b.n	8003310 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	0c1b      	lsrs	r3, r3, #16
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d10c      	bne.n	80032f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e00b      	b.n	8003308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4013      	ands	r3, r2
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	bf14      	ite	ne
 8003302:	2301      	movne	r3, #1
 8003304:	2300      	moveq	r3, #0
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	f47f af6d 	bne.w	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003324:	e034      	b.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f886 	bl	8003438 <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d028      	beq.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe ff6b 	bl	8002218 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11d      	bne.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b80      	cmp	r3, #128	@ 0x80
 8003360:	d016      	beq.n	8003390 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800339a:	2b80      	cmp	r3, #128	@ 0x80
 800339c:	d1c3      	bne.n	8003326 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033b4:	e034      	b.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f83e 	bl	8003438 <I2C_IsAcknowledgeFailed>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e034      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d028      	beq.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ce:	f7fe ff23 	bl	8002218 <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	68ba      	ldr	r2, [r7, #8]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d302      	bcc.n	80033e4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d11d      	bne.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	f003 0304 	and.w	r3, r3, #4
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d016      	beq.n	8003420 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f043 0220 	orr.w	r2, r3, #32
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e007      	b.n	8003430 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	f003 0304 	and.w	r3, r3, #4
 800342a:	2b04      	cmp	r3, #4
 800342c:	d1c3      	bne.n	80033b6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3710      	adds	r7, #16
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800344e:	d11b      	bne.n	8003488 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003458:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	f043 0204 	orr.w	r2, r3, #4
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	bc80      	pop	{r7}
 8003492:	4770      	bx	lr

08003494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e272      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8087 	beq.w	80035c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b4:	4b92      	ldr	r3, [pc, #584]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d00c      	beq.n	80034da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d112      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
 80034cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034d8:	d10b      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034da:	4b89      	ldr	r3, [pc, #548]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d06c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x12c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d168      	bne.n	80035c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e24c      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x76>
 80034fc:	4b80      	ldr	r3, [pc, #512]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7f      	ldr	r2, [pc, #508]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e02e      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x98>
 8003512:	4b7b      	ldr	r3, [pc, #492]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7a      	ldr	r2, [pc, #488]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b78      	ldr	r3, [pc, #480]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a77      	ldr	r2, [pc, #476]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003524:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0xbc>
 8003536:	4b72      	ldr	r3, [pc, #456]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a71      	ldr	r2, [pc, #452]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b6f      	ldr	r3, [pc, #444]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6e      	ldr	r2, [pc, #440]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 8003550:	4b6b      	ldr	r3, [pc, #428]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6a      	ldr	r2, [pc, #424]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b68      	ldr	r3, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a67      	ldr	r2, [pc, #412]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fe fe52 	bl	8002218 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fe fe4e 	bl	8002218 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	@ 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e200      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b5d      	ldr	r3, [pc, #372]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xe4>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fe fe3e 	bl	8002218 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fe fe3a 	bl	8002218 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	@ 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1ec      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b53      	ldr	r3, [pc, #332]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x10c>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ce:	4b4c      	ldr	r3, [pc, #304]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035da:	4b49      	ldr	r3, [pc, #292]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d11c      	bne.n	8003620 <HAL_RCC_OscConfig+0x18c>
 80035e6:	4b46      	ldr	r3, [pc, #280]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x176>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1c0      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360a:	4b3d      	ldr	r3, [pc, #244]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4939      	ldr	r1, [pc, #228]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e03a      	b.n	8003696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003628:	4b36      	ldr	r3, [pc, #216]	@ (8003704 <HAL_RCC_OscConfig+0x270>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fe fdf3 	bl	8002218 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fe fdef 	bl	8002218 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1a1      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4927      	ldr	r1, [pc, #156]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <HAL_RCC_OscConfig+0x270>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fe fdd2 	bl	8002218 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fe fdce 	bl	8002218 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e180      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d03a      	beq.n	8003718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b17      	ldr	r3, [pc, #92]	@ (8003708 <HAL_RCC_OscConfig+0x274>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7fe fdb2 	bl	8002218 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fe fdae 	bl	8002218 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e160      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003700 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 fafe 	bl	8003cd8 <RCC_Delay>
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	4b0a      	ldr	r3, [pc, #40]	@ (8003708 <HAL_RCC_OscConfig+0x274>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fe fd98 	bl	8002218 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ea:	e00f      	b.n	800370c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fe fd94 	bl	8002218 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d908      	bls.n	800370c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e146      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	42420000 	.word	0x42420000
 8003708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b92      	ldr	r3, [pc, #584]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e9      	bne.n	80036ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a6 	beq.w	8003872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b8b      	ldr	r3, [pc, #556]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b88      	ldr	r3, [pc, #544]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a87      	ldr	r2, [pc, #540]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b85      	ldr	r3, [pc, #532]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b82      	ldr	r3, [pc, #520]	@ (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d118      	bne.n	8003790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375e:	4b7f      	ldr	r3, [pc, #508]	@ (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7e      	ldr	r2, [pc, #504]	@ (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376a:	f7fe fd55 	bl	8002218 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003772:	f7fe fd51 	bl	8002218 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b64      	cmp	r3, #100	@ 0x64
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e103      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	4b75      	ldr	r3, [pc, #468]	@ (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x312>
 8003798:	4b6f      	ldr	r3, [pc, #444]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a6e      	ldr	r2, [pc, #440]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6213      	str	r3, [r2, #32]
 80037a4:	e02d      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x334>
 80037ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a69      	ldr	r2, [pc, #420]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6213      	str	r3, [r2, #32]
 80037ba:	4b67      	ldr	r3, [pc, #412]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a66      	ldr	r2, [pc, #408]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6213      	str	r3, [r2, #32]
 80037c6:	e01c      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d10c      	bne.n	80037ea <HAL_RCC_OscConfig+0x356>
 80037d0:	4b61      	ldr	r3, [pc, #388]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4a60      	ldr	r2, [pc, #384]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	f043 0304 	orr.w	r3, r3, #4
 80037da:	6213      	str	r3, [r2, #32]
 80037dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6213      	str	r3, [r2, #32]
 80037e8:	e00b      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	4b58      	ldr	r3, [pc, #352]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a57      	ldr	r2, [pc, #348]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d015      	beq.n	8003836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fe fd05 	bl	8002218 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fe fd01 	bl	8002218 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0b1      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	4b4b      	ldr	r3, [pc, #300]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ee      	beq.n	8003812 <HAL_RCC_OscConfig+0x37e>
 8003834:	e014      	b.n	8003860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fe fcef 	bl	8002218 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fe fceb 	bl	8002218 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	@ 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e09b      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ee      	bne.n	800383e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4b3c      	ldr	r3, [pc, #240]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a3b      	ldr	r2, [pc, #236]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8087 	beq.w	800398a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387c:	4b36      	ldr	r3, [pc, #216]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d061      	beq.n	800394c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d146      	bne.n	800391e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b33      	ldr	r3, [pc, #204]	@ (8003960 <HAL_RCC_OscConfig+0x4cc>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fe fcbf 	bl	8002218 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389e:	f7fe fcbb 	bl	8002218 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e06d      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b0:	4b29      	ldr	r3, [pc, #164]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038c4:	d108      	bne.n	80038d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c6:	4b24      	ldr	r3, [pc, #144]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4921      	ldr	r1, [pc, #132]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a19      	ldr	r1, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	430b      	orrs	r3, r1
 80038ea:	491b      	ldr	r1, [pc, #108]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003960 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fe fc8f 	bl	8002218 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fe fc8b 	bl	8002218 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e03d      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	4b11      	ldr	r3, [pc, #68]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x46a>
 800391c:	e035      	b.n	800398a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b10      	ldr	r3, [pc, #64]	@ (8003960 <HAL_RCC_OscConfig+0x4cc>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fe fc78 	bl	8002218 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe fc74 	bl	8002218 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e026      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393e:	4b06      	ldr	r3, [pc, #24]	@ (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x498>
 800394a:	e01e      	b.n	800398a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e019      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
 8003960:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003964:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_RCC_OscConfig+0x500>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	429a      	cmp	r2, r3
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0d0      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d910      	bls.n	80039dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b67      	ldr	r3, [pc, #412]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	4965      	ldr	r1, [pc, #404]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a52      	ldr	r2, [pc, #328]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d040      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d115      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e073      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3d      	ldr	r3, [pc, #244]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06b      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b39      	ldr	r3, [pc, #228]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4936      	ldr	r1, [pc, #216]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fe fbc6 	bl	8002218 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fe fbc2 	bl	8002218 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e053      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d210      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0207 	bic.w	r2, r3, #7
 8003ace:	4922      	ldr	r1, [pc, #136]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1cc>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fe f99c 	bl	8001e84 <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	0800bb8c 	.word	0x0800bb8c
 8003b64:	20000008 	.word	0x20000008
 8003b68:	2000000c 	.word	0x2000000c

08003b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b86:	4b1e      	ldr	r3, [pc, #120]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d002      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x30>
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x36>
 8003b9a:	e027      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b9e:	613b      	str	r3, [r7, #16]
      break;
 8003ba0:	e027      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bba:	4b11      	ldr	r3, [pc, #68]	@ (8003c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0c5b      	lsrs	r3, r3, #17
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	4a11      	ldr	r2, [pc, #68]	@ (8003c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e004      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	@ (8003c10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b05      	ldr	r3, [pc, #20]	@ (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	693b      	ldr	r3, [r7, #16]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	0800bba4 	.word	0x0800bba4
 8003c0c:	0800bbb4 	.word	0x0800bbb4
 8003c10:	003d0900 	.word	0x003d0900

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b02      	ldr	r3, [pc, #8]	@ (8003c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	20000008 	.word	0x20000008

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff2 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	@ (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	@ (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	0800bb9c 	.word	0x0800bb9c

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffde 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0adb      	lsrs	r3, r3, #11
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	0800bb9c 	.word	0x0800bb9c

08003c78 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	220f      	movs	r2, #15
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c88:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x58>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c94:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x58>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x58>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cac:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <HAL_RCC_GetClockConfig+0x58>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	08db      	lsrs	r3, r3, #3
 8003cb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003cba:	4b06      	ldr	r3, [pc, #24]	@ (8003cd4 <HAL_RCC_GetClockConfig+0x5c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0207 	and.w	r2, r3, #7
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003cc6:	bf00      	nop
 8003cc8:	370c      	adds	r7, #12
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	40022000 	.word	0x40022000

08003cd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <RCC_Delay+0x34>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8003d10 <RCC_Delay+0x38>)
 8003ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cea:	0a5b      	lsrs	r3, r3, #9
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cf4:	bf00      	nop
  }
  while (Delay --);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	60fa      	str	r2, [r7, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f9      	bne.n	8003cf4 <RCC_Delay+0x1c>
}
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	10624dd3 	.word	0x10624dd3

08003d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e041      	b.n	8003daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe f814 	bl	8001d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2202      	movs	r2, #2
 8003d44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3304      	adds	r3, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4610      	mov	r0, r2
 8003d54:	f000 faa6 	bl	80042a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d001      	beq.n	8003dcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e032      	b.n	8003e32 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2202      	movs	r2, #2
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a18      	ldr	r2, [pc, #96]	@ (8003e3c <HAL_TIM_Base_Start+0x88>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d00e      	beq.n	8003dfc <HAL_TIM_Base_Start+0x48>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de6:	d009      	beq.n	8003dfc <HAL_TIM_Base_Start+0x48>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a14      	ldr	r2, [pc, #80]	@ (8003e40 <HAL_TIM_Base_Start+0x8c>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d004      	beq.n	8003dfc <HAL_TIM_Base_Start+0x48>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a13      	ldr	r2, [pc, #76]	@ (8003e44 <HAL_TIM_Base_Start+0x90>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b06      	cmp	r3, #6
 8003e0c:	d010      	beq.n	8003e30 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f042 0201 	orr.w	r2, r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e1e:	e007      	b.n	8003e30 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40012c00 	.word	0x40012c00
 8003e40:	40000400 	.word	0x40000400
 8003e44:	40000800 	.word	0x40000800

08003e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e03a      	b.n	8003ed6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68da      	ldr	r2, [r3, #12]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0201 	orr.w	r2, r2, #1
 8003e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a18      	ldr	r2, [pc, #96]	@ (8003ee0 <HAL_TIM_Base_Start_IT+0x98>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d00e      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e8a:	d009      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d004      	beq.n	8003ea0 <HAL_TIM_Base_Start_IT+0x58>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a13      	ldr	r2, [pc, #76]	@ (8003ee8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d111      	bne.n	8003ec4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d010      	beq.n	8003ed4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f042 0201 	orr.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec2:	e007      	b.n	8003ed4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0201 	orr.w	r2, r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40000400 	.word	0x40000400
 8003ee8:	40000800 	.word	0x40000800

08003eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d01b      	beq.n	8003f50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f06f 0202 	mvn.w	r2, #2
 8003f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 f998 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003f3c:	e005      	b.n	8003f4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f98b 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f99a 	bl	800427e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d01b      	beq.n	8003f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f06f 0204 	mvn.w	r2, #4
 8003f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2202      	movs	r2, #2
 8003f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f000 f972 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003f88:	e005      	b.n	8003f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f000 f965 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f000 f974 	bl	800427e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f003 0308 	and.w	r3, r3, #8
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d020      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 0308 	and.w	r3, r3, #8
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01b      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f06f 0208 	mvn.w	r2, #8
 8003fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2204      	movs	r2, #4
 8003fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f94c 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8003fd4:	e005      	b.n	8003fe2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f93f 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 f94e 	bl	800427e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0310 	and.w	r3, r3, #16
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0210 	mvn.w	r2, #16
 8004004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2208      	movs	r2, #8
 800400a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f926 	bl	800426c <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f919 	bl	800425a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f928 	bl	800427e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00c      	beq.n	8004058 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d007      	beq.n	8004058 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0201 	mvn.w	r2, #1
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fd fb3a 	bl	80016cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00c      	beq.n	800407c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	2b00      	cmp	r3, #0
 800406a:	d007      	beq.n	800407c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fa7f 	bl	800457a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00c      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800408c:	2b00      	cmp	r3, #0
 800408e:	d007      	beq.n	80040a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8f8 	bl	8004290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f003 0320 	and.w	r3, r3, #32
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00c      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d007      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0220 	mvn.w	r2, #32
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fa52 	bl	8004568 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIM_ConfigClockSource+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e0b4      	b.n	8004252 <HAL_TIM_ConfigClockSource+0x186>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004106:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800410e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	68ba      	ldr	r2, [r7, #8]
 8004116:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004120:	d03e      	beq.n	80041a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004122:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004126:	f200 8087 	bhi.w	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 800412a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800412e:	f000 8086 	beq.w	800423e <HAL_TIM_ConfigClockSource+0x172>
 8004132:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004136:	d87f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004138:	2b70      	cmp	r3, #112	@ 0x70
 800413a:	d01a      	beq.n	8004172 <HAL_TIM_ConfigClockSource+0xa6>
 800413c:	2b70      	cmp	r3, #112	@ 0x70
 800413e:	d87b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004140:	2b60      	cmp	r3, #96	@ 0x60
 8004142:	d050      	beq.n	80041e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004144:	2b60      	cmp	r3, #96	@ 0x60
 8004146:	d877      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004148:	2b50      	cmp	r3, #80	@ 0x50
 800414a:	d03c      	beq.n	80041c6 <HAL_TIM_ConfigClockSource+0xfa>
 800414c:	2b50      	cmp	r3, #80	@ 0x50
 800414e:	d873      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004150:	2b40      	cmp	r3, #64	@ 0x40
 8004152:	d058      	beq.n	8004206 <HAL_TIM_ConfigClockSource+0x13a>
 8004154:	2b40      	cmp	r3, #64	@ 0x40
 8004156:	d86f      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004158:	2b30      	cmp	r3, #48	@ 0x30
 800415a:	d064      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800415c:	2b30      	cmp	r3, #48	@ 0x30
 800415e:	d86b      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004160:	2b20      	cmp	r3, #32
 8004162:	d060      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004164:	2b20      	cmp	r3, #32
 8004166:	d867      	bhi.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d05c      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 800416c:	2b10      	cmp	r3, #16
 800416e:	d05a      	beq.n	8004226 <HAL_TIM_ConfigClockSource+0x15a>
 8004170:	e062      	b.n	8004238 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004182:	f000 f974 	bl	800446e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004194:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	609a      	str	r2, [r3, #8]
      break;
 800419e:	e04f      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041b0:	f000 f95d 	bl	800446e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041c2:	609a      	str	r2, [r3, #8]
      break;
 80041c4:	e03c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041d2:	461a      	mov	r2, r3
 80041d4:	f000 f8d4 	bl	8004380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2150      	movs	r1, #80	@ 0x50
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 f92b 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 80041e4:	e02c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041f2:	461a      	mov	r2, r3
 80041f4:	f000 f8f2 	bl	80043dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	2160      	movs	r1, #96	@ 0x60
 80041fe:	4618      	mov	r0, r3
 8004200:	f000 f91b 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8004204:	e01c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004212:	461a      	mov	r2, r3
 8004214:	f000 f8b4 	bl	8004380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2140      	movs	r1, #64	@ 0x40
 800421e:	4618      	mov	r0, r3
 8004220:	f000 f90b 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8004224:	e00c      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4619      	mov	r1, r3
 8004230:	4610      	mov	r0, r2
 8004232:	f000 f902 	bl	800443a <TIM_ITRx_SetConfig>
      break;
 8004236:	e003      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e000      	b.n	8004240 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800423e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004250:	7bfb      	ldrb	r3, [r7, #15]
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}

0800425a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800425a:	b480      	push	{r7}
 800425c:	b083      	sub	sp, #12
 800425e:	af00      	add	r7, sp, #0
 8004260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004262:	bf00      	nop
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr

0800426c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	bc80      	pop	{r7}
 800427c:	4770      	bx	lr

0800427e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800427e:	b480      	push	{r7}
 8004280:	b083      	sub	sp, #12
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004286:	bf00      	nop
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	bc80      	pop	{r7}
 800428e:	4770      	bx	lr

08004290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
	...

080042a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004374 <TIM_Base_SetConfig+0xd0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004378 <TIM_Base_SetConfig+0xd4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x30>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a2b      	ldr	r2, [pc, #172]	@ (800437c <TIM_Base_SetConfig+0xd8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a22      	ldr	r2, [pc, #136]	@ (8004374 <TIM_Base_SetConfig+0xd0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <TIM_Base_SetConfig+0xd4>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0x62>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <TIM_Base_SetConfig+0xd8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a0d      	ldr	r2, [pc, #52]	@ (8004374 <TIM_Base_SetConfig+0xd0>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d103      	bne.n	800434c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	f023 0201 	bic.w	r2, r3, #1
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	611a      	str	r2, [r3, #16]
  }
}
 800436a:	bf00      	nop
 800436c:	3714      	adds	r7, #20
 800436e:	46bd      	mov	sp, r7
 8004370:	bc80      	pop	{r7}
 8004372:	4770      	bx	lr
 8004374:	40012c00 	.word	0x40012c00
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800

08004380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004380:	b480      	push	{r7}
 8004382:	b087      	sub	sp, #28
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6a1b      	ldr	r3, [r3, #32]
 8004396:	f023 0201 	bic.w	r2, r3, #1
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80043aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	f023 030a 	bic.w	r3, r3, #10
 80043bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	693a      	ldr	r2, [r7, #16]
 80043ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	621a      	str	r2, [r3, #32]
}
 80043d2:	bf00      	nop
 80043d4:	371c      	adds	r7, #28
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bc80      	pop	{r7}
 80043da:	4770      	bx	lr

080043dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	f023 0210 	bic.w	r2, r3, #16
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004406:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	031b      	lsls	r3, r3, #12
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	4313      	orrs	r3, r2
 8004410:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004418:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	621a      	str	r2, [r3, #32]
}
 8004430:	bf00      	nop
 8004432:	371c      	adds	r7, #28
 8004434:	46bd      	mov	sp, r7
 8004436:	bc80      	pop	{r7}
 8004438:	4770      	bx	lr

0800443a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800443a:	b480      	push	{r7}
 800443c:	b085      	sub	sp, #20
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
 8004442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	f043 0307 	orr.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	609a      	str	r2, [r3, #8]
}
 8004464:	bf00      	nop
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	bc80      	pop	{r7}
 800446c:	4770      	bx	lr

0800446e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800446e:	b480      	push	{r7}
 8004470:	b087      	sub	sp, #28
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	60b9      	str	r1, [r7, #8]
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004488:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	021a      	lsls	r2, r3, #8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	431a      	orrs	r2, r3
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	4313      	orrs	r3, r2
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	609a      	str	r2, [r3, #8]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e046      	b.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a16      	ldr	r2, [pc, #88]	@ (800455c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d00e      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d009      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a12      	ldr	r2, [pc, #72]	@ (8004560 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d004      	beq.n	8004526 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a10      	ldr	r2, [pc, #64]	@ (8004564 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d10c      	bne.n	8004540 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800452c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68ba      	ldr	r2, [r7, #8]
 800453e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3714      	adds	r7, #20
 8004556:	46bd      	mov	sp, r7
 8004558:	bc80      	pop	{r7}
 800455a:	4770      	bx	lr
 800455c:	40012c00 	.word	0x40012c00
 8004560:	40000400 	.word	0x40000400
 8004564:	40000800 	.word	0x40000800

08004568 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e042      	b.n	8004624 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fc12 	bl	8001ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	@ 0x24
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fd63 	bl	800509c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	695a      	ldr	r2, [r3, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004604:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	@ 0x28
 8004630:	af02      	add	r7, sp, #8
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	603b      	str	r3, [r7, #0]
 8004638:	4613      	mov	r3, r2
 800463a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b20      	cmp	r3, #32
 800464a:	d175      	bne.n	8004738 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_UART_Transmit+0x2c>
 8004652:	88fb      	ldrh	r3, [r7, #6]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e06e      	b.n	800473a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2221      	movs	r2, #33	@ 0x21
 8004666:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800466a:	f7fd fdd5 	bl	8002218 <HAL_GetTick>
 800466e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	88fa      	ldrh	r2, [r7, #6]
 8004674:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	88fa      	ldrh	r2, [r7, #6]
 800467a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004684:	d108      	bne.n	8004698 <HAL_UART_Transmit+0x6c>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	e003      	b.n	80046a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80046a0:	e02e      	b.n	8004700 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2200      	movs	r2, #0
 80046aa:	2180      	movs	r1, #128	@ 0x80
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 fb01 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2220      	movs	r2, #32
 80046bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e03a      	b.n	800473a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10b      	bne.n	80046e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	3302      	adds	r3, #2
 80046de:	61bb      	str	r3, [r7, #24]
 80046e0:	e007      	b.n	80046f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	781a      	ldrb	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	3301      	adds	r3, #1
 80046f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29a      	uxth	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004704:	b29b      	uxth	r3, r3
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1cb      	bne.n	80046a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2200      	movs	r2, #0
 8004712:	2140      	movs	r1, #64	@ 0x40
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 facd 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0ba      	sub	sp, #232	@ 0xe8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_UART_IRQHandler+0x66>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fbbc 	bl	8004f20 <UART_Receive_IT>
      return;
 80047a8:	e25b      	b.n	8004c62 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80de 	beq.w	8004970 <HAL_UART_IRQHandler+0x22c>
 80047b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80d1 	beq.w	8004970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_UART_IRQHandler+0xae>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0xd2>
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800480e:	f043 0202 	orr.w	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_UART_IRQHandler+0xf6>
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_UART_IRQHandler+0x126>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 81f2 	beq.w	8004c58 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_UART_IRQHandler+0x14e>
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb47 	bl	8004f20 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_UART_IRQHandler+0x17a>
 80048b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04f      	beq.n	800495e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa51 	bl	8004d66 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d041      	beq.n	8004956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3314      	adds	r3, #20
 80048d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80048e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3314      	adds	r3, #20
 80048fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80048fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004902:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800490a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1d9      	bne.n	80048d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	4a7e      	ldr	r2, [pc, #504]	@ (8004b24 <HAL_UART_IRQHandler+0x3e0>)
 800492c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fdb8 	bl	80024a8 <HAL_DMA_Abort_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004942:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004948:	4610      	mov	r0, r2
 800494a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	e00e      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f99c 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e00a      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f998 	bl	8004c8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e006      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f994 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800496a:	e175      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	bf00      	nop
    return;
 800496e:	e173      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 814f 	bne.w	8004c18 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8148 	beq.w	8004c18 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 8141 	beq.w	8004c18 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	f000 80b6 	beq.w	8004b28 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8145 	beq.w	8004c5c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049da:	429a      	cmp	r2, r3
 80049dc:	f080 813e 	bcs.w	8004c5c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80049e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b20      	cmp	r3, #32
 80049f0:	f000 8088 	beq.w	8004b04 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a02:	e853 3f00 	ldrex	r3, [r3]
 8004a06:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	330c      	adds	r3, #12
 8004a1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a20:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a24:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a28:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1d9      	bne.n	80049f4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	3314      	adds	r3, #20
 8004a46:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a48:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a4a:	e853 3f00 	ldrex	r3, [r3]
 8004a4e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3314      	adds	r3, #20
 8004a60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a64:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a68:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004a76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e1      	bne.n	8004a40 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	3314      	adds	r3, #20
 8004a82:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a84:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a86:	e853 3f00 	ldrex	r3, [r3]
 8004a8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3314      	adds	r3, #20
 8004a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004aa0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004aa2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004aa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004aae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e3      	bne.n	8004a7c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	330c      	adds	r3, #12
 8004ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004acc:	e853 3f00 	ldrex	r3, [r3]
 8004ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004ad2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ad4:	f023 0310 	bic.w	r3, r3, #16
 8004ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	330c      	adds	r3, #12
 8004ae2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ae6:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ae8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004aec:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e3      	bne.n	8004ac2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7fd fc97 	bl	8002432 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2202      	movs	r2, #2
 8004b08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	b29b      	uxth	r3, r3
 8004b18:	4619      	mov	r1, r3
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f8bf 	bl	8004c9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b20:	e09c      	b.n	8004c5c <HAL_UART_IRQHandler+0x518>
 8004b22:	bf00      	nop
 8004b24:	08004e2b 	.word	0x08004e2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 808e 	beq.w	8004c60 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	f000 8089 	beq.w	8004c60 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	330c      	adds	r3, #12
 8004b54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	e853 3f00 	ldrex	r3, [r3]
 8004b5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b64:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	330c      	adds	r3, #12
 8004b6e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b72:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b7a:	e841 2300 	strex	r3, r2, [r1]
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d1e3      	bne.n	8004b4e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	3314      	adds	r3, #20
 8004b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	623b      	str	r3, [r7, #32]
   return(result);
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f023 0301 	bic.w	r3, r3, #1
 8004b9c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3314      	adds	r3, #20
 8004ba6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004baa:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb2:	e841 2300 	strex	r3, r2, [r1]
 8004bb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e3      	bne.n	8004b86 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0310 	bic.w	r3, r3, #16
 8004be2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	330c      	adds	r3, #12
 8004bec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004bf0:	61fa      	str	r2, [r7, #28]
 8004bf2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf4:	69b9      	ldr	r1, [r7, #24]
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	e841 2300 	strex	r3, r2, [r1]
 8004bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1e3      	bne.n	8004bcc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2202      	movs	r2, #2
 8004c08:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c0a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f844 	bl	8004c9e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c16:	e023      	b.n	8004c60 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d009      	beq.n	8004c38 <HAL_UART_IRQHandler+0x4f4>
 8004c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f000 f90e 	bl	8004e52 <UART_Transmit_IT>
    return;
 8004c36:	e014      	b.n	8004c62 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00e      	beq.n	8004c62 <HAL_UART_IRQHandler+0x51e>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d008      	beq.n	8004c62 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f94d 	bl	8004ef0 <UART_EndTransmit_IT>
    return;
 8004c56:	e004      	b.n	8004c62 <HAL_UART_IRQHandler+0x51e>
    return;
 8004c58:	bf00      	nop
 8004c5a:	e002      	b.n	8004c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c5c:	bf00      	nop
 8004c5e:	e000      	b.n	8004c62 <HAL_UART_IRQHandler+0x51e>
      return;
 8004c60:	bf00      	nop
  }
}
 8004c62:	37e8      	adds	r7, #232	@ 0xe8
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bc80      	pop	{r7}
 8004c78:	4770      	bx	lr

08004c7a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c7a:	b480      	push	{r7}
 8004c7c:	b083      	sub	sp, #12
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c82:	bf00      	nop
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bc80      	pop	{r7}
 8004c8a:	4770      	bx	lr

08004c8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c94:	bf00      	nop
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr

08004c9e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bc80      	pop	{r7}
 8004cb2:	4770      	bx	lr

08004cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b086      	sub	sp, #24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	e03b      	b.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	6a3b      	ldr	r3, [r7, #32]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d037      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cce:	f7fd faa3 	bl	8002218 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e03a      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d023      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b80      	cmp	r3, #128	@ 0x80
 8004cfa:	d020      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b40      	cmp	r3, #64	@ 0x40
 8004d00:	d01d      	beq.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d116      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d10:	2300      	movs	r3, #0
 8004d12:	617b      	str	r3, [r7, #20]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	617b      	str	r3, [r7, #20]
 8004d24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f000 f81d 	bl	8004d66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2208      	movs	r2, #8
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00f      	b.n	8004d5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4013      	ands	r3, r2
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	461a      	mov	r2, r3
 8004d56:	79fb      	ldrb	r3, [r7, #7]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d0b4      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b095      	sub	sp, #84	@ 0x54
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	330c      	adds	r3, #12
 8004d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	330c      	adds	r3, #12
 8004d8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e5      	bne.n	8004d6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3314      	adds	r3, #20
 8004da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004daa:	6a3b      	ldr	r3, [r7, #32]
 8004dac:	e853 3f00 	ldrex	r3, [r3]
 8004db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	3314      	adds	r3, #20
 8004dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e5      	bne.n	8004da2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d119      	bne.n	8004e12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	330c      	adds	r3, #12
 8004de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dfe:	61ba      	str	r2, [r7, #24]
 8004e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e5      	bne.n	8004dde <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004e20:	bf00      	nop
 8004e22:	3754      	adds	r7, #84	@ 0x54
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e2a:	b580      	push	{r7, lr}
 8004e2c:	b084      	sub	sp, #16
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2200      	movs	r2, #0
 8004e42:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e44:	68f8      	ldr	r0, [r7, #12]
 8004e46:	f7ff ff21 	bl	8004c8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e4a:	bf00      	nop
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b21      	cmp	r3, #33	@ 0x21
 8004e64:	d13e      	bne.n	8004ee4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6e:	d114      	bne.n	8004e9a <UART_Transmit_IT+0x48>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d110      	bne.n	8004e9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	1c9a      	adds	r2, r3, #2
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	621a      	str	r2, [r3, #32]
 8004e98:	e008      	b.n	8004eac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	1c59      	adds	r1, r3, #1
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6211      	str	r1, [r2, #32]
 8004ea4:	781a      	ldrb	r2, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	3b01      	subs	r3, #1
 8004eb4:	b29b      	uxth	r3, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	4619      	mov	r1, r3
 8004eba:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10f      	bne.n	8004ee0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004ece:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	68da      	ldr	r2, [r3, #12]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ede:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	e000      	b.n	8004ee6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ee4:	2302      	movs	r3, #2
  }
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bc80      	pop	{r7}
 8004eee:	4770      	bx	lr

08004ef0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68da      	ldr	r2, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f06:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2220      	movs	r2, #32
 8004f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f7ff fea9 	bl	8004c68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3708      	adds	r7, #8
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	@ 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b22      	cmp	r3, #34	@ 0x22
 8004f32:	f040 80ae 	bne.w	8005092 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	689b      	ldr	r3, [r3, #8]
 8004f3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f3e:	d117      	bne.n	8004f70 <UART_Receive_IT+0x50>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	691b      	ldr	r3, [r3, #16]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d113      	bne.n	8004f70 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f50:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f62:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f68:	1c9a      	adds	r2, r3, #2
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f6e:	e026      	b.n	8004fbe <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f82:	d007      	beq.n	8004f94 <UART_Receive_IT+0x74>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10a      	bne.n	8004fa2 <UART_Receive_IT+0x82>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	e008      	b.n	8004fb4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	b2db      	uxtb	r3, r3
 8004faa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004fae:	b2da      	uxtb	r2, r3
 8004fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb8:	1c5a      	adds	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	4619      	mov	r1, r3
 8004fcc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d15d      	bne.n	800508e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f022 0220 	bic.w	r2, r2, #32
 8004fe0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68da      	ldr	r2, [r3, #12]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ff0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	695a      	ldr	r2, [r3, #20]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f022 0201 	bic.w	r2, r2, #1
 8005000:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2220      	movs	r2, #32
 8005006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005014:	2b01      	cmp	r3, #1
 8005016:	d135      	bne.n	8005084 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	330c      	adds	r3, #12
 8005024:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	613b      	str	r3, [r7, #16]
   return(result);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f023 0310 	bic.w	r3, r3, #16
 8005034:	627b      	str	r3, [r7, #36]	@ 0x24
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503e:	623a      	str	r2, [r7, #32]
 8005040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	69f9      	ldr	r1, [r7, #28]
 8005044:	6a3a      	ldr	r2, [r7, #32]
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	61bb      	str	r3, [r7, #24]
   return(result);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e5      	bne.n	800501e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b10      	cmp	r3, #16
 800505e:	d10a      	bne.n	8005076 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	60fb      	str	r3, [r7, #12]
 8005074:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff fe0e 	bl	8004c9e <HAL_UARTEx_RxEventCallback>
 8005082:	e002      	b.n	800508a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	f7ff fdf8 	bl	8004c7a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e002      	b.n	8005094 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	e000      	b.n	8005094 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005092:	2302      	movs	r3, #2
  }
}
 8005094:	4618      	mov	r0, r3
 8005096:	3730      	adds	r7, #48	@ 0x30
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}

0800509c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	695b      	ldr	r3, [r3, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80050d6:	f023 030c 	bic.w	r3, r3, #12
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6812      	ldr	r2, [r2, #0]
 80050de:	68b9      	ldr	r1, [r7, #8]
 80050e0:	430b      	orrs	r3, r1
 80050e2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	699a      	ldr	r2, [r3, #24]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a2c      	ldr	r2, [pc, #176]	@ (80051b0 <UART_SetConfig+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d103      	bne.n	800510c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005104:	f7fe fda4 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 8005108:	60f8      	str	r0, [r7, #12]
 800510a:	e002      	b.n	8005112 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800510c:	f7fe fd8c 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8005110:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005112:	68fa      	ldr	r2, [r7, #12]
 8005114:	4613      	mov	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	4413      	add	r3, r2
 800511a:	009a      	lsls	r2, r3, #2
 800511c:	441a      	add	r2, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	fbb2 f3f3 	udiv	r3, r2, r3
 8005128:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <UART_SetConfig+0x118>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	0119      	lsls	r1, r3, #4
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	4613      	mov	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	4413      	add	r3, r2
 800513a:	009a      	lsls	r2, r3, #2
 800513c:	441a      	add	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	fbb2 f2f3 	udiv	r2, r2, r3
 8005148:	4b1a      	ldr	r3, [pc, #104]	@ (80051b4 <UART_SetConfig+0x118>)
 800514a:	fba3 0302 	umull	r0, r3, r3, r2
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	2064      	movs	r0, #100	@ 0x64
 8005152:	fb00 f303 	mul.w	r3, r0, r3
 8005156:	1ad3      	subs	r3, r2, r3
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	3332      	adds	r3, #50	@ 0x32
 800515c:	4a15      	ldr	r2, [pc, #84]	@ (80051b4 <UART_SetConfig+0x118>)
 800515e:	fba2 2303 	umull	r2, r3, r2, r3
 8005162:	095b      	lsrs	r3, r3, #5
 8005164:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005168:	4419      	add	r1, r3
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009a      	lsls	r2, r3, #2
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005180:	4b0c      	ldr	r3, [pc, #48]	@ (80051b4 <UART_SetConfig+0x118>)
 8005182:	fba3 0302 	umull	r0, r3, r3, r2
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	2064      	movs	r0, #100	@ 0x64
 800518a:	fb00 f303 	mul.w	r3, r0, r3
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	3332      	adds	r3, #50	@ 0x32
 8005194:	4a07      	ldr	r2, [pc, #28]	@ (80051b4 <UART_SetConfig+0x118>)
 8005196:	fba2 2303 	umull	r2, r3, r2, r3
 800519a:	095b      	lsrs	r3, r3, #5
 800519c:	f003 020f 	and.w	r2, r3, #15
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	440a      	add	r2, r1
 80051a6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80051a8:	bf00      	nop
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40013800 	.word	0x40013800
 80051b4:	51eb851f 	.word	0x51eb851f

080051b8 <__NVIC_SetPriority>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	4603      	mov	r3, r0
 80051c0:	6039      	str	r1, [r7, #0]
 80051c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	db0a      	blt.n	80051e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	b2da      	uxtb	r2, r3
 80051d0:	490c      	ldr	r1, [pc, #48]	@ (8005204 <__NVIC_SetPriority+0x4c>)
 80051d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d6:	0112      	lsls	r2, r2, #4
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	440b      	add	r3, r1
 80051dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051e0:	e00a      	b.n	80051f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	b2da      	uxtb	r2, r3
 80051e6:	4908      	ldr	r1, [pc, #32]	@ (8005208 <__NVIC_SetPriority+0x50>)
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f003 030f 	and.w	r3, r3, #15
 80051ee:	3b04      	subs	r3, #4
 80051f0:	0112      	lsls	r2, r2, #4
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	440b      	add	r3, r1
 80051f6:	761a      	strb	r2, [r3, #24]
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bc80      	pop	{r7}
 8005200:	4770      	bx	lr
 8005202:	bf00      	nop
 8005204:	e000e100 	.word	0xe000e100
 8005208:	e000ed00 	.word	0xe000ed00

0800520c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005210:	4b05      	ldr	r3, [pc, #20]	@ (8005228 <SysTick_Handler+0x1c>)
 8005212:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005214:	f002 f870 	bl	80072f8 <xTaskGetSchedulerState>
 8005218:	4603      	mov	r3, r0
 800521a:	2b01      	cmp	r3, #1
 800521c:	d001      	beq.n	8005222 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800521e:	f002 ff13 	bl	8008048 <xPortSysTickHandler>
  }
}
 8005222:	bf00      	nop
 8005224:	bd80      	pop	{r7, pc}
 8005226:	bf00      	nop
 8005228:	e000e010 	.word	0xe000e010

0800522c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800522c:	b580      	push	{r7, lr}
 800522e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005230:	2100      	movs	r1, #0
 8005232:	f06f 0004 	mvn.w	r0, #4
 8005236:	f7ff ffbf 	bl	80051b8 <__NVIC_SetPriority>
#endif
}
 800523a:	bf00      	nop
 800523c:	bd80      	pop	{r7, pc}
	...

08005240 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005246:	f3ef 8305 	mrs	r3, IPSR
 800524a:	603b      	str	r3, [r7, #0]
  return(result);
 800524c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005252:	f06f 0305 	mvn.w	r3, #5
 8005256:	607b      	str	r3, [r7, #4]
 8005258:	e00c      	b.n	8005274 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800525a:	4b09      	ldr	r3, [pc, #36]	@ (8005280 <osKernelInitialize+0x40>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d105      	bne.n	800526e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005262:	4b07      	ldr	r3, [pc, #28]	@ (8005280 <osKernelInitialize+0x40>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005268:	2300      	movs	r3, #0
 800526a:	607b      	str	r3, [r7, #4]
 800526c:	e002      	b.n	8005274 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800526e:	f04f 33ff 	mov.w	r3, #4294967295
 8005272:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005274:	687b      	ldr	r3, [r7, #4]
}
 8005276:	4618      	mov	r0, r3
 8005278:	370c      	adds	r7, #12
 800527a:	46bd      	mov	sp, r7
 800527c:	bc80      	pop	{r7}
 800527e:	4770      	bx	lr
 8005280:	200007c4 	.word	0x200007c4

08005284 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800528a:	f3ef 8305 	mrs	r3, IPSR
 800528e:	603b      	str	r3, [r7, #0]
  return(result);
 8005290:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005292:	2b00      	cmp	r3, #0
 8005294:	d003      	beq.n	800529e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005296:	f06f 0305 	mvn.w	r3, #5
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	e010      	b.n	80052c0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800529e:	4b0b      	ldr	r3, [pc, #44]	@ (80052cc <osKernelStart+0x48>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d109      	bne.n	80052ba <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052a6:	f7ff ffc1 	bl	800522c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052aa:	4b08      	ldr	r3, [pc, #32]	@ (80052cc <osKernelStart+0x48>)
 80052ac:	2202      	movs	r2, #2
 80052ae:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052b0:	f001 fbb4 	bl	8006a1c <vTaskStartScheduler>
      stat = osOK;
 80052b4:	2300      	movs	r3, #0
 80052b6:	607b      	str	r3, [r7, #4]
 80052b8:	e002      	b.n	80052c0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052ba:	f04f 33ff 	mov.w	r3, #4294967295
 80052be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052c0:	687b      	ldr	r3, [r7, #4]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	200007c4 	.word	0x200007c4

080052d0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	@ 0x38
 80052d4:	af04      	add	r7, sp, #16
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e0:	f3ef 8305 	mrs	r3, IPSR
 80052e4:	617b      	str	r3, [r7, #20]
  return(result);
 80052e6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d17e      	bne.n	80053ea <osThreadNew+0x11a>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d07b      	beq.n	80053ea <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80052f2:	2380      	movs	r3, #128	@ 0x80
 80052f4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80052f6:	2318      	movs	r3, #24
 80052f8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80052fa:	2300      	movs	r3, #0
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80052fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005302:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d045      	beq.n	8005396 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <osThreadNew+0x48>
        name = attr->name;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d008      	beq.n	800533e <osThreadNew+0x6e>
 800532c:	69fb      	ldr	r3, [r7, #28]
 800532e:	2b38      	cmp	r3, #56	@ 0x38
 8005330:	d805      	bhi.n	800533e <osThreadNew+0x6e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <osThreadNew+0x72>
        return (NULL);
 800533e:	2300      	movs	r3, #0
 8005340:	e054      	b.n	80053ec <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	089b      	lsrs	r3, r3, #2
 8005350:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00e      	beq.n	8005378 <osThreadNew+0xa8>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005360:	d90a      	bls.n	8005378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <osThreadNew+0xa8>
        mem = 1;
 8005372:	2301      	movs	r3, #1
 8005374:	61bb      	str	r3, [r7, #24]
 8005376:	e010      	b.n	800539a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10c      	bne.n	800539a <osThreadNew+0xca>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <osThreadNew+0xca>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <osThreadNew+0xca>
          mem = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e001      	b.n	800539a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005396:	2300      	movs	r3, #0
 8005398:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d110      	bne.n	80053c2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053a4:	687a      	ldr	r2, [r7, #4]
 80053a6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053a8:	9202      	str	r2, [sp, #8]
 80053aa:	9301      	str	r3, [sp, #4]
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	f001 f93c 	bl	8006634 <xTaskCreateStatic>
 80053bc:	4603      	mov	r3, r0
 80053be:	613b      	str	r3, [r7, #16]
 80053c0:	e013      	b.n	80053ea <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d110      	bne.n	80053ea <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	69fb      	ldr	r3, [r7, #28]
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 f98a 	bl	80066f4 <xTaskCreate>
 80053e0:	4603      	mov	r3, r0
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <osThreadNew+0x11a>
            hTask = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80053ea:	693b      	ldr	r3, [r7, #16]
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3728      	adds	r7, #40	@ 0x28
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053fc:	f3ef 8305 	mrs	r3, IPSR
 8005400:	60bb      	str	r3, [r7, #8]
  return(result);
 8005402:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005404:	2b00      	cmp	r3, #0
 8005406:	d003      	beq.n	8005410 <osDelay+0x1c>
    stat = osErrorISR;
 8005408:	f06f 0305 	mvn.w	r3, #5
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e007      	b.n	8005420 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005410:	2300      	movs	r3, #0
 8005412:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d002      	beq.n	8005420 <osDelay+0x2c>
      vTaskDelay(ticks);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f001 fac8 	bl	80069b0 <vTaskDelay>
    }
  }

  return (stat);
 8005420:	68fb      	ldr	r3, [r7, #12]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800542a:	b580      	push	{r7, lr}
 800542c:	b088      	sub	sp, #32
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005432:	2300      	movs	r3, #0
 8005434:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005436:	f3ef 8305 	mrs	r3, IPSR
 800543a:	60bb      	str	r3, [r7, #8]
  return(result);
 800543c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800543e:	2b00      	cmp	r3, #0
 8005440:	d174      	bne.n	800552c <osMutexNew+0x102>
    if (attr != NULL) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	61bb      	str	r3, [r7, #24]
 800544e:	e001      	b.n	8005454 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005450:	2300      	movs	r3, #0
 8005452:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <osMutexNew+0x3a>
      rmtx = 1U;
 800545e:	2301      	movs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e001      	b.n	8005468 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d15c      	bne.n	800552c <osMutexNew+0x102>
      mem = -1;
 8005472:	f04f 33ff 	mov.w	r3, #4294967295
 8005476:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d015      	beq.n	80054aa <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d006      	beq.n	8005494 <osMutexNew+0x6a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	2b4f      	cmp	r3, #79	@ 0x4f
 800548c:	d902      	bls.n	8005494 <osMutexNew+0x6a>
          mem = 1;
 800548e:	2301      	movs	r3, #1
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	e00c      	b.n	80054ae <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d108      	bne.n	80054ae <osMutexNew+0x84>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d104      	bne.n	80054ae <osMutexNew+0x84>
            mem = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	e001      	b.n	80054ae <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80054aa:	2300      	movs	r3, #0
 80054ac:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d112      	bne.n	80054da <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	4619      	mov	r1, r3
 80054c0:	2004      	movs	r0, #4
 80054c2:	f000 fb1a 	bl	8005afa <xQueueCreateMutexStatic>
 80054c6:	61f8      	str	r0, [r7, #28]
 80054c8:	e016      	b.n	80054f8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	4619      	mov	r1, r3
 80054d0:	2001      	movs	r0, #1
 80054d2:	f000 fb12 	bl	8005afa <xQueueCreateMutexStatic>
 80054d6:	61f8      	str	r0, [r7, #28]
 80054d8:	e00e      	b.n	80054f8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80054e6:	2004      	movs	r0, #4
 80054e8:	f000 faef 	bl	8005aca <xQueueCreateMutex>
 80054ec:	61f8      	str	r0, [r7, #28]
 80054ee:	e003      	b.n	80054f8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80054f0:	2001      	movs	r0, #1
 80054f2:	f000 faea 	bl	8005aca <xQueueCreateMutex>
 80054f6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00c      	beq.n	8005518 <osMutexNew+0xee>
        if (attr != NULL) {
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <osMutexNew+0xe2>
          name = attr->name;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	e001      	b.n	8005510 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005510:	68f9      	ldr	r1, [r7, #12]
 8005512:	69f8      	ldr	r0, [r7, #28]
 8005514:	f001 f832 	bl	800657c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d006      	beq.n	800552c <osMutexNew+0x102>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	f043 0301 	orr.w	r3, r3, #1
 800552a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800552c:	69fb      	ldr	r3, [r7, #28]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3720      	adds	r7, #32
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005536:	b580      	push	{r7, lr}
 8005538:	b086      	sub	sp, #24
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f023 0301 	bic.w	r3, r3, #1
 8005546:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005554:	f3ef 8305 	mrs	r3, IPSR
 8005558:	60bb      	str	r3, [r7, #8]
  return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800555c:	2b00      	cmp	r3, #0
 800555e:	d003      	beq.n	8005568 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005560:	f06f 0305 	mvn.w	r3, #5
 8005564:	617b      	str	r3, [r7, #20]
 8005566:	e02c      	b.n	80055c2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800556e:	f06f 0303 	mvn.w	r3, #3
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	e025      	b.n	80055c2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d011      	beq.n	80055a0 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6938      	ldr	r0, [r7, #16]
 8005580:	f000 fb0b 	bl	8005b9a <xQueueTakeMutexRecursive>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d01b      	beq.n	80055c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d003      	beq.n	8005598 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005590:	f06f 0301 	mvn.w	r3, #1
 8005594:	617b      	str	r3, [r7, #20]
 8005596:	e014      	b.n	80055c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005598:	f06f 0302 	mvn.w	r3, #2
 800559c:	617b      	str	r3, [r7, #20]
 800559e:	e010      	b.n	80055c2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80055a0:	6839      	ldr	r1, [r7, #0]
 80055a2:	6938      	ldr	r0, [r7, #16]
 80055a4:	f000 fdb2 	bl	800610c <xQueueSemaphoreTake>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d009      	beq.n	80055c2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d003      	beq.n	80055bc <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80055b4:	f06f 0301 	mvn.w	r3, #1
 80055b8:	617b      	str	r3, [r7, #20]
 80055ba:	e002      	b.n	80055c2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055bc:	f06f 0302 	mvn.w	r3, #2
 80055c0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80055c2:	697b      	ldr	r3, [r7, #20]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f023 0301 	bic.w	r3, r3, #1
 80055da:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055e8:	f3ef 8305 	mrs	r3, IPSR
 80055ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ee:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <osMutexRelease+0x30>
    stat = osErrorISR;
 80055f4:	f06f 0305 	mvn.w	r3, #5
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	e01f      	b.n	800563c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005602:	f06f 0303 	mvn.w	r3, #3
 8005606:	617b      	str	r3, [r7, #20]
 8005608:	e018      	b.n	800563c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005610:	6938      	ldr	r0, [r7, #16]
 8005612:	f000 fa8d 	bl	8005b30 <xQueueGiveMutexRecursive>
 8005616:	4603      	mov	r3, r0
 8005618:	2b01      	cmp	r3, #1
 800561a:	d00f      	beq.n	800563c <osMutexRelease+0x70>
        stat = osErrorResource;
 800561c:	f06f 0302 	mvn.w	r3, #2
 8005620:	617b      	str	r3, [r7, #20]
 8005622:	e00b      	b.n	800563c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005624:	2300      	movs	r3, #0
 8005626:	2200      	movs	r2, #0
 8005628:	2100      	movs	r1, #0
 800562a:	6938      	ldr	r0, [r7, #16]
 800562c:	f000 faec 	bl	8005c08 <xQueueGenericSend>
 8005630:	4603      	mov	r3, r0
 8005632:	2b01      	cmp	r3, #1
 8005634:	d002      	beq.n	800563c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005636:	f06f 0302 	mvn.w	r3, #2
 800563a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800563c:	697b      	ldr	r3, [r7, #20]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3718      	adds	r7, #24
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a06      	ldr	r2, [pc, #24]	@ (8005670 <vApplicationGetIdleTaskMemory+0x28>)
 8005658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	4a05      	ldr	r2, [pc, #20]	@ (8005674 <vApplicationGetIdleTaskMemory+0x2c>)
 800565e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2280      	movs	r2, #128	@ 0x80
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	bc80      	pop	{r7}
 800566e:	4770      	bx	lr
 8005670:	200007c8 	.word	0x200007c8
 8005674:	20000870 	.word	0x20000870

08005678 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4a07      	ldr	r2, [pc, #28]	@ (80056a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005688:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	4a06      	ldr	r2, [pc, #24]	@ (80056a8 <vApplicationGetTimerTaskMemory+0x30>)
 800568e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005696:	601a      	str	r2, [r3, #0]
}
 8005698:	bf00      	nop
 800569a:	3714      	adds	r7, #20
 800569c:	46bd      	mov	sp, r7
 800569e:	bc80      	pop	{r7}
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	20000a70 	.word	0x20000a70
 80056a8:	20000b18 	.word	0x20000b18

080056ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f103 0208 	add.w	r2, r3, #8
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f04f 32ff 	mov.w	r2, #4294967295
 80056c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f103 0208 	add.w	r2, r3, #8
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f103 0208 	add.w	r2, r3, #8
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bc80      	pop	{r7}
 80056e8:	4770      	bx	lr

080056ea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056ea:	b480      	push	{r7}
 80056ec:	b083      	sub	sp, #12
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bc80      	pop	{r7}
 8005700:	4770      	bx	lr

08005702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005702:	b480      	push	{r7}
 8005704:	b085      	sub	sp, #20
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
 800570a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	bc80      	pop	{r7}
 8005746:	4770      	bx	lr

08005748 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005748:	b480      	push	{r7}
 800574a:	b085      	sub	sp, #20
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575e:	d103      	bne.n	8005768 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e00c      	b.n	8005782 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3308      	adds	r3, #8
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e002      	b.n	8005776 <vListInsert+0x2e>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	60fb      	str	r3, [r7, #12]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	429a      	cmp	r2, r3
 8005780:	d2f6      	bcs.n	8005770 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	685a      	ldr	r2, [r3, #4]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	601a      	str	r2, [r3, #0]
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bc80      	pop	{r7}
 80057b6:	4770      	bx	lr

080057b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6892      	ldr	r2, [r2, #8]
 80057ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	6852      	ldr	r2, [r2, #4]
 80057d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d103      	bne.n	80057ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	1e5a      	subs	r2, r3, #1
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	bc80      	pop	{r7}
 8005808:	4770      	bx	lr
	...

0800580c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005838:	f002 fb88 	bl	8007f4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005868:	3b01      	subs	r3, #1
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800586e:	fb01 f303 	mul.w	r3, r1, r3
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	22ff      	movs	r2, #255	@ 0xff
 800587c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	22ff      	movs	r2, #255	@ 0xff
 8005884:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d114      	bne.n	80058b8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01a      	beq.n	80058cc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	3310      	adds	r3, #16
 800589a:	4618      	mov	r0, r3
 800589c:	f001 fb58 	bl	8006f50 <xTaskRemoveFromEventList>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d012      	beq.n	80058cc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058a6:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <xQueueGenericReset+0xd0>)
 80058a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	e009      	b.n	80058cc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3310      	adds	r3, #16
 80058bc:	4618      	mov	r0, r3
 80058be:	f7ff fef5 	bl	80056ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3324      	adds	r3, #36	@ 0x24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fef0 	bl	80056ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058cc:	f002 fb6e 	bl	8007fac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058d0:	2301      	movs	r3, #1
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b08e      	sub	sp, #56	@ 0x38
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10b      	bne.n	800590c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10b      	bne.n	800592a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005916:	f383 8811 	msr	BASEPRI, r3
 800591a:	f3bf 8f6f 	isb	sy
 800591e:	f3bf 8f4f 	dsb	sy
 8005922:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005924:	bf00      	nop
 8005926:	bf00      	nop
 8005928:	e7fd      	b.n	8005926 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <xQueueGenericCreateStatic+0x56>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <xQueueGenericCreateStatic+0x5a>
 8005936:	2301      	movs	r3, #1
 8005938:	e000      	b.n	800593c <xQueueGenericCreateStatic+0x5c>
 800593a:	2300      	movs	r3, #0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10b      	bne.n	8005958 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005944:	f383 8811 	msr	BASEPRI, r3
 8005948:	f3bf 8f6f 	isb	sy
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	623b      	str	r3, [r7, #32]
}
 8005952:	bf00      	nop
 8005954:	bf00      	nop
 8005956:	e7fd      	b.n	8005954 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d102      	bne.n	8005964 <xQueueGenericCreateStatic+0x84>
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueGenericCreateStatic+0x88>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueGenericCreateStatic+0x8a>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61fb      	str	r3, [r7, #28]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005986:	2350      	movs	r3, #80	@ 0x50
 8005988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b50      	cmp	r3, #80	@ 0x50
 800598e:	d00b      	beq.n	80059a8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61bb      	str	r3, [r7, #24]
}
 80059a2:	bf00      	nop
 80059a4:	bf00      	nop
 80059a6:	e7fd      	b.n	80059a4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059a8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80059ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00d      	beq.n	80059d0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059bc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80059c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c2:	9300      	str	r3, [sp, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f840 	bl	8005a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3730      	adds	r7, #48	@ 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	@ 0x28
 80059de:	af02      	add	r7, sp, #8
 80059e0:	60f8      	str	r0, [r7, #12]
 80059e2:	60b9      	str	r1, [r7, #8]
 80059e4:	4613      	mov	r3, r2
 80059e6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10b      	bne.n	8005a06 <xQueueGenericCreate+0x2c>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	613b      	str	r3, [r7, #16]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	fb02 f303 	mul.w	r3, r2, r3
 8005a0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	3350      	adds	r3, #80	@ 0x50
 8005a14:	4618      	mov	r0, r3
 8005a16:	f002 fb9b 	bl	8008150 <pvPortMalloc>
 8005a1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d011      	beq.n	8005a46 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	3350      	adds	r3, #80	@ 0x50
 8005a2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a34:	79fa      	ldrb	r2, [r7, #7]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	697a      	ldr	r2, [r7, #20]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f805 	bl	8005a50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a46:	69bb      	ldr	r3, [r7, #24]
	}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3720      	adds	r7, #32
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d103      	bne.n	8005a6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	69ba      	ldr	r2, [r7, #24]
 8005a68:	601a      	str	r2, [r3, #0]
 8005a6a:	e002      	b.n	8005a72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a78:	69bb      	ldr	r3, [r7, #24]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a7e:	2101      	movs	r1, #1
 8005a80:	69b8      	ldr	r0, [r7, #24]
 8005a82:	f7ff fec3 	bl	800580c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a96:	b580      	push	{r7, lr}
 8005a98:	b082      	sub	sp, #8
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00e      	beq.n	8005ac2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2100      	movs	r1, #0
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f8a3 	bl	8005c08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005ac2:	bf00      	nop
 8005ac4:	3708      	adds	r7, #8
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	6939      	ldr	r1, [r7, #16]
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f7ff ff79 	bl	80059da <xQueueGenericCreate>
 8005ae8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff ffd3 	bl	8005a96 <prvInitialiseMutex>

		return xNewQueue;
 8005af0:	68fb      	ldr	r3, [r7, #12]
	}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b088      	sub	sp, #32
 8005afe:	af02      	add	r7, sp, #8
 8005b00:	4603      	mov	r3, r0
 8005b02:	6039      	str	r1, [r7, #0]
 8005b04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005b06:	2301      	movs	r3, #1
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005b0e:	79fb      	ldrb	r3, [r7, #7]
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2200      	movs	r2, #0
 8005b16:	6939      	ldr	r1, [r7, #16]
 8005b18:	6978      	ldr	r0, [r7, #20]
 8005b1a:	f7ff fee1 	bl	80058e0 <xQueueGenericCreateStatic>
 8005b1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f7ff ffb8 	bl	8005a96 <prvInitialiseMutex>

		return xNewQueue;
 8005b26:	68fb      	ldr	r3, [r7, #12]
	}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d10b      	bne.n	8005b5a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b46:	f383 8811 	msr	BASEPRI, r3
 8005b4a:	f3bf 8f6f 	isb	sy
 8005b4e:	f3bf 8f4f 	dsb	sy
 8005b52:	60fb      	str	r3, [r7, #12]
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop
 8005b58:	e7fd      	b.n	8005b56 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	689c      	ldr	r4, [r3, #8]
 8005b5e:	f001 fbbd 	bl	80072dc <xTaskGetCurrentTaskHandle>
 8005b62:	4603      	mov	r3, r0
 8005b64:	429c      	cmp	r4, r3
 8005b66:	d111      	bne.n	8005b8c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	1e5a      	subs	r2, r3, #1
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d105      	bne.n	8005b86 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	2100      	movs	r1, #0
 8005b80:	6938      	ldr	r0, [r7, #16]
 8005b82:	f000 f841 	bl	8005c08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005b86:	2301      	movs	r3, #1
 8005b88:	617b      	str	r3, [r7, #20]
 8005b8a:	e001      	b.n	8005b90 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005b90:	697b      	ldr	r3, [r7, #20]
	}
 8005b92:	4618      	mov	r0, r3
 8005b94:	371c      	adds	r7, #28
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd90      	pop	{r4, r7, pc}

08005b9a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005b9a:	b590      	push	{r4, r7, lr}
 8005b9c:	b087      	sub	sp, #28
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10b      	bne.n	8005bc6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb2:	f383 8811 	msr	BASEPRI, r3
 8005bb6:	f3bf 8f6f 	isb	sy
 8005bba:	f3bf 8f4f 	dsb	sy
 8005bbe:	60fb      	str	r3, [r7, #12]
}
 8005bc0:	bf00      	nop
 8005bc2:	bf00      	nop
 8005bc4:	e7fd      	b.n	8005bc2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	689c      	ldr	r4, [r3, #8]
 8005bca:	f001 fb87 	bl	80072dc <xTaskGetCurrentTaskHandle>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	429c      	cmp	r4, r3
 8005bd2:	d107      	bne.n	8005be4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	1c5a      	adds	r2, r3, #1
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005bde:	2301      	movs	r3, #1
 8005be0:	617b      	str	r3, [r7, #20]
 8005be2:	e00c      	b.n	8005bfe <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005be4:	6839      	ldr	r1, [r7, #0]
 8005be6:	6938      	ldr	r0, [r7, #16]
 8005be8:	f000 fa90 	bl	800610c <xQueueSemaphoreTake>
 8005bec:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005bfe:	697b      	ldr	r3, [r7, #20]
	}
 8005c00:	4618      	mov	r0, r3
 8005c02:	371c      	adds	r7, #28
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd90      	pop	{r4, r7, pc}

08005c08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	@ 0x38
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005c16:	2300      	movs	r3, #0
 8005c18:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d10b      	bne.n	8005c3c <xQueueGenericSend+0x34>
	__asm volatile
 8005c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c28:	f383 8811 	msr	BASEPRI, r3
 8005c2c:	f3bf 8f6f 	isb	sy
 8005c30:	f3bf 8f4f 	dsb	sy
 8005c34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005c36:	bf00      	nop
 8005c38:	bf00      	nop
 8005c3a:	e7fd      	b.n	8005c38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <xQueueGenericSend+0x42>
 8005c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <xQueueGenericSend+0x46>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xQueueGenericSend+0x48>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <xQueueGenericSend+0x64>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d103      	bne.n	8005c7a <xQueueGenericSend+0x72>
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c76:	2b01      	cmp	r3, #1
 8005c78:	d101      	bne.n	8005c7e <xQueueGenericSend+0x76>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e000      	b.n	8005c80 <xQueueGenericSend+0x78>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10b      	bne.n	8005c9c <xQueueGenericSend+0x94>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	623b      	str	r3, [r7, #32]
}
 8005c96:	bf00      	nop
 8005c98:	bf00      	nop
 8005c9a:	e7fd      	b.n	8005c98 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c9c:	f001 fb2c 	bl	80072f8 <xTaskGetSchedulerState>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d102      	bne.n	8005cac <xQueueGenericSend+0xa4>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d101      	bne.n	8005cb0 <xQueueGenericSend+0xa8>
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <xQueueGenericSend+0xaa>
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d10b      	bne.n	8005cce <xQueueGenericSend+0xc6>
	__asm volatile
 8005cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cba:	f383 8811 	msr	BASEPRI, r3
 8005cbe:	f3bf 8f6f 	isb	sy
 8005cc2:	f3bf 8f4f 	dsb	sy
 8005cc6:	61fb      	str	r3, [r7, #28]
}
 8005cc8:	bf00      	nop
 8005cca:	bf00      	nop
 8005ccc:	e7fd      	b.n	8005cca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005cce:	f002 f93d 	bl	8007f4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d302      	bcc.n	8005ce4 <xQueueGenericSend+0xdc>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d129      	bne.n	8005d38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	68b9      	ldr	r1, [r7, #8]
 8005ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cea:	f000 fb36 	bl	800635a <prvCopyDataToQueue>
 8005cee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d010      	beq.n	8005d1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	3324      	adds	r3, #36	@ 0x24
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f001 f927 	bl	8006f50 <xTaskRemoveFromEventList>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d08:	4b3f      	ldr	r3, [pc, #252]	@ (8005e08 <xQueueGenericSend+0x200>)
 8005d0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d0e:	601a      	str	r2, [r3, #0]
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	f3bf 8f6f 	isb	sy
 8005d18:	e00a      	b.n	8005d30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d007      	beq.n	8005d30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005d20:	4b39      	ldr	r3, [pc, #228]	@ (8005e08 <xQueueGenericSend+0x200>)
 8005d22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005d30:	f002 f93c 	bl	8007fac <vPortExitCritical>
				return pdPASS;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e063      	b.n	8005e00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005d3e:	f002 f935 	bl	8007fac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e05c      	b.n	8005e00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d106      	bne.n	8005d5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005d4c:	f107 0314 	add.w	r3, r7, #20
 8005d50:	4618      	mov	r0, r3
 8005d52:	f001 f961 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005d5a:	f002 f927 	bl	8007fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005d5e:	f000 fecd 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005d62:	f002 f8f3 	bl	8007f4c <vPortEnterCritical>
 8005d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d6c:	b25b      	sxtb	r3, r3
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d103      	bne.n	8005d7c <xQueueGenericSend+0x174>
 8005d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d82:	b25b      	sxtb	r3, r3
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d88:	d103      	bne.n	8005d92 <xQueueGenericSend+0x18a>
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d92:	f002 f90b 	bl	8007fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d96:	1d3a      	adds	r2, r7, #4
 8005d98:	f107 0314 	add.w	r3, r7, #20
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f001 f950 	bl	8007044 <xTaskCheckForTimeOut>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d124      	bne.n	8005df4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005daa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dac:	f000 fbcd 	bl	800654a <prvIsQueueFull>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d018      	beq.n	8005de8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	3310      	adds	r3, #16
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f001 f874 	bl	8006eac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005dc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dc6:	f000 fb58 	bl	800647a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005dca:	f000 fea5 	bl	8006b18 <xTaskResumeAll>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f47f af7c 	bne.w	8005cce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <xQueueGenericSend+0x200>)
 8005dd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	f3bf 8f4f 	dsb	sy
 8005de2:	f3bf 8f6f 	isb	sy
 8005de6:	e772      	b.n	8005cce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005de8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005dea:	f000 fb46 	bl	800647a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005dee:	f000 fe93 	bl	8006b18 <xTaskResumeAll>
 8005df2:	e76c      	b.n	8005cce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005df6:	f000 fb40 	bl	800647a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005dfa:	f000 fe8d 	bl	8006b18 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005dfe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3738      	adds	r7, #56	@ 0x38
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}
 8005e08:	e000ed04 	.word	0xe000ed04

08005e0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b090      	sub	sp, #64	@ 0x40
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	607a      	str	r2, [r7, #4]
 8005e18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10b      	bne.n	8005e3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e36:	bf00      	nop
 8005e38:	bf00      	nop
 8005e3a:	e7fd      	b.n	8005e38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d103      	bne.n	8005e4a <xQueueGenericSendFromISR+0x3e>
 8005e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d101      	bne.n	8005e4e <xQueueGenericSendFromISR+0x42>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e000      	b.n	8005e50 <xQueueGenericSendFromISR+0x44>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e58:	f383 8811 	msr	BASEPRI, r3
 8005e5c:	f3bf 8f6f 	isb	sy
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e66:	bf00      	nop
 8005e68:	bf00      	nop
 8005e6a:	e7fd      	b.n	8005e68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d103      	bne.n	8005e7a <xQueueGenericSendFromISR+0x6e>
 8005e72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d101      	bne.n	8005e7e <xQueueGenericSendFromISR+0x72>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <xQueueGenericSendFromISR+0x74>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10b      	bne.n	8005e9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	623b      	str	r3, [r7, #32]
}
 8005e96:	bf00      	nop
 8005e98:	bf00      	nop
 8005e9a:	e7fd      	b.n	8005e98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e9c:	f002 f918 	bl	80080d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005ea0:	f3ef 8211 	mrs	r2, BASEPRI
 8005ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	61fa      	str	r2, [r7, #28]
 8005eb6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005eb8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ebc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ebe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d302      	bcc.n	8005ece <xQueueGenericSendFromISR+0xc2>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d12f      	bne.n	8005f2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ed4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ede:	683a      	ldr	r2, [r7, #0]
 8005ee0:	68b9      	ldr	r1, [r7, #8]
 8005ee2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ee4:	f000 fa39 	bl	800635a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ee8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef0:	d112      	bne.n	8005f18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	3324      	adds	r3, #36	@ 0x24
 8005efe:	4618      	mov	r0, r3
 8005f00:	f001 f826 	bl	8006f50 <xTaskRemoveFromEventList>
 8005f04:	4603      	mov	r3, r0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d00b      	beq.n	8005f28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2201      	movs	r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e007      	b.n	8005f28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005f18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	b25a      	sxtb	r2, r3
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005f2c:	e001      	b.n	8005f32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005f3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3740      	adds	r7, #64	@ 0x40
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	@ 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	60b9      	str	r1, [r7, #8]
 8005f52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10b      	bne.n	8005f7a <xQueueReceive+0x32>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	623b      	str	r3, [r7, #32]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <xQueueReceive+0x40>
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <xQueueReceive+0x44>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e000      	b.n	8005f8e <xQueueReceive+0x46>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xQueueReceive+0x62>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	61fb      	str	r3, [r7, #28]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005faa:	f001 f9a5 	bl	80072f8 <xTaskGetSchedulerState>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <xQueueReceive+0x72>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <xQueueReceive+0x76>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e000      	b.n	8005fc0 <xQueueReceive+0x78>
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d10b      	bne.n	8005fdc <xQueueReceive+0x94>
	__asm volatile
 8005fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc8:	f383 8811 	msr	BASEPRI, r3
 8005fcc:	f3bf 8f6f 	isb	sy
 8005fd0:	f3bf 8f4f 	dsb	sy
 8005fd4:	61bb      	str	r3, [r7, #24]
}
 8005fd6:	bf00      	nop
 8005fd8:	bf00      	nop
 8005fda:	e7fd      	b.n	8005fd8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005fdc:	f001 ffb6 	bl	8007f4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d01f      	beq.n	800602c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005fec:	68b9      	ldr	r1, [r7, #8]
 8005fee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ff0:	f000 fa1d 	bl	800642e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	1e5a      	subs	r2, r3, #1
 8005ff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d00f      	beq.n	8006024 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	3310      	adds	r3, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f000 ffa1 	bl	8006f50 <xTaskRemoveFromEventList>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d007      	beq.n	8006024 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006014:	4b3c      	ldr	r3, [pc, #240]	@ (8006108 <xQueueReceive+0x1c0>)
 8006016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800601a:	601a      	str	r2, [r3, #0]
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006024:	f001 ffc2 	bl	8007fac <vPortExitCritical>
				return pdPASS;
 8006028:	2301      	movs	r3, #1
 800602a:	e069      	b.n	8006100 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006032:	f001 ffbb 	bl	8007fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006036:	2300      	movs	r3, #0
 8006038:	e062      	b.n	8006100 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800603a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006040:	f107 0310 	add.w	r3, r7, #16
 8006044:	4618      	mov	r0, r3
 8006046:	f000 ffe7 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800604a:	2301      	movs	r3, #1
 800604c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800604e:	f001 ffad 	bl	8007fac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006052:	f000 fd53 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006056:	f001 ff79 	bl	8007f4c <vPortEnterCritical>
 800605a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006060:	b25b      	sxtb	r3, r3
 8006062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006066:	d103      	bne.n	8006070 <xQueueReceive+0x128>
 8006068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606a:	2200      	movs	r2, #0
 800606c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006076:	b25b      	sxtb	r3, r3
 8006078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607c:	d103      	bne.n	8006086 <xQueueReceive+0x13e>
 800607e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006080:	2200      	movs	r2, #0
 8006082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006086:	f001 ff91 	bl	8007fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800608a:	1d3a      	adds	r2, r7, #4
 800608c:	f107 0310 	add.w	r3, r7, #16
 8006090:	4611      	mov	r1, r2
 8006092:	4618      	mov	r0, r3
 8006094:	f000 ffd6 	bl	8007044 <xTaskCheckForTimeOut>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d123      	bne.n	80060e6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800609e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060a0:	f000 fa3d 	bl	800651e <prvIsQueueEmpty>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d017      	beq.n	80060da <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80060aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ac:	3324      	adds	r3, #36	@ 0x24
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4611      	mov	r1, r2
 80060b2:	4618      	mov	r0, r3
 80060b4:	f000 fefa 	bl	8006eac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80060b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060ba:	f000 f9de 	bl	800647a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80060be:	f000 fd2b 	bl	8006b18 <xTaskResumeAll>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d189      	bne.n	8005fdc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <xQueueReceive+0x1c0>)
 80060ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	e780      	b.n	8005fdc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80060da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060dc:	f000 f9cd 	bl	800647a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060e0:	f000 fd1a 	bl	8006b18 <xTaskResumeAll>
 80060e4:	e77a      	b.n	8005fdc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80060e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e8:	f000 f9c7 	bl	800647a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060ec:	f000 fd14 	bl	8006b18 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80060f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060f2:	f000 fa14 	bl	800651e <prvIsQueueEmpty>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f43f af6f 	beq.w	8005fdc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80060fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006100:	4618      	mov	r0, r3
 8006102:	3730      	adds	r7, #48	@ 0x30
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	e000ed04 	.word	0xe000ed04

0800610c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b08e      	sub	sp, #56	@ 0x38
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006116:	2300      	movs	r3, #0
 8006118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800611e:	2300      	movs	r3, #0
 8006120:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10b      	bne.n	8006140 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	f383 8811 	msr	BASEPRI, r3
 8006130:	f3bf 8f6f 	isb	sy
 8006134:	f3bf 8f4f 	dsb	sy
 8006138:	623b      	str	r3, [r7, #32]
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	e7fd      	b.n	800613c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00b      	beq.n	8006160 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	61fb      	str	r3, [r7, #28]
}
 800615a:	bf00      	nop
 800615c:	bf00      	nop
 800615e:	e7fd      	b.n	800615c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006160:	f001 f8ca 	bl	80072f8 <xTaskGetSchedulerState>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d102      	bne.n	8006170 <xQueueSemaphoreTake+0x64>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d101      	bne.n	8006174 <xQueueSemaphoreTake+0x68>
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <xQueueSemaphoreTake+0x6a>
 8006174:	2300      	movs	r3, #0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d10b      	bne.n	8006192 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800617a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617e:	f383 8811 	msr	BASEPRI, r3
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	f3bf 8f4f 	dsb	sy
 800618a:	61bb      	str	r3, [r7, #24]
}
 800618c:	bf00      	nop
 800618e:	bf00      	nop
 8006190:	e7fd      	b.n	800618e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006192:	f001 fedb 	bl	8007f4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800619a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d024      	beq.n	80061ec <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80061a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a4:	1e5a      	subs	r2, r3, #1
 80061a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061a8:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d104      	bne.n	80061bc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80061b2:	f001 fa1b 	bl	80075ec <pvTaskIncrementMutexHeldCount>
 80061b6:	4602      	mov	r2, r0
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00f      	beq.n	80061e4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	3310      	adds	r3, #16
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 fec1 	bl	8006f50 <xTaskRemoveFromEventList>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d007      	beq.n	80061e4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80061d4:	4b54      	ldr	r3, [pc, #336]	@ (8006328 <xQueueSemaphoreTake+0x21c>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80061e4:	f001 fee2 	bl	8007fac <vPortExitCritical>
				return pdPASS;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e098      	b.n	800631e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d112      	bne.n	8006218 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	617b      	str	r3, [r7, #20]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006210:	f001 fecc 	bl	8007fac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006214:	2300      	movs	r3, #0
 8006216:	e082      	b.n	800631e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	2b00      	cmp	r3, #0
 800621c:	d106      	bne.n	800622c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800621e:	f107 030c 	add.w	r3, r7, #12
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fef8 	bl	8007018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006228:	2301      	movs	r3, #1
 800622a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800622c:	f001 febe 	bl	8007fac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006230:	f000 fc64 	bl	8006afc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006234:	f001 fe8a 	bl	8007f4c <vPortEnterCritical>
 8006238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800623a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800623e:	b25b      	sxtb	r3, r3
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d103      	bne.n	800624e <xQueueSemaphoreTake+0x142>
 8006246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006248:	2200      	movs	r2, #0
 800624a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006254:	b25b      	sxtb	r3, r3
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800625a:	d103      	bne.n	8006264 <xQueueSemaphoreTake+0x158>
 800625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800625e:	2200      	movs	r2, #0
 8006260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006264:	f001 fea2 	bl	8007fac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006268:	463a      	mov	r2, r7
 800626a:	f107 030c 	add.w	r3, r7, #12
 800626e:	4611      	mov	r1, r2
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fee7 	bl	8007044 <xTaskCheckForTimeOut>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	d132      	bne.n	80062e2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800627c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800627e:	f000 f94e 	bl	800651e <prvIsQueueEmpty>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d026      	beq.n	80062d6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d109      	bne.n	80062a4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006290:	f001 fe5c 	bl	8007f4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006296:	689b      	ldr	r3, [r3, #8]
 8006298:	4618      	mov	r0, r3
 800629a:	f001 f84b 	bl	8007334 <xTaskPriorityInherit>
 800629e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80062a0:	f001 fe84 	bl	8007fac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062a6:	3324      	adds	r3, #36	@ 0x24
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f000 fdfd 	bl	8006eac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062b4:	f000 f8e1 	bl	800647a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062b8:	f000 fc2e 	bl	8006b18 <xTaskResumeAll>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f47f af67 	bne.w	8006192 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80062c4:	4b18      	ldr	r3, [pc, #96]	@ (8006328 <xQueueSemaphoreTake+0x21c>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	e75d      	b.n	8006192 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80062d6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062d8:	f000 f8cf 	bl	800647a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062dc:	f000 fc1c 	bl	8006b18 <xTaskResumeAll>
 80062e0:	e757      	b.n	8006192 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80062e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062e4:	f000 f8c9 	bl	800647a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062e8:	f000 fc16 	bl	8006b18 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062ee:	f000 f916 	bl	800651e <prvIsQueueEmpty>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f43f af4c 	beq.w	8006192 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80062fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00d      	beq.n	800631c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006300:	f001 fe24 	bl	8007f4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006304:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006306:	f000 f811 	bl	800632c <prvGetDisinheritPriorityAfterTimeout>
 800630a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006312:	4618      	mov	r0, r3
 8006314:	f001 f8e6 	bl	80074e4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006318:	f001 fe48 	bl	8007fac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800631c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800631e:	4618      	mov	r0, r3
 8006320:	3738      	adds	r7, #56	@ 0x38
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d006      	beq.n	800634a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	e001      	b.n	800634e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800634a:	2300      	movs	r3, #0
 800634c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800634e:	68fb      	ldr	r3, [r7, #12]
	}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	bc80      	pop	{r7}
 8006358:	4770      	bx	lr

0800635a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006366:	2300      	movs	r3, #0
 8006368:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10d      	bne.n	8006394 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d14d      	bne.n	800641c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	4618      	mov	r0, r3
 8006386:	f001 f83d 	bl	8007404 <xTaskPriorityDisinherit>
 800638a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2200      	movs	r2, #0
 8006390:	609a      	str	r2, [r3, #8]
 8006392:	e043      	b.n	800641c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d119      	bne.n	80063ce <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6858      	ldr	r0, [r3, #4]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a2:	461a      	mov	r2, r3
 80063a4:	68b9      	ldr	r1, [r7, #8]
 80063a6:	f002 ff58 	bl	800925a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685a      	ldr	r2, [r3, #4]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b2:	441a      	add	r2, r3
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d32b      	bcc.n	800641c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	605a      	str	r2, [r3, #4]
 80063cc:	e026      	b.n	800641c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68d8      	ldr	r0, [r3, #12]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d6:	461a      	mov	r2, r3
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	f002 ff3e 	bl	800925a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e6:	425b      	negs	r3, r3
 80063e8:	441a      	add	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d207      	bcs.n	800640a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	425b      	negs	r3, r3
 8006404:	441a      	add	r2, r3
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d105      	bne.n	800641c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	3b01      	subs	r3, #1
 800641a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	1c5a      	adds	r2, r3, #1
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006424:	697b      	ldr	r3, [r7, #20]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b082      	sub	sp, #8
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800643c:	2b00      	cmp	r3, #0
 800643e:	d018      	beq.n	8006472 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	441a      	add	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	429a      	cmp	r2, r3
 8006458:	d303      	bcc.n	8006462 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68d9      	ldr	r1, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	461a      	mov	r2, r3
 800646c:	6838      	ldr	r0, [r7, #0]
 800646e:	f002 fef4 	bl	800925a <memcpy>
	}
}
 8006472:	bf00      	nop
 8006474:	3708      	adds	r7, #8
 8006476:	46bd      	mov	sp, r7
 8006478:	bd80      	pop	{r7, pc}

0800647a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800647a:	b580      	push	{r7, lr}
 800647c:	b084      	sub	sp, #16
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006482:	f001 fd63 	bl	8007f4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800648c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800648e:	e011      	b.n	80064b4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006494:	2b00      	cmp	r3, #0
 8006496:	d012      	beq.n	80064be <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	3324      	adds	r3, #36	@ 0x24
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fd57 	bl	8006f50 <xTaskRemoveFromEventList>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d001      	beq.n	80064ac <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064a8:	f000 fe30 	bl	800710c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ac:	7bfb      	ldrb	r3, [r7, #15]
 80064ae:	3b01      	subs	r3, #1
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dce9      	bgt.n	8006490 <prvUnlockQueue+0x16>
 80064bc:	e000      	b.n	80064c0 <prvUnlockQueue+0x46>
					break;
 80064be:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	22ff      	movs	r2, #255	@ 0xff
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064c8:	f001 fd70 	bl	8007fac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064cc:	f001 fd3e 	bl	8007f4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064d6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064d8:	e011      	b.n	80064fe <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d012      	beq.n	8006508 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	3310      	adds	r3, #16
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fd32 	bl	8006f50 <xTaskRemoveFromEventList>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064f2:	f000 fe0b 	bl	800710c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064f6:	7bbb      	ldrb	r3, [r7, #14]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006502:	2b00      	cmp	r3, #0
 8006504:	dce9      	bgt.n	80064da <prvUnlockQueue+0x60>
 8006506:	e000      	b.n	800650a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006508:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	22ff      	movs	r2, #255	@ 0xff
 800650e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006512:	f001 fd4b 	bl	8007fac <vPortExitCritical>
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006526:	f001 fd11 	bl	8007f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	2b00      	cmp	r3, #0
 8006530:	d102      	bne.n	8006538 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006532:	2301      	movs	r3, #1
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e001      	b.n	800653c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800653c:	f001 fd36 	bl	8007fac <vPortExitCritical>

	return xReturn;
 8006540:	68fb      	ldr	r3, [r7, #12]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006552:	f001 fcfb 	bl	8007f4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800655e:	429a      	cmp	r2, r3
 8006560:	d102      	bne.n	8006568 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e001      	b.n	800656c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800656c:	f001 fd1e 	bl	8007fac <vPortExitCritical>

	return xReturn;
 8006570:	68fb      	ldr	r3, [r7, #12]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800657c:	b480      	push	{r7}
 800657e:	b085      	sub	sp, #20
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006586:	2300      	movs	r3, #0
 8006588:	60fb      	str	r3, [r7, #12]
 800658a:	e014      	b.n	80065b6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800658c:	4a0e      	ldr	r2, [pc, #56]	@ (80065c8 <vQueueAddToRegistry+0x4c>)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10b      	bne.n	80065b0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006598:	490b      	ldr	r1, [pc, #44]	@ (80065c8 <vQueueAddToRegistry+0x4c>)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065a2:	4a09      	ldr	r2, [pc, #36]	@ (80065c8 <vQueueAddToRegistry+0x4c>)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065ae:	e006      	b.n	80065be <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b07      	cmp	r3, #7
 80065ba:	d9e7      	bls.n	800658c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065bc:	bf00      	nop
 80065be:	bf00      	nop
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	20000f18 	.word	0x20000f18

080065cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065dc:	f001 fcb6 	bl	8007f4c <vPortEnterCritical>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ec:	d103      	bne.n	80065f6 <vQueueWaitForMessageRestricted+0x2a>
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065fc:	b25b      	sxtb	r3, r3
 80065fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006602:	d103      	bne.n	800660c <vQueueWaitForMessageRestricted+0x40>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800660c:	f001 fcce 	bl	8007fac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	3324      	adds	r3, #36	@ 0x24
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fc69 	bl	8006ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006626:	6978      	ldr	r0, [r7, #20]
 8006628:	f7ff ff27 	bl	800647a <prvUnlockQueue>
	}
 800662c:	bf00      	nop
 800662e:	3718      	adds	r7, #24
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	@ 0x38
 8006638:	af04      	add	r7, sp, #16
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	60b9      	str	r1, [r7, #8]
 800663e:	607a      	str	r2, [r7, #4]
 8006640:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006642:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d10b      	bne.n	8006660 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	623b      	str	r3, [r7, #32]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10b      	bne.n	800667e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	61fb      	str	r3, [r7, #28]
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	e7fd      	b.n	800667a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800667e:	23a8      	movs	r3, #168	@ 0xa8
 8006680:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2ba8      	cmp	r3, #168	@ 0xa8
 8006686:	d00b      	beq.n	80066a0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	61bb      	str	r3, [r7, #24]
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066a0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01e      	beq.n	80066e6 <xTaskCreateStatic+0xb2>
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d01b      	beq.n	80066e6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066c0:	2300      	movs	r3, #0
 80066c2:	9303      	str	r3, [sp, #12]
 80066c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	f107 0314 	add.w	r3, r7, #20
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d0:	9300      	str	r3, [sp, #0]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 f851 	bl	8006780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066de:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066e0:	f000 f8f6 	bl	80068d0 <prvAddNewTaskToReadyList>
 80066e4:	e001      	b.n	80066ea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ea:	697b      	ldr	r3, [r7, #20]
	}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3728      	adds	r7, #40	@ 0x28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08c      	sub	sp, #48	@ 0x30
 80066f8:	af04      	add	r7, sp, #16
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006704:	88fb      	ldrh	r3, [r7, #6]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4618      	mov	r0, r3
 800670a:	f001 fd21 	bl	8008150 <pvPortMalloc>
 800670e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00e      	beq.n	8006734 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006716:	20a8      	movs	r0, #168	@ 0xa8
 8006718:	f001 fd1a 	bl	8008150 <pvPortMalloc>
 800671c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	631a      	str	r2, [r3, #48]	@ 0x30
 800672a:	e005      	b.n	8006738 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800672c:	6978      	ldr	r0, [r7, #20]
 800672e:	f001 fddd 	bl	80082ec <vPortFree>
 8006732:	e001      	b.n	8006738 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006734:	2300      	movs	r3, #0
 8006736:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d017      	beq.n	800676e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800673e:	69fb      	ldr	r3, [r7, #28]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006746:	88fa      	ldrh	r2, [r7, #6]
 8006748:	2300      	movs	r3, #0
 800674a:	9303      	str	r3, [sp, #12]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	9302      	str	r3, [sp, #8]
 8006750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006752:	9301      	str	r3, [sp, #4]
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	9300      	str	r3, [sp, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	68b9      	ldr	r1, [r7, #8]
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 f80f 	bl	8006780 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006762:	69f8      	ldr	r0, [r7, #28]
 8006764:	f000 f8b4 	bl	80068d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006768:	2301      	movs	r3, #1
 800676a:	61bb      	str	r3, [r7, #24]
 800676c:	e002      	b.n	8006774 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295
 8006772:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006774:	69bb      	ldr	r3, [r7, #24]
	}
 8006776:	4618      	mov	r0, r3
 8006778:	3720      	adds	r7, #32
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
	...

08006780 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b088      	sub	sp, #32
 8006784:	af00      	add	r7, sp, #0
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	461a      	mov	r2, r3
 8006798:	21a5      	movs	r1, #165	@ 0xa5
 800679a:	f002 fc7a 	bl	8009092 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067a8:	3b01      	subs	r3, #1
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	f023 0307 	bic.w	r3, r3, #7
 80067b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067b8:	69bb      	ldr	r3, [r7, #24]
 80067ba:	f003 0307 	and.w	r3, r3, #7
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00b      	beq.n	80067da <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067c6:	f383 8811 	msr	BASEPRI, r3
 80067ca:	f3bf 8f6f 	isb	sy
 80067ce:	f3bf 8f4f 	dsb	sy
 80067d2:	617b      	str	r3, [r7, #20]
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop
 80067d8:	e7fd      	b.n	80067d6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d01f      	beq.n	8006820 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067e0:	2300      	movs	r3, #0
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	e012      	b.n	800680c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	69fb      	ldr	r3, [r7, #28]
 80067ea:	4413      	add	r3, r2
 80067ec:	7819      	ldrb	r1, [r3, #0]
 80067ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f0:	69fb      	ldr	r3, [r7, #28]
 80067f2:	4413      	add	r3, r2
 80067f4:	3334      	adds	r3, #52	@ 0x34
 80067f6:	460a      	mov	r2, r1
 80067f8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	4413      	add	r3, r2
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d006      	beq.n	8006814 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	3301      	adds	r3, #1
 800680a:	61fb      	str	r3, [r7, #28]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d9e9      	bls.n	80067e6 <prvInitialiseNewTask+0x66>
 8006812:	e000      	b.n	8006816 <prvInitialiseNewTask+0x96>
			{
				break;
 8006814:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800681e:	e003      	b.n	8006828 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	2200      	movs	r2, #0
 8006824:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	2b37      	cmp	r3, #55	@ 0x37
 800682c:	d901      	bls.n	8006832 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800682e:	2337      	movs	r3, #55	@ 0x37
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006836:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800683c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	2200      	movs	r2, #0
 8006842:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	3304      	adds	r3, #4
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe ff4e 	bl	80056ea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	3318      	adds	r3, #24
 8006852:	4618      	mov	r0, r3
 8006854:	f7fe ff49 	bl	80056ea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800685c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006860:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006866:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800686c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	2200      	movs	r2, #0
 8006872:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006878:	2200      	movs	r2, #0
 800687a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800687e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006880:	3354      	adds	r3, #84	@ 0x54
 8006882:	224c      	movs	r2, #76	@ 0x4c
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f002 fc03 	bl	8009092 <memset>
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	4a0d      	ldr	r2, [pc, #52]	@ (80068c4 <prvInitialiseNewTask+0x144>)
 8006890:	659a      	str	r2, [r3, #88]	@ 0x58
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	4a0c      	ldr	r2, [pc, #48]	@ (80068c8 <prvInitialiseNewTask+0x148>)
 8006896:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689a:	4a0c      	ldr	r2, [pc, #48]	@ (80068cc <prvInitialiseNewTask+0x14c>)
 800689c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	68f9      	ldr	r1, [r7, #12]
 80068a2:	69b8      	ldr	r0, [r7, #24]
 80068a4:	f001 fa62 	bl	8007d6c <pxPortInitialiseStack>
 80068a8:	4602      	mov	r2, r0
 80068aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d002      	beq.n	80068ba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068ba:	bf00      	nop
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	200034ec 	.word	0x200034ec
 80068c8:	20003554 	.word	0x20003554
 80068cc:	200035bc 	.word	0x200035bc

080068d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068d8:	f001 fb38 	bl	8007f4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068dc:	4b2d      	ldr	r3, [pc, #180]	@ (8006994 <prvAddNewTaskToReadyList+0xc4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a2c      	ldr	r2, [pc, #176]	@ (8006994 <prvAddNewTaskToReadyList+0xc4>)
 80068e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068e6:	4b2c      	ldr	r3, [pc, #176]	@ (8006998 <prvAddNewTaskToReadyList+0xc8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006998 <prvAddNewTaskToReadyList+0xc8>)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068f4:	4b27      	ldr	r3, [pc, #156]	@ (8006994 <prvAddNewTaskToReadyList+0xc4>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d110      	bne.n	800691e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068fc:	f000 fc2a 	bl	8007154 <prvInitialiseTaskLists>
 8006900:	e00d      	b.n	800691e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006902:	4b26      	ldr	r3, [pc, #152]	@ (800699c <prvAddNewTaskToReadyList+0xcc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d109      	bne.n	800691e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800690a:	4b23      	ldr	r3, [pc, #140]	@ (8006998 <prvAddNewTaskToReadyList+0xc8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d802      	bhi.n	800691e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006918:	4a1f      	ldr	r2, [pc, #124]	@ (8006998 <prvAddNewTaskToReadyList+0xc8>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800691e:	4b20      	ldr	r3, [pc, #128]	@ (80069a0 <prvAddNewTaskToReadyList+0xd0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a1e      	ldr	r2, [pc, #120]	@ (80069a0 <prvAddNewTaskToReadyList+0xd0>)
 8006926:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006928:	4b1d      	ldr	r3, [pc, #116]	@ (80069a0 <prvAddNewTaskToReadyList+0xd0>)
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006934:	4b1b      	ldr	r3, [pc, #108]	@ (80069a4 <prvAddNewTaskToReadyList+0xd4>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d903      	bls.n	8006944 <prvAddNewTaskToReadyList+0x74>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006940:	4a18      	ldr	r2, [pc, #96]	@ (80069a4 <prvAddNewTaskToReadyList+0xd4>)
 8006942:	6013      	str	r3, [r2, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4a15      	ldr	r2, [pc, #84]	@ (80069a8 <prvAddNewTaskToReadyList+0xd8>)
 8006952:	441a      	add	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3304      	adds	r3, #4
 8006958:	4619      	mov	r1, r3
 800695a:	4610      	mov	r0, r2
 800695c:	f7fe fed1 	bl	8005702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006960:	f001 fb24 	bl	8007fac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006964:	4b0d      	ldr	r3, [pc, #52]	@ (800699c <prvAddNewTaskToReadyList+0xcc>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00e      	beq.n	800698a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800696c:	4b0a      	ldr	r3, [pc, #40]	@ (8006998 <prvAddNewTaskToReadyList+0xc8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	429a      	cmp	r2, r3
 8006978:	d207      	bcs.n	800698a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800697a:	4b0c      	ldr	r3, [pc, #48]	@ (80069ac <prvAddNewTaskToReadyList+0xdc>)
 800697c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006980:	601a      	str	r2, [r3, #0]
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800698a:	bf00      	nop
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000142c 	.word	0x2000142c
 8006998:	20000f58 	.word	0x20000f58
 800699c:	20001438 	.word	0x20001438
 80069a0:	20001448 	.word	0x20001448
 80069a4:	20001434 	.word	0x20001434
 80069a8:	20000f5c 	.word	0x20000f5c
 80069ac:	e000ed04 	.word	0xe000ed04

080069b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069c2:	4b14      	ldr	r3, [pc, #80]	@ (8006a14 <vTaskDelay+0x64>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d00b      	beq.n	80069e2 <vTaskDelay+0x32>
	__asm volatile
 80069ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ce:	f383 8811 	msr	BASEPRI, r3
 80069d2:	f3bf 8f6f 	isb	sy
 80069d6:	f3bf 8f4f 	dsb	sy
 80069da:	60bb      	str	r3, [r7, #8]
}
 80069dc:	bf00      	nop
 80069de:	bf00      	nop
 80069e0:	e7fd      	b.n	80069de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069e2:	f000 f88b 	bl	8006afc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069e6:	2100      	movs	r1, #0
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 fe13 	bl	8007614 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069ee:	f000 f893 	bl	8006b18 <xTaskResumeAll>
 80069f2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d107      	bne.n	8006a0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069fa:	4b07      	ldr	r3, [pc, #28]	@ (8006a18 <vTaskDelay+0x68>)
 80069fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0a:	bf00      	nop
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20001454 	.word	0x20001454
 8006a18:	e000ed04 	.word	0xe000ed04

08006a1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	@ 0x28
 8006a20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a2a:	463a      	mov	r2, r7
 8006a2c:	1d39      	adds	r1, r7, #4
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	4618      	mov	r0, r3
 8006a34:	f7fe fe08 	bl	8005648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	9202      	str	r2, [sp, #8]
 8006a40:	9301      	str	r3, [sp, #4]
 8006a42:	2300      	movs	r3, #0
 8006a44:	9300      	str	r3, [sp, #0]
 8006a46:	2300      	movs	r3, #0
 8006a48:	460a      	mov	r2, r1
 8006a4a:	4924      	ldr	r1, [pc, #144]	@ (8006adc <vTaskStartScheduler+0xc0>)
 8006a4c:	4824      	ldr	r0, [pc, #144]	@ (8006ae0 <vTaskStartScheduler+0xc4>)
 8006a4e:	f7ff fdf1 	bl	8006634 <xTaskCreateStatic>
 8006a52:	4603      	mov	r3, r0
 8006a54:	4a23      	ldr	r2, [pc, #140]	@ (8006ae4 <vTaskStartScheduler+0xc8>)
 8006a56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a58:	4b22      	ldr	r3, [pc, #136]	@ (8006ae4 <vTaskStartScheduler+0xc8>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d002      	beq.n	8006a66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a60:	2301      	movs	r3, #1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e001      	b.n	8006a6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d102      	bne.n	8006a76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a70:	f000 fe24 	bl	80076bc <xTimerCreateTimerTask>
 8006a74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d11b      	bne.n	8006ab4 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a80:	f383 8811 	msr	BASEPRI, r3
 8006a84:	f3bf 8f6f 	isb	sy
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	613b      	str	r3, [r7, #16]
}
 8006a8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a90:	4b15      	ldr	r3, [pc, #84]	@ (8006ae8 <vTaskStartScheduler+0xcc>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3354      	adds	r3, #84	@ 0x54
 8006a96:	4a15      	ldr	r2, [pc, #84]	@ (8006aec <vTaskStartScheduler+0xd0>)
 8006a98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a9a:	4b15      	ldr	r3, [pc, #84]	@ (8006af0 <vTaskStartScheduler+0xd4>)
 8006a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006aa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006aa2:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <vTaskStartScheduler+0xd8>)
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006aa8:	4b13      	ldr	r3, [pc, #76]	@ (8006af8 <vTaskStartScheduler+0xdc>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006aae:	f001 f9db 	bl	8007e68 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ab2:	e00f      	b.n	8006ad4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aba:	d10b      	bne.n	8006ad4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac0:	f383 8811 	msr	BASEPRI, r3
 8006ac4:	f3bf 8f6f 	isb	sy
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	60fb      	str	r3, [r7, #12]
}
 8006ace:	bf00      	nop
 8006ad0:	bf00      	nop
 8006ad2:	e7fd      	b.n	8006ad0 <vTaskStartScheduler+0xb4>
}
 8006ad4:	bf00      	nop
 8006ad6:	3718      	adds	r7, #24
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	0800b378 	.word	0x0800b378
 8006ae0:	08007125 	.word	0x08007125
 8006ae4:	20001450 	.word	0x20001450
 8006ae8:	20000f58 	.word	0x20000f58
 8006aec:	20000024 	.word	0x20000024
 8006af0:	2000144c 	.word	0x2000144c
 8006af4:	20001438 	.word	0x20001438
 8006af8:	20001430 	.word	0x20001430

08006afc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <vTaskSuspendAll+0x18>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	3301      	adds	r3, #1
 8006b06:	4a03      	ldr	r2, [pc, #12]	@ (8006b14 <vTaskSuspendAll+0x18>)
 8006b08:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006b0a:	bf00      	nop
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bc80      	pop	{r7}
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	20001454 	.word	0x20001454

08006b18 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b26:	4b42      	ldr	r3, [pc, #264]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10b      	bne.n	8006b46 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	603b      	str	r3, [r7, #0]
}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	e7fd      	b.n	8006b42 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b46:	f001 fa01 	bl	8007f4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b4a:	4b39      	ldr	r3, [pc, #228]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	3b01      	subs	r3, #1
 8006b50:	4a37      	ldr	r2, [pc, #220]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b52:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b54:	4b36      	ldr	r3, [pc, #216]	@ (8006c30 <xTaskResumeAll+0x118>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d162      	bne.n	8006c22 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b5c:	4b35      	ldr	r3, [pc, #212]	@ (8006c34 <xTaskResumeAll+0x11c>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d05e      	beq.n	8006c22 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b64:	e02f      	b.n	8006bc6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b66:	4b34      	ldr	r3, [pc, #208]	@ (8006c38 <xTaskResumeAll+0x120>)
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	3318      	adds	r3, #24
 8006b72:	4618      	mov	r0, r3
 8006b74:	f7fe fe20 	bl	80057b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f7fe fe1b 	bl	80057b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b86:	4b2d      	ldr	r3, [pc, #180]	@ (8006c3c <xTaskResumeAll+0x124>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d903      	bls.n	8006b96 <xTaskResumeAll+0x7e>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b92:	4a2a      	ldr	r2, [pc, #168]	@ (8006c3c <xTaskResumeAll+0x124>)
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	4413      	add	r3, r2
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	4a27      	ldr	r2, [pc, #156]	@ (8006c40 <xTaskResumeAll+0x128>)
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7fe fda8 	bl	8005702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bb6:	4b23      	ldr	r3, [pc, #140]	@ (8006c44 <xTaskResumeAll+0x12c>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d302      	bcc.n	8006bc6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006bc0:	4b21      	ldr	r3, [pc, #132]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8006c38 <xTaskResumeAll+0x120>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1cb      	bne.n	8006b66 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bd4:	f000 fb62 	bl	800729c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bd8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c4c <xTaskResumeAll+0x134>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d010      	beq.n	8006c06 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006be4:	f000 f844 	bl	8006c70 <xTaskIncrementTick>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006bee:	4b16      	ldr	r3, [pc, #88]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1f1      	bne.n	8006be4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006c00:	4b12      	ldr	r3, [pc, #72]	@ (8006c4c <xTaskResumeAll+0x134>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <xTaskResumeAll+0x130>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d009      	beq.n	8006c22 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006c12:	4b0f      	ldr	r3, [pc, #60]	@ (8006c50 <xTaskResumeAll+0x138>)
 8006c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c18:	601a      	str	r2, [r3, #0]
 8006c1a:	f3bf 8f4f 	dsb	sy
 8006c1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 f9c3 	bl	8007fac <vPortExitCritical>

	return xAlreadyYielded;
 8006c26:	68bb      	ldr	r3, [r7, #8]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20001454 	.word	0x20001454
 8006c34:	2000142c 	.word	0x2000142c
 8006c38:	200013ec 	.word	0x200013ec
 8006c3c:	20001434 	.word	0x20001434
 8006c40:	20000f5c 	.word	0x20000f5c
 8006c44:	20000f58 	.word	0x20000f58
 8006c48:	20001440 	.word	0x20001440
 8006c4c:	2000143c 	.word	0x2000143c
 8006c50:	e000ed04 	.word	0xe000ed04

08006c54 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c54:	b480      	push	{r7}
 8006c56:	b083      	sub	sp, #12
 8006c58:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c5a:	4b04      	ldr	r3, [pc, #16]	@ (8006c6c <xTaskGetTickCount+0x18>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c60:	687b      	ldr	r3, [r7, #4]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	370c      	adds	r7, #12
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bc80      	pop	{r7}
 8006c6a:	4770      	bx	lr
 8006c6c:	20001430 	.word	0x20001430

08006c70 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c7a:	4b4f      	ldr	r3, [pc, #316]	@ (8006db8 <xTaskIncrementTick+0x148>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f040 8090 	bne.w	8006da4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c84:	4b4d      	ldr	r3, [pc, #308]	@ (8006dbc <xTaskIncrementTick+0x14c>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8006dbc <xTaskIncrementTick+0x14c>)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d121      	bne.n	8006cdc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c98:	4b49      	ldr	r3, [pc, #292]	@ (8006dc0 <xTaskIncrementTick+0x150>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00b      	beq.n	8006cba <xTaskIncrementTick+0x4a>
	__asm volatile
 8006ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca6:	f383 8811 	msr	BASEPRI, r3
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	f3bf 8f4f 	dsb	sy
 8006cb2:	603b      	str	r3, [r7, #0]
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	e7fd      	b.n	8006cb6 <xTaskIncrementTick+0x46>
 8006cba:	4b41      	ldr	r3, [pc, #260]	@ (8006dc0 <xTaskIncrementTick+0x150>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	4b40      	ldr	r3, [pc, #256]	@ (8006dc4 <xTaskIncrementTick+0x154>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc0 <xTaskIncrementTick+0x150>)
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4a3e      	ldr	r2, [pc, #248]	@ (8006dc4 <xTaskIncrementTick+0x154>)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b3e      	ldr	r3, [pc, #248]	@ (8006dc8 <xTaskIncrementTick+0x158>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8006dc8 <xTaskIncrementTick+0x158>)
 8006cd6:	6013      	str	r3, [r2, #0]
 8006cd8:	f000 fae0 	bl	800729c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cdc:	4b3b      	ldr	r3, [pc, #236]	@ (8006dcc <xTaskIncrementTick+0x15c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	693a      	ldr	r2, [r7, #16]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d349      	bcc.n	8006d7a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ce6:	4b36      	ldr	r3, [pc, #216]	@ (8006dc0 <xTaskIncrementTick+0x150>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d104      	bne.n	8006cfa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cf0:	4b36      	ldr	r3, [pc, #216]	@ (8006dcc <xTaskIncrementTick+0x15c>)
 8006cf2:	f04f 32ff 	mov.w	r2, #4294967295
 8006cf6:	601a      	str	r2, [r3, #0]
					break;
 8006cf8:	e03f      	b.n	8006d7a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cfa:	4b31      	ldr	r3, [pc, #196]	@ (8006dc0 <xTaskIncrementTick+0x150>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d203      	bcs.n	8006d1a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006d12:	4a2e      	ldr	r2, [pc, #184]	@ (8006dcc <xTaskIncrementTick+0x15c>)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006d18:	e02f      	b.n	8006d7a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	3304      	adds	r3, #4
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe fd4a 	bl	80057b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d004      	beq.n	8006d36 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3318      	adds	r3, #24
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7fe fd41 	bl	80057b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3a:	4b25      	ldr	r3, [pc, #148]	@ (8006dd0 <xTaskIncrementTick+0x160>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d903      	bls.n	8006d4a <xTaskIncrementTick+0xda>
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d46:	4a22      	ldr	r2, [pc, #136]	@ (8006dd0 <xTaskIncrementTick+0x160>)
 8006d48:	6013      	str	r3, [r2, #0]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4e:	4613      	mov	r3, r2
 8006d50:	009b      	lsls	r3, r3, #2
 8006d52:	4413      	add	r3, r2
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	4a1f      	ldr	r2, [pc, #124]	@ (8006dd4 <xTaskIncrementTick+0x164>)
 8006d58:	441a      	add	r2, r3
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	4619      	mov	r1, r3
 8006d60:	4610      	mov	r0, r2
 8006d62:	f7fe fcce 	bl	8005702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8006dd8 <xTaskIncrementTick+0x168>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d3b8      	bcc.n	8006ce6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d78:	e7b5      	b.n	8006ce6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d7a:	4b17      	ldr	r3, [pc, #92]	@ (8006dd8 <xTaskIncrementTick+0x168>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d80:	4914      	ldr	r1, [pc, #80]	@ (8006dd4 <xTaskIncrementTick+0x164>)
 8006d82:	4613      	mov	r3, r2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	440b      	add	r3, r1
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d901      	bls.n	8006d96 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d96:	4b11      	ldr	r3, [pc, #68]	@ (8006ddc <xTaskIncrementTick+0x16c>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e004      	b.n	8006dae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006da4:	4b0e      	ldr	r3, [pc, #56]	@ (8006de0 <xTaskIncrementTick+0x170>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4a0d      	ldr	r2, [pc, #52]	@ (8006de0 <xTaskIncrementTick+0x170>)
 8006dac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006dae:	697b      	ldr	r3, [r7, #20]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3718      	adds	r7, #24
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20001454 	.word	0x20001454
 8006dbc:	20001430 	.word	0x20001430
 8006dc0:	200013e4 	.word	0x200013e4
 8006dc4:	200013e8 	.word	0x200013e8
 8006dc8:	20001444 	.word	0x20001444
 8006dcc:	2000144c 	.word	0x2000144c
 8006dd0:	20001434 	.word	0x20001434
 8006dd4:	20000f5c 	.word	0x20000f5c
 8006dd8:	20000f58 	.word	0x20000f58
 8006ddc:	20001440 	.word	0x20001440
 8006de0:	2000143c 	.word	0x2000143c

08006de4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dea:	4b2a      	ldr	r3, [pc, #168]	@ (8006e94 <vTaskSwitchContext+0xb0>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006df2:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <vTaskSwitchContext+0xb4>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006df8:	e047      	b.n	8006e8a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006dfa:	4b27      	ldr	r3, [pc, #156]	@ (8006e98 <vTaskSwitchContext+0xb4>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e00:	4b26      	ldr	r3, [pc, #152]	@ (8006e9c <vTaskSwitchContext+0xb8>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	60fb      	str	r3, [r7, #12]
 8006e06:	e011      	b.n	8006e2c <vTaskSwitchContext+0x48>
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <vTaskSwitchContext+0x42>
	__asm volatile
 8006e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e12:	f383 8811 	msr	BASEPRI, r3
 8006e16:	f3bf 8f6f 	isb	sy
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	607b      	str	r3, [r7, #4]
}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	e7fd      	b.n	8006e22 <vTaskSwitchContext+0x3e>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	60fb      	str	r3, [r7, #12]
 8006e2c:	491c      	ldr	r1, [pc, #112]	@ (8006ea0 <vTaskSwitchContext+0xbc>)
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4613      	mov	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	4413      	add	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	440b      	add	r3, r1
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0e3      	beq.n	8006e08 <vTaskSwitchContext+0x24>
 8006e40:	68fa      	ldr	r2, [r7, #12]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4a15      	ldr	r2, [pc, #84]	@ (8006ea0 <vTaskSwitchContext+0xbc>)
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60bb      	str	r3, [r7, #8]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	605a      	str	r2, [r3, #4]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	685a      	ldr	r2, [r3, #4]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	3308      	adds	r3, #8
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d104      	bne.n	8006e70 <vTaskSwitchContext+0x8c>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	685a      	ldr	r2, [r3, #4]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	605a      	str	r2, [r3, #4]
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	4a0b      	ldr	r2, [pc, #44]	@ (8006ea4 <vTaskSwitchContext+0xc0>)
 8006e78:	6013      	str	r3, [r2, #0]
 8006e7a:	4a08      	ldr	r2, [pc, #32]	@ (8006e9c <vTaskSwitchContext+0xb8>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e80:	4b08      	ldr	r3, [pc, #32]	@ (8006ea4 <vTaskSwitchContext+0xc0>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	3354      	adds	r3, #84	@ 0x54
 8006e86:	4a08      	ldr	r2, [pc, #32]	@ (8006ea8 <vTaskSwitchContext+0xc4>)
 8006e88:	6013      	str	r3, [r2, #0]
}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bc80      	pop	{r7}
 8006e92:	4770      	bx	lr
 8006e94:	20001454 	.word	0x20001454
 8006e98:	20001440 	.word	0x20001440
 8006e9c:	20001434 	.word	0x20001434
 8006ea0:	20000f5c 	.word	0x20000f5c
 8006ea4:	20000f58 	.word	0x20000f58
 8006ea8:	20000024 	.word	0x20000024

08006eac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10b      	bne.n	8006ed4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	60fb      	str	r3, [r7, #12]
}
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ed4:	4b07      	ldr	r3, [pc, #28]	@ (8006ef4 <vTaskPlaceOnEventList+0x48>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3318      	adds	r3, #24
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fe fc33 	bl	8005748 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ee2:	2101      	movs	r1, #1
 8006ee4:	6838      	ldr	r0, [r7, #0]
 8006ee6:	f000 fb95 	bl	8007614 <prvAddCurrentTaskToDelayedList>
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000f58 	.word	0x20000f58

08006ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b086      	sub	sp, #24
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10b      	bne.n	8006f22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0e:	f383 8811 	msr	BASEPRI, r3
 8006f12:	f3bf 8f6f 	isb	sy
 8006f16:	f3bf 8f4f 	dsb	sy
 8006f1a:	617b      	str	r3, [r7, #20]
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	e7fd      	b.n	8006f1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f22:	4b0a      	ldr	r3, [pc, #40]	@ (8006f4c <vTaskPlaceOnEventListRestricted+0x54>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3318      	adds	r3, #24
 8006f28:	4619      	mov	r1, r3
 8006f2a:	68f8      	ldr	r0, [r7, #12]
 8006f2c:	f7fe fbe9 	bl	8005702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d002      	beq.n	8006f3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f3c:	6879      	ldr	r1, [r7, #4]
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f000 fb68 	bl	8007614 <prvAddCurrentTaskToDelayedList>
	}
 8006f44:	bf00      	nop
 8006f46:	3718      	adds	r7, #24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000f58 	.word	0x20000f58

08006f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10b      	bne.n	8006f7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6a:	f383 8811 	msr	BASEPRI, r3
 8006f6e:	f3bf 8f6f 	isb	sy
 8006f72:	f3bf 8f4f 	dsb	sy
 8006f76:	60fb      	str	r3, [r7, #12]
}
 8006f78:	bf00      	nop
 8006f7a:	bf00      	nop
 8006f7c:	e7fd      	b.n	8006f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3318      	adds	r3, #24
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fc18 	bl	80057b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f88:	4b1d      	ldr	r3, [pc, #116]	@ (8007000 <xTaskRemoveFromEventList+0xb0>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d11d      	bne.n	8006fcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe fc0f 	bl	80057b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9e:	4b19      	ldr	r3, [pc, #100]	@ (8007004 <xTaskRemoveFromEventList+0xb4>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	d903      	bls.n	8006fae <xTaskRemoveFromEventList+0x5e>
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006faa:	4a16      	ldr	r2, [pc, #88]	@ (8007004 <xTaskRemoveFromEventList+0xb4>)
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4a13      	ldr	r2, [pc, #76]	@ (8007008 <xTaskRemoveFromEventList+0xb8>)
 8006fbc:	441a      	add	r2, r3
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f7fe fb9c 	bl	8005702 <vListInsertEnd>
 8006fca:	e005      	b.n	8006fd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3318      	adds	r3, #24
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	480e      	ldr	r0, [pc, #56]	@ (800700c <xTaskRemoveFromEventList+0xbc>)
 8006fd4:	f7fe fb95 	bl	8005702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8007010 <xTaskRemoveFromEventList+0xc0>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d905      	bls.n	8006ff2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fea:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <xTaskRemoveFromEventList+0xc4>)
 8006fec:	2201      	movs	r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e001      	b.n	8006ff6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006ff6:	697b      	ldr	r3, [r7, #20]
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20001454 	.word	0x20001454
 8007004:	20001434 	.word	0x20001434
 8007008:	20000f5c 	.word	0x20000f5c
 800700c:	200013ec 	.word	0x200013ec
 8007010:	20000f58 	.word	0x20000f58
 8007014:	20001440 	.word	0x20001440

08007018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007020:	4b06      	ldr	r3, [pc, #24]	@ (800703c <vTaskInternalSetTimeOutState+0x24>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007028:	4b05      	ldr	r3, [pc, #20]	@ (8007040 <vTaskInternalSetTimeOutState+0x28>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	605a      	str	r2, [r3, #4]
}
 8007030:	bf00      	nop
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	bc80      	pop	{r7}
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20001444 	.word	0x20001444
 8007040:	20001430 	.word	0x20001430

08007044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b088      	sub	sp, #32
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	613b      	str	r3, [r7, #16]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10b      	bne.n	800708a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60fb      	str	r3, [r7, #12]
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800708a:	f000 ff5f 	bl	8007f4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800708e:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <xTaskCheckForTimeOut+0xc0>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a6:	d102      	bne.n	80070ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80070a8:	2300      	movs	r3, #0
 80070aa:	61fb      	str	r3, [r7, #28]
 80070ac:	e023      	b.n	80070f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b15      	ldr	r3, [pc, #84]	@ (8007108 <xTaskCheckForTimeOut+0xc4>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d007      	beq.n	80070ca <xTaskCheckForTimeOut+0x86>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	69ba      	ldr	r2, [r7, #24]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d302      	bcc.n	80070ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070c4:	2301      	movs	r3, #1
 80070c6:	61fb      	str	r3, [r7, #28]
 80070c8:	e015      	b.n	80070f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	697a      	ldr	r2, [r7, #20]
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d20b      	bcs.n	80070ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	1ad2      	subs	r2, r2, r3
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff ff99 	bl	8007018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
 80070ea:	e004      	b.n	80070f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	2200      	movs	r2, #0
 80070f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070f2:	2301      	movs	r3, #1
 80070f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070f6:	f000 ff59 	bl	8007fac <vPortExitCritical>

	return xReturn;
 80070fa:	69fb      	ldr	r3, [r7, #28]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3720      	adds	r7, #32
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	20001430 	.word	0x20001430
 8007108:	20001444 	.word	0x20001444

0800710c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800710c:	b480      	push	{r7}
 800710e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007110:	4b03      	ldr	r3, [pc, #12]	@ (8007120 <vTaskMissedYield+0x14>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
}
 8007116:	bf00      	nop
 8007118:	46bd      	mov	sp, r7
 800711a:	bc80      	pop	{r7}
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20001440 	.word	0x20001440

08007124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b082      	sub	sp, #8
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800712c:	f000 f852 	bl	80071d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007130:	4b06      	ldr	r3, [pc, #24]	@ (800714c <prvIdleTask+0x28>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b01      	cmp	r3, #1
 8007136:	d9f9      	bls.n	800712c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007138:	4b05      	ldr	r3, [pc, #20]	@ (8007150 <prvIdleTask+0x2c>)
 800713a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800713e:	601a      	str	r2, [r3, #0]
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007148:	e7f0      	b.n	800712c <prvIdleTask+0x8>
 800714a:	bf00      	nop
 800714c:	20000f5c 	.word	0x20000f5c
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800715a:	2300      	movs	r3, #0
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	e00c      	b.n	800717a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007160:	687a      	ldr	r2, [r7, #4]
 8007162:	4613      	mov	r3, r2
 8007164:	009b      	lsls	r3, r3, #2
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	4a12      	ldr	r2, [pc, #72]	@ (80071b4 <prvInitialiseTaskLists+0x60>)
 800716c:	4413      	add	r3, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f7fe fa9c 	bl	80056ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3301      	adds	r3, #1
 8007178:	607b      	str	r3, [r7, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b37      	cmp	r3, #55	@ 0x37
 800717e:	d9ef      	bls.n	8007160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007180:	480d      	ldr	r0, [pc, #52]	@ (80071b8 <prvInitialiseTaskLists+0x64>)
 8007182:	f7fe fa93 	bl	80056ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007186:	480d      	ldr	r0, [pc, #52]	@ (80071bc <prvInitialiseTaskLists+0x68>)
 8007188:	f7fe fa90 	bl	80056ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800718c:	480c      	ldr	r0, [pc, #48]	@ (80071c0 <prvInitialiseTaskLists+0x6c>)
 800718e:	f7fe fa8d 	bl	80056ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007192:	480c      	ldr	r0, [pc, #48]	@ (80071c4 <prvInitialiseTaskLists+0x70>)
 8007194:	f7fe fa8a 	bl	80056ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007198:	480b      	ldr	r0, [pc, #44]	@ (80071c8 <prvInitialiseTaskLists+0x74>)
 800719a:	f7fe fa87 	bl	80056ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800719e:	4b0b      	ldr	r3, [pc, #44]	@ (80071cc <prvInitialiseTaskLists+0x78>)
 80071a0:	4a05      	ldr	r2, [pc, #20]	@ (80071b8 <prvInitialiseTaskLists+0x64>)
 80071a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80071a4:	4b0a      	ldr	r3, [pc, #40]	@ (80071d0 <prvInitialiseTaskLists+0x7c>)
 80071a6:	4a05      	ldr	r2, [pc, #20]	@ (80071bc <prvInitialiseTaskLists+0x68>)
 80071a8:	601a      	str	r2, [r3, #0]
}
 80071aa:	bf00      	nop
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000f5c 	.word	0x20000f5c
 80071b8:	200013bc 	.word	0x200013bc
 80071bc:	200013d0 	.word	0x200013d0
 80071c0:	200013ec 	.word	0x200013ec
 80071c4:	20001400 	.word	0x20001400
 80071c8:	20001418 	.word	0x20001418
 80071cc:	200013e4 	.word	0x200013e4
 80071d0:	200013e8 	.word	0x200013e8

080071d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071da:	e019      	b.n	8007210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071dc:	f000 feb6 	bl	8007f4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071e0:	4b10      	ldr	r3, [pc, #64]	@ (8007224 <prvCheckTasksWaitingTermination+0x50>)
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3304      	adds	r3, #4
 80071ec:	4618      	mov	r0, r3
 80071ee:	f7fe fae3 	bl	80057b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007228 <prvCheckTasksWaitingTermination+0x54>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	4a0b      	ldr	r2, [pc, #44]	@ (8007228 <prvCheckTasksWaitingTermination+0x54>)
 80071fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071fc:	4b0b      	ldr	r3, [pc, #44]	@ (800722c <prvCheckTasksWaitingTermination+0x58>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3b01      	subs	r3, #1
 8007202:	4a0a      	ldr	r2, [pc, #40]	@ (800722c <prvCheckTasksWaitingTermination+0x58>)
 8007204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007206:	f000 fed1 	bl	8007fac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f810 	bl	8007230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007210:	4b06      	ldr	r3, [pc, #24]	@ (800722c <prvCheckTasksWaitingTermination+0x58>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e1      	bne.n	80071dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007218:	bf00      	nop
 800721a:	bf00      	nop
 800721c:	3708      	adds	r7, #8
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	20001400 	.word	0x20001400
 8007228:	2000142c 	.word	0x2000142c
 800722c:	20001414 	.word	0x20001414

08007230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3354      	adds	r3, #84	@ 0x54
 800723c:	4618      	mov	r0, r3
 800723e:	f001 ff45 	bl	80090cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007248:	2b00      	cmp	r3, #0
 800724a:	d108      	bne.n	800725e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007250:	4618      	mov	r0, r3
 8007252:	f001 f84b 	bl	80082ec <vPortFree>
				vPortFree( pxTCB );
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f001 f848 	bl	80082ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800725c:	e019      	b.n	8007292 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007264:	2b01      	cmp	r3, #1
 8007266:	d103      	bne.n	8007270 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f001 f83f 	bl	80082ec <vPortFree>
	}
 800726e:	e010      	b.n	8007292 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007276:	2b02      	cmp	r3, #2
 8007278:	d00b      	beq.n	8007292 <prvDeleteTCB+0x62>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	60fb      	str	r3, [r7, #12]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <prvDeleteTCB+0x5e>
	}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
	...

0800729c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072a2:	4b0c      	ldr	r3, [pc, #48]	@ (80072d4 <prvResetNextTaskUnblockTime+0x38>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d104      	bne.n	80072b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80072ac:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <prvResetNextTaskUnblockTime+0x3c>)
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80072b4:	e008      	b.n	80072c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072b6:	4b07      	ldr	r3, [pc, #28]	@ (80072d4 <prvResetNextTaskUnblockTime+0x38>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	4a04      	ldr	r2, [pc, #16]	@ (80072d8 <prvResetNextTaskUnblockTime+0x3c>)
 80072c6:	6013      	str	r3, [r2, #0]
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bc80      	pop	{r7}
 80072d0:	4770      	bx	lr
 80072d2:	bf00      	nop
 80072d4:	200013e4 	.word	0x200013e4
 80072d8:	2000144c 	.word	0x2000144c

080072dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80072e2:	4b04      	ldr	r3, [pc, #16]	@ (80072f4 <xTaskGetCurrentTaskHandle+0x18>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80072e8:	687b      	ldr	r3, [r7, #4]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	370c      	adds	r7, #12
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr
 80072f4:	20000f58 	.word	0x20000f58

080072f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072fe:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <xTaskGetSchedulerState+0x34>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d102      	bne.n	800730c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007306:	2301      	movs	r3, #1
 8007308:	607b      	str	r3, [r7, #4]
 800730a:	e008      	b.n	800731e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800730c:	4b08      	ldr	r3, [pc, #32]	@ (8007330 <xTaskGetSchedulerState+0x38>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007314:	2302      	movs	r3, #2
 8007316:	607b      	str	r3, [r7, #4]
 8007318:	e001      	b.n	800731e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800731a:	2300      	movs	r3, #0
 800731c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800731e:	687b      	ldr	r3, [r7, #4]
	}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	bc80      	pop	{r7}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20001438 	.word	0x20001438
 8007330:	20001454 	.word	0x20001454

08007334 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007340:	2300      	movs	r3, #0
 8007342:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d051      	beq.n	80073ee <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734e:	4b2a      	ldr	r3, [pc, #168]	@ (80073f8 <xTaskPriorityInherit+0xc4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d241      	bcs.n	80073dc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	2b00      	cmp	r3, #0
 800735e:	db06      	blt.n	800736e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007360:	4b25      	ldr	r3, [pc, #148]	@ (80073f8 <xTaskPriorityInherit+0xc4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007366:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	6959      	ldr	r1, [r3, #20]
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007376:	4613      	mov	r3, r2
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	4a1f      	ldr	r2, [pc, #124]	@ (80073fc <xTaskPriorityInherit+0xc8>)
 8007380:	4413      	add	r3, r2
 8007382:	4299      	cmp	r1, r3
 8007384:	d122      	bne.n	80073cc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	3304      	adds	r3, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fa14 	bl	80057b8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007390:	4b19      	ldr	r3, [pc, #100]	@ (80073f8 <xTaskPriorityInherit+0xc4>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800739e:	4b18      	ldr	r3, [pc, #96]	@ (8007400 <xTaskPriorityInherit+0xcc>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d903      	bls.n	80073ae <xTaskPriorityInherit+0x7a>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073aa:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <xTaskPriorityInherit+0xcc>)
 80073ac:	6013      	str	r3, [r2, #0]
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	4a10      	ldr	r2, [pc, #64]	@ (80073fc <xTaskPriorityInherit+0xc8>)
 80073bc:	441a      	add	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	3304      	adds	r3, #4
 80073c2:	4619      	mov	r1, r3
 80073c4:	4610      	mov	r0, r2
 80073c6:	f7fe f99c 	bl	8005702 <vListInsertEnd>
 80073ca:	e004      	b.n	80073d6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <xTaskPriorityInherit+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80073d6:	2301      	movs	r3, #1
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e008      	b.n	80073ee <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <xTaskPriorityInherit+0xc4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d201      	bcs.n	80073ee <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80073ea:	2301      	movs	r3, #1
 80073ec:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073ee:	68fb      	ldr	r3, [r7, #12]
	}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}
 80073f8:	20000f58 	.word	0x20000f58
 80073fc:	20000f5c 	.word	0x20000f5c
 8007400:	20001434 	.word	0x20001434

08007404 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007404:	b580      	push	{r7, lr}
 8007406:	b086      	sub	sp, #24
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d058      	beq.n	80074cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800741a:	4b2f      	ldr	r3, [pc, #188]	@ (80074d8 <xTaskPriorityDisinherit+0xd4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	693a      	ldr	r2, [r7, #16]
 8007420:	429a      	cmp	r2, r3
 8007422:	d00b      	beq.n	800743c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007428:	f383 8811 	msr	BASEPRI, r3
 800742c:	f3bf 8f6f 	isb	sy
 8007430:	f3bf 8f4f 	dsb	sy
 8007434:	60fb      	str	r3, [r7, #12]
}
 8007436:	bf00      	nop
 8007438:	bf00      	nop
 800743a:	e7fd      	b.n	8007438 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10b      	bne.n	800745c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	60bb      	str	r3, [r7, #8]
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007460:	1e5a      	subs	r2, r3, #1
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746e:	429a      	cmp	r2, r3
 8007470:	d02c      	beq.n	80074cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007476:	2b00      	cmp	r3, #0
 8007478:	d128      	bne.n	80074cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	3304      	adds	r3, #4
 800747e:	4618      	mov	r0, r3
 8007480:	f7fe f99a 	bl	80057b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007490:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007494:	693b      	ldr	r3, [r7, #16]
 8007496:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800749c:	4b0f      	ldr	r3, [pc, #60]	@ (80074dc <xTaskPriorityDisinherit+0xd8>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d903      	bls.n	80074ac <xTaskPriorityDisinherit+0xa8>
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	4a0c      	ldr	r2, [pc, #48]	@ (80074dc <xTaskPriorityDisinherit+0xd8>)
 80074aa:	6013      	str	r3, [r2, #0]
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b0:	4613      	mov	r3, r2
 80074b2:	009b      	lsls	r3, r3, #2
 80074b4:	4413      	add	r3, r2
 80074b6:	009b      	lsls	r3, r3, #2
 80074b8:	4a09      	ldr	r2, [pc, #36]	@ (80074e0 <xTaskPriorityDisinherit+0xdc>)
 80074ba:	441a      	add	r2, r3
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	3304      	adds	r3, #4
 80074c0:	4619      	mov	r1, r3
 80074c2:	4610      	mov	r0, r2
 80074c4:	f7fe f91d 	bl	8005702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074c8:	2301      	movs	r3, #1
 80074ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074cc:	697b      	ldr	r3, [r7, #20]
	}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20000f58 	.word	0x20000f58
 80074dc:	20001434 	.word	0x20001434
 80074e0:	20000f5c 	.word	0x20000f5c

080074e4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80074f2:	2301      	movs	r3, #1
 80074f4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d06c      	beq.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	429a      	cmp	r2, r3
 8007524:	d902      	bls.n	800752c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	61fb      	str	r3, [r7, #28]
 800752a:	e002      	b.n	8007532 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007530:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007536:	69fa      	ldr	r2, [r7, #28]
 8007538:	429a      	cmp	r2, r3
 800753a:	d04c      	beq.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800753c:	69bb      	ldr	r3, [r7, #24]
 800753e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	429a      	cmp	r2, r3
 8007544:	d147      	bne.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007546:	4b26      	ldr	r3, [pc, #152]	@ (80075e0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69ba      	ldr	r2, [r7, #24]
 800754c:	429a      	cmp	r2, r3
 800754e:	d10b      	bne.n	8007568 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	60bb      	str	r3, [r7, #8]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800756c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	69fa      	ldr	r2, [r7, #28]
 8007572:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007574:	69bb      	ldr	r3, [r7, #24]
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	db04      	blt.n	8007586 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	6959      	ldr	r1, [r3, #20]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	4613      	mov	r3, r2
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	4a13      	ldr	r2, [pc, #76]	@ (80075e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007596:	4413      	add	r3, r2
 8007598:	4299      	cmp	r1, r3
 800759a:	d11c      	bne.n	80075d6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe f909 	bl	80057b8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075aa:	4b0f      	ldr	r3, [pc, #60]	@ (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d903      	bls.n	80075ba <vTaskPriorityDisinheritAfterTimeout+0xd6>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b6:	4a0c      	ldr	r2, [pc, #48]	@ (80075e8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075be:	4613      	mov	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4413      	add	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4a07      	ldr	r2, [pc, #28]	@ (80075e4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80075c8:	441a      	add	r2, r3
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	3304      	adds	r3, #4
 80075ce:	4619      	mov	r1, r3
 80075d0:	4610      	mov	r0, r2
 80075d2:	f7fe f896 	bl	8005702 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80075d6:	bf00      	nop
 80075d8:	3720      	adds	r7, #32
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	20000f58 	.word	0x20000f58
 80075e4:	20000f5c 	.word	0x20000f5c
 80075e8:	20001434 	.word	0x20001434

080075ec <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80075ec:	b480      	push	{r7}
 80075ee:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d004      	beq.n	8007602 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80075f8:	4b05      	ldr	r3, [pc, #20]	@ (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80075fe:	3201      	adds	r2, #1
 8007600:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007602:	4b03      	ldr	r3, [pc, #12]	@ (8007610 <pvTaskIncrementMutexHeldCount+0x24>)
 8007604:	681b      	ldr	r3, [r3, #0]
	}
 8007606:	4618      	mov	r0, r3
 8007608:	46bd      	mov	sp, r7
 800760a:	bc80      	pop	{r7}
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	20000f58 	.word	0x20000f58

08007614 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b084      	sub	sp, #16
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800761e:	4b21      	ldr	r3, [pc, #132]	@ (80076a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007624:	4b20      	ldr	r3, [pc, #128]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	3304      	adds	r3, #4
 800762a:	4618      	mov	r0, r3
 800762c:	f7fe f8c4 	bl	80057b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d10a      	bne.n	800764e <prvAddCurrentTaskToDelayedList+0x3a>
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d007      	beq.n	800764e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800763e:	4b1a      	ldr	r3, [pc, #104]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3304      	adds	r3, #4
 8007644:	4619      	mov	r1, r3
 8007646:	4819      	ldr	r0, [pc, #100]	@ (80076ac <prvAddCurrentTaskToDelayedList+0x98>)
 8007648:	f7fe f85b 	bl	8005702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800764c:	e026      	b.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4413      	add	r3, r2
 8007654:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007656:	4b14      	ldr	r3, [pc, #80]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d209      	bcs.n	800767a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007666:	4b12      	ldr	r3, [pc, #72]	@ (80076b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4b0f      	ldr	r3, [pc, #60]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3304      	adds	r3, #4
 8007670:	4619      	mov	r1, r3
 8007672:	4610      	mov	r0, r2
 8007674:	f7fe f868 	bl	8005748 <vListInsert>
}
 8007678:	e010      	b.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800767a:	4b0e      	ldr	r3, [pc, #56]	@ (80076b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800767c:	681a      	ldr	r2, [r3, #0]
 800767e:	4b0a      	ldr	r3, [pc, #40]	@ (80076a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3304      	adds	r3, #4
 8007684:	4619      	mov	r1, r3
 8007686:	4610      	mov	r0, r2
 8007688:	f7fe f85e 	bl	8005748 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800768c:	4b0a      	ldr	r3, [pc, #40]	@ (80076b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	429a      	cmp	r2, r3
 8007694:	d202      	bcs.n	800769c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007696:	4a08      	ldr	r2, [pc, #32]	@ (80076b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6013      	str	r3, [r2, #0]
}
 800769c:	bf00      	nop
 800769e:	3710      	adds	r7, #16
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	20001430 	.word	0x20001430
 80076a8:	20000f58 	.word	0x20000f58
 80076ac:	20001418 	.word	0x20001418
 80076b0:	200013e8 	.word	0x200013e8
 80076b4:	200013e4 	.word	0x200013e4
 80076b8:	2000144c 	.word	0x2000144c

080076bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b08a      	sub	sp, #40	@ 0x28
 80076c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80076c2:	2300      	movs	r3, #0
 80076c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80076c6:	f000 fb11 	bl	8007cec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80076ca:	4b1d      	ldr	r3, [pc, #116]	@ (8007740 <xTimerCreateTimerTask+0x84>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d021      	beq.n	8007716 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80076d2:	2300      	movs	r3, #0
 80076d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80076da:	1d3a      	adds	r2, r7, #4
 80076dc:	f107 0108 	add.w	r1, r7, #8
 80076e0:	f107 030c 	add.w	r3, r7, #12
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fd ffc7 	bl	8005678 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80076ea:	6879      	ldr	r1, [r7, #4]
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	9202      	str	r2, [sp, #8]
 80076f2:	9301      	str	r3, [sp, #4]
 80076f4:	2302      	movs	r3, #2
 80076f6:	9300      	str	r3, [sp, #0]
 80076f8:	2300      	movs	r3, #0
 80076fa:	460a      	mov	r2, r1
 80076fc:	4911      	ldr	r1, [pc, #68]	@ (8007744 <xTimerCreateTimerTask+0x88>)
 80076fe:	4812      	ldr	r0, [pc, #72]	@ (8007748 <xTimerCreateTimerTask+0x8c>)
 8007700:	f7fe ff98 	bl	8006634 <xTaskCreateStatic>
 8007704:	4603      	mov	r3, r0
 8007706:	4a11      	ldr	r2, [pc, #68]	@ (800774c <xTimerCreateTimerTask+0x90>)
 8007708:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800770a:	4b10      	ldr	r3, [pc, #64]	@ (800774c <xTimerCreateTimerTask+0x90>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007712:	2301      	movs	r3, #1
 8007714:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d10b      	bne.n	8007734 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800771c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007720:	f383 8811 	msr	BASEPRI, r3
 8007724:	f3bf 8f6f 	isb	sy
 8007728:	f3bf 8f4f 	dsb	sy
 800772c:	613b      	str	r3, [r7, #16]
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	e7fd      	b.n	8007730 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007734:	697b      	ldr	r3, [r7, #20]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	20001488 	.word	0x20001488
 8007744:	0800b380 	.word	0x0800b380
 8007748:	08007889 	.word	0x08007889
 800774c:	2000148c 	.word	0x2000148c

08007750 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800775e:	2300      	movs	r3, #0
 8007760:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10b      	bne.n	8007780 <xTimerGenericCommand+0x30>
	__asm volatile
 8007768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776c:	f383 8811 	msr	BASEPRI, r3
 8007770:	f3bf 8f6f 	isb	sy
 8007774:	f3bf 8f4f 	dsb	sy
 8007778:	623b      	str	r3, [r7, #32]
}
 800777a:	bf00      	nop
 800777c:	bf00      	nop
 800777e:	e7fd      	b.n	800777c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007780:	4b19      	ldr	r3, [pc, #100]	@ (80077e8 <xTimerGenericCommand+0x98>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d02a      	beq.n	80077de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	2b05      	cmp	r3, #5
 8007798:	dc18      	bgt.n	80077cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800779a:	f7ff fdad 	bl	80072f8 <xTaskGetSchedulerState>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d109      	bne.n	80077b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80077a4:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <xTimerGenericCommand+0x98>)
 80077a6:	6818      	ldr	r0, [r3, #0]
 80077a8:	f107 0110 	add.w	r1, r7, #16
 80077ac:	2300      	movs	r3, #0
 80077ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077b0:	f7fe fa2a 	bl	8005c08 <xQueueGenericSend>
 80077b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80077b6:	e012      	b.n	80077de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80077b8:	4b0b      	ldr	r3, [pc, #44]	@ (80077e8 <xTimerGenericCommand+0x98>)
 80077ba:	6818      	ldr	r0, [r3, #0]
 80077bc:	f107 0110 	add.w	r1, r7, #16
 80077c0:	2300      	movs	r3, #0
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7fe fa20 	bl	8005c08 <xQueueGenericSend>
 80077c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80077ca:	e008      	b.n	80077de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80077cc:	4b06      	ldr	r3, [pc, #24]	@ (80077e8 <xTimerGenericCommand+0x98>)
 80077ce:	6818      	ldr	r0, [r3, #0]
 80077d0:	f107 0110 	add.w	r1, r7, #16
 80077d4:	2300      	movs	r3, #0
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	f7fe fb18 	bl	8005e0c <xQueueGenericSendFromISR>
 80077dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3728      	adds	r7, #40	@ 0x28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	20001488 	.word	0x20001488

080077ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f6:	4b23      	ldr	r3, [pc, #140]	@ (8007884 <prvProcessExpiredTimer+0x98>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fd ffd7 	bl	80057b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d023      	beq.n	8007860 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	699a      	ldr	r2, [r3, #24]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	18d1      	adds	r1, r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	6978      	ldr	r0, [r7, #20]
 8007826:	f000 f8d3 	bl	80079d0 <prvInsertTimerInActiveList>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d020      	beq.n	8007872 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007830:	2300      	movs	r3, #0
 8007832:	9300      	str	r3, [sp, #0]
 8007834:	2300      	movs	r3, #0
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	2100      	movs	r1, #0
 800783a:	6978      	ldr	r0, [r7, #20]
 800783c:	f7ff ff88 	bl	8007750 <xTimerGenericCommand>
 8007840:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007842:	693b      	ldr	r3, [r7, #16]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d114      	bne.n	8007872 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60fb      	str	r3, [r7, #12]
}
 800785a:	bf00      	nop
 800785c:	bf00      	nop
 800785e:	e7fd      	b.n	800785c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007866:	f023 0301 	bic.w	r3, r3, #1
 800786a:	b2da      	uxtb	r2, r3
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	6978      	ldr	r0, [r7, #20]
 8007878:	4798      	blx	r3
}
 800787a:	bf00      	nop
 800787c:	3718      	adds	r7, #24
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	20001480 	.word	0x20001480

08007888 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007890:	f107 0308 	add.w	r3, r7, #8
 8007894:	4618      	mov	r0, r3
 8007896:	f000 f859 	bl	800794c <prvGetNextExpireTime>
 800789a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	4619      	mov	r1, r3
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 f805 	bl	80078b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80078a6:	f000 f8d5 	bl	8007a54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80078aa:	bf00      	nop
 80078ac:	e7f0      	b.n	8007890 <prvTimerTask+0x8>
	...

080078b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80078ba:	f7ff f91f 	bl	8006afc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078be:	f107 0308 	add.w	r3, r7, #8
 80078c2:	4618      	mov	r0, r3
 80078c4:	f000 f864 	bl	8007990 <prvSampleTimeNow>
 80078c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d130      	bne.n	8007932 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10a      	bne.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
 80078d6:	687a      	ldr	r2, [r7, #4]
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	429a      	cmp	r2, r3
 80078dc:	d806      	bhi.n	80078ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80078de:	f7ff f91b 	bl	8006b18 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80078e2:	68f9      	ldr	r1, [r7, #12]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7ff ff81 	bl	80077ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80078ea:	e024      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80078f2:	4b13      	ldr	r3, [pc, #76]	@ (8007940 <prvProcessTimerOrBlockTask+0x90>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <prvProcessTimerOrBlockTask+0x50>
 80078fc:	2301      	movs	r3, #1
 80078fe:	e000      	b.n	8007902 <prvProcessTimerOrBlockTask+0x52>
 8007900:	2300      	movs	r3, #0
 8007902:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007904:	4b0f      	ldr	r3, [pc, #60]	@ (8007944 <prvProcessTimerOrBlockTask+0x94>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	1ad3      	subs	r3, r2, r3
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	4619      	mov	r1, r3
 8007912:	f7fe fe5b 	bl	80065cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007916:	f7ff f8ff 	bl	8006b18 <xTaskResumeAll>
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d10a      	bne.n	8007936 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007920:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <prvProcessTimerOrBlockTask+0x98>)
 8007922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	f3bf 8f6f 	isb	sy
}
 8007930:	e001      	b.n	8007936 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007932:	f7ff f8f1 	bl	8006b18 <xTaskResumeAll>
}
 8007936:	bf00      	nop
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20001484 	.word	0x20001484
 8007944:	20001488 	.word	0x20001488
 8007948:	e000ed04 	.word	0xe000ed04

0800794c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007954:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <prvGetNextExpireTime+0x40>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d101      	bne.n	8007962 <prvGetNextExpireTime+0x16>
 800795e:	2201      	movs	r2, #1
 8007960:	e000      	b.n	8007964 <prvGetNextExpireTime+0x18>
 8007962:	2200      	movs	r2, #0
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d105      	bne.n	800797c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007970:	4b06      	ldr	r3, [pc, #24]	@ (800798c <prvGetNextExpireTime+0x40>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68db      	ldr	r3, [r3, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	60fb      	str	r3, [r7, #12]
 800797a:	e001      	b.n	8007980 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800797c:	2300      	movs	r3, #0
 800797e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007980:	68fb      	ldr	r3, [r7, #12]
}
 8007982:	4618      	mov	r0, r3
 8007984:	3714      	adds	r7, #20
 8007986:	46bd      	mov	sp, r7
 8007988:	bc80      	pop	{r7}
 800798a:	4770      	bx	lr
 800798c:	20001480 	.word	0x20001480

08007990 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007998:	f7ff f95c 	bl	8006c54 <xTaskGetTickCount>
 800799c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800799e:	4b0b      	ldr	r3, [pc, #44]	@ (80079cc <prvSampleTimeNow+0x3c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d205      	bcs.n	80079b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80079a8:	f000 f93a 	bl	8007c20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e002      	b.n	80079ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80079ba:	4a04      	ldr	r2, [pc, #16]	@ (80079cc <prvSampleTimeNow+0x3c>)
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80079c0:	68fb      	ldr	r3, [r7, #12]
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	20001490 	.word	0x20001490

080079d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]
 80079dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	68fa      	ldr	r2, [r7, #12]
 80079ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d812      	bhi.n	8007a1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f6:	687a      	ldr	r2, [r7, #4]
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	1ad2      	subs	r2, r2, r3
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	e01b      	b.n	8007a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007a0a:	4b10      	ldr	r3, [pc, #64]	@ (8007a4c <prvInsertTimerInActiveList+0x7c>)
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	3304      	adds	r3, #4
 8007a12:	4619      	mov	r1, r3
 8007a14:	4610      	mov	r0, r2
 8007a16:	f7fd fe97 	bl	8005748 <vListInsert>
 8007a1a:	e012      	b.n	8007a42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007a1c:	687a      	ldr	r2, [r7, #4]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d206      	bcs.n	8007a32 <prvInsertTimerInActiveList+0x62>
 8007a24:	68ba      	ldr	r2, [r7, #8]
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d302      	bcc.n	8007a32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	617b      	str	r3, [r7, #20]
 8007a30:	e007      	b.n	8007a42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a32:	4b07      	ldr	r3, [pc, #28]	@ (8007a50 <prvInsertTimerInActiveList+0x80>)
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	3304      	adds	r3, #4
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f7fd fe83 	bl	8005748 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007a42:	697b      	ldr	r3, [r7, #20]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3718      	adds	r7, #24
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20001484 	.word	0x20001484
 8007a50:	20001480 	.word	0x20001480

08007a54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b08e      	sub	sp, #56	@ 0x38
 8007a58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a5a:	e0ce      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	da19      	bge.n	8007a96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007a62:	1d3b      	adds	r3, r7, #4
 8007a64:	3304      	adds	r3, #4
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d10b      	bne.n	8007a86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	61fb      	str	r3, [r7, #28]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a8c:	6850      	ldr	r0, [r2, #4]
 8007a8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a90:	6892      	ldr	r2, [r2, #8]
 8007a92:	4611      	mov	r1, r2
 8007a94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f2c0 80ae 	blt.w	8007bfa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d004      	beq.n	8007ab4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aac:	3304      	adds	r3, #4
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd fe82 	bl	80057b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ab4:	463b      	mov	r3, r7
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7ff ff6a 	bl	8007990 <prvSampleTimeNow>
 8007abc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2b09      	cmp	r3, #9
 8007ac2:	f200 8097 	bhi.w	8007bf4 <prvProcessReceivedCommands+0x1a0>
 8007ac6:	a201      	add	r2, pc, #4	@ (adr r2, 8007acc <prvProcessReceivedCommands+0x78>)
 8007ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007acc:	08007af5 	.word	0x08007af5
 8007ad0:	08007af5 	.word	0x08007af5
 8007ad4:	08007af5 	.word	0x08007af5
 8007ad8:	08007b6b 	.word	0x08007b6b
 8007adc:	08007b7f 	.word	0x08007b7f
 8007ae0:	08007bcb 	.word	0x08007bcb
 8007ae4:	08007af5 	.word	0x08007af5
 8007ae8:	08007af5 	.word	0x08007af5
 8007aec:	08007b6b 	.word	0x08007b6b
 8007af0:	08007b7f 	.word	0x08007b7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007afa:	f043 0301 	orr.w	r3, r3, #1
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007b06:	68ba      	ldr	r2, [r7, #8]
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	18d1      	adds	r1, r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b14:	f7ff ff5c 	bl	80079d0 <prvInsertTimerInActiveList>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d06c      	beq.n	8007bf8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b20:	6a1b      	ldr	r3, [r3, #32]
 8007b22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b2c:	f003 0304 	and.w	r3, r3, #4
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d061      	beq.n	8007bf8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	441a      	add	r2, r3
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	9300      	str	r3, [sp, #0]
 8007b40:	2300      	movs	r3, #0
 8007b42:	2100      	movs	r1, #0
 8007b44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b46:	f7ff fe03 	bl	8007750 <xTimerGenericCommand>
 8007b4a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007b4c:	6a3b      	ldr	r3, [r7, #32]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d152      	bne.n	8007bf8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	61bb      	str	r3, [r7, #24]
}
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b70:	f023 0301 	bic.w	r3, r3, #1
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b7c:	e03d      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b84:	f043 0301 	orr.w	r3, r3, #1
 8007b88:	b2da      	uxtb	r2, r3
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007b90:	68ba      	ldr	r2, [r7, #8]
 8007b92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b98:	699b      	ldr	r3, [r3, #24]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	617b      	str	r3, [r7, #20]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bb8:	699a      	ldr	r2, [r3, #24]
 8007bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bbc:	18d1      	adds	r1, r2, r3
 8007bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bc4:	f7ff ff04 	bl	80079d0 <prvInsertTimerInActiveList>
					break;
 8007bc8:	e017      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bd0:	f003 0302 	and.w	r3, r3, #2
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d103      	bne.n	8007be0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bda:	f000 fb87 	bl	80082ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007bde:	e00c      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007be6:	f023 0301 	bic.w	r3, r3, #1
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007bf2:	e002      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007bf4:	bf00      	nop
 8007bf6:	e000      	b.n	8007bfa <prvProcessReceivedCommands+0x1a6>
					break;
 8007bf8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bfa:	4b08      	ldr	r3, [pc, #32]	@ (8007c1c <prvProcessReceivedCommands+0x1c8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	1d39      	adds	r1, r7, #4
 8007c00:	2200      	movs	r2, #0
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fe f9a0 	bl	8005f48 <xQueueReceive>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f47f af26 	bne.w	8007a5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007c10:	bf00      	nop
 8007c12:	bf00      	nop
 8007c14:	3730      	adds	r7, #48	@ 0x30
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20001488 	.word	0x20001488

08007c20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b088      	sub	sp, #32
 8007c24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007c26:	e049      	b.n	8007cbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c28:	4b2e      	ldr	r3, [pc, #184]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c32:	4b2c      	ldr	r3, [pc, #176]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd fdb9 	bl	80057b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d02f      	beq.n	8007cbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	699b      	ldr	r3, [r3, #24]
 8007c60:	693a      	ldr	r2, [r7, #16]
 8007c62:	4413      	add	r3, r2
 8007c64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d90e      	bls.n	8007c8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	3304      	adds	r3, #4
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f7fd fd5f 	bl	8005748 <vListInsert>
 8007c8a:	e017      	b.n	8007cbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	9300      	str	r3, [sp, #0]
 8007c90:	2300      	movs	r3, #0
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	2100      	movs	r1, #0
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff fd5a 	bl	8007750 <xTimerGenericCommand>
 8007c9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10b      	bne.n	8007cbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca8:	f383 8811 	msr	BASEPRI, r3
 8007cac:	f3bf 8f6f 	isb	sy
 8007cb0:	f3bf 8f4f 	dsb	sy
 8007cb4:	603b      	str	r3, [r7, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	bf00      	nop
 8007cba:	e7fd      	b.n	8007cb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cbc:	4b09      	ldr	r3, [pc, #36]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d1b0      	bne.n	8007c28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007cc6:	4b07      	ldr	r3, [pc, #28]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ccc:	4b06      	ldr	r3, [pc, #24]	@ (8007ce8 <prvSwitchTimerLists+0xc8>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a04      	ldr	r2, [pc, #16]	@ (8007ce4 <prvSwitchTimerLists+0xc4>)
 8007cd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007cd4:	4a04      	ldr	r2, [pc, #16]	@ (8007ce8 <prvSwitchTimerLists+0xc8>)
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	6013      	str	r3, [r2, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	20001480 	.word	0x20001480
 8007ce8:	20001484 	.word	0x20001484

08007cec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007cf2:	f000 f92b 	bl	8007f4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007cf6:	4b15      	ldr	r3, [pc, #84]	@ (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d120      	bne.n	8007d40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007cfe:	4814      	ldr	r0, [pc, #80]	@ (8007d50 <prvCheckForValidListAndQueue+0x64>)
 8007d00:	f7fd fcd4 	bl	80056ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007d04:	4813      	ldr	r0, [pc, #76]	@ (8007d54 <prvCheckForValidListAndQueue+0x68>)
 8007d06:	f7fd fcd1 	bl	80056ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007d0a:	4b13      	ldr	r3, [pc, #76]	@ (8007d58 <prvCheckForValidListAndQueue+0x6c>)
 8007d0c:	4a10      	ldr	r2, [pc, #64]	@ (8007d50 <prvCheckForValidListAndQueue+0x64>)
 8007d0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007d10:	4b12      	ldr	r3, [pc, #72]	@ (8007d5c <prvCheckForValidListAndQueue+0x70>)
 8007d12:	4a10      	ldr	r2, [pc, #64]	@ (8007d54 <prvCheckForValidListAndQueue+0x68>)
 8007d14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d16:	2300      	movs	r3, #0
 8007d18:	9300      	str	r3, [sp, #0]
 8007d1a:	4b11      	ldr	r3, [pc, #68]	@ (8007d60 <prvCheckForValidListAndQueue+0x74>)
 8007d1c:	4a11      	ldr	r2, [pc, #68]	@ (8007d64 <prvCheckForValidListAndQueue+0x78>)
 8007d1e:	2110      	movs	r1, #16
 8007d20:	200a      	movs	r0, #10
 8007d22:	f7fd fddd 	bl	80058e0 <xQueueGenericCreateStatic>
 8007d26:	4603      	mov	r3, r0
 8007d28:	4a08      	ldr	r2, [pc, #32]	@ (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007d2c:	4b07      	ldr	r3, [pc, #28]	@ (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d005      	beq.n	8007d40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d34:	4b05      	ldr	r3, [pc, #20]	@ (8007d4c <prvCheckForValidListAndQueue+0x60>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	490b      	ldr	r1, [pc, #44]	@ (8007d68 <prvCheckForValidListAndQueue+0x7c>)
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fc1e 	bl	800657c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d40:	f000 f934 	bl	8007fac <vPortExitCritical>
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20001488 	.word	0x20001488
 8007d50:	20001458 	.word	0x20001458
 8007d54:	2000146c 	.word	0x2000146c
 8007d58:	20001480 	.word	0x20001480
 8007d5c:	20001484 	.word	0x20001484
 8007d60:	20001534 	.word	0x20001534
 8007d64:	20001494 	.word	0x20001494
 8007d68:	0800b388 	.word	0x0800b388

08007d6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	60f8      	str	r0, [r7, #12]
 8007d74:	60b9      	str	r1, [r7, #8]
 8007d76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	3b04      	subs	r3, #4
 8007d7c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007d84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3b04      	subs	r3, #4
 8007d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	f023 0201 	bic.w	r2, r3, #1
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3b04      	subs	r3, #4
 8007d9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007d9c:	4a08      	ldr	r2, [pc, #32]	@ (8007dc0 <pxPortInitialiseStack+0x54>)
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	3b14      	subs	r3, #20
 8007da6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3b20      	subs	r3, #32
 8007db2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007db4:	68fb      	ldr	r3, [r7, #12]
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3714      	adds	r7, #20
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bc80      	pop	{r7}
 8007dbe:	4770      	bx	lr
 8007dc0:	08007dc5 	.word	0x08007dc5

08007dc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007dce:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <prvTaskExitError+0x54>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd6:	d00b      	beq.n	8007df0 <prvTaskExitError+0x2c>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	60fb      	str	r3, [r7, #12]
}
 8007dea:	bf00      	nop
 8007dec:	bf00      	nop
 8007dee:	e7fd      	b.n	8007dec <prvTaskExitError+0x28>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	60bb      	str	r3, [r7, #8]
}
 8007e02:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007e04:	bf00      	nop
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0fc      	beq.n	8007e06 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bc80      	pop	{r7}
 8007e16:	4770      	bx	lr
 8007e18:	20000014 	.word	0x20000014
 8007e1c:	00000000 	.word	0x00000000

08007e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007e20:	4b07      	ldr	r3, [pc, #28]	@ (8007e40 <pxCurrentTCBConst2>)
 8007e22:	6819      	ldr	r1, [r3, #0]
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007e2a:	f380 8809 	msr	PSP, r0
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f04f 0000 	mov.w	r0, #0
 8007e36:	f380 8811 	msr	BASEPRI, r0
 8007e3a:	f04e 0e0d 	orr.w	lr, lr, #13
 8007e3e:	4770      	bx	lr

08007e40 <pxCurrentTCBConst2>:
 8007e40:	20000f58 	.word	0x20000f58
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop

08007e48 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007e48:	4806      	ldr	r0, [pc, #24]	@ (8007e64 <prvPortStartFirstTask+0x1c>)
 8007e4a:	6800      	ldr	r0, [r0, #0]
 8007e4c:	6800      	ldr	r0, [r0, #0]
 8007e4e:	f380 8808 	msr	MSP, r0
 8007e52:	b662      	cpsie	i
 8007e54:	b661      	cpsie	f
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	df00      	svc	0
 8007e60:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007e62:	bf00      	nop
 8007e64:	e000ed08 	.word	0xe000ed08

08007e68 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b084      	sub	sp, #16
 8007e6c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e6e:	4b32      	ldr	r3, [pc, #200]	@ (8007f38 <xPortStartScheduler+0xd0>)
 8007e70:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b2db      	uxtb	r3, r3
 8007e78:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	22ff      	movs	r2, #255	@ 0xff
 8007e7e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e88:	78fb      	ldrb	r3, [r7, #3]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	4b2a      	ldr	r3, [pc, #168]	@ (8007f3c <xPortStartScheduler+0xd4>)
 8007e94:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e96:	4b2a      	ldr	r3, [pc, #168]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007e98:	2207      	movs	r2, #7
 8007e9a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e9c:	e009      	b.n	8007eb2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8007e9e:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	4a26      	ldr	r2, [pc, #152]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007ea6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ea8:	78fb      	ldrb	r3, [r7, #3]
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007eb2:	78fb      	ldrb	r3, [r7, #3]
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eba:	2b80      	cmp	r3, #128	@ 0x80
 8007ebc:	d0ef      	beq.n	8007e9e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ebe:	4b20      	ldr	r3, [pc, #128]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1c3 0307 	rsb	r3, r3, #7
 8007ec6:	2b04      	cmp	r3, #4
 8007ec8:	d00b      	beq.n	8007ee2 <xPortStartScheduler+0x7a>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	60bb      	str	r3, [r7, #8]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007ee2:	4b17      	ldr	r3, [pc, #92]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	021b      	lsls	r3, r3, #8
 8007ee8:	4a15      	ldr	r2, [pc, #84]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007eea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007eec:	4b14      	ldr	r3, [pc, #80]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ef4:	4a12      	ldr	r2, [pc, #72]	@ (8007f40 <xPortStartScheduler+0xd8>)
 8007ef6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007f00:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <xPortStartScheduler+0xdc>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a0f      	ldr	r2, [pc, #60]	@ (8007f44 <xPortStartScheduler+0xdc>)
 8007f06:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007f0a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f44 <xPortStartScheduler+0xdc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0c      	ldr	r2, [pc, #48]	@ (8007f44 <xPortStartScheduler+0xdc>)
 8007f12:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007f16:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007f18:	f000 f8b8 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f48 <xPortStartScheduler+0xe0>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007f22:	f7ff ff91 	bl	8007e48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007f26:	f7fe ff5d 	bl	8006de4 <vTaskSwitchContext>
	prvTaskExitError();
 8007f2a:	f7ff ff4b 	bl	8007dc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007f2e:	2300      	movs	r3, #0
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3710      	adds	r7, #16
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	e000e400 	.word	0xe000e400
 8007f3c:	20001584 	.word	0x20001584
 8007f40:	20001588 	.word	0x20001588
 8007f44:	e000ed20 	.word	0xe000ed20
 8007f48:	20000014 	.word	0x20000014

08007f4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
	__asm volatile
 8007f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f56:	f383 8811 	msr	BASEPRI, r3
 8007f5a:	f3bf 8f6f 	isb	sy
 8007f5e:	f3bf 8f4f 	dsb	sy
 8007f62:	607b      	str	r3, [r7, #4]
}
 8007f64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f66:	4b0f      	ldr	r3, [pc, #60]	@ (8007fa4 <vPortEnterCritical+0x58>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	3301      	adds	r3, #1
 8007f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa4 <vPortEnterCritical+0x58>)
 8007f6e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f70:	4b0c      	ldr	r3, [pc, #48]	@ (8007fa4 <vPortEnterCritical+0x58>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d110      	bne.n	8007f9a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f78:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <vPortEnterCritical+0x5c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d00b      	beq.n	8007f9a <vPortEnterCritical+0x4e>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	603b      	str	r3, [r7, #0]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <vPortEnterCritical+0x4a>
	}
}
 8007f9a:	bf00      	nop
 8007f9c:	370c      	adds	r7, #12
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bc80      	pop	{r7}
 8007fa2:	4770      	bx	lr
 8007fa4:	20000014 	.word	0x20000014
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007fb2:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10b      	bne.n	8007fd2 <vPortExitCritical+0x26>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	607b      	str	r3, [r7, #4]
}
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	e7fd      	b.n	8007fce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8007ffc <vPortExitCritical+0x50>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	4a08      	ldr	r2, [pc, #32]	@ (8007ffc <vPortExitCritical+0x50>)
 8007fda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fdc:	4b07      	ldr	r3, [pc, #28]	@ (8007ffc <vPortExitCritical+0x50>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d105      	bne.n	8007ff0 <vPortExitCritical+0x44>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f383 8811 	msr	BASEPRI, r3
}
 8007fee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007ff0:	bf00      	nop
 8007ff2:	370c      	adds	r7, #12
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bc80      	pop	{r7}
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	20000014 	.word	0x20000014

08008000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008000:	f3ef 8009 	mrs	r0, PSP
 8008004:	f3bf 8f6f 	isb	sy
 8008008:	4b0d      	ldr	r3, [pc, #52]	@ (8008040 <pxCurrentTCBConst>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008010:	6010      	str	r0, [r2, #0]
 8008012:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008016:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800801a:	f380 8811 	msr	BASEPRI, r0
 800801e:	f7fe fee1 	bl	8006de4 <vTaskSwitchContext>
 8008022:	f04f 0000 	mov.w	r0, #0
 8008026:	f380 8811 	msr	BASEPRI, r0
 800802a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	6808      	ldr	r0, [r1, #0]
 8008032:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008036:	f380 8809 	msr	PSP, r0
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	4770      	bx	lr

08008040 <pxCurrentTCBConst>:
 8008040:	20000f58 	.word	0x20000f58
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7fe fe05 	bl	8006c70 <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <xPortSysTickHandler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0a      	ldr	r3, [pc, #40]	@ (80080bc <vPortSetupTimerInterrupt+0x30>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b09      	ldr	r3, [pc, #36]	@ (80080c4 <vPortSetupTimerInterrupt+0x38>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a09      	ldr	r2, [pc, #36]	@ (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a08      	ldr	r2, [pc, #32]	@ (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b03      	ldr	r3, [pc, #12]	@ (80080bc <vPortSetupTimerInterrupt+0x30>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bc80      	pop	{r7}
 80080ba:	4770      	bx	lr
 80080bc:	e000e010 	.word	0xe000e010
 80080c0:	e000e018 	.word	0xe000e018
 80080c4:	20000008 	.word	0x20000008
 80080c8:	10624dd3 	.word	0x10624dd3
 80080cc:	e000e014 	.word	0xe000e014

080080d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080d6:	f3ef 8305 	mrs	r3, IPSR
 80080da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	2b0f      	cmp	r3, #15
 80080e0:	d915      	bls.n	800810e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080e2:	4a17      	ldr	r2, [pc, #92]	@ (8008140 <vPortValidateInterruptPriority+0x70>)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4413      	add	r3, r2
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80080ec:	4b15      	ldr	r3, [pc, #84]	@ (8008144 <vPortValidateInterruptPriority+0x74>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	7afa      	ldrb	r2, [r7, #11]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d20b      	bcs.n	800810e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80080f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080fa:	f383 8811 	msr	BASEPRI, r3
 80080fe:	f3bf 8f6f 	isb	sy
 8008102:	f3bf 8f4f 	dsb	sy
 8008106:	607b      	str	r3, [r7, #4]
}
 8008108:	bf00      	nop
 800810a:	bf00      	nop
 800810c:	e7fd      	b.n	800810a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800810e:	4b0e      	ldr	r3, [pc, #56]	@ (8008148 <vPortValidateInterruptPriority+0x78>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008116:	4b0d      	ldr	r3, [pc, #52]	@ (800814c <vPortValidateInterruptPriority+0x7c>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	429a      	cmp	r2, r3
 800811c:	d90b      	bls.n	8008136 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800811e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008122:	f383 8811 	msr	BASEPRI, r3
 8008126:	f3bf 8f6f 	isb	sy
 800812a:	f3bf 8f4f 	dsb	sy
 800812e:	603b      	str	r3, [r7, #0]
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	e7fd      	b.n	8008132 <vPortValidateInterruptPriority+0x62>
	}
 8008136:	bf00      	nop
 8008138:	3714      	adds	r7, #20
 800813a:	46bd      	mov	sp, r7
 800813c:	bc80      	pop	{r7}
 800813e:	4770      	bx	lr
 8008140:	e000e3f0 	.word	0xe000e3f0
 8008144:	20001584 	.word	0x20001584
 8008148:	e000ed0c 	.word	0xe000ed0c
 800814c:	20001588 	.word	0x20001588

08008150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b08a      	sub	sp, #40	@ 0x28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008158:	2300      	movs	r3, #0
 800815a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800815c:	f7fe fcce 	bl	8006afc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008160:	4b5c      	ldr	r3, [pc, #368]	@ (80082d4 <pvPortMalloc+0x184>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008168:	f000 f924 	bl	80083b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800816c:	4b5a      	ldr	r3, [pc, #360]	@ (80082d8 <pvPortMalloc+0x188>)
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 8095 	bne.w	80082a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d01e      	beq.n	80081be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008180:	2208      	movs	r2, #8
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4413      	add	r3, r2
 8008186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	2b00      	cmp	r3, #0
 8008190:	d015      	beq.n	80081be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f023 0307 	bic.w	r3, r3, #7
 8008198:	3308      	adds	r3, #8
 800819a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f003 0307 	and.w	r3, r3, #7
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00b      	beq.n	80081be <pvPortMalloc+0x6e>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	617b      	str	r3, [r7, #20]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d06f      	beq.n	80082a4 <pvPortMalloc+0x154>
 80081c4:	4b45      	ldr	r3, [pc, #276]	@ (80082dc <pvPortMalloc+0x18c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d86a      	bhi.n	80082a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ce:	4b44      	ldr	r3, [pc, #272]	@ (80082e0 <pvPortMalloc+0x190>)
 80081d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081d2:	4b43      	ldr	r3, [pc, #268]	@ (80082e0 <pvPortMalloc+0x190>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081d8:	e004      	b.n	80081e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	687a      	ldr	r2, [r7, #4]
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d903      	bls.n	80081f6 <pvPortMalloc+0xa6>
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f1      	bne.n	80081da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80081f6:	4b37      	ldr	r3, [pc, #220]	@ (80082d4 <pvPortMalloc+0x184>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d051      	beq.n	80082a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2208      	movs	r2, #8
 8008206:	4413      	add	r3, r2
 8008208:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	685a      	ldr	r2, [r3, #4]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	1ad2      	subs	r2, r2, r3
 800821a:	2308      	movs	r3, #8
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	429a      	cmp	r2, r3
 8008220:	d920      	bls.n	8008264 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4413      	add	r3, r2
 8008228:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	2b00      	cmp	r3, #0
 8008232:	d00b      	beq.n	800824c <pvPortMalloc+0xfc>
	__asm volatile
 8008234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	613b      	str	r3, [r7, #16]
}
 8008246:	bf00      	nop
 8008248:	bf00      	nop
 800824a:	e7fd      	b.n	8008248 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824e:	685a      	ldr	r2, [r3, #4]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	1ad2      	subs	r2, r2, r3
 8008254:	69bb      	ldr	r3, [r7, #24]
 8008256:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800825e:	69b8      	ldr	r0, [r7, #24]
 8008260:	f000 f90a 	bl	8008478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008264:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <pvPortMalloc+0x18c>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	4a1b      	ldr	r2, [pc, #108]	@ (80082dc <pvPortMalloc+0x18c>)
 8008270:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008272:	4b1a      	ldr	r3, [pc, #104]	@ (80082dc <pvPortMalloc+0x18c>)
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	4b1b      	ldr	r3, [pc, #108]	@ (80082e4 <pvPortMalloc+0x194>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	429a      	cmp	r2, r3
 800827c:	d203      	bcs.n	8008286 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800827e:	4b17      	ldr	r3, [pc, #92]	@ (80082dc <pvPortMalloc+0x18c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a18      	ldr	r2, [pc, #96]	@ (80082e4 <pvPortMalloc+0x194>)
 8008284:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	4b13      	ldr	r3, [pc, #76]	@ (80082d8 <pvPortMalloc+0x188>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	431a      	orrs	r2, r3
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008296:	2200      	movs	r2, #0
 8008298:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800829a:	4b13      	ldr	r3, [pc, #76]	@ (80082e8 <pvPortMalloc+0x198>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	3301      	adds	r3, #1
 80082a0:	4a11      	ldr	r2, [pc, #68]	@ (80082e8 <pvPortMalloc+0x198>)
 80082a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082a4:	f7fe fc38 	bl	8006b18 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082a8:	69fb      	ldr	r3, [r7, #28]
 80082aa:	f003 0307 	and.w	r3, r3, #7
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d00b      	beq.n	80082ca <pvPortMalloc+0x17a>
	__asm volatile
 80082b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b6:	f383 8811 	msr	BASEPRI, r3
 80082ba:	f3bf 8f6f 	isb	sy
 80082be:	f3bf 8f4f 	dsb	sy
 80082c2:	60fb      	str	r3, [r7, #12]
}
 80082c4:	bf00      	nop
 80082c6:	bf00      	nop
 80082c8:	e7fd      	b.n	80082c6 <pvPortMalloc+0x176>
	return pvReturn;
 80082ca:	69fb      	ldr	r3, [r7, #28]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3728      	adds	r7, #40	@ 0x28
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	200034d4 	.word	0x200034d4
 80082d8:	200034e8 	.word	0x200034e8
 80082dc:	200034d8 	.word	0x200034d8
 80082e0:	200034cc 	.word	0x200034cc
 80082e4:	200034dc 	.word	0x200034dc
 80082e8:	200034e0 	.word	0x200034e0

080082ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d04f      	beq.n	800839e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80082fe:	2308      	movs	r3, #8
 8008300:	425b      	negs	r3, r3
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4413      	add	r3, r2
 8008306:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800830c:	693b      	ldr	r3, [r7, #16]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	4b25      	ldr	r3, [pc, #148]	@ (80083a8 <vPortFree+0xbc>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4013      	ands	r3, r2
 8008316:	2b00      	cmp	r3, #0
 8008318:	d10b      	bne.n	8008332 <vPortFree+0x46>
	__asm volatile
 800831a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800831e:	f383 8811 	msr	BASEPRI, r3
 8008322:	f3bf 8f6f 	isb	sy
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	60fb      	str	r3, [r7, #12]
}
 800832c:	bf00      	nop
 800832e:	bf00      	nop
 8008330:	e7fd      	b.n	800832e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <vPortFree+0x66>
	__asm volatile
 800833a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833e:	f383 8811 	msr	BASEPRI, r3
 8008342:	f3bf 8f6f 	isb	sy
 8008346:	f3bf 8f4f 	dsb	sy
 800834a:	60bb      	str	r3, [r7, #8]
}
 800834c:	bf00      	nop
 800834e:	bf00      	nop
 8008350:	e7fd      	b.n	800834e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	4b14      	ldr	r3, [pc, #80]	@ (80083a8 <vPortFree+0xbc>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	d01e      	beq.n	800839e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d11a      	bne.n	800839e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	685a      	ldr	r2, [r3, #4]
 800836c:	4b0e      	ldr	r3, [pc, #56]	@ (80083a8 <vPortFree+0xbc>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	43db      	mvns	r3, r3
 8008372:	401a      	ands	r2, r3
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008378:	f7fe fbc0 	bl	8006afc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	685a      	ldr	r2, [r3, #4]
 8008380:	4b0a      	ldr	r3, [pc, #40]	@ (80083ac <vPortFree+0xc0>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4413      	add	r3, r2
 8008386:	4a09      	ldr	r2, [pc, #36]	@ (80083ac <vPortFree+0xc0>)
 8008388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800838a:	6938      	ldr	r0, [r7, #16]
 800838c:	f000 f874 	bl	8008478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008390:	4b07      	ldr	r3, [pc, #28]	@ (80083b0 <vPortFree+0xc4>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	4a06      	ldr	r2, [pc, #24]	@ (80083b0 <vPortFree+0xc4>)
 8008398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800839a:	f7fe fbbd 	bl	8006b18 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800839e:	bf00      	nop
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200034e8 	.word	0x200034e8
 80083ac:	200034d8 	.word	0x200034d8
 80083b0:	200034e4 	.word	0x200034e4

080083b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083ba:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80083be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083c0:	4b27      	ldr	r3, [pc, #156]	@ (8008460 <prvHeapInit+0xac>)
 80083c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	f003 0307 	and.w	r3, r3, #7
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00c      	beq.n	80083e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	3307      	adds	r3, #7
 80083d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f023 0307 	bic.w	r3, r3, #7
 80083da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	4a1f      	ldr	r2, [pc, #124]	@ (8008460 <prvHeapInit+0xac>)
 80083e4:	4413      	add	r3, r2
 80083e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80083ec:	4a1d      	ldr	r2, [pc, #116]	@ (8008464 <prvHeapInit+0xb0>)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80083f2:	4b1c      	ldr	r3, [pc, #112]	@ (8008464 <prvHeapInit+0xb0>)
 80083f4:	2200      	movs	r2, #0
 80083f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	68ba      	ldr	r2, [r7, #8]
 80083fc:	4413      	add	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008400:	2208      	movs	r2, #8
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0307 	bic.w	r3, r3, #7
 800840e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4a15      	ldr	r2, [pc, #84]	@ (8008468 <prvHeapInit+0xb4>)
 8008414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008416:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <prvHeapInit+0xb4>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2200      	movs	r2, #0
 800841c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800841e:	4b12      	ldr	r3, [pc, #72]	@ (8008468 <prvHeapInit+0xb4>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	1ad2      	subs	r2, r2, r3
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008434:	4b0c      	ldr	r3, [pc, #48]	@ (8008468 <prvHeapInit+0xb4>)
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	4a0a      	ldr	r2, [pc, #40]	@ (800846c <prvHeapInit+0xb8>)
 8008442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	4a09      	ldr	r2, [pc, #36]	@ (8008470 <prvHeapInit+0xbc>)
 800844a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800844c:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <prvHeapInit+0xc0>)
 800844e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008452:	601a      	str	r2, [r3, #0]
}
 8008454:	bf00      	nop
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	bc80      	pop	{r7}
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	2000158c 	.word	0x2000158c
 8008464:	200034cc 	.word	0x200034cc
 8008468:	200034d4 	.word	0x200034d4
 800846c:	200034dc 	.word	0x200034dc
 8008470:	200034d8 	.word	0x200034d8
 8008474:	200034e8 	.word	0x200034e8

08008478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008480:	4b27      	ldr	r3, [pc, #156]	@ (8008520 <prvInsertBlockIntoFreeList+0xa8>)
 8008482:	60fb      	str	r3, [r7, #12]
 8008484:	e002      	b.n	800848c <prvInsertBlockIntoFreeList+0x14>
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	429a      	cmp	r2, r3
 8008494:	d8f7      	bhi.n	8008486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	429a      	cmp	r2, r3
 80084a6:	d108      	bne.n	80084ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	441a      	add	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	441a      	add	r2, r3
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d118      	bne.n	8008500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	4b14      	ldr	r3, [pc, #80]	@ (8008524 <prvInsertBlockIntoFreeList+0xac>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d00d      	beq.n	80084f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685a      	ldr	r2, [r3, #4]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	441a      	add	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	681a      	ldr	r2, [r3, #0]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	601a      	str	r2, [r3, #0]
 80084f4:	e008      	b.n	8008508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80084f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008524 <prvInsertBlockIntoFreeList+0xac>)
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	601a      	str	r2, [r3, #0]
 80084fe:	e003      	b.n	8008508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008508:	68fa      	ldr	r2, [r7, #12]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	429a      	cmp	r2, r3
 800850e:	d002      	beq.n	8008516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008516:	bf00      	nop
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	bc80      	pop	{r7}
 800851e:	4770      	bx	lr
 8008520:	200034cc 	.word	0x200034cc
 8008524:	200034d4 	.word	0x200034d4

08008528 <__cvt>:
 8008528:	2b00      	cmp	r3, #0
 800852a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852e:	461d      	mov	r5, r3
 8008530:	bfbb      	ittet	lt
 8008532:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008536:	461d      	movlt	r5, r3
 8008538:	2300      	movge	r3, #0
 800853a:	232d      	movlt	r3, #45	@ 0x2d
 800853c:	b088      	sub	sp, #32
 800853e:	4614      	mov	r4, r2
 8008540:	bfb8      	it	lt
 8008542:	4614      	movlt	r4, r2
 8008544:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008546:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008548:	7013      	strb	r3, [r2, #0]
 800854a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800854c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008550:	f023 0820 	bic.w	r8, r3, #32
 8008554:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008558:	d005      	beq.n	8008566 <__cvt+0x3e>
 800855a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800855e:	d100      	bne.n	8008562 <__cvt+0x3a>
 8008560:	3601      	adds	r6, #1
 8008562:	2302      	movs	r3, #2
 8008564:	e000      	b.n	8008568 <__cvt+0x40>
 8008566:	2303      	movs	r3, #3
 8008568:	aa07      	add	r2, sp, #28
 800856a:	9204      	str	r2, [sp, #16]
 800856c:	aa06      	add	r2, sp, #24
 800856e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008572:	e9cd 3600 	strd	r3, r6, [sp]
 8008576:	4622      	mov	r2, r4
 8008578:	462b      	mov	r3, r5
 800857a:	f000 ff05 	bl	8009388 <_dtoa_r>
 800857e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008582:	4607      	mov	r7, r0
 8008584:	d119      	bne.n	80085ba <__cvt+0x92>
 8008586:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008588:	07db      	lsls	r3, r3, #31
 800858a:	d50e      	bpl.n	80085aa <__cvt+0x82>
 800858c:	eb00 0906 	add.w	r9, r0, r6
 8008590:	2200      	movs	r2, #0
 8008592:	2300      	movs	r3, #0
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f8 fa06 	bl	80009a8 <__aeabi_dcmpeq>
 800859c:	b108      	cbz	r0, 80085a2 <__cvt+0x7a>
 800859e:	f8cd 901c 	str.w	r9, [sp, #28]
 80085a2:	2230      	movs	r2, #48	@ 0x30
 80085a4:	9b07      	ldr	r3, [sp, #28]
 80085a6:	454b      	cmp	r3, r9
 80085a8:	d31e      	bcc.n	80085e8 <__cvt+0xc0>
 80085aa:	4638      	mov	r0, r7
 80085ac:	9b07      	ldr	r3, [sp, #28]
 80085ae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80085b0:	1bdb      	subs	r3, r3, r7
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	b008      	add	sp, #32
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80085be:	eb00 0906 	add.w	r9, r0, r6
 80085c2:	d1e5      	bne.n	8008590 <__cvt+0x68>
 80085c4:	7803      	ldrb	r3, [r0, #0]
 80085c6:	2b30      	cmp	r3, #48	@ 0x30
 80085c8:	d10a      	bne.n	80085e0 <__cvt+0xb8>
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	4620      	mov	r0, r4
 80085d0:	4629      	mov	r1, r5
 80085d2:	f7f8 f9e9 	bl	80009a8 <__aeabi_dcmpeq>
 80085d6:	b918      	cbnz	r0, 80085e0 <__cvt+0xb8>
 80085d8:	f1c6 0601 	rsb	r6, r6, #1
 80085dc:	f8ca 6000 	str.w	r6, [sl]
 80085e0:	f8da 3000 	ldr.w	r3, [sl]
 80085e4:	4499      	add	r9, r3
 80085e6:	e7d3      	b.n	8008590 <__cvt+0x68>
 80085e8:	1c59      	adds	r1, r3, #1
 80085ea:	9107      	str	r1, [sp, #28]
 80085ec:	701a      	strb	r2, [r3, #0]
 80085ee:	e7d9      	b.n	80085a4 <__cvt+0x7c>

080085f0 <__exponent>:
 80085f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085f2:	2900      	cmp	r1, #0
 80085f4:	bfb6      	itet	lt
 80085f6:	232d      	movlt	r3, #45	@ 0x2d
 80085f8:	232b      	movge	r3, #43	@ 0x2b
 80085fa:	4249      	neglt	r1, r1
 80085fc:	2909      	cmp	r1, #9
 80085fe:	7002      	strb	r2, [r0, #0]
 8008600:	7043      	strb	r3, [r0, #1]
 8008602:	dd29      	ble.n	8008658 <__exponent+0x68>
 8008604:	f10d 0307 	add.w	r3, sp, #7
 8008608:	461d      	mov	r5, r3
 800860a:	270a      	movs	r7, #10
 800860c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008610:	461a      	mov	r2, r3
 8008612:	fb07 1416 	mls	r4, r7, r6, r1
 8008616:	3430      	adds	r4, #48	@ 0x30
 8008618:	f802 4c01 	strb.w	r4, [r2, #-1]
 800861c:	460c      	mov	r4, r1
 800861e:	2c63      	cmp	r4, #99	@ 0x63
 8008620:	4631      	mov	r1, r6
 8008622:	f103 33ff 	add.w	r3, r3, #4294967295
 8008626:	dcf1      	bgt.n	800860c <__exponent+0x1c>
 8008628:	3130      	adds	r1, #48	@ 0x30
 800862a:	1e94      	subs	r4, r2, #2
 800862c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008630:	4623      	mov	r3, r4
 8008632:	1c41      	adds	r1, r0, #1
 8008634:	42ab      	cmp	r3, r5
 8008636:	d30a      	bcc.n	800864e <__exponent+0x5e>
 8008638:	f10d 0309 	add.w	r3, sp, #9
 800863c:	1a9b      	subs	r3, r3, r2
 800863e:	42ac      	cmp	r4, r5
 8008640:	bf88      	it	hi
 8008642:	2300      	movhi	r3, #0
 8008644:	3302      	adds	r3, #2
 8008646:	4403      	add	r3, r0
 8008648:	1a18      	subs	r0, r3, r0
 800864a:	b003      	add	sp, #12
 800864c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800864e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008652:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008656:	e7ed      	b.n	8008634 <__exponent+0x44>
 8008658:	2330      	movs	r3, #48	@ 0x30
 800865a:	3130      	adds	r1, #48	@ 0x30
 800865c:	7083      	strb	r3, [r0, #2]
 800865e:	70c1      	strb	r1, [r0, #3]
 8008660:	1d03      	adds	r3, r0, #4
 8008662:	e7f1      	b.n	8008648 <__exponent+0x58>

08008664 <_printf_float>:
 8008664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008668:	b091      	sub	sp, #68	@ 0x44
 800866a:	460c      	mov	r4, r1
 800866c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008670:	4616      	mov	r6, r2
 8008672:	461f      	mov	r7, r3
 8008674:	4605      	mov	r5, r0
 8008676:	f000 fd15 	bl	80090a4 <_localeconv_r>
 800867a:	6803      	ldr	r3, [r0, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	9308      	str	r3, [sp, #32]
 8008680:	f7f7 fd66 	bl	8000150 <strlen>
 8008684:	2300      	movs	r3, #0
 8008686:	930e      	str	r3, [sp, #56]	@ 0x38
 8008688:	f8d8 3000 	ldr.w	r3, [r8]
 800868c:	9009      	str	r0, [sp, #36]	@ 0x24
 800868e:	3307      	adds	r3, #7
 8008690:	f023 0307 	bic.w	r3, r3, #7
 8008694:	f103 0208 	add.w	r2, r3, #8
 8008698:	f894 a018 	ldrb.w	sl, [r4, #24]
 800869c:	f8d4 b000 	ldr.w	fp, [r4]
 80086a0:	f8c8 2000 	str.w	r2, [r8]
 80086a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80086ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086ae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80086b2:	f04f 32ff 	mov.w	r2, #4294967295
 80086b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80086be:	4b9c      	ldr	r3, [pc, #624]	@ (8008930 <_printf_float+0x2cc>)
 80086c0:	f7f8 f9a4 	bl	8000a0c <__aeabi_dcmpun>
 80086c4:	bb70      	cbnz	r0, 8008724 <_printf_float+0xc0>
 80086c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80086ca:	f04f 32ff 	mov.w	r2, #4294967295
 80086ce:	4b98      	ldr	r3, [pc, #608]	@ (8008930 <_printf_float+0x2cc>)
 80086d0:	f7f8 f97e 	bl	80009d0 <__aeabi_dcmple>
 80086d4:	bb30      	cbnz	r0, 8008724 <_printf_float+0xc0>
 80086d6:	2200      	movs	r2, #0
 80086d8:	2300      	movs	r3, #0
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f8 f96d 	bl	80009bc <__aeabi_dcmplt>
 80086e2:	b110      	cbz	r0, 80086ea <_printf_float+0x86>
 80086e4:	232d      	movs	r3, #45	@ 0x2d
 80086e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ea:	4a92      	ldr	r2, [pc, #584]	@ (8008934 <_printf_float+0x2d0>)
 80086ec:	4b92      	ldr	r3, [pc, #584]	@ (8008938 <_printf_float+0x2d4>)
 80086ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086f2:	bf94      	ite	ls
 80086f4:	4690      	movls	r8, r2
 80086f6:	4698      	movhi	r8, r3
 80086f8:	2303      	movs	r3, #3
 80086fa:	f04f 0900 	mov.w	r9, #0
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	f02b 0304 	bic.w	r3, fp, #4
 8008704:	6023      	str	r3, [r4, #0]
 8008706:	4633      	mov	r3, r6
 8008708:	4621      	mov	r1, r4
 800870a:	4628      	mov	r0, r5
 800870c:	9700      	str	r7, [sp, #0]
 800870e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008710:	f000 f9d4 	bl	8008abc <_printf_common>
 8008714:	3001      	adds	r0, #1
 8008716:	f040 8090 	bne.w	800883a <_printf_float+0x1d6>
 800871a:	f04f 30ff 	mov.w	r0, #4294967295
 800871e:	b011      	add	sp, #68	@ 0x44
 8008720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008724:	4642      	mov	r2, r8
 8008726:	464b      	mov	r3, r9
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	f7f8 f96e 	bl	8000a0c <__aeabi_dcmpun>
 8008730:	b148      	cbz	r0, 8008746 <_printf_float+0xe2>
 8008732:	464b      	mov	r3, r9
 8008734:	2b00      	cmp	r3, #0
 8008736:	bfb8      	it	lt
 8008738:	232d      	movlt	r3, #45	@ 0x2d
 800873a:	4a80      	ldr	r2, [pc, #512]	@ (800893c <_printf_float+0x2d8>)
 800873c:	bfb8      	it	lt
 800873e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008742:	4b7f      	ldr	r3, [pc, #508]	@ (8008940 <_printf_float+0x2dc>)
 8008744:	e7d3      	b.n	80086ee <_printf_float+0x8a>
 8008746:	6863      	ldr	r3, [r4, #4]
 8008748:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800874c:	1c5a      	adds	r2, r3, #1
 800874e:	d13f      	bne.n	80087d0 <_printf_float+0x16c>
 8008750:	2306      	movs	r3, #6
 8008752:	6063      	str	r3, [r4, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	9206      	str	r2, [sp, #24]
 800875e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008760:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008764:	aa0d      	add	r2, sp, #52	@ 0x34
 8008766:	9203      	str	r2, [sp, #12]
 8008768:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800876c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	4642      	mov	r2, r8
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	4628      	mov	r0, r5
 8008778:	464b      	mov	r3, r9
 800877a:	910a      	str	r1, [sp, #40]	@ 0x28
 800877c:	f7ff fed4 	bl	8008528 <__cvt>
 8008780:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008782:	4680      	mov	r8, r0
 8008784:	2947      	cmp	r1, #71	@ 0x47
 8008786:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008788:	d128      	bne.n	80087dc <_printf_float+0x178>
 800878a:	1cc8      	adds	r0, r1, #3
 800878c:	db02      	blt.n	8008794 <_printf_float+0x130>
 800878e:	6863      	ldr	r3, [r4, #4]
 8008790:	4299      	cmp	r1, r3
 8008792:	dd40      	ble.n	8008816 <_printf_float+0x1b2>
 8008794:	f1aa 0a02 	sub.w	sl, sl, #2
 8008798:	fa5f fa8a 	uxtb.w	sl, sl
 800879c:	4652      	mov	r2, sl
 800879e:	3901      	subs	r1, #1
 80087a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80087a4:	910d      	str	r1, [sp, #52]	@ 0x34
 80087a6:	f7ff ff23 	bl	80085f0 <__exponent>
 80087aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ac:	4681      	mov	r9, r0
 80087ae:	1813      	adds	r3, r2, r0
 80087b0:	2a01      	cmp	r2, #1
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	dc02      	bgt.n	80087bc <_printf_float+0x158>
 80087b6:	6822      	ldr	r2, [r4, #0]
 80087b8:	07d2      	lsls	r2, r2, #31
 80087ba:	d501      	bpl.n	80087c0 <_printf_float+0x15c>
 80087bc:	3301      	adds	r3, #1
 80087be:	6123      	str	r3, [r4, #16]
 80087c0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d09e      	beq.n	8008706 <_printf_float+0xa2>
 80087c8:	232d      	movs	r3, #45	@ 0x2d
 80087ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ce:	e79a      	b.n	8008706 <_printf_float+0xa2>
 80087d0:	2947      	cmp	r1, #71	@ 0x47
 80087d2:	d1bf      	bne.n	8008754 <_printf_float+0xf0>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d1bd      	bne.n	8008754 <_printf_float+0xf0>
 80087d8:	2301      	movs	r3, #1
 80087da:	e7ba      	b.n	8008752 <_printf_float+0xee>
 80087dc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80087e0:	d9dc      	bls.n	800879c <_printf_float+0x138>
 80087e2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087e6:	d118      	bne.n	800881a <_printf_float+0x1b6>
 80087e8:	2900      	cmp	r1, #0
 80087ea:	6863      	ldr	r3, [r4, #4]
 80087ec:	dd0b      	ble.n	8008806 <_printf_float+0x1a2>
 80087ee:	6121      	str	r1, [r4, #16]
 80087f0:	b913      	cbnz	r3, 80087f8 <_printf_float+0x194>
 80087f2:	6822      	ldr	r2, [r4, #0]
 80087f4:	07d0      	lsls	r0, r2, #31
 80087f6:	d502      	bpl.n	80087fe <_printf_float+0x19a>
 80087f8:	3301      	adds	r3, #1
 80087fa:	440b      	add	r3, r1
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	f04f 0900 	mov.w	r9, #0
 8008802:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008804:	e7dc      	b.n	80087c0 <_printf_float+0x15c>
 8008806:	b913      	cbnz	r3, 800880e <_printf_float+0x1aa>
 8008808:	6822      	ldr	r2, [r4, #0]
 800880a:	07d2      	lsls	r2, r2, #31
 800880c:	d501      	bpl.n	8008812 <_printf_float+0x1ae>
 800880e:	3302      	adds	r3, #2
 8008810:	e7f4      	b.n	80087fc <_printf_float+0x198>
 8008812:	2301      	movs	r3, #1
 8008814:	e7f2      	b.n	80087fc <_printf_float+0x198>
 8008816:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800881a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800881c:	4299      	cmp	r1, r3
 800881e:	db05      	blt.n	800882c <_printf_float+0x1c8>
 8008820:	6823      	ldr	r3, [r4, #0]
 8008822:	6121      	str	r1, [r4, #16]
 8008824:	07d8      	lsls	r0, r3, #31
 8008826:	d5ea      	bpl.n	80087fe <_printf_float+0x19a>
 8008828:	1c4b      	adds	r3, r1, #1
 800882a:	e7e7      	b.n	80087fc <_printf_float+0x198>
 800882c:	2900      	cmp	r1, #0
 800882e:	bfcc      	ite	gt
 8008830:	2201      	movgt	r2, #1
 8008832:	f1c1 0202 	rsble	r2, r1, #2
 8008836:	4413      	add	r3, r2
 8008838:	e7e0      	b.n	80087fc <_printf_float+0x198>
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	055a      	lsls	r2, r3, #21
 800883e:	d407      	bmi.n	8008850 <_printf_float+0x1ec>
 8008840:	6923      	ldr	r3, [r4, #16]
 8008842:	4642      	mov	r2, r8
 8008844:	4631      	mov	r1, r6
 8008846:	4628      	mov	r0, r5
 8008848:	47b8      	blx	r7
 800884a:	3001      	adds	r0, #1
 800884c:	d12b      	bne.n	80088a6 <_printf_float+0x242>
 800884e:	e764      	b.n	800871a <_printf_float+0xb6>
 8008850:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008854:	f240 80dc 	bls.w	8008a10 <_printf_float+0x3ac>
 8008858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800885c:	2200      	movs	r2, #0
 800885e:	2300      	movs	r3, #0
 8008860:	f7f8 f8a2 	bl	80009a8 <__aeabi_dcmpeq>
 8008864:	2800      	cmp	r0, #0
 8008866:	d033      	beq.n	80088d0 <_printf_float+0x26c>
 8008868:	2301      	movs	r3, #1
 800886a:	4631      	mov	r1, r6
 800886c:	4628      	mov	r0, r5
 800886e:	4a35      	ldr	r2, [pc, #212]	@ (8008944 <_printf_float+0x2e0>)
 8008870:	47b8      	blx	r7
 8008872:	3001      	adds	r0, #1
 8008874:	f43f af51 	beq.w	800871a <_printf_float+0xb6>
 8008878:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800887c:	4543      	cmp	r3, r8
 800887e:	db02      	blt.n	8008886 <_printf_float+0x222>
 8008880:	6823      	ldr	r3, [r4, #0]
 8008882:	07d8      	lsls	r0, r3, #31
 8008884:	d50f      	bpl.n	80088a6 <_printf_float+0x242>
 8008886:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800888a:	4631      	mov	r1, r6
 800888c:	4628      	mov	r0, r5
 800888e:	47b8      	blx	r7
 8008890:	3001      	adds	r0, #1
 8008892:	f43f af42 	beq.w	800871a <_printf_float+0xb6>
 8008896:	f04f 0900 	mov.w	r9, #0
 800889a:	f108 38ff 	add.w	r8, r8, #4294967295
 800889e:	f104 0a1a 	add.w	sl, r4, #26
 80088a2:	45c8      	cmp	r8, r9
 80088a4:	dc09      	bgt.n	80088ba <_printf_float+0x256>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	079b      	lsls	r3, r3, #30
 80088aa:	f100 8102 	bmi.w	8008ab2 <_printf_float+0x44e>
 80088ae:	68e0      	ldr	r0, [r4, #12]
 80088b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088b2:	4298      	cmp	r0, r3
 80088b4:	bfb8      	it	lt
 80088b6:	4618      	movlt	r0, r3
 80088b8:	e731      	b.n	800871e <_printf_float+0xba>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4631      	mov	r1, r6
 80088c0:	4628      	mov	r0, r5
 80088c2:	47b8      	blx	r7
 80088c4:	3001      	adds	r0, #1
 80088c6:	f43f af28 	beq.w	800871a <_printf_float+0xb6>
 80088ca:	f109 0901 	add.w	r9, r9, #1
 80088ce:	e7e8      	b.n	80088a2 <_printf_float+0x23e>
 80088d0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	dc38      	bgt.n	8008948 <_printf_float+0x2e4>
 80088d6:	2301      	movs	r3, #1
 80088d8:	4631      	mov	r1, r6
 80088da:	4628      	mov	r0, r5
 80088dc:	4a19      	ldr	r2, [pc, #100]	@ (8008944 <_printf_float+0x2e0>)
 80088de:	47b8      	blx	r7
 80088e0:	3001      	adds	r0, #1
 80088e2:	f43f af1a 	beq.w	800871a <_printf_float+0xb6>
 80088e6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80088ea:	ea59 0303 	orrs.w	r3, r9, r3
 80088ee:	d102      	bne.n	80088f6 <_printf_float+0x292>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07d9      	lsls	r1, r3, #31
 80088f4:	d5d7      	bpl.n	80088a6 <_printf_float+0x242>
 80088f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80088fa:	4631      	mov	r1, r6
 80088fc:	4628      	mov	r0, r5
 80088fe:	47b8      	blx	r7
 8008900:	3001      	adds	r0, #1
 8008902:	f43f af0a 	beq.w	800871a <_printf_float+0xb6>
 8008906:	f04f 0a00 	mov.w	sl, #0
 800890a:	f104 0b1a 	add.w	fp, r4, #26
 800890e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008910:	425b      	negs	r3, r3
 8008912:	4553      	cmp	r3, sl
 8008914:	dc01      	bgt.n	800891a <_printf_float+0x2b6>
 8008916:	464b      	mov	r3, r9
 8008918:	e793      	b.n	8008842 <_printf_float+0x1de>
 800891a:	2301      	movs	r3, #1
 800891c:	465a      	mov	r2, fp
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f aef8 	beq.w	800871a <_printf_float+0xb6>
 800892a:	f10a 0a01 	add.w	sl, sl, #1
 800892e:	e7ee      	b.n	800890e <_printf_float+0x2aa>
 8008930:	7fefffff 	.word	0x7fefffff
 8008934:	0800bbb6 	.word	0x0800bbb6
 8008938:	0800bbba 	.word	0x0800bbba
 800893c:	0800bbbe 	.word	0x0800bbbe
 8008940:	0800bbc2 	.word	0x0800bbc2
 8008944:	0800bbc6 	.word	0x0800bbc6
 8008948:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800894a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800894e:	4553      	cmp	r3, sl
 8008950:	bfa8      	it	ge
 8008952:	4653      	movge	r3, sl
 8008954:	2b00      	cmp	r3, #0
 8008956:	4699      	mov	r9, r3
 8008958:	dc36      	bgt.n	80089c8 <_printf_float+0x364>
 800895a:	f04f 0b00 	mov.w	fp, #0
 800895e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008962:	f104 021a 	add.w	r2, r4, #26
 8008966:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008968:	930a      	str	r3, [sp, #40]	@ 0x28
 800896a:	eba3 0309 	sub.w	r3, r3, r9
 800896e:	455b      	cmp	r3, fp
 8008970:	dc31      	bgt.n	80089d6 <_printf_float+0x372>
 8008972:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008974:	459a      	cmp	sl, r3
 8008976:	dc3a      	bgt.n	80089ee <_printf_float+0x38a>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	07da      	lsls	r2, r3, #31
 800897c:	d437      	bmi.n	80089ee <_printf_float+0x38a>
 800897e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008980:	ebaa 0903 	sub.w	r9, sl, r3
 8008984:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008986:	ebaa 0303 	sub.w	r3, sl, r3
 800898a:	4599      	cmp	r9, r3
 800898c:	bfa8      	it	ge
 800898e:	4699      	movge	r9, r3
 8008990:	f1b9 0f00 	cmp.w	r9, #0
 8008994:	dc33      	bgt.n	80089fe <_printf_float+0x39a>
 8008996:	f04f 0800 	mov.w	r8, #0
 800899a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800899e:	f104 0b1a 	add.w	fp, r4, #26
 80089a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089a4:	ebaa 0303 	sub.w	r3, sl, r3
 80089a8:	eba3 0309 	sub.w	r3, r3, r9
 80089ac:	4543      	cmp	r3, r8
 80089ae:	f77f af7a 	ble.w	80088a6 <_printf_float+0x242>
 80089b2:	2301      	movs	r3, #1
 80089b4:	465a      	mov	r2, fp
 80089b6:	4631      	mov	r1, r6
 80089b8:	4628      	mov	r0, r5
 80089ba:	47b8      	blx	r7
 80089bc:	3001      	adds	r0, #1
 80089be:	f43f aeac 	beq.w	800871a <_printf_float+0xb6>
 80089c2:	f108 0801 	add.w	r8, r8, #1
 80089c6:	e7ec      	b.n	80089a2 <_printf_float+0x33e>
 80089c8:	4642      	mov	r2, r8
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	d1c2      	bne.n	800895a <_printf_float+0x2f6>
 80089d4:	e6a1      	b.n	800871a <_printf_float+0xb6>
 80089d6:	2301      	movs	r3, #1
 80089d8:	4631      	mov	r1, r6
 80089da:	4628      	mov	r0, r5
 80089dc:	920a      	str	r2, [sp, #40]	@ 0x28
 80089de:	47b8      	blx	r7
 80089e0:	3001      	adds	r0, #1
 80089e2:	f43f ae9a 	beq.w	800871a <_printf_float+0xb6>
 80089e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80089e8:	f10b 0b01 	add.w	fp, fp, #1
 80089ec:	e7bb      	b.n	8008966 <_printf_float+0x302>
 80089ee:	4631      	mov	r1, r6
 80089f0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	d1c0      	bne.n	800897e <_printf_float+0x31a>
 80089fc:	e68d      	b.n	800871a <_printf_float+0xb6>
 80089fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a00:	464b      	mov	r3, r9
 8008a02:	4631      	mov	r1, r6
 8008a04:	4628      	mov	r0, r5
 8008a06:	4442      	add	r2, r8
 8008a08:	47b8      	blx	r7
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	d1c3      	bne.n	8008996 <_printf_float+0x332>
 8008a0e:	e684      	b.n	800871a <_printf_float+0xb6>
 8008a10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008a14:	f1ba 0f01 	cmp.w	sl, #1
 8008a18:	dc01      	bgt.n	8008a1e <_printf_float+0x3ba>
 8008a1a:	07db      	lsls	r3, r3, #31
 8008a1c:	d536      	bpl.n	8008a8c <_printf_float+0x428>
 8008a1e:	2301      	movs	r3, #1
 8008a20:	4642      	mov	r2, r8
 8008a22:	4631      	mov	r1, r6
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b8      	blx	r7
 8008a28:	3001      	adds	r0, #1
 8008a2a:	f43f ae76 	beq.w	800871a <_printf_float+0xb6>
 8008a2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008a32:	4631      	mov	r1, r6
 8008a34:	4628      	mov	r0, r5
 8008a36:	47b8      	blx	r7
 8008a38:	3001      	adds	r0, #1
 8008a3a:	f43f ae6e 	beq.w	800871a <_printf_float+0xb6>
 8008a3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a42:	2200      	movs	r2, #0
 8008a44:	2300      	movs	r3, #0
 8008a46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4a:	f7f7 ffad 	bl	80009a8 <__aeabi_dcmpeq>
 8008a4e:	b9c0      	cbnz	r0, 8008a82 <_printf_float+0x41e>
 8008a50:	4653      	mov	r3, sl
 8008a52:	f108 0201 	add.w	r2, r8, #1
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d10c      	bne.n	8008a7a <_printf_float+0x416>
 8008a60:	e65b      	b.n	800871a <_printf_float+0xb6>
 8008a62:	2301      	movs	r3, #1
 8008a64:	465a      	mov	r2, fp
 8008a66:	4631      	mov	r1, r6
 8008a68:	4628      	mov	r0, r5
 8008a6a:	47b8      	blx	r7
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	f43f ae54 	beq.w	800871a <_printf_float+0xb6>
 8008a72:	f108 0801 	add.w	r8, r8, #1
 8008a76:	45d0      	cmp	r8, sl
 8008a78:	dbf3      	blt.n	8008a62 <_printf_float+0x3fe>
 8008a7a:	464b      	mov	r3, r9
 8008a7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a80:	e6e0      	b.n	8008844 <_printf_float+0x1e0>
 8008a82:	f04f 0800 	mov.w	r8, #0
 8008a86:	f104 0b1a 	add.w	fp, r4, #26
 8008a8a:	e7f4      	b.n	8008a76 <_printf_float+0x412>
 8008a8c:	2301      	movs	r3, #1
 8008a8e:	4642      	mov	r2, r8
 8008a90:	e7e1      	b.n	8008a56 <_printf_float+0x3f2>
 8008a92:	2301      	movs	r3, #1
 8008a94:	464a      	mov	r2, r9
 8008a96:	4631      	mov	r1, r6
 8008a98:	4628      	mov	r0, r5
 8008a9a:	47b8      	blx	r7
 8008a9c:	3001      	adds	r0, #1
 8008a9e:	f43f ae3c 	beq.w	800871a <_printf_float+0xb6>
 8008aa2:	f108 0801 	add.w	r8, r8, #1
 8008aa6:	68e3      	ldr	r3, [r4, #12]
 8008aa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008aaa:	1a5b      	subs	r3, r3, r1
 8008aac:	4543      	cmp	r3, r8
 8008aae:	dcf0      	bgt.n	8008a92 <_printf_float+0x42e>
 8008ab0:	e6fd      	b.n	80088ae <_printf_float+0x24a>
 8008ab2:	f04f 0800 	mov.w	r8, #0
 8008ab6:	f104 0919 	add.w	r9, r4, #25
 8008aba:	e7f4      	b.n	8008aa6 <_printf_float+0x442>

08008abc <_printf_common>:
 8008abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ac0:	4616      	mov	r6, r2
 8008ac2:	4698      	mov	r8, r3
 8008ac4:	688a      	ldr	r2, [r1, #8]
 8008ac6:	690b      	ldr	r3, [r1, #16]
 8008ac8:	4607      	mov	r7, r0
 8008aca:	4293      	cmp	r3, r2
 8008acc:	bfb8      	it	lt
 8008ace:	4613      	movlt	r3, r2
 8008ad0:	6033      	str	r3, [r6, #0]
 8008ad2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ad6:	460c      	mov	r4, r1
 8008ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008adc:	b10a      	cbz	r2, 8008ae2 <_printf_common+0x26>
 8008ade:	3301      	adds	r3, #1
 8008ae0:	6033      	str	r3, [r6, #0]
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	0699      	lsls	r1, r3, #26
 8008ae6:	bf42      	ittt	mi
 8008ae8:	6833      	ldrmi	r3, [r6, #0]
 8008aea:	3302      	addmi	r3, #2
 8008aec:	6033      	strmi	r3, [r6, #0]
 8008aee:	6825      	ldr	r5, [r4, #0]
 8008af0:	f015 0506 	ands.w	r5, r5, #6
 8008af4:	d106      	bne.n	8008b04 <_printf_common+0x48>
 8008af6:	f104 0a19 	add.w	sl, r4, #25
 8008afa:	68e3      	ldr	r3, [r4, #12]
 8008afc:	6832      	ldr	r2, [r6, #0]
 8008afe:	1a9b      	subs	r3, r3, r2
 8008b00:	42ab      	cmp	r3, r5
 8008b02:	dc2b      	bgt.n	8008b5c <_printf_common+0xa0>
 8008b04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008b08:	6822      	ldr	r2, [r4, #0]
 8008b0a:	3b00      	subs	r3, #0
 8008b0c:	bf18      	it	ne
 8008b0e:	2301      	movne	r3, #1
 8008b10:	0692      	lsls	r2, r2, #26
 8008b12:	d430      	bmi.n	8008b76 <_printf_common+0xba>
 8008b14:	4641      	mov	r1, r8
 8008b16:	4638      	mov	r0, r7
 8008b18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008b1c:	47c8      	blx	r9
 8008b1e:	3001      	adds	r0, #1
 8008b20:	d023      	beq.n	8008b6a <_printf_common+0xae>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	6922      	ldr	r2, [r4, #16]
 8008b26:	f003 0306 	and.w	r3, r3, #6
 8008b2a:	2b04      	cmp	r3, #4
 8008b2c:	bf14      	ite	ne
 8008b2e:	2500      	movne	r5, #0
 8008b30:	6833      	ldreq	r3, [r6, #0]
 8008b32:	f04f 0600 	mov.w	r6, #0
 8008b36:	bf08      	it	eq
 8008b38:	68e5      	ldreq	r5, [r4, #12]
 8008b3a:	f104 041a 	add.w	r4, r4, #26
 8008b3e:	bf08      	it	eq
 8008b40:	1aed      	subeq	r5, r5, r3
 8008b42:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008b46:	bf08      	it	eq
 8008b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	bfc4      	itt	gt
 8008b50:	1a9b      	subgt	r3, r3, r2
 8008b52:	18ed      	addgt	r5, r5, r3
 8008b54:	42b5      	cmp	r5, r6
 8008b56:	d11a      	bne.n	8008b8e <_printf_common+0xd2>
 8008b58:	2000      	movs	r0, #0
 8008b5a:	e008      	b.n	8008b6e <_printf_common+0xb2>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4652      	mov	r2, sl
 8008b60:	4641      	mov	r1, r8
 8008b62:	4638      	mov	r0, r7
 8008b64:	47c8      	blx	r9
 8008b66:	3001      	adds	r0, #1
 8008b68:	d103      	bne.n	8008b72 <_printf_common+0xb6>
 8008b6a:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b72:	3501      	adds	r5, #1
 8008b74:	e7c1      	b.n	8008afa <_printf_common+0x3e>
 8008b76:	2030      	movs	r0, #48	@ 0x30
 8008b78:	18e1      	adds	r1, r4, r3
 8008b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b7e:	1c5a      	adds	r2, r3, #1
 8008b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b84:	4422      	add	r2, r4
 8008b86:	3302      	adds	r3, #2
 8008b88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b8c:	e7c2      	b.n	8008b14 <_printf_common+0x58>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4622      	mov	r2, r4
 8008b92:	4641      	mov	r1, r8
 8008b94:	4638      	mov	r0, r7
 8008b96:	47c8      	blx	r9
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d0e6      	beq.n	8008b6a <_printf_common+0xae>
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	e7d9      	b.n	8008b54 <_printf_common+0x98>

08008ba0 <_printf_i>:
 8008ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ba4:	7e0f      	ldrb	r7, [r1, #24]
 8008ba6:	4691      	mov	r9, r2
 8008ba8:	2f78      	cmp	r7, #120	@ 0x78
 8008baa:	4680      	mov	r8, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	469a      	mov	sl, r3
 8008bb0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008bb6:	d807      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bb8:	2f62      	cmp	r7, #98	@ 0x62
 8008bba:	d80a      	bhi.n	8008bd2 <_printf_i+0x32>
 8008bbc:	2f00      	cmp	r7, #0
 8008bbe:	f000 80d3 	beq.w	8008d68 <_printf_i+0x1c8>
 8008bc2:	2f58      	cmp	r7, #88	@ 0x58
 8008bc4:	f000 80ba 	beq.w	8008d3c <_printf_i+0x19c>
 8008bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008bd0:	e03a      	b.n	8008c48 <_printf_i+0xa8>
 8008bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008bd6:	2b15      	cmp	r3, #21
 8008bd8:	d8f6      	bhi.n	8008bc8 <_printf_i+0x28>
 8008bda:	a101      	add	r1, pc, #4	@ (adr r1, 8008be0 <_printf_i+0x40>)
 8008bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008be0:	08008c39 	.word	0x08008c39
 8008be4:	08008c4d 	.word	0x08008c4d
 8008be8:	08008bc9 	.word	0x08008bc9
 8008bec:	08008bc9 	.word	0x08008bc9
 8008bf0:	08008bc9 	.word	0x08008bc9
 8008bf4:	08008bc9 	.word	0x08008bc9
 8008bf8:	08008c4d 	.word	0x08008c4d
 8008bfc:	08008bc9 	.word	0x08008bc9
 8008c00:	08008bc9 	.word	0x08008bc9
 8008c04:	08008bc9 	.word	0x08008bc9
 8008c08:	08008bc9 	.word	0x08008bc9
 8008c0c:	08008d4f 	.word	0x08008d4f
 8008c10:	08008c77 	.word	0x08008c77
 8008c14:	08008d09 	.word	0x08008d09
 8008c18:	08008bc9 	.word	0x08008bc9
 8008c1c:	08008bc9 	.word	0x08008bc9
 8008c20:	08008d71 	.word	0x08008d71
 8008c24:	08008bc9 	.word	0x08008bc9
 8008c28:	08008c77 	.word	0x08008c77
 8008c2c:	08008bc9 	.word	0x08008bc9
 8008c30:	08008bc9 	.word	0x08008bc9
 8008c34:	08008d11 	.word	0x08008d11
 8008c38:	6833      	ldr	r3, [r6, #0]
 8008c3a:	1d1a      	adds	r2, r3, #4
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	6032      	str	r2, [r6, #0]
 8008c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e09e      	b.n	8008d8a <_printf_i+0x1ea>
 8008c4c:	6833      	ldr	r3, [r6, #0]
 8008c4e:	6820      	ldr	r0, [r4, #0]
 8008c50:	1d19      	adds	r1, r3, #4
 8008c52:	6031      	str	r1, [r6, #0]
 8008c54:	0606      	lsls	r6, r0, #24
 8008c56:	d501      	bpl.n	8008c5c <_printf_i+0xbc>
 8008c58:	681d      	ldr	r5, [r3, #0]
 8008c5a:	e003      	b.n	8008c64 <_printf_i+0xc4>
 8008c5c:	0645      	lsls	r5, r0, #25
 8008c5e:	d5fb      	bpl.n	8008c58 <_printf_i+0xb8>
 8008c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c64:	2d00      	cmp	r5, #0
 8008c66:	da03      	bge.n	8008c70 <_printf_i+0xd0>
 8008c68:	232d      	movs	r3, #45	@ 0x2d
 8008c6a:	426d      	negs	r5, r5
 8008c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c70:	230a      	movs	r3, #10
 8008c72:	4859      	ldr	r0, [pc, #356]	@ (8008dd8 <_printf_i+0x238>)
 8008c74:	e011      	b.n	8008c9a <_printf_i+0xfa>
 8008c76:	6821      	ldr	r1, [r4, #0]
 8008c78:	6833      	ldr	r3, [r6, #0]
 8008c7a:	0608      	lsls	r0, r1, #24
 8008c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c80:	d402      	bmi.n	8008c88 <_printf_i+0xe8>
 8008c82:	0649      	lsls	r1, r1, #25
 8008c84:	bf48      	it	mi
 8008c86:	b2ad      	uxthmi	r5, r5
 8008c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c8a:	6033      	str	r3, [r6, #0]
 8008c8c:	bf14      	ite	ne
 8008c8e:	230a      	movne	r3, #10
 8008c90:	2308      	moveq	r3, #8
 8008c92:	4851      	ldr	r0, [pc, #324]	@ (8008dd8 <_printf_i+0x238>)
 8008c94:	2100      	movs	r1, #0
 8008c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c9a:	6866      	ldr	r6, [r4, #4]
 8008c9c:	2e00      	cmp	r6, #0
 8008c9e:	bfa8      	it	ge
 8008ca0:	6821      	ldrge	r1, [r4, #0]
 8008ca2:	60a6      	str	r6, [r4, #8]
 8008ca4:	bfa4      	itt	ge
 8008ca6:	f021 0104 	bicge.w	r1, r1, #4
 8008caa:	6021      	strge	r1, [r4, #0]
 8008cac:	b90d      	cbnz	r5, 8008cb2 <_printf_i+0x112>
 8008cae:	2e00      	cmp	r6, #0
 8008cb0:	d04b      	beq.n	8008d4a <_printf_i+0x1aa>
 8008cb2:	4616      	mov	r6, r2
 8008cb4:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cb8:	fb03 5711 	mls	r7, r3, r1, r5
 8008cbc:	5dc7      	ldrb	r7, [r0, r7]
 8008cbe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cc2:	462f      	mov	r7, r5
 8008cc4:	42bb      	cmp	r3, r7
 8008cc6:	460d      	mov	r5, r1
 8008cc8:	d9f4      	bls.n	8008cb4 <_printf_i+0x114>
 8008cca:	2b08      	cmp	r3, #8
 8008ccc:	d10b      	bne.n	8008ce6 <_printf_i+0x146>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	07df      	lsls	r7, r3, #31
 8008cd2:	d508      	bpl.n	8008ce6 <_printf_i+0x146>
 8008cd4:	6923      	ldr	r3, [r4, #16]
 8008cd6:	6861      	ldr	r1, [r4, #4]
 8008cd8:	4299      	cmp	r1, r3
 8008cda:	bfde      	ittt	le
 8008cdc:	2330      	movle	r3, #48	@ 0x30
 8008cde:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ce2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008ce6:	1b92      	subs	r2, r2, r6
 8008ce8:	6122      	str	r2, [r4, #16]
 8008cea:	464b      	mov	r3, r9
 8008cec:	4621      	mov	r1, r4
 8008cee:	4640      	mov	r0, r8
 8008cf0:	f8cd a000 	str.w	sl, [sp]
 8008cf4:	aa03      	add	r2, sp, #12
 8008cf6:	f7ff fee1 	bl	8008abc <_printf_common>
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	d14a      	bne.n	8008d94 <_printf_i+0x1f4>
 8008cfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008d02:	b004      	add	sp, #16
 8008d04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f043 0320 	orr.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	2778      	movs	r7, #120	@ 0x78
 8008d12:	4832      	ldr	r0, [pc, #200]	@ (8008ddc <_printf_i+0x23c>)
 8008d14:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	6831      	ldr	r1, [r6, #0]
 8008d1c:	061f      	lsls	r7, r3, #24
 8008d1e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008d22:	d402      	bmi.n	8008d2a <_printf_i+0x18a>
 8008d24:	065f      	lsls	r7, r3, #25
 8008d26:	bf48      	it	mi
 8008d28:	b2ad      	uxthmi	r5, r5
 8008d2a:	6031      	str	r1, [r6, #0]
 8008d2c:	07d9      	lsls	r1, r3, #31
 8008d2e:	bf44      	itt	mi
 8008d30:	f043 0320 	orrmi.w	r3, r3, #32
 8008d34:	6023      	strmi	r3, [r4, #0]
 8008d36:	b11d      	cbz	r5, 8008d40 <_printf_i+0x1a0>
 8008d38:	2310      	movs	r3, #16
 8008d3a:	e7ab      	b.n	8008c94 <_printf_i+0xf4>
 8008d3c:	4826      	ldr	r0, [pc, #152]	@ (8008dd8 <_printf_i+0x238>)
 8008d3e:	e7e9      	b.n	8008d14 <_printf_i+0x174>
 8008d40:	6823      	ldr	r3, [r4, #0]
 8008d42:	f023 0320 	bic.w	r3, r3, #32
 8008d46:	6023      	str	r3, [r4, #0]
 8008d48:	e7f6      	b.n	8008d38 <_printf_i+0x198>
 8008d4a:	4616      	mov	r6, r2
 8008d4c:	e7bd      	b.n	8008cca <_printf_i+0x12a>
 8008d4e:	6833      	ldr	r3, [r6, #0]
 8008d50:	6825      	ldr	r5, [r4, #0]
 8008d52:	1d18      	adds	r0, r3, #4
 8008d54:	6961      	ldr	r1, [r4, #20]
 8008d56:	6030      	str	r0, [r6, #0]
 8008d58:	062e      	lsls	r6, r5, #24
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	d501      	bpl.n	8008d62 <_printf_i+0x1c2>
 8008d5e:	6019      	str	r1, [r3, #0]
 8008d60:	e002      	b.n	8008d68 <_printf_i+0x1c8>
 8008d62:	0668      	lsls	r0, r5, #25
 8008d64:	d5fb      	bpl.n	8008d5e <_printf_i+0x1be>
 8008d66:	8019      	strh	r1, [r3, #0]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	4616      	mov	r6, r2
 8008d6c:	6123      	str	r3, [r4, #16]
 8008d6e:	e7bc      	b.n	8008cea <_printf_i+0x14a>
 8008d70:	6833      	ldr	r3, [r6, #0]
 8008d72:	2100      	movs	r1, #0
 8008d74:	1d1a      	adds	r2, r3, #4
 8008d76:	6032      	str	r2, [r6, #0]
 8008d78:	681e      	ldr	r6, [r3, #0]
 8008d7a:	6862      	ldr	r2, [r4, #4]
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f000 fa5e 	bl	800923e <memchr>
 8008d82:	b108      	cbz	r0, 8008d88 <_printf_i+0x1e8>
 8008d84:	1b80      	subs	r0, r0, r6
 8008d86:	6060      	str	r0, [r4, #4]
 8008d88:	6863      	ldr	r3, [r4, #4]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d92:	e7aa      	b.n	8008cea <_printf_i+0x14a>
 8008d94:	4632      	mov	r2, r6
 8008d96:	4649      	mov	r1, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	47d0      	blx	sl
 8008d9e:	3001      	adds	r0, #1
 8008da0:	d0ad      	beq.n	8008cfe <_printf_i+0x15e>
 8008da2:	6823      	ldr	r3, [r4, #0]
 8008da4:	079b      	lsls	r3, r3, #30
 8008da6:	d413      	bmi.n	8008dd0 <_printf_i+0x230>
 8008da8:	68e0      	ldr	r0, [r4, #12]
 8008daa:	9b03      	ldr	r3, [sp, #12]
 8008dac:	4298      	cmp	r0, r3
 8008dae:	bfb8      	it	lt
 8008db0:	4618      	movlt	r0, r3
 8008db2:	e7a6      	b.n	8008d02 <_printf_i+0x162>
 8008db4:	2301      	movs	r3, #1
 8008db6:	4632      	mov	r2, r6
 8008db8:	4649      	mov	r1, r9
 8008dba:	4640      	mov	r0, r8
 8008dbc:	47d0      	blx	sl
 8008dbe:	3001      	adds	r0, #1
 8008dc0:	d09d      	beq.n	8008cfe <_printf_i+0x15e>
 8008dc2:	3501      	adds	r5, #1
 8008dc4:	68e3      	ldr	r3, [r4, #12]
 8008dc6:	9903      	ldr	r1, [sp, #12]
 8008dc8:	1a5b      	subs	r3, r3, r1
 8008dca:	42ab      	cmp	r3, r5
 8008dcc:	dcf2      	bgt.n	8008db4 <_printf_i+0x214>
 8008dce:	e7eb      	b.n	8008da8 <_printf_i+0x208>
 8008dd0:	2500      	movs	r5, #0
 8008dd2:	f104 0619 	add.w	r6, r4, #25
 8008dd6:	e7f5      	b.n	8008dc4 <_printf_i+0x224>
 8008dd8:	0800bbc8 	.word	0x0800bbc8
 8008ddc:	0800bbd9 	.word	0x0800bbd9

08008de0 <std>:
 8008de0:	2300      	movs	r3, #0
 8008de2:	b510      	push	{r4, lr}
 8008de4:	4604      	mov	r4, r0
 8008de6:	e9c0 3300 	strd	r3, r3, [r0]
 8008dea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008dee:	6083      	str	r3, [r0, #8]
 8008df0:	8181      	strh	r1, [r0, #12]
 8008df2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008df4:	81c2      	strh	r2, [r0, #14]
 8008df6:	6183      	str	r3, [r0, #24]
 8008df8:	4619      	mov	r1, r3
 8008dfa:	2208      	movs	r2, #8
 8008dfc:	305c      	adds	r0, #92	@ 0x5c
 8008dfe:	f000 f948 	bl	8009092 <memset>
 8008e02:	4b0d      	ldr	r3, [pc, #52]	@ (8008e38 <std+0x58>)
 8008e04:	6224      	str	r4, [r4, #32]
 8008e06:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e08:	4b0c      	ldr	r3, [pc, #48]	@ (8008e3c <std+0x5c>)
 8008e0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e40 <std+0x60>)
 8008e0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e10:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <std+0x64>)
 8008e12:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e14:	4b0c      	ldr	r3, [pc, #48]	@ (8008e48 <std+0x68>)
 8008e16:	429c      	cmp	r4, r3
 8008e18:	d006      	beq.n	8008e28 <std+0x48>
 8008e1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e1e:	4294      	cmp	r4, r2
 8008e20:	d002      	beq.n	8008e28 <std+0x48>
 8008e22:	33d0      	adds	r3, #208	@ 0xd0
 8008e24:	429c      	cmp	r4, r3
 8008e26:	d105      	bne.n	8008e34 <std+0x54>
 8008e28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e30:	f000 ba02 	b.w	8009238 <__retarget_lock_init_recursive>
 8008e34:	bd10      	pop	{r4, pc}
 8008e36:	bf00      	nop
 8008e38:	0800900d 	.word	0x0800900d
 8008e3c:	0800902f 	.word	0x0800902f
 8008e40:	08009067 	.word	0x08009067
 8008e44:	0800908b 	.word	0x0800908b
 8008e48:	200034ec 	.word	0x200034ec

08008e4c <stdio_exit_handler>:
 8008e4c:	4a02      	ldr	r2, [pc, #8]	@ (8008e58 <stdio_exit_handler+0xc>)
 8008e4e:	4903      	ldr	r1, [pc, #12]	@ (8008e5c <stdio_exit_handler+0x10>)
 8008e50:	4803      	ldr	r0, [pc, #12]	@ (8008e60 <stdio_exit_handler+0x14>)
 8008e52:	f000 b869 	b.w	8008f28 <_fwalk_sglue>
 8008e56:	bf00      	nop
 8008e58:	20000018 	.word	0x20000018
 8008e5c:	0800abc5 	.word	0x0800abc5
 8008e60:	20000028 	.word	0x20000028

08008e64 <cleanup_stdio>:
 8008e64:	6841      	ldr	r1, [r0, #4]
 8008e66:	4b0c      	ldr	r3, [pc, #48]	@ (8008e98 <cleanup_stdio+0x34>)
 8008e68:	b510      	push	{r4, lr}
 8008e6a:	4299      	cmp	r1, r3
 8008e6c:	4604      	mov	r4, r0
 8008e6e:	d001      	beq.n	8008e74 <cleanup_stdio+0x10>
 8008e70:	f001 fea8 	bl	800abc4 <_fflush_r>
 8008e74:	68a1      	ldr	r1, [r4, #8]
 8008e76:	4b09      	ldr	r3, [pc, #36]	@ (8008e9c <cleanup_stdio+0x38>)
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	d002      	beq.n	8008e82 <cleanup_stdio+0x1e>
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f001 fea1 	bl	800abc4 <_fflush_r>
 8008e82:	68e1      	ldr	r1, [r4, #12]
 8008e84:	4b06      	ldr	r3, [pc, #24]	@ (8008ea0 <cleanup_stdio+0x3c>)
 8008e86:	4299      	cmp	r1, r3
 8008e88:	d004      	beq.n	8008e94 <cleanup_stdio+0x30>
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e90:	f001 be98 	b.w	800abc4 <_fflush_r>
 8008e94:	bd10      	pop	{r4, pc}
 8008e96:	bf00      	nop
 8008e98:	200034ec 	.word	0x200034ec
 8008e9c:	20003554 	.word	0x20003554
 8008ea0:	200035bc 	.word	0x200035bc

08008ea4 <global_stdio_init.part.0>:
 8008ea4:	b510      	push	{r4, lr}
 8008ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8008ed4 <global_stdio_init.part.0+0x30>)
 8008ea8:	4c0b      	ldr	r4, [pc, #44]	@ (8008ed8 <global_stdio_init.part.0+0x34>)
 8008eaa:	4a0c      	ldr	r2, [pc, #48]	@ (8008edc <global_stdio_init.part.0+0x38>)
 8008eac:	4620      	mov	r0, r4
 8008eae:	601a      	str	r2, [r3, #0]
 8008eb0:	2104      	movs	r1, #4
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f7ff ff94 	bl	8008de0 <std>
 8008eb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	2109      	movs	r1, #9
 8008ec0:	f7ff ff8e 	bl	8008de0 <std>
 8008ec4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ec8:	2202      	movs	r2, #2
 8008eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ece:	2112      	movs	r1, #18
 8008ed0:	f7ff bf86 	b.w	8008de0 <std>
 8008ed4:	20003624 	.word	0x20003624
 8008ed8:	200034ec 	.word	0x200034ec
 8008edc:	08008e4d 	.word	0x08008e4d

08008ee0 <__sfp_lock_acquire>:
 8008ee0:	4801      	ldr	r0, [pc, #4]	@ (8008ee8 <__sfp_lock_acquire+0x8>)
 8008ee2:	f000 b9aa 	b.w	800923a <__retarget_lock_acquire_recursive>
 8008ee6:	bf00      	nop
 8008ee8:	2000362d 	.word	0x2000362d

08008eec <__sfp_lock_release>:
 8008eec:	4801      	ldr	r0, [pc, #4]	@ (8008ef4 <__sfp_lock_release+0x8>)
 8008eee:	f000 b9a5 	b.w	800923c <__retarget_lock_release_recursive>
 8008ef2:	bf00      	nop
 8008ef4:	2000362d 	.word	0x2000362d

08008ef8 <__sinit>:
 8008ef8:	b510      	push	{r4, lr}
 8008efa:	4604      	mov	r4, r0
 8008efc:	f7ff fff0 	bl	8008ee0 <__sfp_lock_acquire>
 8008f00:	6a23      	ldr	r3, [r4, #32]
 8008f02:	b11b      	cbz	r3, 8008f0c <__sinit+0x14>
 8008f04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f08:	f7ff bff0 	b.w	8008eec <__sfp_lock_release>
 8008f0c:	4b04      	ldr	r3, [pc, #16]	@ (8008f20 <__sinit+0x28>)
 8008f0e:	6223      	str	r3, [r4, #32]
 8008f10:	4b04      	ldr	r3, [pc, #16]	@ (8008f24 <__sinit+0x2c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1f5      	bne.n	8008f04 <__sinit+0xc>
 8008f18:	f7ff ffc4 	bl	8008ea4 <global_stdio_init.part.0>
 8008f1c:	e7f2      	b.n	8008f04 <__sinit+0xc>
 8008f1e:	bf00      	nop
 8008f20:	08008e65 	.word	0x08008e65
 8008f24:	20003624 	.word	0x20003624

08008f28 <_fwalk_sglue>:
 8008f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f2c:	4607      	mov	r7, r0
 8008f2e:	4688      	mov	r8, r1
 8008f30:	4614      	mov	r4, r2
 8008f32:	2600      	movs	r6, #0
 8008f34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f38:	f1b9 0901 	subs.w	r9, r9, #1
 8008f3c:	d505      	bpl.n	8008f4a <_fwalk_sglue+0x22>
 8008f3e:	6824      	ldr	r4, [r4, #0]
 8008f40:	2c00      	cmp	r4, #0
 8008f42:	d1f7      	bne.n	8008f34 <_fwalk_sglue+0xc>
 8008f44:	4630      	mov	r0, r6
 8008f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f4a:	89ab      	ldrh	r3, [r5, #12]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d907      	bls.n	8008f60 <_fwalk_sglue+0x38>
 8008f50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f54:	3301      	adds	r3, #1
 8008f56:	d003      	beq.n	8008f60 <_fwalk_sglue+0x38>
 8008f58:	4629      	mov	r1, r5
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	4306      	orrs	r6, r0
 8008f60:	3568      	adds	r5, #104	@ 0x68
 8008f62:	e7e9      	b.n	8008f38 <_fwalk_sglue+0x10>

08008f64 <sniprintf>:
 8008f64:	b40c      	push	{r2, r3}
 8008f66:	b530      	push	{r4, r5, lr}
 8008f68:	4b17      	ldr	r3, [pc, #92]	@ (8008fc8 <sniprintf+0x64>)
 8008f6a:	1e0c      	subs	r4, r1, #0
 8008f6c:	681d      	ldr	r5, [r3, #0]
 8008f6e:	b09d      	sub	sp, #116	@ 0x74
 8008f70:	da08      	bge.n	8008f84 <sniprintf+0x20>
 8008f72:	238b      	movs	r3, #139	@ 0x8b
 8008f74:	f04f 30ff 	mov.w	r0, #4294967295
 8008f78:	602b      	str	r3, [r5, #0]
 8008f7a:	b01d      	add	sp, #116	@ 0x74
 8008f7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f80:	b002      	add	sp, #8
 8008f82:	4770      	bx	lr
 8008f84:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008f88:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008f8c:	bf0c      	ite	eq
 8008f8e:	4623      	moveq	r3, r4
 8008f90:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	9307      	str	r3, [sp, #28]
 8008f98:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008f9c:	9002      	str	r0, [sp, #8]
 8008f9e:	9006      	str	r0, [sp, #24]
 8008fa0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	ab21      	add	r3, sp, #132	@ 0x84
 8008fa8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008faa:	a902      	add	r1, sp, #8
 8008fac:	9301      	str	r3, [sp, #4]
 8008fae:	f001 fc8d 	bl	800a8cc <_svfiprintf_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	bfbc      	itt	lt
 8008fb6:	238b      	movlt	r3, #139	@ 0x8b
 8008fb8:	602b      	strlt	r3, [r5, #0]
 8008fba:	2c00      	cmp	r4, #0
 8008fbc:	d0dd      	beq.n	8008f7a <sniprintf+0x16>
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	9b02      	ldr	r3, [sp, #8]
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	e7d9      	b.n	8008f7a <sniprintf+0x16>
 8008fc6:	bf00      	nop
 8008fc8:	20000024 	.word	0x20000024

08008fcc <siprintf>:
 8008fcc:	b40e      	push	{r1, r2, r3}
 8008fce:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fd2:	b500      	push	{lr}
 8008fd4:	b09c      	sub	sp, #112	@ 0x70
 8008fd6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fd8:	9002      	str	r0, [sp, #8]
 8008fda:	9006      	str	r0, [sp, #24]
 8008fdc:	9107      	str	r1, [sp, #28]
 8008fde:	9104      	str	r1, [sp, #16]
 8008fe0:	4808      	ldr	r0, [pc, #32]	@ (8009004 <siprintf+0x38>)
 8008fe2:	4909      	ldr	r1, [pc, #36]	@ (8009008 <siprintf+0x3c>)
 8008fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fe8:	9105      	str	r1, [sp, #20]
 8008fea:	6800      	ldr	r0, [r0, #0]
 8008fec:	a902      	add	r1, sp, #8
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	f001 fc6c 	bl	800a8cc <_svfiprintf_r>
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	9b02      	ldr	r3, [sp, #8]
 8008ff8:	701a      	strb	r2, [r3, #0]
 8008ffa:	b01c      	add	sp, #112	@ 0x70
 8008ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009000:	b003      	add	sp, #12
 8009002:	4770      	bx	lr
 8009004:	20000024 	.word	0x20000024
 8009008:	ffff0208 	.word	0xffff0208

0800900c <__sread>:
 800900c:	b510      	push	{r4, lr}
 800900e:	460c      	mov	r4, r1
 8009010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009014:	f000 f8c2 	bl	800919c <_read_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	bfab      	itete	ge
 800901c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800901e:	89a3      	ldrhlt	r3, [r4, #12]
 8009020:	181b      	addge	r3, r3, r0
 8009022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009026:	bfac      	ite	ge
 8009028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800902a:	81a3      	strhlt	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__swrite>:
 800902e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009032:	461f      	mov	r7, r3
 8009034:	898b      	ldrh	r3, [r1, #12]
 8009036:	4605      	mov	r5, r0
 8009038:	05db      	lsls	r3, r3, #23
 800903a:	460c      	mov	r4, r1
 800903c:	4616      	mov	r6, r2
 800903e:	d505      	bpl.n	800904c <__swrite+0x1e>
 8009040:	2302      	movs	r3, #2
 8009042:	2200      	movs	r2, #0
 8009044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009048:	f000 f896 	bl	8009178 <_lseek_r>
 800904c:	89a3      	ldrh	r3, [r4, #12]
 800904e:	4632      	mov	r2, r6
 8009050:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009054:	81a3      	strh	r3, [r4, #12]
 8009056:	4628      	mov	r0, r5
 8009058:	463b      	mov	r3, r7
 800905a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009062:	f000 b8ad 	b.w	80091c0 <_write_r>

08009066 <__sseek>:
 8009066:	b510      	push	{r4, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800906e:	f000 f883 	bl	8009178 <_lseek_r>
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	89a3      	ldrh	r3, [r4, #12]
 8009076:	bf15      	itete	ne
 8009078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800907a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800907e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009082:	81a3      	strheq	r3, [r4, #12]
 8009084:	bf18      	it	ne
 8009086:	81a3      	strhne	r3, [r4, #12]
 8009088:	bd10      	pop	{r4, pc}

0800908a <__sclose>:
 800908a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800908e:	f000 b80d 	b.w	80090ac <_close_r>

08009092 <memset>:
 8009092:	4603      	mov	r3, r0
 8009094:	4402      	add	r2, r0
 8009096:	4293      	cmp	r3, r2
 8009098:	d100      	bne.n	800909c <memset+0xa>
 800909a:	4770      	bx	lr
 800909c:	f803 1b01 	strb.w	r1, [r3], #1
 80090a0:	e7f9      	b.n	8009096 <memset+0x4>
	...

080090a4 <_localeconv_r>:
 80090a4:	4800      	ldr	r0, [pc, #0]	@ (80090a8 <_localeconv_r+0x4>)
 80090a6:	4770      	bx	lr
 80090a8:	20000164 	.word	0x20000164

080090ac <_close_r>:
 80090ac:	b538      	push	{r3, r4, r5, lr}
 80090ae:	2300      	movs	r3, #0
 80090b0:	4d05      	ldr	r5, [pc, #20]	@ (80090c8 <_close_r+0x1c>)
 80090b2:	4604      	mov	r4, r0
 80090b4:	4608      	mov	r0, r1
 80090b6:	602b      	str	r3, [r5, #0]
 80090b8:	f7f8 fff3 	bl	80020a2 <_close>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	d102      	bne.n	80090c6 <_close_r+0x1a>
 80090c0:	682b      	ldr	r3, [r5, #0]
 80090c2:	b103      	cbz	r3, 80090c6 <_close_r+0x1a>
 80090c4:	6023      	str	r3, [r4, #0]
 80090c6:	bd38      	pop	{r3, r4, r5, pc}
 80090c8:	20003628 	.word	0x20003628

080090cc <_reclaim_reent>:
 80090cc:	4b29      	ldr	r3, [pc, #164]	@ (8009174 <_reclaim_reent+0xa8>)
 80090ce:	b570      	push	{r4, r5, r6, lr}
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4604      	mov	r4, r0
 80090d4:	4283      	cmp	r3, r0
 80090d6:	d04b      	beq.n	8009170 <_reclaim_reent+0xa4>
 80090d8:	69c3      	ldr	r3, [r0, #28]
 80090da:	b1ab      	cbz	r3, 8009108 <_reclaim_reent+0x3c>
 80090dc:	68db      	ldr	r3, [r3, #12]
 80090de:	b16b      	cbz	r3, 80090fc <_reclaim_reent+0x30>
 80090e0:	2500      	movs	r5, #0
 80090e2:	69e3      	ldr	r3, [r4, #28]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	5959      	ldr	r1, [r3, r5]
 80090e8:	2900      	cmp	r1, #0
 80090ea:	d13b      	bne.n	8009164 <_reclaim_reent+0x98>
 80090ec:	3504      	adds	r5, #4
 80090ee:	2d80      	cmp	r5, #128	@ 0x80
 80090f0:	d1f7      	bne.n	80090e2 <_reclaim_reent+0x16>
 80090f2:	69e3      	ldr	r3, [r4, #28]
 80090f4:	4620      	mov	r0, r4
 80090f6:	68d9      	ldr	r1, [r3, #12]
 80090f8:	f000 ff0e 	bl	8009f18 <_free_r>
 80090fc:	69e3      	ldr	r3, [r4, #28]
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	b111      	cbz	r1, 8009108 <_reclaim_reent+0x3c>
 8009102:	4620      	mov	r0, r4
 8009104:	f000 ff08 	bl	8009f18 <_free_r>
 8009108:	6961      	ldr	r1, [r4, #20]
 800910a:	b111      	cbz	r1, 8009112 <_reclaim_reent+0x46>
 800910c:	4620      	mov	r0, r4
 800910e:	f000 ff03 	bl	8009f18 <_free_r>
 8009112:	69e1      	ldr	r1, [r4, #28]
 8009114:	b111      	cbz	r1, 800911c <_reclaim_reent+0x50>
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fefe 	bl	8009f18 <_free_r>
 800911c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800911e:	b111      	cbz	r1, 8009126 <_reclaim_reent+0x5a>
 8009120:	4620      	mov	r0, r4
 8009122:	f000 fef9 	bl	8009f18 <_free_r>
 8009126:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009128:	b111      	cbz	r1, 8009130 <_reclaim_reent+0x64>
 800912a:	4620      	mov	r0, r4
 800912c:	f000 fef4 	bl	8009f18 <_free_r>
 8009130:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009132:	b111      	cbz	r1, 800913a <_reclaim_reent+0x6e>
 8009134:	4620      	mov	r0, r4
 8009136:	f000 feef 	bl	8009f18 <_free_r>
 800913a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800913c:	b111      	cbz	r1, 8009144 <_reclaim_reent+0x78>
 800913e:	4620      	mov	r0, r4
 8009140:	f000 feea 	bl	8009f18 <_free_r>
 8009144:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009146:	b111      	cbz	r1, 800914e <_reclaim_reent+0x82>
 8009148:	4620      	mov	r0, r4
 800914a:	f000 fee5 	bl	8009f18 <_free_r>
 800914e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009150:	b111      	cbz	r1, 8009158 <_reclaim_reent+0x8c>
 8009152:	4620      	mov	r0, r4
 8009154:	f000 fee0 	bl	8009f18 <_free_r>
 8009158:	6a23      	ldr	r3, [r4, #32]
 800915a:	b14b      	cbz	r3, 8009170 <_reclaim_reent+0xa4>
 800915c:	4620      	mov	r0, r4
 800915e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009162:	4718      	bx	r3
 8009164:	680e      	ldr	r6, [r1, #0]
 8009166:	4620      	mov	r0, r4
 8009168:	f000 fed6 	bl	8009f18 <_free_r>
 800916c:	4631      	mov	r1, r6
 800916e:	e7bb      	b.n	80090e8 <_reclaim_reent+0x1c>
 8009170:	bd70      	pop	{r4, r5, r6, pc}
 8009172:	bf00      	nop
 8009174:	20000024 	.word	0x20000024

08009178 <_lseek_r>:
 8009178:	b538      	push	{r3, r4, r5, lr}
 800917a:	4604      	mov	r4, r0
 800917c:	4608      	mov	r0, r1
 800917e:	4611      	mov	r1, r2
 8009180:	2200      	movs	r2, #0
 8009182:	4d05      	ldr	r5, [pc, #20]	@ (8009198 <_lseek_r+0x20>)
 8009184:	602a      	str	r2, [r5, #0]
 8009186:	461a      	mov	r2, r3
 8009188:	f7f8 ffaf 	bl	80020ea <_lseek>
 800918c:	1c43      	adds	r3, r0, #1
 800918e:	d102      	bne.n	8009196 <_lseek_r+0x1e>
 8009190:	682b      	ldr	r3, [r5, #0]
 8009192:	b103      	cbz	r3, 8009196 <_lseek_r+0x1e>
 8009194:	6023      	str	r3, [r4, #0]
 8009196:	bd38      	pop	{r3, r4, r5, pc}
 8009198:	20003628 	.word	0x20003628

0800919c <_read_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4604      	mov	r4, r0
 80091a0:	4608      	mov	r0, r1
 80091a2:	4611      	mov	r1, r2
 80091a4:	2200      	movs	r2, #0
 80091a6:	4d05      	ldr	r5, [pc, #20]	@ (80091bc <_read_r+0x20>)
 80091a8:	602a      	str	r2, [r5, #0]
 80091aa:	461a      	mov	r2, r3
 80091ac:	f7f8 ff40 	bl	8002030 <_read>
 80091b0:	1c43      	adds	r3, r0, #1
 80091b2:	d102      	bne.n	80091ba <_read_r+0x1e>
 80091b4:	682b      	ldr	r3, [r5, #0]
 80091b6:	b103      	cbz	r3, 80091ba <_read_r+0x1e>
 80091b8:	6023      	str	r3, [r4, #0]
 80091ba:	bd38      	pop	{r3, r4, r5, pc}
 80091bc:	20003628 	.word	0x20003628

080091c0 <_write_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4604      	mov	r4, r0
 80091c4:	4608      	mov	r0, r1
 80091c6:	4611      	mov	r1, r2
 80091c8:	2200      	movs	r2, #0
 80091ca:	4d05      	ldr	r5, [pc, #20]	@ (80091e0 <_write_r+0x20>)
 80091cc:	602a      	str	r2, [r5, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	f7f8 ff4b 	bl	800206a <_write>
 80091d4:	1c43      	adds	r3, r0, #1
 80091d6:	d102      	bne.n	80091de <_write_r+0x1e>
 80091d8:	682b      	ldr	r3, [r5, #0]
 80091da:	b103      	cbz	r3, 80091de <_write_r+0x1e>
 80091dc:	6023      	str	r3, [r4, #0]
 80091de:	bd38      	pop	{r3, r4, r5, pc}
 80091e0:	20003628 	.word	0x20003628

080091e4 <__errno>:
 80091e4:	4b01      	ldr	r3, [pc, #4]	@ (80091ec <__errno+0x8>)
 80091e6:	6818      	ldr	r0, [r3, #0]
 80091e8:	4770      	bx	lr
 80091ea:	bf00      	nop
 80091ec:	20000024 	.word	0x20000024

080091f0 <__libc_init_array>:
 80091f0:	b570      	push	{r4, r5, r6, lr}
 80091f2:	2600      	movs	r6, #0
 80091f4:	4d0c      	ldr	r5, [pc, #48]	@ (8009228 <__libc_init_array+0x38>)
 80091f6:	4c0d      	ldr	r4, [pc, #52]	@ (800922c <__libc_init_array+0x3c>)
 80091f8:	1b64      	subs	r4, r4, r5
 80091fa:	10a4      	asrs	r4, r4, #2
 80091fc:	42a6      	cmp	r6, r4
 80091fe:	d109      	bne.n	8009214 <__libc_init_array+0x24>
 8009200:	f002 f86e 	bl	800b2e0 <_init>
 8009204:	2600      	movs	r6, #0
 8009206:	4d0a      	ldr	r5, [pc, #40]	@ (8009230 <__libc_init_array+0x40>)
 8009208:	4c0a      	ldr	r4, [pc, #40]	@ (8009234 <__libc_init_array+0x44>)
 800920a:	1b64      	subs	r4, r4, r5
 800920c:	10a4      	asrs	r4, r4, #2
 800920e:	42a6      	cmp	r6, r4
 8009210:	d105      	bne.n	800921e <__libc_init_array+0x2e>
 8009212:	bd70      	pop	{r4, r5, r6, pc}
 8009214:	f855 3b04 	ldr.w	r3, [r5], #4
 8009218:	4798      	blx	r3
 800921a:	3601      	adds	r6, #1
 800921c:	e7ee      	b.n	80091fc <__libc_init_array+0xc>
 800921e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009222:	4798      	blx	r3
 8009224:	3601      	adds	r6, #1
 8009226:	e7f2      	b.n	800920e <__libc_init_array+0x1e>
 8009228:	0800bf30 	.word	0x0800bf30
 800922c:	0800bf30 	.word	0x0800bf30
 8009230:	0800bf30 	.word	0x0800bf30
 8009234:	0800bf34 	.word	0x0800bf34

08009238 <__retarget_lock_init_recursive>:
 8009238:	4770      	bx	lr

0800923a <__retarget_lock_acquire_recursive>:
 800923a:	4770      	bx	lr

0800923c <__retarget_lock_release_recursive>:
 800923c:	4770      	bx	lr

0800923e <memchr>:
 800923e:	4603      	mov	r3, r0
 8009240:	b510      	push	{r4, lr}
 8009242:	b2c9      	uxtb	r1, r1
 8009244:	4402      	add	r2, r0
 8009246:	4293      	cmp	r3, r2
 8009248:	4618      	mov	r0, r3
 800924a:	d101      	bne.n	8009250 <memchr+0x12>
 800924c:	2000      	movs	r0, #0
 800924e:	e003      	b.n	8009258 <memchr+0x1a>
 8009250:	7804      	ldrb	r4, [r0, #0]
 8009252:	3301      	adds	r3, #1
 8009254:	428c      	cmp	r4, r1
 8009256:	d1f6      	bne.n	8009246 <memchr+0x8>
 8009258:	bd10      	pop	{r4, pc}

0800925a <memcpy>:
 800925a:	440a      	add	r2, r1
 800925c:	4291      	cmp	r1, r2
 800925e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009262:	d100      	bne.n	8009266 <memcpy+0xc>
 8009264:	4770      	bx	lr
 8009266:	b510      	push	{r4, lr}
 8009268:	f811 4b01 	ldrb.w	r4, [r1], #1
 800926c:	4291      	cmp	r1, r2
 800926e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009272:	d1f9      	bne.n	8009268 <memcpy+0xe>
 8009274:	bd10      	pop	{r4, pc}

08009276 <quorem>:
 8009276:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800927a:	6903      	ldr	r3, [r0, #16]
 800927c:	690c      	ldr	r4, [r1, #16]
 800927e:	4607      	mov	r7, r0
 8009280:	42a3      	cmp	r3, r4
 8009282:	db7e      	blt.n	8009382 <quorem+0x10c>
 8009284:	3c01      	subs	r4, #1
 8009286:	00a3      	lsls	r3, r4, #2
 8009288:	f100 0514 	add.w	r5, r0, #20
 800928c:	f101 0814 	add.w	r8, r1, #20
 8009290:	9300      	str	r3, [sp, #0]
 8009292:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009296:	9301      	str	r3, [sp, #4]
 8009298:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800929c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092a0:	3301      	adds	r3, #1
 80092a2:	429a      	cmp	r2, r3
 80092a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80092a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80092ac:	d32e      	bcc.n	800930c <quorem+0x96>
 80092ae:	f04f 0a00 	mov.w	sl, #0
 80092b2:	46c4      	mov	ip, r8
 80092b4:	46ae      	mov	lr, r5
 80092b6:	46d3      	mov	fp, sl
 80092b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80092bc:	b298      	uxth	r0, r3
 80092be:	fb06 a000 	mla	r0, r6, r0, sl
 80092c2:	0c1b      	lsrs	r3, r3, #16
 80092c4:	0c02      	lsrs	r2, r0, #16
 80092c6:	fb06 2303 	mla	r3, r6, r3, r2
 80092ca:	f8de 2000 	ldr.w	r2, [lr]
 80092ce:	b280      	uxth	r0, r0
 80092d0:	b292      	uxth	r2, r2
 80092d2:	1a12      	subs	r2, r2, r0
 80092d4:	445a      	add	r2, fp
 80092d6:	f8de 0000 	ldr.w	r0, [lr]
 80092da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80092de:	b29b      	uxth	r3, r3
 80092e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80092e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80092e8:	b292      	uxth	r2, r2
 80092ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80092ee:	45e1      	cmp	r9, ip
 80092f0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80092f4:	f84e 2b04 	str.w	r2, [lr], #4
 80092f8:	d2de      	bcs.n	80092b8 <quorem+0x42>
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	58eb      	ldr	r3, [r5, r3]
 80092fe:	b92b      	cbnz	r3, 800930c <quorem+0x96>
 8009300:	9b01      	ldr	r3, [sp, #4]
 8009302:	3b04      	subs	r3, #4
 8009304:	429d      	cmp	r5, r3
 8009306:	461a      	mov	r2, r3
 8009308:	d32f      	bcc.n	800936a <quorem+0xf4>
 800930a:	613c      	str	r4, [r7, #16]
 800930c:	4638      	mov	r0, r7
 800930e:	f001 f979 	bl	800a604 <__mcmp>
 8009312:	2800      	cmp	r0, #0
 8009314:	db25      	blt.n	8009362 <quorem+0xec>
 8009316:	4629      	mov	r1, r5
 8009318:	2000      	movs	r0, #0
 800931a:	f858 2b04 	ldr.w	r2, [r8], #4
 800931e:	f8d1 c000 	ldr.w	ip, [r1]
 8009322:	fa1f fe82 	uxth.w	lr, r2
 8009326:	fa1f f38c 	uxth.w	r3, ip
 800932a:	eba3 030e 	sub.w	r3, r3, lr
 800932e:	4403      	add	r3, r0
 8009330:	0c12      	lsrs	r2, r2, #16
 8009332:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009336:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800933a:	b29b      	uxth	r3, r3
 800933c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009340:	45c1      	cmp	r9, r8
 8009342:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009346:	f841 3b04 	str.w	r3, [r1], #4
 800934a:	d2e6      	bcs.n	800931a <quorem+0xa4>
 800934c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009350:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009354:	b922      	cbnz	r2, 8009360 <quorem+0xea>
 8009356:	3b04      	subs	r3, #4
 8009358:	429d      	cmp	r5, r3
 800935a:	461a      	mov	r2, r3
 800935c:	d30b      	bcc.n	8009376 <quorem+0x100>
 800935e:	613c      	str	r4, [r7, #16]
 8009360:	3601      	adds	r6, #1
 8009362:	4630      	mov	r0, r6
 8009364:	b003      	add	sp, #12
 8009366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936a:	6812      	ldr	r2, [r2, #0]
 800936c:	3b04      	subs	r3, #4
 800936e:	2a00      	cmp	r2, #0
 8009370:	d1cb      	bne.n	800930a <quorem+0x94>
 8009372:	3c01      	subs	r4, #1
 8009374:	e7c6      	b.n	8009304 <quorem+0x8e>
 8009376:	6812      	ldr	r2, [r2, #0]
 8009378:	3b04      	subs	r3, #4
 800937a:	2a00      	cmp	r2, #0
 800937c:	d1ef      	bne.n	800935e <quorem+0xe8>
 800937e:	3c01      	subs	r4, #1
 8009380:	e7ea      	b.n	8009358 <quorem+0xe2>
 8009382:	2000      	movs	r0, #0
 8009384:	e7ee      	b.n	8009364 <quorem+0xee>
	...

08009388 <_dtoa_r>:
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	4614      	mov	r4, r2
 800938e:	461d      	mov	r5, r3
 8009390:	69c7      	ldr	r7, [r0, #28]
 8009392:	b097      	sub	sp, #92	@ 0x5c
 8009394:	4683      	mov	fp, r0
 8009396:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800939a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800939c:	b97f      	cbnz	r7, 80093be <_dtoa_r+0x36>
 800939e:	2010      	movs	r0, #16
 80093a0:	f000 fe02 	bl	8009fa8 <malloc>
 80093a4:	4602      	mov	r2, r0
 80093a6:	f8cb 001c 	str.w	r0, [fp, #28]
 80093aa:	b920      	cbnz	r0, 80093b6 <_dtoa_r+0x2e>
 80093ac:	21ef      	movs	r1, #239	@ 0xef
 80093ae:	4ba8      	ldr	r3, [pc, #672]	@ (8009650 <_dtoa_r+0x2c8>)
 80093b0:	48a8      	ldr	r0, [pc, #672]	@ (8009654 <_dtoa_r+0x2cc>)
 80093b2:	f001 fc59 	bl	800ac68 <__assert_func>
 80093b6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80093ba:	6007      	str	r7, [r0, #0]
 80093bc:	60c7      	str	r7, [r0, #12]
 80093be:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093c2:	6819      	ldr	r1, [r3, #0]
 80093c4:	b159      	cbz	r1, 80093de <_dtoa_r+0x56>
 80093c6:	685a      	ldr	r2, [r3, #4]
 80093c8:	2301      	movs	r3, #1
 80093ca:	4093      	lsls	r3, r2
 80093cc:	604a      	str	r2, [r1, #4]
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	4658      	mov	r0, fp
 80093d2:	f000 fedf 	bl	800a194 <_Bfree>
 80093d6:	2200      	movs	r2, #0
 80093d8:	f8db 301c 	ldr.w	r3, [fp, #28]
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	1e2b      	subs	r3, r5, #0
 80093e0:	bfaf      	iteee	ge
 80093e2:	2300      	movge	r3, #0
 80093e4:	2201      	movlt	r2, #1
 80093e6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80093ea:	9303      	strlt	r3, [sp, #12]
 80093ec:	bfa8      	it	ge
 80093ee:	6033      	strge	r3, [r6, #0]
 80093f0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80093f4:	4b98      	ldr	r3, [pc, #608]	@ (8009658 <_dtoa_r+0x2d0>)
 80093f6:	bfb8      	it	lt
 80093f8:	6032      	strlt	r2, [r6, #0]
 80093fa:	ea33 0308 	bics.w	r3, r3, r8
 80093fe:	d112      	bne.n	8009426 <_dtoa_r+0x9e>
 8009400:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009404:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009406:	6013      	str	r3, [r2, #0]
 8009408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800940c:	4323      	orrs	r3, r4
 800940e:	f000 8550 	beq.w	8009eb2 <_dtoa_r+0xb2a>
 8009412:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009414:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800965c <_dtoa_r+0x2d4>
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 8552 	beq.w	8009ec2 <_dtoa_r+0xb3a>
 800941e:	f10a 0303 	add.w	r3, sl, #3
 8009422:	f000 bd4c 	b.w	8009ebe <_dtoa_r+0xb36>
 8009426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800942e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009432:	2200      	movs	r2, #0
 8009434:	2300      	movs	r3, #0
 8009436:	f7f7 fab7 	bl	80009a8 <__aeabi_dcmpeq>
 800943a:	4607      	mov	r7, r0
 800943c:	b158      	cbz	r0, 8009456 <_dtoa_r+0xce>
 800943e:	2301      	movs	r3, #1
 8009440:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009442:	6013      	str	r3, [r2, #0]
 8009444:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009446:	b113      	cbz	r3, 800944e <_dtoa_r+0xc6>
 8009448:	4b85      	ldr	r3, [pc, #532]	@ (8009660 <_dtoa_r+0x2d8>)
 800944a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800944c:	6013      	str	r3, [r2, #0]
 800944e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009664 <_dtoa_r+0x2dc>
 8009452:	f000 bd36 	b.w	8009ec2 <_dtoa_r+0xb3a>
 8009456:	ab14      	add	r3, sp, #80	@ 0x50
 8009458:	9301      	str	r3, [sp, #4]
 800945a:	ab15      	add	r3, sp, #84	@ 0x54
 800945c:	9300      	str	r3, [sp, #0]
 800945e:	4658      	mov	r0, fp
 8009460:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009464:	f001 f97e 	bl	800a764 <__d2b>
 8009468:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800946c:	4681      	mov	r9, r0
 800946e:	2e00      	cmp	r6, #0
 8009470:	d077      	beq.n	8009562 <_dtoa_r+0x1da>
 8009472:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009478:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800947c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009480:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009484:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009488:	9712      	str	r7, [sp, #72]	@ 0x48
 800948a:	4619      	mov	r1, r3
 800948c:	2200      	movs	r2, #0
 800948e:	4b76      	ldr	r3, [pc, #472]	@ (8009668 <_dtoa_r+0x2e0>)
 8009490:	f7f6 fe6a 	bl	8000168 <__aeabi_dsub>
 8009494:	a368      	add	r3, pc, #416	@ (adr r3, 8009638 <_dtoa_r+0x2b0>)
 8009496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800949a:	f7f7 f81d 	bl	80004d8 <__aeabi_dmul>
 800949e:	a368      	add	r3, pc, #416	@ (adr r3, 8009640 <_dtoa_r+0x2b8>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f6 fe62 	bl	800016c <__adddf3>
 80094a8:	4604      	mov	r4, r0
 80094aa:	4630      	mov	r0, r6
 80094ac:	460d      	mov	r5, r1
 80094ae:	f7f6 ffa9 	bl	8000404 <__aeabi_i2d>
 80094b2:	a365      	add	r3, pc, #404	@ (adr r3, 8009648 <_dtoa_r+0x2c0>)
 80094b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b8:	f7f7 f80e 	bl	80004d8 <__aeabi_dmul>
 80094bc:	4602      	mov	r2, r0
 80094be:	460b      	mov	r3, r1
 80094c0:	4620      	mov	r0, r4
 80094c2:	4629      	mov	r1, r5
 80094c4:	f7f6 fe52 	bl	800016c <__adddf3>
 80094c8:	4604      	mov	r4, r0
 80094ca:	460d      	mov	r5, r1
 80094cc:	f7f7 fab4 	bl	8000a38 <__aeabi_d2iz>
 80094d0:	2200      	movs	r2, #0
 80094d2:	4607      	mov	r7, r0
 80094d4:	2300      	movs	r3, #0
 80094d6:	4620      	mov	r0, r4
 80094d8:	4629      	mov	r1, r5
 80094da:	f7f7 fa6f 	bl	80009bc <__aeabi_dcmplt>
 80094de:	b140      	cbz	r0, 80094f2 <_dtoa_r+0x16a>
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7f6 ff8f 	bl	8000404 <__aeabi_i2d>
 80094e6:	4622      	mov	r2, r4
 80094e8:	462b      	mov	r3, r5
 80094ea:	f7f7 fa5d 	bl	80009a8 <__aeabi_dcmpeq>
 80094ee:	b900      	cbnz	r0, 80094f2 <_dtoa_r+0x16a>
 80094f0:	3f01      	subs	r7, #1
 80094f2:	2f16      	cmp	r7, #22
 80094f4:	d853      	bhi.n	800959e <_dtoa_r+0x216>
 80094f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094fa:	4b5c      	ldr	r3, [pc, #368]	@ (800966c <_dtoa_r+0x2e4>)
 80094fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f7f7 fa5a 	bl	80009bc <__aeabi_dcmplt>
 8009508:	2800      	cmp	r0, #0
 800950a:	d04a      	beq.n	80095a2 <_dtoa_r+0x21a>
 800950c:	2300      	movs	r3, #0
 800950e:	3f01      	subs	r7, #1
 8009510:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009512:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009514:	1b9b      	subs	r3, r3, r6
 8009516:	1e5a      	subs	r2, r3, #1
 8009518:	bf46      	itte	mi
 800951a:	f1c3 0801 	rsbmi	r8, r3, #1
 800951e:	2300      	movmi	r3, #0
 8009520:	f04f 0800 	movpl.w	r8, #0
 8009524:	9209      	str	r2, [sp, #36]	@ 0x24
 8009526:	bf48      	it	mi
 8009528:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800952a:	2f00      	cmp	r7, #0
 800952c:	db3b      	blt.n	80095a6 <_dtoa_r+0x21e>
 800952e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009530:	970e      	str	r7, [sp, #56]	@ 0x38
 8009532:	443b      	add	r3, r7
 8009534:	9309      	str	r3, [sp, #36]	@ 0x24
 8009536:	2300      	movs	r3, #0
 8009538:	930a      	str	r3, [sp, #40]	@ 0x28
 800953a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800953c:	2b09      	cmp	r3, #9
 800953e:	d866      	bhi.n	800960e <_dtoa_r+0x286>
 8009540:	2b05      	cmp	r3, #5
 8009542:	bfc4      	itt	gt
 8009544:	3b04      	subgt	r3, #4
 8009546:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009548:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800954a:	bfc8      	it	gt
 800954c:	2400      	movgt	r4, #0
 800954e:	f1a3 0302 	sub.w	r3, r3, #2
 8009552:	bfd8      	it	le
 8009554:	2401      	movle	r4, #1
 8009556:	2b03      	cmp	r3, #3
 8009558:	d864      	bhi.n	8009624 <_dtoa_r+0x29c>
 800955a:	e8df f003 	tbb	[pc, r3]
 800955e:	382b      	.short	0x382b
 8009560:	5636      	.short	0x5636
 8009562:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009566:	441e      	add	r6, r3
 8009568:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800956c:	2b20      	cmp	r3, #32
 800956e:	bfc1      	itttt	gt
 8009570:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009574:	fa08 f803 	lslgt.w	r8, r8, r3
 8009578:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800957c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009580:	bfd6      	itet	le
 8009582:	f1c3 0320 	rsble	r3, r3, #32
 8009586:	ea48 0003 	orrgt.w	r0, r8, r3
 800958a:	fa04 f003 	lslle.w	r0, r4, r3
 800958e:	f7f6 ff29 	bl	80003e4 <__aeabi_ui2d>
 8009592:	2201      	movs	r2, #1
 8009594:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009598:	3e01      	subs	r6, #1
 800959a:	9212      	str	r2, [sp, #72]	@ 0x48
 800959c:	e775      	b.n	800948a <_dtoa_r+0x102>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7b6      	b.n	8009510 <_dtoa_r+0x188>
 80095a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80095a4:	e7b5      	b.n	8009512 <_dtoa_r+0x18a>
 80095a6:	427b      	negs	r3, r7
 80095a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80095aa:	2300      	movs	r3, #0
 80095ac:	eba8 0807 	sub.w	r8, r8, r7
 80095b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80095b2:	e7c2      	b.n	800953a <_dtoa_r+0x1b2>
 80095b4:	2300      	movs	r3, #0
 80095b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	dc35      	bgt.n	800962a <_dtoa_r+0x2a2>
 80095be:	2301      	movs	r3, #1
 80095c0:	461a      	mov	r2, r3
 80095c2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80095c6:	9221      	str	r2, [sp, #132]	@ 0x84
 80095c8:	e00b      	b.n	80095e2 <_dtoa_r+0x25a>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7f3      	b.n	80095b6 <_dtoa_r+0x22e>
 80095ce:	2300      	movs	r3, #0
 80095d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80095d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80095d4:	18fb      	adds	r3, r7, r3
 80095d6:	9308      	str	r3, [sp, #32]
 80095d8:	3301      	adds	r3, #1
 80095da:	2b01      	cmp	r3, #1
 80095dc:	9307      	str	r3, [sp, #28]
 80095de:	bfb8      	it	lt
 80095e0:	2301      	movlt	r3, #1
 80095e2:	2100      	movs	r1, #0
 80095e4:	2204      	movs	r2, #4
 80095e6:	f8db 001c 	ldr.w	r0, [fp, #28]
 80095ea:	f102 0514 	add.w	r5, r2, #20
 80095ee:	429d      	cmp	r5, r3
 80095f0:	d91f      	bls.n	8009632 <_dtoa_r+0x2aa>
 80095f2:	6041      	str	r1, [r0, #4]
 80095f4:	4658      	mov	r0, fp
 80095f6:	f000 fd8d 	bl	800a114 <_Balloc>
 80095fa:	4682      	mov	sl, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d139      	bne.n	8009674 <_dtoa_r+0x2ec>
 8009600:	4602      	mov	r2, r0
 8009602:	f240 11af 	movw	r1, #431	@ 0x1af
 8009606:	4b1a      	ldr	r3, [pc, #104]	@ (8009670 <_dtoa_r+0x2e8>)
 8009608:	e6d2      	b.n	80093b0 <_dtoa_r+0x28>
 800960a:	2301      	movs	r3, #1
 800960c:	e7e0      	b.n	80095d0 <_dtoa_r+0x248>
 800960e:	2401      	movs	r4, #1
 8009610:	2300      	movs	r3, #0
 8009612:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009614:	9320      	str	r3, [sp, #128]	@ 0x80
 8009616:	f04f 33ff 	mov.w	r3, #4294967295
 800961a:	2200      	movs	r2, #0
 800961c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009620:	2312      	movs	r3, #18
 8009622:	e7d0      	b.n	80095c6 <_dtoa_r+0x23e>
 8009624:	2301      	movs	r3, #1
 8009626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009628:	e7f5      	b.n	8009616 <_dtoa_r+0x28e>
 800962a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800962c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009630:	e7d7      	b.n	80095e2 <_dtoa_r+0x25a>
 8009632:	3101      	adds	r1, #1
 8009634:	0052      	lsls	r2, r2, #1
 8009636:	e7d8      	b.n	80095ea <_dtoa_r+0x262>
 8009638:	636f4361 	.word	0x636f4361
 800963c:	3fd287a7 	.word	0x3fd287a7
 8009640:	8b60c8b3 	.word	0x8b60c8b3
 8009644:	3fc68a28 	.word	0x3fc68a28
 8009648:	509f79fb 	.word	0x509f79fb
 800964c:	3fd34413 	.word	0x3fd34413
 8009650:	0800bbf7 	.word	0x0800bbf7
 8009654:	0800bc0e 	.word	0x0800bc0e
 8009658:	7ff00000 	.word	0x7ff00000
 800965c:	0800bbf3 	.word	0x0800bbf3
 8009660:	0800bbc7 	.word	0x0800bbc7
 8009664:	0800bbc6 	.word	0x0800bbc6
 8009668:	3ff80000 	.word	0x3ff80000
 800966c:	0800bd08 	.word	0x0800bd08
 8009670:	0800bc66 	.word	0x0800bc66
 8009674:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009678:	6018      	str	r0, [r3, #0]
 800967a:	9b07      	ldr	r3, [sp, #28]
 800967c:	2b0e      	cmp	r3, #14
 800967e:	f200 80a4 	bhi.w	80097ca <_dtoa_r+0x442>
 8009682:	2c00      	cmp	r4, #0
 8009684:	f000 80a1 	beq.w	80097ca <_dtoa_r+0x442>
 8009688:	2f00      	cmp	r7, #0
 800968a:	dd33      	ble.n	80096f4 <_dtoa_r+0x36c>
 800968c:	4b86      	ldr	r3, [pc, #536]	@ (80098a8 <_dtoa_r+0x520>)
 800968e:	f007 020f 	and.w	r2, r7, #15
 8009692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009696:	05f8      	lsls	r0, r7, #23
 8009698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800969c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80096a4:	d516      	bpl.n	80096d4 <_dtoa_r+0x34c>
 80096a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096aa:	4b80      	ldr	r3, [pc, #512]	@ (80098ac <_dtoa_r+0x524>)
 80096ac:	2603      	movs	r6, #3
 80096ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80096b2:	f7f7 f83b 	bl	800072c <__aeabi_ddiv>
 80096b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ba:	f004 040f 	and.w	r4, r4, #15
 80096be:	4d7b      	ldr	r5, [pc, #492]	@ (80098ac <_dtoa_r+0x524>)
 80096c0:	b954      	cbnz	r4, 80096d8 <_dtoa_r+0x350>
 80096c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096ca:	f7f7 f82f 	bl	800072c <__aeabi_ddiv>
 80096ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096d2:	e028      	b.n	8009726 <_dtoa_r+0x39e>
 80096d4:	2602      	movs	r6, #2
 80096d6:	e7f2      	b.n	80096be <_dtoa_r+0x336>
 80096d8:	07e1      	lsls	r1, r4, #31
 80096da:	d508      	bpl.n	80096ee <_dtoa_r+0x366>
 80096dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096e4:	f7f6 fef8 	bl	80004d8 <__aeabi_dmul>
 80096e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80096ec:	3601      	adds	r6, #1
 80096ee:	1064      	asrs	r4, r4, #1
 80096f0:	3508      	adds	r5, #8
 80096f2:	e7e5      	b.n	80096c0 <_dtoa_r+0x338>
 80096f4:	f000 80d2 	beq.w	800989c <_dtoa_r+0x514>
 80096f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096fc:	427c      	negs	r4, r7
 80096fe:	4b6a      	ldr	r3, [pc, #424]	@ (80098a8 <_dtoa_r+0x520>)
 8009700:	f004 020f 	and.w	r2, r4, #15
 8009704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	f7f6 fee4 	bl	80004d8 <__aeabi_dmul>
 8009710:	2602      	movs	r6, #2
 8009712:	2300      	movs	r3, #0
 8009714:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009718:	4d64      	ldr	r5, [pc, #400]	@ (80098ac <_dtoa_r+0x524>)
 800971a:	1124      	asrs	r4, r4, #4
 800971c:	2c00      	cmp	r4, #0
 800971e:	f040 80b2 	bne.w	8009886 <_dtoa_r+0x4fe>
 8009722:	2b00      	cmp	r3, #0
 8009724:	d1d3      	bne.n	80096ce <_dtoa_r+0x346>
 8009726:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800972a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 80b7 	beq.w	80098a0 <_dtoa_r+0x518>
 8009732:	2200      	movs	r2, #0
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	4b5d      	ldr	r3, [pc, #372]	@ (80098b0 <_dtoa_r+0x528>)
 800973a:	f7f7 f93f 	bl	80009bc <__aeabi_dcmplt>
 800973e:	2800      	cmp	r0, #0
 8009740:	f000 80ae 	beq.w	80098a0 <_dtoa_r+0x518>
 8009744:	9b07      	ldr	r3, [sp, #28]
 8009746:	2b00      	cmp	r3, #0
 8009748:	f000 80aa 	beq.w	80098a0 <_dtoa_r+0x518>
 800974c:	9b08      	ldr	r3, [sp, #32]
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd37      	ble.n	80097c2 <_dtoa_r+0x43a>
 8009752:	1e7b      	subs	r3, r7, #1
 8009754:	4620      	mov	r0, r4
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	2200      	movs	r2, #0
 800975a:	4629      	mov	r1, r5
 800975c:	4b55      	ldr	r3, [pc, #340]	@ (80098b4 <_dtoa_r+0x52c>)
 800975e:	f7f6 febb 	bl	80004d8 <__aeabi_dmul>
 8009762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009766:	9c08      	ldr	r4, [sp, #32]
 8009768:	3601      	adds	r6, #1
 800976a:	4630      	mov	r0, r6
 800976c:	f7f6 fe4a 	bl	8000404 <__aeabi_i2d>
 8009770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009774:	f7f6 feb0 	bl	80004d8 <__aeabi_dmul>
 8009778:	2200      	movs	r2, #0
 800977a:	4b4f      	ldr	r3, [pc, #316]	@ (80098b8 <_dtoa_r+0x530>)
 800977c:	f7f6 fcf6 	bl	800016c <__adddf3>
 8009780:	4605      	mov	r5, r0
 8009782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009786:	2c00      	cmp	r4, #0
 8009788:	f040 809a 	bne.w	80098c0 <_dtoa_r+0x538>
 800978c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009790:	2200      	movs	r2, #0
 8009792:	4b4a      	ldr	r3, [pc, #296]	@ (80098bc <_dtoa_r+0x534>)
 8009794:	f7f6 fce8 	bl	8000168 <__aeabi_dsub>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4633      	mov	r3, r6
 80097a4:	f7f7 f928 	bl	80009f8 <__aeabi_dcmpgt>
 80097a8:	2800      	cmp	r0, #0
 80097aa:	f040 828e 	bne.w	8009cca <_dtoa_r+0x942>
 80097ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80097b2:	462a      	mov	r2, r5
 80097b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80097b8:	f7f7 f900 	bl	80009bc <__aeabi_dcmplt>
 80097bc:	2800      	cmp	r0, #0
 80097be:	f040 8127 	bne.w	8009a10 <_dtoa_r+0x688>
 80097c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80097c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80097ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f2c0 8163 	blt.w	8009a98 <_dtoa_r+0x710>
 80097d2:	2f0e      	cmp	r7, #14
 80097d4:	f300 8160 	bgt.w	8009a98 <_dtoa_r+0x710>
 80097d8:	4b33      	ldr	r3, [pc, #204]	@ (80098a8 <_dtoa_r+0x520>)
 80097da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80097e2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80097e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	da03      	bge.n	80097f4 <_dtoa_r+0x46c>
 80097ec:	9b07      	ldr	r3, [sp, #28]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f340 8100 	ble.w	80099f4 <_dtoa_r+0x66c>
 80097f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097f8:	4656      	mov	r6, sl
 80097fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097fe:	4620      	mov	r0, r4
 8009800:	4629      	mov	r1, r5
 8009802:	f7f6 ff93 	bl	800072c <__aeabi_ddiv>
 8009806:	f7f7 f917 	bl	8000a38 <__aeabi_d2iz>
 800980a:	4680      	mov	r8, r0
 800980c:	f7f6 fdfa 	bl	8000404 <__aeabi_i2d>
 8009810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009814:	f7f6 fe60 	bl	80004d8 <__aeabi_dmul>
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4620      	mov	r0, r4
 800981e:	4629      	mov	r1, r5
 8009820:	f7f6 fca2 	bl	8000168 <__aeabi_dsub>
 8009824:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009828:	9d07      	ldr	r5, [sp, #28]
 800982a:	f806 4b01 	strb.w	r4, [r6], #1
 800982e:	eba6 040a 	sub.w	r4, r6, sl
 8009832:	42a5      	cmp	r5, r4
 8009834:	4602      	mov	r2, r0
 8009836:	460b      	mov	r3, r1
 8009838:	f040 8116 	bne.w	8009a68 <_dtoa_r+0x6e0>
 800983c:	f7f6 fc96 	bl	800016c <__adddf3>
 8009840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009844:	4604      	mov	r4, r0
 8009846:	460d      	mov	r5, r1
 8009848:	f7f7 f8d6 	bl	80009f8 <__aeabi_dcmpgt>
 800984c:	2800      	cmp	r0, #0
 800984e:	f040 80f8 	bne.w	8009a42 <_dtoa_r+0x6ba>
 8009852:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f7 f8a5 	bl	80009a8 <__aeabi_dcmpeq>
 800985e:	b118      	cbz	r0, 8009868 <_dtoa_r+0x4e0>
 8009860:	f018 0f01 	tst.w	r8, #1
 8009864:	f040 80ed 	bne.w	8009a42 <_dtoa_r+0x6ba>
 8009868:	4649      	mov	r1, r9
 800986a:	4658      	mov	r0, fp
 800986c:	f000 fc92 	bl	800a194 <_Bfree>
 8009870:	2300      	movs	r3, #0
 8009872:	7033      	strb	r3, [r6, #0]
 8009874:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009876:	3701      	adds	r7, #1
 8009878:	601f      	str	r7, [r3, #0]
 800987a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 8320 	beq.w	8009ec2 <_dtoa_r+0xb3a>
 8009882:	601e      	str	r6, [r3, #0]
 8009884:	e31d      	b.n	8009ec2 <_dtoa_r+0xb3a>
 8009886:	07e2      	lsls	r2, r4, #31
 8009888:	d505      	bpl.n	8009896 <_dtoa_r+0x50e>
 800988a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800988e:	f7f6 fe23 	bl	80004d8 <__aeabi_dmul>
 8009892:	2301      	movs	r3, #1
 8009894:	3601      	adds	r6, #1
 8009896:	1064      	asrs	r4, r4, #1
 8009898:	3508      	adds	r5, #8
 800989a:	e73f      	b.n	800971c <_dtoa_r+0x394>
 800989c:	2602      	movs	r6, #2
 800989e:	e742      	b.n	8009726 <_dtoa_r+0x39e>
 80098a0:	9c07      	ldr	r4, [sp, #28]
 80098a2:	9704      	str	r7, [sp, #16]
 80098a4:	e761      	b.n	800976a <_dtoa_r+0x3e2>
 80098a6:	bf00      	nop
 80098a8:	0800bd08 	.word	0x0800bd08
 80098ac:	0800bce0 	.word	0x0800bce0
 80098b0:	3ff00000 	.word	0x3ff00000
 80098b4:	40240000 	.word	0x40240000
 80098b8:	401c0000 	.word	0x401c0000
 80098bc:	40140000 	.word	0x40140000
 80098c0:	4b70      	ldr	r3, [pc, #448]	@ (8009a84 <_dtoa_r+0x6fc>)
 80098c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80098c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80098cc:	4454      	add	r4, sl
 80098ce:	2900      	cmp	r1, #0
 80098d0:	d045      	beq.n	800995e <_dtoa_r+0x5d6>
 80098d2:	2000      	movs	r0, #0
 80098d4:	496c      	ldr	r1, [pc, #432]	@ (8009a88 <_dtoa_r+0x700>)
 80098d6:	f7f6 ff29 	bl	800072c <__aeabi_ddiv>
 80098da:	4633      	mov	r3, r6
 80098dc:	462a      	mov	r2, r5
 80098de:	f7f6 fc43 	bl	8000168 <__aeabi_dsub>
 80098e2:	4656      	mov	r6, sl
 80098e4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80098e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098ec:	f7f7 f8a4 	bl	8000a38 <__aeabi_d2iz>
 80098f0:	4605      	mov	r5, r0
 80098f2:	f7f6 fd87 	bl	8000404 <__aeabi_i2d>
 80098f6:	4602      	mov	r2, r0
 80098f8:	460b      	mov	r3, r1
 80098fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fe:	f7f6 fc33 	bl	8000168 <__aeabi_dsub>
 8009902:	4602      	mov	r2, r0
 8009904:	460b      	mov	r3, r1
 8009906:	3530      	adds	r5, #48	@ 0x30
 8009908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800990c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009910:	f806 5b01 	strb.w	r5, [r6], #1
 8009914:	f7f7 f852 	bl	80009bc <__aeabi_dcmplt>
 8009918:	2800      	cmp	r0, #0
 800991a:	d163      	bne.n	80099e4 <_dtoa_r+0x65c>
 800991c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009920:	2000      	movs	r0, #0
 8009922:	495a      	ldr	r1, [pc, #360]	@ (8009a8c <_dtoa_r+0x704>)
 8009924:	f7f6 fc20 	bl	8000168 <__aeabi_dsub>
 8009928:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800992c:	f7f7 f846 	bl	80009bc <__aeabi_dcmplt>
 8009930:	2800      	cmp	r0, #0
 8009932:	f040 8087 	bne.w	8009a44 <_dtoa_r+0x6bc>
 8009936:	42a6      	cmp	r6, r4
 8009938:	f43f af43 	beq.w	80097c2 <_dtoa_r+0x43a>
 800993c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009940:	2200      	movs	r2, #0
 8009942:	4b53      	ldr	r3, [pc, #332]	@ (8009a90 <_dtoa_r+0x708>)
 8009944:	f7f6 fdc8 	bl	80004d8 <__aeabi_dmul>
 8009948:	2200      	movs	r2, #0
 800994a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800994e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009952:	4b4f      	ldr	r3, [pc, #316]	@ (8009a90 <_dtoa_r+0x708>)
 8009954:	f7f6 fdc0 	bl	80004d8 <__aeabi_dmul>
 8009958:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800995c:	e7c4      	b.n	80098e8 <_dtoa_r+0x560>
 800995e:	4631      	mov	r1, r6
 8009960:	4628      	mov	r0, r5
 8009962:	f7f6 fdb9 	bl	80004d8 <__aeabi_dmul>
 8009966:	4656      	mov	r6, sl
 8009968:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800996c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800996e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009972:	f7f7 f861 	bl	8000a38 <__aeabi_d2iz>
 8009976:	4605      	mov	r5, r0
 8009978:	f7f6 fd44 	bl	8000404 <__aeabi_i2d>
 800997c:	4602      	mov	r2, r0
 800997e:	460b      	mov	r3, r1
 8009980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009984:	f7f6 fbf0 	bl	8000168 <__aeabi_dsub>
 8009988:	4602      	mov	r2, r0
 800998a:	460b      	mov	r3, r1
 800998c:	3530      	adds	r5, #48	@ 0x30
 800998e:	f806 5b01 	strb.w	r5, [r6], #1
 8009992:	42a6      	cmp	r6, r4
 8009994:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009998:	f04f 0200 	mov.w	r2, #0
 800999c:	d124      	bne.n	80099e8 <_dtoa_r+0x660>
 800999e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099a2:	4b39      	ldr	r3, [pc, #228]	@ (8009a88 <_dtoa_r+0x700>)
 80099a4:	f7f6 fbe2 	bl	800016c <__adddf3>
 80099a8:	4602      	mov	r2, r0
 80099aa:	460b      	mov	r3, r1
 80099ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b0:	f7f7 f822 	bl	80009f8 <__aeabi_dcmpgt>
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d145      	bne.n	8009a44 <_dtoa_r+0x6bc>
 80099b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80099bc:	2000      	movs	r0, #0
 80099be:	4932      	ldr	r1, [pc, #200]	@ (8009a88 <_dtoa_r+0x700>)
 80099c0:	f7f6 fbd2 	bl	8000168 <__aeabi_dsub>
 80099c4:	4602      	mov	r2, r0
 80099c6:	460b      	mov	r3, r1
 80099c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099cc:	f7f6 fff6 	bl	80009bc <__aeabi_dcmplt>
 80099d0:	2800      	cmp	r0, #0
 80099d2:	f43f aef6 	beq.w	80097c2 <_dtoa_r+0x43a>
 80099d6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80099d8:	1e73      	subs	r3, r6, #1
 80099da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80099dc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80099e0:	2b30      	cmp	r3, #48	@ 0x30
 80099e2:	d0f8      	beq.n	80099d6 <_dtoa_r+0x64e>
 80099e4:	9f04      	ldr	r7, [sp, #16]
 80099e6:	e73f      	b.n	8009868 <_dtoa_r+0x4e0>
 80099e8:	4b29      	ldr	r3, [pc, #164]	@ (8009a90 <_dtoa_r+0x708>)
 80099ea:	f7f6 fd75 	bl	80004d8 <__aeabi_dmul>
 80099ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f2:	e7bc      	b.n	800996e <_dtoa_r+0x5e6>
 80099f4:	d10c      	bne.n	8009a10 <_dtoa_r+0x688>
 80099f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099fa:	2200      	movs	r2, #0
 80099fc:	4b25      	ldr	r3, [pc, #148]	@ (8009a94 <_dtoa_r+0x70c>)
 80099fe:	f7f6 fd6b 	bl	80004d8 <__aeabi_dmul>
 8009a02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a06:	f7f6 ffed 	bl	80009e4 <__aeabi_dcmpge>
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f000 815b 	beq.w	8009cc6 <_dtoa_r+0x93e>
 8009a10:	2400      	movs	r4, #0
 8009a12:	4625      	mov	r5, r4
 8009a14:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009a16:	4656      	mov	r6, sl
 8009a18:	43db      	mvns	r3, r3
 8009a1a:	9304      	str	r3, [sp, #16]
 8009a1c:	2700      	movs	r7, #0
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4658      	mov	r0, fp
 8009a22:	f000 fbb7 	bl	800a194 <_Bfree>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	d0dc      	beq.n	80099e4 <_dtoa_r+0x65c>
 8009a2a:	b12f      	cbz	r7, 8009a38 <_dtoa_r+0x6b0>
 8009a2c:	42af      	cmp	r7, r5
 8009a2e:	d003      	beq.n	8009a38 <_dtoa_r+0x6b0>
 8009a30:	4639      	mov	r1, r7
 8009a32:	4658      	mov	r0, fp
 8009a34:	f000 fbae 	bl	800a194 <_Bfree>
 8009a38:	4629      	mov	r1, r5
 8009a3a:	4658      	mov	r0, fp
 8009a3c:	f000 fbaa 	bl	800a194 <_Bfree>
 8009a40:	e7d0      	b.n	80099e4 <_dtoa_r+0x65c>
 8009a42:	9704      	str	r7, [sp, #16]
 8009a44:	4633      	mov	r3, r6
 8009a46:	461e      	mov	r6, r3
 8009a48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009a4c:	2a39      	cmp	r2, #57	@ 0x39
 8009a4e:	d107      	bne.n	8009a60 <_dtoa_r+0x6d8>
 8009a50:	459a      	cmp	sl, r3
 8009a52:	d1f8      	bne.n	8009a46 <_dtoa_r+0x6be>
 8009a54:	9a04      	ldr	r2, [sp, #16]
 8009a56:	3201      	adds	r2, #1
 8009a58:	9204      	str	r2, [sp, #16]
 8009a5a:	2230      	movs	r2, #48	@ 0x30
 8009a5c:	f88a 2000 	strb.w	r2, [sl]
 8009a60:	781a      	ldrb	r2, [r3, #0]
 8009a62:	3201      	adds	r2, #1
 8009a64:	701a      	strb	r2, [r3, #0]
 8009a66:	e7bd      	b.n	80099e4 <_dtoa_r+0x65c>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4b09      	ldr	r3, [pc, #36]	@ (8009a90 <_dtoa_r+0x708>)
 8009a6c:	f7f6 fd34 	bl	80004d8 <__aeabi_dmul>
 8009a70:	2200      	movs	r2, #0
 8009a72:	2300      	movs	r3, #0
 8009a74:	4604      	mov	r4, r0
 8009a76:	460d      	mov	r5, r1
 8009a78:	f7f6 ff96 	bl	80009a8 <__aeabi_dcmpeq>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f43f aebc 	beq.w	80097fa <_dtoa_r+0x472>
 8009a82:	e6f1      	b.n	8009868 <_dtoa_r+0x4e0>
 8009a84:	0800bd08 	.word	0x0800bd08
 8009a88:	3fe00000 	.word	0x3fe00000
 8009a8c:	3ff00000 	.word	0x3ff00000
 8009a90:	40240000 	.word	0x40240000
 8009a94:	40140000 	.word	0x40140000
 8009a98:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009a9a:	2a00      	cmp	r2, #0
 8009a9c:	f000 80db 	beq.w	8009c56 <_dtoa_r+0x8ce>
 8009aa0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009aa2:	2a01      	cmp	r2, #1
 8009aa4:	f300 80bf 	bgt.w	8009c26 <_dtoa_r+0x89e>
 8009aa8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	f000 80b7 	beq.w	8009c1e <_dtoa_r+0x896>
 8009ab0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009ab4:	4646      	mov	r6, r8
 8009ab6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009ab8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009aba:	2101      	movs	r1, #1
 8009abc:	441a      	add	r2, r3
 8009abe:	4658      	mov	r0, fp
 8009ac0:	4498      	add	r8, r3
 8009ac2:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ac4:	f000 fc1a 	bl	800a2fc <__i2b>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	b15e      	cbz	r6, 8009ae4 <_dtoa_r+0x75c>
 8009acc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	dd08      	ble.n	8009ae4 <_dtoa_r+0x75c>
 8009ad2:	42b3      	cmp	r3, r6
 8009ad4:	bfa8      	it	ge
 8009ad6:	4633      	movge	r3, r6
 8009ad8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ada:	eba8 0803 	sub.w	r8, r8, r3
 8009ade:	1af6      	subs	r6, r6, r3
 8009ae0:	1ad3      	subs	r3, r2, r3
 8009ae2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ae6:	b1f3      	cbz	r3, 8009b26 <_dtoa_r+0x79e>
 8009ae8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	f000 80b7 	beq.w	8009c5e <_dtoa_r+0x8d6>
 8009af0:	b18c      	cbz	r4, 8009b16 <_dtoa_r+0x78e>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4622      	mov	r2, r4
 8009af6:	4658      	mov	r0, fp
 8009af8:	f000 fcbe 	bl	800a478 <__pow5mult>
 8009afc:	464a      	mov	r2, r9
 8009afe:	4601      	mov	r1, r0
 8009b00:	4605      	mov	r5, r0
 8009b02:	4658      	mov	r0, fp
 8009b04:	f000 fc10 	bl	800a328 <__multiply>
 8009b08:	4649      	mov	r1, r9
 8009b0a:	9004      	str	r0, [sp, #16]
 8009b0c:	4658      	mov	r0, fp
 8009b0e:	f000 fb41 	bl	800a194 <_Bfree>
 8009b12:	9b04      	ldr	r3, [sp, #16]
 8009b14:	4699      	mov	r9, r3
 8009b16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b18:	1b1a      	subs	r2, r3, r4
 8009b1a:	d004      	beq.n	8009b26 <_dtoa_r+0x79e>
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	4658      	mov	r0, fp
 8009b20:	f000 fcaa 	bl	800a478 <__pow5mult>
 8009b24:	4681      	mov	r9, r0
 8009b26:	2101      	movs	r1, #1
 8009b28:	4658      	mov	r0, fp
 8009b2a:	f000 fbe7 	bl	800a2fc <__i2b>
 8009b2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b30:	4604      	mov	r4, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f000 81c9 	beq.w	8009eca <_dtoa_r+0xb42>
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4601      	mov	r1, r0
 8009b3c:	4658      	mov	r0, fp
 8009b3e:	f000 fc9b 	bl	800a478 <__pow5mult>
 8009b42:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009b44:	4604      	mov	r4, r0
 8009b46:	2b01      	cmp	r3, #1
 8009b48:	f300 808f 	bgt.w	8009c6a <_dtoa_r+0x8e2>
 8009b4c:	9b02      	ldr	r3, [sp, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f040 8087 	bne.w	8009c62 <_dtoa_r+0x8da>
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f040 8083 	bne.w	8009c66 <_dtoa_r+0x8de>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009b66:	0d1b      	lsrs	r3, r3, #20
 8009b68:	051b      	lsls	r3, r3, #20
 8009b6a:	b12b      	cbz	r3, 8009b78 <_dtoa_r+0x7f0>
 8009b6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b6e:	f108 0801 	add.w	r8, r8, #1
 8009b72:	3301      	adds	r3, #1
 8009b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b76:	2301      	movs	r3, #1
 8009b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	f000 81aa 	beq.w	8009ed6 <_dtoa_r+0xb4e>
 8009b82:	6923      	ldr	r3, [r4, #16]
 8009b84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009b88:	6918      	ldr	r0, [r3, #16]
 8009b8a:	f000 fb6b 	bl	800a264 <__hi0bits>
 8009b8e:	f1c0 0020 	rsb	r0, r0, #32
 8009b92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b94:	4418      	add	r0, r3
 8009b96:	f010 001f 	ands.w	r0, r0, #31
 8009b9a:	d071      	beq.n	8009c80 <_dtoa_r+0x8f8>
 8009b9c:	f1c0 0320 	rsb	r3, r0, #32
 8009ba0:	2b04      	cmp	r3, #4
 8009ba2:	dd65      	ble.n	8009c70 <_dtoa_r+0x8e8>
 8009ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ba6:	f1c0 001c 	rsb	r0, r0, #28
 8009baa:	4403      	add	r3, r0
 8009bac:	4480      	add	r8, r0
 8009bae:	4406      	add	r6, r0
 8009bb0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bb2:	f1b8 0f00 	cmp.w	r8, #0
 8009bb6:	dd05      	ble.n	8009bc4 <_dtoa_r+0x83c>
 8009bb8:	4649      	mov	r1, r9
 8009bba:	4642      	mov	r2, r8
 8009bbc:	4658      	mov	r0, fp
 8009bbe:	f000 fcb5 	bl	800a52c <__lshift>
 8009bc2:	4681      	mov	r9, r0
 8009bc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	dd05      	ble.n	8009bd6 <_dtoa_r+0x84e>
 8009bca:	4621      	mov	r1, r4
 8009bcc:	461a      	mov	r2, r3
 8009bce:	4658      	mov	r0, fp
 8009bd0:	f000 fcac 	bl	800a52c <__lshift>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d053      	beq.n	8009c84 <_dtoa_r+0x8fc>
 8009bdc:	4621      	mov	r1, r4
 8009bde:	4648      	mov	r0, r9
 8009be0:	f000 fd10 	bl	800a604 <__mcmp>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	da4d      	bge.n	8009c84 <_dtoa_r+0x8fc>
 8009be8:	1e7b      	subs	r3, r7, #1
 8009bea:	4649      	mov	r1, r9
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	220a      	movs	r2, #10
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	4658      	mov	r0, fp
 8009bf4:	f000 faf0 	bl	800a1d8 <__multadd>
 8009bf8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bfa:	4681      	mov	r9, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 816c 	beq.w	8009eda <_dtoa_r+0xb52>
 8009c02:	2300      	movs	r3, #0
 8009c04:	4629      	mov	r1, r5
 8009c06:	220a      	movs	r2, #10
 8009c08:	4658      	mov	r0, fp
 8009c0a:	f000 fae5 	bl	800a1d8 <__multadd>
 8009c0e:	9b08      	ldr	r3, [sp, #32]
 8009c10:	4605      	mov	r5, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	dc61      	bgt.n	8009cda <_dtoa_r+0x952>
 8009c16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	dc3b      	bgt.n	8009c94 <_dtoa_r+0x90c>
 8009c1c:	e05d      	b.n	8009cda <_dtoa_r+0x952>
 8009c1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009c20:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c24:	e746      	b.n	8009ab4 <_dtoa_r+0x72c>
 8009c26:	9b07      	ldr	r3, [sp, #28]
 8009c28:	1e5c      	subs	r4, r3, #1
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009c2c:	42a3      	cmp	r3, r4
 8009c2e:	bfbf      	itttt	lt
 8009c30:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009c32:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8009c34:	1ae3      	sublt	r3, r4, r3
 8009c36:	18d2      	addlt	r2, r2, r3
 8009c38:	bfa8      	it	ge
 8009c3a:	1b1c      	subge	r4, r3, r4
 8009c3c:	9b07      	ldr	r3, [sp, #28]
 8009c3e:	bfbe      	ittt	lt
 8009c40:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009c42:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8009c44:	2400      	movlt	r4, #0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bfb5      	itete	lt
 8009c4a:	eba8 0603 	sublt.w	r6, r8, r3
 8009c4e:	4646      	movge	r6, r8
 8009c50:	2300      	movlt	r3, #0
 8009c52:	9b07      	ldrge	r3, [sp, #28]
 8009c54:	e730      	b.n	8009ab8 <_dtoa_r+0x730>
 8009c56:	4646      	mov	r6, r8
 8009c58:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009c5c:	e735      	b.n	8009aca <_dtoa_r+0x742>
 8009c5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009c60:	e75c      	b.n	8009b1c <_dtoa_r+0x794>
 8009c62:	2300      	movs	r3, #0
 8009c64:	e788      	b.n	8009b78 <_dtoa_r+0x7f0>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	e786      	b.n	8009b78 <_dtoa_r+0x7f0>
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c6e:	e788      	b.n	8009b82 <_dtoa_r+0x7fa>
 8009c70:	d09f      	beq.n	8009bb2 <_dtoa_r+0x82a>
 8009c72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c74:	331c      	adds	r3, #28
 8009c76:	441a      	add	r2, r3
 8009c78:	4498      	add	r8, r3
 8009c7a:	441e      	add	r6, r3
 8009c7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c7e:	e798      	b.n	8009bb2 <_dtoa_r+0x82a>
 8009c80:	4603      	mov	r3, r0
 8009c82:	e7f6      	b.n	8009c72 <_dtoa_r+0x8ea>
 8009c84:	9b07      	ldr	r3, [sp, #28]
 8009c86:	9704      	str	r7, [sp, #16]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	dc20      	bgt.n	8009cce <_dtoa_r+0x946>
 8009c8c:	9308      	str	r3, [sp, #32]
 8009c8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	dd1e      	ble.n	8009cd2 <_dtoa_r+0x94a>
 8009c94:	9b08      	ldr	r3, [sp, #32]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	f47f aebc 	bne.w	8009a14 <_dtoa_r+0x68c>
 8009c9c:	4621      	mov	r1, r4
 8009c9e:	2205      	movs	r2, #5
 8009ca0:	4658      	mov	r0, fp
 8009ca2:	f000 fa99 	bl	800a1d8 <__multadd>
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4648      	mov	r0, r9
 8009cac:	f000 fcaa 	bl	800a604 <__mcmp>
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	f77f aeaf 	ble.w	8009a14 <_dtoa_r+0x68c>
 8009cb6:	2331      	movs	r3, #49	@ 0x31
 8009cb8:	4656      	mov	r6, sl
 8009cba:	f806 3b01 	strb.w	r3, [r6], #1
 8009cbe:	9b04      	ldr	r3, [sp, #16]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	9304      	str	r3, [sp, #16]
 8009cc4:	e6aa      	b.n	8009a1c <_dtoa_r+0x694>
 8009cc6:	9c07      	ldr	r4, [sp, #28]
 8009cc8:	9704      	str	r7, [sp, #16]
 8009cca:	4625      	mov	r5, r4
 8009ccc:	e7f3      	b.n	8009cb6 <_dtoa_r+0x92e>
 8009cce:	9b07      	ldr	r3, [sp, #28]
 8009cd0:	9308      	str	r3, [sp, #32]
 8009cd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8104 	beq.w	8009ee2 <_dtoa_r+0xb5a>
 8009cda:	2e00      	cmp	r6, #0
 8009cdc:	dd05      	ble.n	8009cea <_dtoa_r+0x962>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4632      	mov	r2, r6
 8009ce2:	4658      	mov	r0, fp
 8009ce4:	f000 fc22 	bl	800a52c <__lshift>
 8009ce8:	4605      	mov	r5, r0
 8009cea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d05a      	beq.n	8009da6 <_dtoa_r+0xa1e>
 8009cf0:	4658      	mov	r0, fp
 8009cf2:	6869      	ldr	r1, [r5, #4]
 8009cf4:	f000 fa0e 	bl	800a114 <_Balloc>
 8009cf8:	4606      	mov	r6, r0
 8009cfa:	b928      	cbnz	r0, 8009d08 <_dtoa_r+0x980>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d02:	4b83      	ldr	r3, [pc, #524]	@ (8009f10 <_dtoa_r+0xb88>)
 8009d04:	f7ff bb54 	b.w	80093b0 <_dtoa_r+0x28>
 8009d08:	692a      	ldr	r2, [r5, #16]
 8009d0a:	f105 010c 	add.w	r1, r5, #12
 8009d0e:	3202      	adds	r2, #2
 8009d10:	0092      	lsls	r2, r2, #2
 8009d12:	300c      	adds	r0, #12
 8009d14:	f7ff faa1 	bl	800925a <memcpy>
 8009d18:	2201      	movs	r2, #1
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4658      	mov	r0, fp
 8009d1e:	f000 fc05 	bl	800a52c <__lshift>
 8009d22:	462f      	mov	r7, r5
 8009d24:	4605      	mov	r5, r0
 8009d26:	f10a 0301 	add.w	r3, sl, #1
 8009d2a:	9307      	str	r3, [sp, #28]
 8009d2c:	9b08      	ldr	r3, [sp, #32]
 8009d2e:	4453      	add	r3, sl
 8009d30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d32:	9b02      	ldr	r3, [sp, #8]
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	930a      	str	r3, [sp, #40]	@ 0x28
 8009d3a:	9b07      	ldr	r3, [sp, #28]
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4648      	mov	r0, r9
 8009d42:	9302      	str	r3, [sp, #8]
 8009d44:	f7ff fa97 	bl	8009276 <quorem>
 8009d48:	4639      	mov	r1, r7
 8009d4a:	9008      	str	r0, [sp, #32]
 8009d4c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009d50:	4648      	mov	r0, r9
 8009d52:	f000 fc57 	bl	800a604 <__mcmp>
 8009d56:	462a      	mov	r2, r5
 8009d58:	9009      	str	r0, [sp, #36]	@ 0x24
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	4658      	mov	r0, fp
 8009d5e:	f000 fc6d 	bl	800a63c <__mdiff>
 8009d62:	68c2      	ldr	r2, [r0, #12]
 8009d64:	4606      	mov	r6, r0
 8009d66:	bb02      	cbnz	r2, 8009daa <_dtoa_r+0xa22>
 8009d68:	4601      	mov	r1, r0
 8009d6a:	4648      	mov	r0, r9
 8009d6c:	f000 fc4a 	bl	800a604 <__mcmp>
 8009d70:	4602      	mov	r2, r0
 8009d72:	4631      	mov	r1, r6
 8009d74:	4658      	mov	r0, fp
 8009d76:	920c      	str	r2, [sp, #48]	@ 0x30
 8009d78:	f000 fa0c 	bl	800a194 <_Bfree>
 8009d7c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009d7e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009d80:	9e07      	ldr	r6, [sp, #28]
 8009d82:	ea43 0102 	orr.w	r1, r3, r2
 8009d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d88:	4319      	orrs	r1, r3
 8009d8a:	d110      	bne.n	8009dae <_dtoa_r+0xa26>
 8009d8c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009d90:	d029      	beq.n	8009de6 <_dtoa_r+0xa5e>
 8009d92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	dd02      	ble.n	8009d9e <_dtoa_r+0xa16>
 8009d98:	9b08      	ldr	r3, [sp, #32]
 8009d9a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009d9e:	9b02      	ldr	r3, [sp, #8]
 8009da0:	f883 8000 	strb.w	r8, [r3]
 8009da4:	e63b      	b.n	8009a1e <_dtoa_r+0x696>
 8009da6:	4628      	mov	r0, r5
 8009da8:	e7bb      	b.n	8009d22 <_dtoa_r+0x99a>
 8009daa:	2201      	movs	r2, #1
 8009dac:	e7e1      	b.n	8009d72 <_dtoa_r+0x9ea>
 8009dae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	db04      	blt.n	8009dbe <_dtoa_r+0xa36>
 8009db4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009db6:	430b      	orrs	r3, r1
 8009db8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009dba:	430b      	orrs	r3, r1
 8009dbc:	d120      	bne.n	8009e00 <_dtoa_r+0xa78>
 8009dbe:	2a00      	cmp	r2, #0
 8009dc0:	dded      	ble.n	8009d9e <_dtoa_r+0xa16>
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	4658      	mov	r0, fp
 8009dc8:	f000 fbb0 	bl	800a52c <__lshift>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4681      	mov	r9, r0
 8009dd0:	f000 fc18 	bl	800a604 <__mcmp>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	dc03      	bgt.n	8009de0 <_dtoa_r+0xa58>
 8009dd8:	d1e1      	bne.n	8009d9e <_dtoa_r+0xa16>
 8009dda:	f018 0f01 	tst.w	r8, #1
 8009dde:	d0de      	beq.n	8009d9e <_dtoa_r+0xa16>
 8009de0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009de4:	d1d8      	bne.n	8009d98 <_dtoa_r+0xa10>
 8009de6:	2339      	movs	r3, #57	@ 0x39
 8009de8:	9a02      	ldr	r2, [sp, #8]
 8009dea:	7013      	strb	r3, [r2, #0]
 8009dec:	4633      	mov	r3, r6
 8009dee:	461e      	mov	r6, r3
 8009df0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2a39      	cmp	r2, #57	@ 0x39
 8009df8:	d052      	beq.n	8009ea0 <_dtoa_r+0xb18>
 8009dfa:	3201      	adds	r2, #1
 8009dfc:	701a      	strb	r2, [r3, #0]
 8009dfe:	e60e      	b.n	8009a1e <_dtoa_r+0x696>
 8009e00:	2a00      	cmp	r2, #0
 8009e02:	dd07      	ble.n	8009e14 <_dtoa_r+0xa8c>
 8009e04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e08:	d0ed      	beq.n	8009de6 <_dtoa_r+0xa5e>
 8009e0a:	9a02      	ldr	r2, [sp, #8]
 8009e0c:	f108 0301 	add.w	r3, r8, #1
 8009e10:	7013      	strb	r3, [r2, #0]
 8009e12:	e604      	b.n	8009a1e <_dtoa_r+0x696>
 8009e14:	9b07      	ldr	r3, [sp, #28]
 8009e16:	9a07      	ldr	r2, [sp, #28]
 8009e18:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e1c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d028      	beq.n	8009e74 <_dtoa_r+0xaec>
 8009e22:	4649      	mov	r1, r9
 8009e24:	2300      	movs	r3, #0
 8009e26:	220a      	movs	r2, #10
 8009e28:	4658      	mov	r0, fp
 8009e2a:	f000 f9d5 	bl	800a1d8 <__multadd>
 8009e2e:	42af      	cmp	r7, r5
 8009e30:	4681      	mov	r9, r0
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	f04f 020a 	mov.w	r2, #10
 8009e3a:	4639      	mov	r1, r7
 8009e3c:	4658      	mov	r0, fp
 8009e3e:	d107      	bne.n	8009e50 <_dtoa_r+0xac8>
 8009e40:	f000 f9ca 	bl	800a1d8 <__multadd>
 8009e44:	4607      	mov	r7, r0
 8009e46:	4605      	mov	r5, r0
 8009e48:	9b07      	ldr	r3, [sp, #28]
 8009e4a:	3301      	adds	r3, #1
 8009e4c:	9307      	str	r3, [sp, #28]
 8009e4e:	e774      	b.n	8009d3a <_dtoa_r+0x9b2>
 8009e50:	f000 f9c2 	bl	800a1d8 <__multadd>
 8009e54:	4629      	mov	r1, r5
 8009e56:	4607      	mov	r7, r0
 8009e58:	2300      	movs	r3, #0
 8009e5a:	220a      	movs	r2, #10
 8009e5c:	4658      	mov	r0, fp
 8009e5e:	f000 f9bb 	bl	800a1d8 <__multadd>
 8009e62:	4605      	mov	r5, r0
 8009e64:	e7f0      	b.n	8009e48 <_dtoa_r+0xac0>
 8009e66:	9b08      	ldr	r3, [sp, #32]
 8009e68:	2700      	movs	r7, #0
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	bfcc      	ite	gt
 8009e6e:	461e      	movgt	r6, r3
 8009e70:	2601      	movle	r6, #1
 8009e72:	4456      	add	r6, sl
 8009e74:	4649      	mov	r1, r9
 8009e76:	2201      	movs	r2, #1
 8009e78:	4658      	mov	r0, fp
 8009e7a:	f000 fb57 	bl	800a52c <__lshift>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4681      	mov	r9, r0
 8009e82:	f000 fbbf 	bl	800a604 <__mcmp>
 8009e86:	2800      	cmp	r0, #0
 8009e88:	dcb0      	bgt.n	8009dec <_dtoa_r+0xa64>
 8009e8a:	d102      	bne.n	8009e92 <_dtoa_r+0xb0a>
 8009e8c:	f018 0f01 	tst.w	r8, #1
 8009e90:	d1ac      	bne.n	8009dec <_dtoa_r+0xa64>
 8009e92:	4633      	mov	r3, r6
 8009e94:	461e      	mov	r6, r3
 8009e96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e9a:	2a30      	cmp	r2, #48	@ 0x30
 8009e9c:	d0fa      	beq.n	8009e94 <_dtoa_r+0xb0c>
 8009e9e:	e5be      	b.n	8009a1e <_dtoa_r+0x696>
 8009ea0:	459a      	cmp	sl, r3
 8009ea2:	d1a4      	bne.n	8009dee <_dtoa_r+0xa66>
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	2331      	movs	r3, #49	@ 0x31
 8009eac:	f88a 3000 	strb.w	r3, [sl]
 8009eb0:	e5b5      	b.n	8009a1e <_dtoa_r+0x696>
 8009eb2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009eb4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f14 <_dtoa_r+0xb8c>
 8009eb8:	b11b      	cbz	r3, 8009ec2 <_dtoa_r+0xb3a>
 8009eba:	f10a 0308 	add.w	r3, sl, #8
 8009ebe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009ec0:	6013      	str	r3, [r2, #0]
 8009ec2:	4650      	mov	r0, sl
 8009ec4:	b017      	add	sp, #92	@ 0x5c
 8009ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eca:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	f77f ae3d 	ble.w	8009b4c <_dtoa_r+0x7c4>
 8009ed2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed4:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	e65b      	b.n	8009b92 <_dtoa_r+0x80a>
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f77f aed6 	ble.w	8009c8e <_dtoa_r+0x906>
 8009ee2:	4656      	mov	r6, sl
 8009ee4:	4621      	mov	r1, r4
 8009ee6:	4648      	mov	r0, r9
 8009ee8:	f7ff f9c5 	bl	8009276 <quorem>
 8009eec:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009ef0:	9b08      	ldr	r3, [sp, #32]
 8009ef2:	f806 8b01 	strb.w	r8, [r6], #1
 8009ef6:	eba6 020a 	sub.w	r2, r6, sl
 8009efa:	4293      	cmp	r3, r2
 8009efc:	ddb3      	ble.n	8009e66 <_dtoa_r+0xade>
 8009efe:	4649      	mov	r1, r9
 8009f00:	2300      	movs	r3, #0
 8009f02:	220a      	movs	r2, #10
 8009f04:	4658      	mov	r0, fp
 8009f06:	f000 f967 	bl	800a1d8 <__multadd>
 8009f0a:	4681      	mov	r9, r0
 8009f0c:	e7ea      	b.n	8009ee4 <_dtoa_r+0xb5c>
 8009f0e:	bf00      	nop
 8009f10:	0800bc66 	.word	0x0800bc66
 8009f14:	0800bbea 	.word	0x0800bbea

08009f18 <_free_r>:
 8009f18:	b538      	push	{r3, r4, r5, lr}
 8009f1a:	4605      	mov	r5, r0
 8009f1c:	2900      	cmp	r1, #0
 8009f1e:	d040      	beq.n	8009fa2 <_free_r+0x8a>
 8009f20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f24:	1f0c      	subs	r4, r1, #4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	bfb8      	it	lt
 8009f2a:	18e4      	addlt	r4, r4, r3
 8009f2c:	f000 f8e6 	bl	800a0fc <__malloc_lock>
 8009f30:	4a1c      	ldr	r2, [pc, #112]	@ (8009fa4 <_free_r+0x8c>)
 8009f32:	6813      	ldr	r3, [r2, #0]
 8009f34:	b933      	cbnz	r3, 8009f44 <_free_r+0x2c>
 8009f36:	6063      	str	r3, [r4, #4]
 8009f38:	6014      	str	r4, [r2, #0]
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f40:	f000 b8e2 	b.w	800a108 <__malloc_unlock>
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	d908      	bls.n	8009f5a <_free_r+0x42>
 8009f48:	6820      	ldr	r0, [r4, #0]
 8009f4a:	1821      	adds	r1, r4, r0
 8009f4c:	428b      	cmp	r3, r1
 8009f4e:	bf01      	itttt	eq
 8009f50:	6819      	ldreq	r1, [r3, #0]
 8009f52:	685b      	ldreq	r3, [r3, #4]
 8009f54:	1809      	addeq	r1, r1, r0
 8009f56:	6021      	streq	r1, [r4, #0]
 8009f58:	e7ed      	b.n	8009f36 <_free_r+0x1e>
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	b10b      	cbz	r3, 8009f64 <_free_r+0x4c>
 8009f60:	42a3      	cmp	r3, r4
 8009f62:	d9fa      	bls.n	8009f5a <_free_r+0x42>
 8009f64:	6811      	ldr	r1, [r2, #0]
 8009f66:	1850      	adds	r0, r2, r1
 8009f68:	42a0      	cmp	r0, r4
 8009f6a:	d10b      	bne.n	8009f84 <_free_r+0x6c>
 8009f6c:	6820      	ldr	r0, [r4, #0]
 8009f6e:	4401      	add	r1, r0
 8009f70:	1850      	adds	r0, r2, r1
 8009f72:	4283      	cmp	r3, r0
 8009f74:	6011      	str	r1, [r2, #0]
 8009f76:	d1e0      	bne.n	8009f3a <_free_r+0x22>
 8009f78:	6818      	ldr	r0, [r3, #0]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	4408      	add	r0, r1
 8009f7e:	6010      	str	r0, [r2, #0]
 8009f80:	6053      	str	r3, [r2, #4]
 8009f82:	e7da      	b.n	8009f3a <_free_r+0x22>
 8009f84:	d902      	bls.n	8009f8c <_free_r+0x74>
 8009f86:	230c      	movs	r3, #12
 8009f88:	602b      	str	r3, [r5, #0]
 8009f8a:	e7d6      	b.n	8009f3a <_free_r+0x22>
 8009f8c:	6820      	ldr	r0, [r4, #0]
 8009f8e:	1821      	adds	r1, r4, r0
 8009f90:	428b      	cmp	r3, r1
 8009f92:	bf01      	itttt	eq
 8009f94:	6819      	ldreq	r1, [r3, #0]
 8009f96:	685b      	ldreq	r3, [r3, #4]
 8009f98:	1809      	addeq	r1, r1, r0
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	6054      	str	r4, [r2, #4]
 8009fa0:	e7cb      	b.n	8009f3a <_free_r+0x22>
 8009fa2:	bd38      	pop	{r3, r4, r5, pc}
 8009fa4:	20003634 	.word	0x20003634

08009fa8 <malloc>:
 8009fa8:	4b02      	ldr	r3, [pc, #8]	@ (8009fb4 <malloc+0xc>)
 8009faa:	4601      	mov	r1, r0
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	f000 b825 	b.w	8009ffc <_malloc_r>
 8009fb2:	bf00      	nop
 8009fb4:	20000024 	.word	0x20000024

08009fb8 <sbrk_aligned>:
 8009fb8:	b570      	push	{r4, r5, r6, lr}
 8009fba:	4e0f      	ldr	r6, [pc, #60]	@ (8009ff8 <sbrk_aligned+0x40>)
 8009fbc:	460c      	mov	r4, r1
 8009fbe:	6831      	ldr	r1, [r6, #0]
 8009fc0:	4605      	mov	r5, r0
 8009fc2:	b911      	cbnz	r1, 8009fca <sbrk_aligned+0x12>
 8009fc4:	f000 fe40 	bl	800ac48 <_sbrk_r>
 8009fc8:	6030      	str	r0, [r6, #0]
 8009fca:	4621      	mov	r1, r4
 8009fcc:	4628      	mov	r0, r5
 8009fce:	f000 fe3b 	bl	800ac48 <_sbrk_r>
 8009fd2:	1c43      	adds	r3, r0, #1
 8009fd4:	d103      	bne.n	8009fde <sbrk_aligned+0x26>
 8009fd6:	f04f 34ff 	mov.w	r4, #4294967295
 8009fda:	4620      	mov	r0, r4
 8009fdc:	bd70      	pop	{r4, r5, r6, pc}
 8009fde:	1cc4      	adds	r4, r0, #3
 8009fe0:	f024 0403 	bic.w	r4, r4, #3
 8009fe4:	42a0      	cmp	r0, r4
 8009fe6:	d0f8      	beq.n	8009fda <sbrk_aligned+0x22>
 8009fe8:	1a21      	subs	r1, r4, r0
 8009fea:	4628      	mov	r0, r5
 8009fec:	f000 fe2c 	bl	800ac48 <_sbrk_r>
 8009ff0:	3001      	adds	r0, #1
 8009ff2:	d1f2      	bne.n	8009fda <sbrk_aligned+0x22>
 8009ff4:	e7ef      	b.n	8009fd6 <sbrk_aligned+0x1e>
 8009ff6:	bf00      	nop
 8009ff8:	20003630 	.word	0x20003630

08009ffc <_malloc_r>:
 8009ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a000:	1ccd      	adds	r5, r1, #3
 800a002:	f025 0503 	bic.w	r5, r5, #3
 800a006:	3508      	adds	r5, #8
 800a008:	2d0c      	cmp	r5, #12
 800a00a:	bf38      	it	cc
 800a00c:	250c      	movcc	r5, #12
 800a00e:	2d00      	cmp	r5, #0
 800a010:	4606      	mov	r6, r0
 800a012:	db01      	blt.n	800a018 <_malloc_r+0x1c>
 800a014:	42a9      	cmp	r1, r5
 800a016:	d904      	bls.n	800a022 <_malloc_r+0x26>
 800a018:	230c      	movs	r3, #12
 800a01a:	6033      	str	r3, [r6, #0]
 800a01c:	2000      	movs	r0, #0
 800a01e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a022:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0f8 <_malloc_r+0xfc>
 800a026:	f000 f869 	bl	800a0fc <__malloc_lock>
 800a02a:	f8d8 3000 	ldr.w	r3, [r8]
 800a02e:	461c      	mov	r4, r3
 800a030:	bb44      	cbnz	r4, 800a084 <_malloc_r+0x88>
 800a032:	4629      	mov	r1, r5
 800a034:	4630      	mov	r0, r6
 800a036:	f7ff ffbf 	bl	8009fb8 <sbrk_aligned>
 800a03a:	1c43      	adds	r3, r0, #1
 800a03c:	4604      	mov	r4, r0
 800a03e:	d158      	bne.n	800a0f2 <_malloc_r+0xf6>
 800a040:	f8d8 4000 	ldr.w	r4, [r8]
 800a044:	4627      	mov	r7, r4
 800a046:	2f00      	cmp	r7, #0
 800a048:	d143      	bne.n	800a0d2 <_malloc_r+0xd6>
 800a04a:	2c00      	cmp	r4, #0
 800a04c:	d04b      	beq.n	800a0e6 <_malloc_r+0xea>
 800a04e:	6823      	ldr	r3, [r4, #0]
 800a050:	4639      	mov	r1, r7
 800a052:	4630      	mov	r0, r6
 800a054:	eb04 0903 	add.w	r9, r4, r3
 800a058:	f000 fdf6 	bl	800ac48 <_sbrk_r>
 800a05c:	4581      	cmp	r9, r0
 800a05e:	d142      	bne.n	800a0e6 <_malloc_r+0xea>
 800a060:	6821      	ldr	r1, [r4, #0]
 800a062:	4630      	mov	r0, r6
 800a064:	1a6d      	subs	r5, r5, r1
 800a066:	4629      	mov	r1, r5
 800a068:	f7ff ffa6 	bl	8009fb8 <sbrk_aligned>
 800a06c:	3001      	adds	r0, #1
 800a06e:	d03a      	beq.n	800a0e6 <_malloc_r+0xea>
 800a070:	6823      	ldr	r3, [r4, #0]
 800a072:	442b      	add	r3, r5
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	f8d8 3000 	ldr.w	r3, [r8]
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	bb62      	cbnz	r2, 800a0d8 <_malloc_r+0xdc>
 800a07e:	f8c8 7000 	str.w	r7, [r8]
 800a082:	e00f      	b.n	800a0a4 <_malloc_r+0xa8>
 800a084:	6822      	ldr	r2, [r4, #0]
 800a086:	1b52      	subs	r2, r2, r5
 800a088:	d420      	bmi.n	800a0cc <_malloc_r+0xd0>
 800a08a:	2a0b      	cmp	r2, #11
 800a08c:	d917      	bls.n	800a0be <_malloc_r+0xc2>
 800a08e:	1961      	adds	r1, r4, r5
 800a090:	42a3      	cmp	r3, r4
 800a092:	6025      	str	r5, [r4, #0]
 800a094:	bf18      	it	ne
 800a096:	6059      	strne	r1, [r3, #4]
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	bf08      	it	eq
 800a09c:	f8c8 1000 	streq.w	r1, [r8]
 800a0a0:	5162      	str	r2, [r4, r5]
 800a0a2:	604b      	str	r3, [r1, #4]
 800a0a4:	4630      	mov	r0, r6
 800a0a6:	f000 f82f 	bl	800a108 <__malloc_unlock>
 800a0aa:	f104 000b 	add.w	r0, r4, #11
 800a0ae:	1d23      	adds	r3, r4, #4
 800a0b0:	f020 0007 	bic.w	r0, r0, #7
 800a0b4:	1ac2      	subs	r2, r0, r3
 800a0b6:	bf1c      	itt	ne
 800a0b8:	1a1b      	subne	r3, r3, r0
 800a0ba:	50a3      	strne	r3, [r4, r2]
 800a0bc:	e7af      	b.n	800a01e <_malloc_r+0x22>
 800a0be:	6862      	ldr	r2, [r4, #4]
 800a0c0:	42a3      	cmp	r3, r4
 800a0c2:	bf0c      	ite	eq
 800a0c4:	f8c8 2000 	streq.w	r2, [r8]
 800a0c8:	605a      	strne	r2, [r3, #4]
 800a0ca:	e7eb      	b.n	800a0a4 <_malloc_r+0xa8>
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	6864      	ldr	r4, [r4, #4]
 800a0d0:	e7ae      	b.n	800a030 <_malloc_r+0x34>
 800a0d2:	463c      	mov	r4, r7
 800a0d4:	687f      	ldr	r7, [r7, #4]
 800a0d6:	e7b6      	b.n	800a046 <_malloc_r+0x4a>
 800a0d8:	461a      	mov	r2, r3
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	42a3      	cmp	r3, r4
 800a0de:	d1fb      	bne.n	800a0d8 <_malloc_r+0xdc>
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	6053      	str	r3, [r2, #4]
 800a0e4:	e7de      	b.n	800a0a4 <_malloc_r+0xa8>
 800a0e6:	230c      	movs	r3, #12
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	6033      	str	r3, [r6, #0]
 800a0ec:	f000 f80c 	bl	800a108 <__malloc_unlock>
 800a0f0:	e794      	b.n	800a01c <_malloc_r+0x20>
 800a0f2:	6005      	str	r5, [r0, #0]
 800a0f4:	e7d6      	b.n	800a0a4 <_malloc_r+0xa8>
 800a0f6:	bf00      	nop
 800a0f8:	20003634 	.word	0x20003634

0800a0fc <__malloc_lock>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	@ (800a104 <__malloc_lock+0x8>)
 800a0fe:	f7ff b89c 	b.w	800923a <__retarget_lock_acquire_recursive>
 800a102:	bf00      	nop
 800a104:	2000362c 	.word	0x2000362c

0800a108 <__malloc_unlock>:
 800a108:	4801      	ldr	r0, [pc, #4]	@ (800a110 <__malloc_unlock+0x8>)
 800a10a:	f7ff b897 	b.w	800923c <__retarget_lock_release_recursive>
 800a10e:	bf00      	nop
 800a110:	2000362c 	.word	0x2000362c

0800a114 <_Balloc>:
 800a114:	b570      	push	{r4, r5, r6, lr}
 800a116:	69c6      	ldr	r6, [r0, #28]
 800a118:	4604      	mov	r4, r0
 800a11a:	460d      	mov	r5, r1
 800a11c:	b976      	cbnz	r6, 800a13c <_Balloc+0x28>
 800a11e:	2010      	movs	r0, #16
 800a120:	f7ff ff42 	bl	8009fa8 <malloc>
 800a124:	4602      	mov	r2, r0
 800a126:	61e0      	str	r0, [r4, #28]
 800a128:	b920      	cbnz	r0, 800a134 <_Balloc+0x20>
 800a12a:	216b      	movs	r1, #107	@ 0x6b
 800a12c:	4b17      	ldr	r3, [pc, #92]	@ (800a18c <_Balloc+0x78>)
 800a12e:	4818      	ldr	r0, [pc, #96]	@ (800a190 <_Balloc+0x7c>)
 800a130:	f000 fd9a 	bl	800ac68 <__assert_func>
 800a134:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a138:	6006      	str	r6, [r0, #0]
 800a13a:	60c6      	str	r6, [r0, #12]
 800a13c:	69e6      	ldr	r6, [r4, #28]
 800a13e:	68f3      	ldr	r3, [r6, #12]
 800a140:	b183      	cbz	r3, 800a164 <_Balloc+0x50>
 800a142:	69e3      	ldr	r3, [r4, #28]
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a14a:	b9b8      	cbnz	r0, 800a17c <_Balloc+0x68>
 800a14c:	2101      	movs	r1, #1
 800a14e:	fa01 f605 	lsl.w	r6, r1, r5
 800a152:	1d72      	adds	r2, r6, #5
 800a154:	4620      	mov	r0, r4
 800a156:	0092      	lsls	r2, r2, #2
 800a158:	f000 fda4 	bl	800aca4 <_calloc_r>
 800a15c:	b160      	cbz	r0, 800a178 <_Balloc+0x64>
 800a15e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a162:	e00e      	b.n	800a182 <_Balloc+0x6e>
 800a164:	2221      	movs	r2, #33	@ 0x21
 800a166:	2104      	movs	r1, #4
 800a168:	4620      	mov	r0, r4
 800a16a:	f000 fd9b 	bl	800aca4 <_calloc_r>
 800a16e:	69e3      	ldr	r3, [r4, #28]
 800a170:	60f0      	str	r0, [r6, #12]
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d1e4      	bne.n	800a142 <_Balloc+0x2e>
 800a178:	2000      	movs	r0, #0
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	6802      	ldr	r2, [r0, #0]
 800a17e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a182:	2300      	movs	r3, #0
 800a184:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a188:	e7f7      	b.n	800a17a <_Balloc+0x66>
 800a18a:	bf00      	nop
 800a18c:	0800bbf7 	.word	0x0800bbf7
 800a190:	0800bc77 	.word	0x0800bc77

0800a194 <_Bfree>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	69c6      	ldr	r6, [r0, #28]
 800a198:	4605      	mov	r5, r0
 800a19a:	460c      	mov	r4, r1
 800a19c:	b976      	cbnz	r6, 800a1bc <_Bfree+0x28>
 800a19e:	2010      	movs	r0, #16
 800a1a0:	f7ff ff02 	bl	8009fa8 <malloc>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	61e8      	str	r0, [r5, #28]
 800a1a8:	b920      	cbnz	r0, 800a1b4 <_Bfree+0x20>
 800a1aa:	218f      	movs	r1, #143	@ 0x8f
 800a1ac:	4b08      	ldr	r3, [pc, #32]	@ (800a1d0 <_Bfree+0x3c>)
 800a1ae:	4809      	ldr	r0, [pc, #36]	@ (800a1d4 <_Bfree+0x40>)
 800a1b0:	f000 fd5a 	bl	800ac68 <__assert_func>
 800a1b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1b8:	6006      	str	r6, [r0, #0]
 800a1ba:	60c6      	str	r6, [r0, #12]
 800a1bc:	b13c      	cbz	r4, 800a1ce <_Bfree+0x3a>
 800a1be:	69eb      	ldr	r3, [r5, #28]
 800a1c0:	6862      	ldr	r2, [r4, #4]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1c8:	6021      	str	r1, [r4, #0]
 800a1ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ce:	bd70      	pop	{r4, r5, r6, pc}
 800a1d0:	0800bbf7 	.word	0x0800bbf7
 800a1d4:	0800bc77 	.word	0x0800bc77

0800a1d8 <__multadd>:
 800a1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1dc:	4607      	mov	r7, r0
 800a1de:	460c      	mov	r4, r1
 800a1e0:	461e      	mov	r6, r3
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	690d      	ldr	r5, [r1, #16]
 800a1e6:	f101 0c14 	add.w	ip, r1, #20
 800a1ea:	f8dc 3000 	ldr.w	r3, [ip]
 800a1ee:	3001      	adds	r0, #1
 800a1f0:	b299      	uxth	r1, r3
 800a1f2:	fb02 6101 	mla	r1, r2, r1, r6
 800a1f6:	0c1e      	lsrs	r6, r3, #16
 800a1f8:	0c0b      	lsrs	r3, r1, #16
 800a1fa:	fb02 3306 	mla	r3, r2, r6, r3
 800a1fe:	b289      	uxth	r1, r1
 800a200:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a204:	4285      	cmp	r5, r0
 800a206:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a20a:	f84c 1b04 	str.w	r1, [ip], #4
 800a20e:	dcec      	bgt.n	800a1ea <__multadd+0x12>
 800a210:	b30e      	cbz	r6, 800a256 <__multadd+0x7e>
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	42ab      	cmp	r3, r5
 800a216:	dc19      	bgt.n	800a24c <__multadd+0x74>
 800a218:	6861      	ldr	r1, [r4, #4]
 800a21a:	4638      	mov	r0, r7
 800a21c:	3101      	adds	r1, #1
 800a21e:	f7ff ff79 	bl	800a114 <_Balloc>
 800a222:	4680      	mov	r8, r0
 800a224:	b928      	cbnz	r0, 800a232 <__multadd+0x5a>
 800a226:	4602      	mov	r2, r0
 800a228:	21ba      	movs	r1, #186	@ 0xba
 800a22a:	4b0c      	ldr	r3, [pc, #48]	@ (800a25c <__multadd+0x84>)
 800a22c:	480c      	ldr	r0, [pc, #48]	@ (800a260 <__multadd+0x88>)
 800a22e:	f000 fd1b 	bl	800ac68 <__assert_func>
 800a232:	6922      	ldr	r2, [r4, #16]
 800a234:	f104 010c 	add.w	r1, r4, #12
 800a238:	3202      	adds	r2, #2
 800a23a:	0092      	lsls	r2, r2, #2
 800a23c:	300c      	adds	r0, #12
 800a23e:	f7ff f80c 	bl	800925a <memcpy>
 800a242:	4621      	mov	r1, r4
 800a244:	4638      	mov	r0, r7
 800a246:	f7ff ffa5 	bl	800a194 <_Bfree>
 800a24a:	4644      	mov	r4, r8
 800a24c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a250:	3501      	adds	r5, #1
 800a252:	615e      	str	r6, [r3, #20]
 800a254:	6125      	str	r5, [r4, #16]
 800a256:	4620      	mov	r0, r4
 800a258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25c:	0800bc66 	.word	0x0800bc66
 800a260:	0800bc77 	.word	0x0800bc77

0800a264 <__hi0bits>:
 800a264:	4603      	mov	r3, r0
 800a266:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a26a:	bf3a      	itte	cc
 800a26c:	0403      	lslcc	r3, r0, #16
 800a26e:	2010      	movcc	r0, #16
 800a270:	2000      	movcs	r0, #0
 800a272:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a276:	bf3c      	itt	cc
 800a278:	021b      	lslcc	r3, r3, #8
 800a27a:	3008      	addcc	r0, #8
 800a27c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a280:	bf3c      	itt	cc
 800a282:	011b      	lslcc	r3, r3, #4
 800a284:	3004      	addcc	r0, #4
 800a286:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a28a:	bf3c      	itt	cc
 800a28c:	009b      	lslcc	r3, r3, #2
 800a28e:	3002      	addcc	r0, #2
 800a290:	2b00      	cmp	r3, #0
 800a292:	db05      	blt.n	800a2a0 <__hi0bits+0x3c>
 800a294:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a298:	f100 0001 	add.w	r0, r0, #1
 800a29c:	bf08      	it	eq
 800a29e:	2020      	moveq	r0, #32
 800a2a0:	4770      	bx	lr

0800a2a2 <__lo0bits>:
 800a2a2:	6803      	ldr	r3, [r0, #0]
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	f013 0007 	ands.w	r0, r3, #7
 800a2aa:	d00b      	beq.n	800a2c4 <__lo0bits+0x22>
 800a2ac:	07d9      	lsls	r1, r3, #31
 800a2ae:	d421      	bmi.n	800a2f4 <__lo0bits+0x52>
 800a2b0:	0798      	lsls	r0, r3, #30
 800a2b2:	bf49      	itett	mi
 800a2b4:	085b      	lsrmi	r3, r3, #1
 800a2b6:	089b      	lsrpl	r3, r3, #2
 800a2b8:	2001      	movmi	r0, #1
 800a2ba:	6013      	strmi	r3, [r2, #0]
 800a2bc:	bf5c      	itt	pl
 800a2be:	2002      	movpl	r0, #2
 800a2c0:	6013      	strpl	r3, [r2, #0]
 800a2c2:	4770      	bx	lr
 800a2c4:	b299      	uxth	r1, r3
 800a2c6:	b909      	cbnz	r1, 800a2cc <__lo0bits+0x2a>
 800a2c8:	2010      	movs	r0, #16
 800a2ca:	0c1b      	lsrs	r3, r3, #16
 800a2cc:	b2d9      	uxtb	r1, r3
 800a2ce:	b909      	cbnz	r1, 800a2d4 <__lo0bits+0x32>
 800a2d0:	3008      	adds	r0, #8
 800a2d2:	0a1b      	lsrs	r3, r3, #8
 800a2d4:	0719      	lsls	r1, r3, #28
 800a2d6:	bf04      	itt	eq
 800a2d8:	091b      	lsreq	r3, r3, #4
 800a2da:	3004      	addeq	r0, #4
 800a2dc:	0799      	lsls	r1, r3, #30
 800a2de:	bf04      	itt	eq
 800a2e0:	089b      	lsreq	r3, r3, #2
 800a2e2:	3002      	addeq	r0, #2
 800a2e4:	07d9      	lsls	r1, r3, #31
 800a2e6:	d403      	bmi.n	800a2f0 <__lo0bits+0x4e>
 800a2e8:	085b      	lsrs	r3, r3, #1
 800a2ea:	f100 0001 	add.w	r0, r0, #1
 800a2ee:	d003      	beq.n	800a2f8 <__lo0bits+0x56>
 800a2f0:	6013      	str	r3, [r2, #0]
 800a2f2:	4770      	bx	lr
 800a2f4:	2000      	movs	r0, #0
 800a2f6:	4770      	bx	lr
 800a2f8:	2020      	movs	r0, #32
 800a2fa:	4770      	bx	lr

0800a2fc <__i2b>:
 800a2fc:	b510      	push	{r4, lr}
 800a2fe:	460c      	mov	r4, r1
 800a300:	2101      	movs	r1, #1
 800a302:	f7ff ff07 	bl	800a114 <_Balloc>
 800a306:	4602      	mov	r2, r0
 800a308:	b928      	cbnz	r0, 800a316 <__i2b+0x1a>
 800a30a:	f240 1145 	movw	r1, #325	@ 0x145
 800a30e:	4b04      	ldr	r3, [pc, #16]	@ (800a320 <__i2b+0x24>)
 800a310:	4804      	ldr	r0, [pc, #16]	@ (800a324 <__i2b+0x28>)
 800a312:	f000 fca9 	bl	800ac68 <__assert_func>
 800a316:	2301      	movs	r3, #1
 800a318:	6144      	str	r4, [r0, #20]
 800a31a:	6103      	str	r3, [r0, #16]
 800a31c:	bd10      	pop	{r4, pc}
 800a31e:	bf00      	nop
 800a320:	0800bc66 	.word	0x0800bc66
 800a324:	0800bc77 	.word	0x0800bc77

0800a328 <__multiply>:
 800a328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a32c:	4614      	mov	r4, r2
 800a32e:	690a      	ldr	r2, [r1, #16]
 800a330:	6923      	ldr	r3, [r4, #16]
 800a332:	460f      	mov	r7, r1
 800a334:	429a      	cmp	r2, r3
 800a336:	bfa2      	ittt	ge
 800a338:	4623      	movge	r3, r4
 800a33a:	460c      	movge	r4, r1
 800a33c:	461f      	movge	r7, r3
 800a33e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a342:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a346:	68a3      	ldr	r3, [r4, #8]
 800a348:	6861      	ldr	r1, [r4, #4]
 800a34a:	eb0a 0609 	add.w	r6, sl, r9
 800a34e:	42b3      	cmp	r3, r6
 800a350:	b085      	sub	sp, #20
 800a352:	bfb8      	it	lt
 800a354:	3101      	addlt	r1, #1
 800a356:	f7ff fedd 	bl	800a114 <_Balloc>
 800a35a:	b930      	cbnz	r0, 800a36a <__multiply+0x42>
 800a35c:	4602      	mov	r2, r0
 800a35e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a362:	4b43      	ldr	r3, [pc, #268]	@ (800a470 <__multiply+0x148>)
 800a364:	4843      	ldr	r0, [pc, #268]	@ (800a474 <__multiply+0x14c>)
 800a366:	f000 fc7f 	bl	800ac68 <__assert_func>
 800a36a:	f100 0514 	add.w	r5, r0, #20
 800a36e:	462b      	mov	r3, r5
 800a370:	2200      	movs	r2, #0
 800a372:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a376:	4543      	cmp	r3, r8
 800a378:	d321      	bcc.n	800a3be <__multiply+0x96>
 800a37a:	f107 0114 	add.w	r1, r7, #20
 800a37e:	f104 0214 	add.w	r2, r4, #20
 800a382:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a386:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a38a:	9302      	str	r3, [sp, #8]
 800a38c:	1b13      	subs	r3, r2, r4
 800a38e:	3b15      	subs	r3, #21
 800a390:	f023 0303 	bic.w	r3, r3, #3
 800a394:	3304      	adds	r3, #4
 800a396:	f104 0715 	add.w	r7, r4, #21
 800a39a:	42ba      	cmp	r2, r7
 800a39c:	bf38      	it	cc
 800a39e:	2304      	movcc	r3, #4
 800a3a0:	9301      	str	r3, [sp, #4]
 800a3a2:	9b02      	ldr	r3, [sp, #8]
 800a3a4:	9103      	str	r1, [sp, #12]
 800a3a6:	428b      	cmp	r3, r1
 800a3a8:	d80c      	bhi.n	800a3c4 <__multiply+0x9c>
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	dd03      	ble.n	800a3b6 <__multiply+0x8e>
 800a3ae:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d05a      	beq.n	800a46c <__multiply+0x144>
 800a3b6:	6106      	str	r6, [r0, #16]
 800a3b8:	b005      	add	sp, #20
 800a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3be:	f843 2b04 	str.w	r2, [r3], #4
 800a3c2:	e7d8      	b.n	800a376 <__multiply+0x4e>
 800a3c4:	f8b1 a000 	ldrh.w	sl, [r1]
 800a3c8:	f1ba 0f00 	cmp.w	sl, #0
 800a3cc:	d023      	beq.n	800a416 <__multiply+0xee>
 800a3ce:	46a9      	mov	r9, r5
 800a3d0:	f04f 0c00 	mov.w	ip, #0
 800a3d4:	f104 0e14 	add.w	lr, r4, #20
 800a3d8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a3dc:	f8d9 3000 	ldr.w	r3, [r9]
 800a3e0:	fa1f fb87 	uxth.w	fp, r7
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	fb0a 330b 	mla	r3, sl, fp, r3
 800a3ea:	4463      	add	r3, ip
 800a3ec:	f8d9 c000 	ldr.w	ip, [r9]
 800a3f0:	0c3f      	lsrs	r7, r7, #16
 800a3f2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a3f6:	fb0a c707 	mla	r7, sl, r7, ip
 800a3fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a404:	4572      	cmp	r2, lr
 800a406:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a40a:	f849 3b04 	str.w	r3, [r9], #4
 800a40e:	d8e3      	bhi.n	800a3d8 <__multiply+0xb0>
 800a410:	9b01      	ldr	r3, [sp, #4]
 800a412:	f845 c003 	str.w	ip, [r5, r3]
 800a416:	9b03      	ldr	r3, [sp, #12]
 800a418:	3104      	adds	r1, #4
 800a41a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a41e:	f1b9 0f00 	cmp.w	r9, #0
 800a422:	d021      	beq.n	800a468 <__multiply+0x140>
 800a424:	46ae      	mov	lr, r5
 800a426:	f04f 0a00 	mov.w	sl, #0
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	f104 0c14 	add.w	ip, r4, #20
 800a430:	f8bc b000 	ldrh.w	fp, [ip]
 800a434:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a438:	b29b      	uxth	r3, r3
 800a43a:	fb09 770b 	mla	r7, r9, fp, r7
 800a43e:	4457      	add	r7, sl
 800a440:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a444:	f84e 3b04 	str.w	r3, [lr], #4
 800a448:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a44c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a450:	f8be 3000 	ldrh.w	r3, [lr]
 800a454:	4562      	cmp	r2, ip
 800a456:	fb09 330a 	mla	r3, r9, sl, r3
 800a45a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a45e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a462:	d8e5      	bhi.n	800a430 <__multiply+0x108>
 800a464:	9f01      	ldr	r7, [sp, #4]
 800a466:	51eb      	str	r3, [r5, r7]
 800a468:	3504      	adds	r5, #4
 800a46a:	e79a      	b.n	800a3a2 <__multiply+0x7a>
 800a46c:	3e01      	subs	r6, #1
 800a46e:	e79c      	b.n	800a3aa <__multiply+0x82>
 800a470:	0800bc66 	.word	0x0800bc66
 800a474:	0800bc77 	.word	0x0800bc77

0800a478 <__pow5mult>:
 800a478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a47c:	4615      	mov	r5, r2
 800a47e:	f012 0203 	ands.w	r2, r2, #3
 800a482:	4607      	mov	r7, r0
 800a484:	460e      	mov	r6, r1
 800a486:	d007      	beq.n	800a498 <__pow5mult+0x20>
 800a488:	4c25      	ldr	r4, [pc, #148]	@ (800a520 <__pow5mult+0xa8>)
 800a48a:	3a01      	subs	r2, #1
 800a48c:	2300      	movs	r3, #0
 800a48e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a492:	f7ff fea1 	bl	800a1d8 <__multadd>
 800a496:	4606      	mov	r6, r0
 800a498:	10ad      	asrs	r5, r5, #2
 800a49a:	d03d      	beq.n	800a518 <__pow5mult+0xa0>
 800a49c:	69fc      	ldr	r4, [r7, #28]
 800a49e:	b97c      	cbnz	r4, 800a4c0 <__pow5mult+0x48>
 800a4a0:	2010      	movs	r0, #16
 800a4a2:	f7ff fd81 	bl	8009fa8 <malloc>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	61f8      	str	r0, [r7, #28]
 800a4aa:	b928      	cbnz	r0, 800a4b8 <__pow5mult+0x40>
 800a4ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a4b0:	4b1c      	ldr	r3, [pc, #112]	@ (800a524 <__pow5mult+0xac>)
 800a4b2:	481d      	ldr	r0, [pc, #116]	@ (800a528 <__pow5mult+0xb0>)
 800a4b4:	f000 fbd8 	bl	800ac68 <__assert_func>
 800a4b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a4bc:	6004      	str	r4, [r0, #0]
 800a4be:	60c4      	str	r4, [r0, #12]
 800a4c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a4c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a4c8:	b94c      	cbnz	r4, 800a4de <__pow5mult+0x66>
 800a4ca:	f240 2171 	movw	r1, #625	@ 0x271
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	f7ff ff14 	bl	800a2fc <__i2b>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	4604      	mov	r4, r0
 800a4d8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a4dc:	6003      	str	r3, [r0, #0]
 800a4de:	f04f 0900 	mov.w	r9, #0
 800a4e2:	07eb      	lsls	r3, r5, #31
 800a4e4:	d50a      	bpl.n	800a4fc <__pow5mult+0x84>
 800a4e6:	4631      	mov	r1, r6
 800a4e8:	4622      	mov	r2, r4
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	f7ff ff1c 	bl	800a328 <__multiply>
 800a4f0:	4680      	mov	r8, r0
 800a4f2:	4631      	mov	r1, r6
 800a4f4:	4638      	mov	r0, r7
 800a4f6:	f7ff fe4d 	bl	800a194 <_Bfree>
 800a4fa:	4646      	mov	r6, r8
 800a4fc:	106d      	asrs	r5, r5, #1
 800a4fe:	d00b      	beq.n	800a518 <__pow5mult+0xa0>
 800a500:	6820      	ldr	r0, [r4, #0]
 800a502:	b938      	cbnz	r0, 800a514 <__pow5mult+0x9c>
 800a504:	4622      	mov	r2, r4
 800a506:	4621      	mov	r1, r4
 800a508:	4638      	mov	r0, r7
 800a50a:	f7ff ff0d 	bl	800a328 <__multiply>
 800a50e:	6020      	str	r0, [r4, #0]
 800a510:	f8c0 9000 	str.w	r9, [r0]
 800a514:	4604      	mov	r4, r0
 800a516:	e7e4      	b.n	800a4e2 <__pow5mult+0x6a>
 800a518:	4630      	mov	r0, r6
 800a51a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a51e:	bf00      	nop
 800a520:	0800bcd0 	.word	0x0800bcd0
 800a524:	0800bbf7 	.word	0x0800bbf7
 800a528:	0800bc77 	.word	0x0800bc77

0800a52c <__lshift>:
 800a52c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a530:	460c      	mov	r4, r1
 800a532:	4607      	mov	r7, r0
 800a534:	4691      	mov	r9, r2
 800a536:	6923      	ldr	r3, [r4, #16]
 800a538:	6849      	ldr	r1, [r1, #4]
 800a53a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a53e:	68a3      	ldr	r3, [r4, #8]
 800a540:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a544:	f108 0601 	add.w	r6, r8, #1
 800a548:	42b3      	cmp	r3, r6
 800a54a:	db0b      	blt.n	800a564 <__lshift+0x38>
 800a54c:	4638      	mov	r0, r7
 800a54e:	f7ff fde1 	bl	800a114 <_Balloc>
 800a552:	4605      	mov	r5, r0
 800a554:	b948      	cbnz	r0, 800a56a <__lshift+0x3e>
 800a556:	4602      	mov	r2, r0
 800a558:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a55c:	4b27      	ldr	r3, [pc, #156]	@ (800a5fc <__lshift+0xd0>)
 800a55e:	4828      	ldr	r0, [pc, #160]	@ (800a600 <__lshift+0xd4>)
 800a560:	f000 fb82 	bl	800ac68 <__assert_func>
 800a564:	3101      	adds	r1, #1
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	e7ee      	b.n	800a548 <__lshift+0x1c>
 800a56a:	2300      	movs	r3, #0
 800a56c:	f100 0114 	add.w	r1, r0, #20
 800a570:	f100 0210 	add.w	r2, r0, #16
 800a574:	4618      	mov	r0, r3
 800a576:	4553      	cmp	r3, sl
 800a578:	db33      	blt.n	800a5e2 <__lshift+0xb6>
 800a57a:	6920      	ldr	r0, [r4, #16]
 800a57c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a580:	f104 0314 	add.w	r3, r4, #20
 800a584:	f019 091f 	ands.w	r9, r9, #31
 800a588:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a58c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a590:	d02b      	beq.n	800a5ea <__lshift+0xbe>
 800a592:	468a      	mov	sl, r1
 800a594:	2200      	movs	r2, #0
 800a596:	f1c9 0e20 	rsb	lr, r9, #32
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	fa00 f009 	lsl.w	r0, r0, r9
 800a5a0:	4310      	orrs	r0, r2
 800a5a2:	f84a 0b04 	str.w	r0, [sl], #4
 800a5a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5aa:	459c      	cmp	ip, r3
 800a5ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800a5b0:	d8f3      	bhi.n	800a59a <__lshift+0x6e>
 800a5b2:	ebac 0304 	sub.w	r3, ip, r4
 800a5b6:	3b15      	subs	r3, #21
 800a5b8:	f023 0303 	bic.w	r3, r3, #3
 800a5bc:	3304      	adds	r3, #4
 800a5be:	f104 0015 	add.w	r0, r4, #21
 800a5c2:	4584      	cmp	ip, r0
 800a5c4:	bf38      	it	cc
 800a5c6:	2304      	movcc	r3, #4
 800a5c8:	50ca      	str	r2, [r1, r3]
 800a5ca:	b10a      	cbz	r2, 800a5d0 <__lshift+0xa4>
 800a5cc:	f108 0602 	add.w	r6, r8, #2
 800a5d0:	3e01      	subs	r6, #1
 800a5d2:	4638      	mov	r0, r7
 800a5d4:	4621      	mov	r1, r4
 800a5d6:	612e      	str	r6, [r5, #16]
 800a5d8:	f7ff fddc 	bl	800a194 <_Bfree>
 800a5dc:	4628      	mov	r0, r5
 800a5de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	e7c5      	b.n	800a576 <__lshift+0x4a>
 800a5ea:	3904      	subs	r1, #4
 800a5ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5f0:	459c      	cmp	ip, r3
 800a5f2:	f841 2f04 	str.w	r2, [r1, #4]!
 800a5f6:	d8f9      	bhi.n	800a5ec <__lshift+0xc0>
 800a5f8:	e7ea      	b.n	800a5d0 <__lshift+0xa4>
 800a5fa:	bf00      	nop
 800a5fc:	0800bc66 	.word	0x0800bc66
 800a600:	0800bc77 	.word	0x0800bc77

0800a604 <__mcmp>:
 800a604:	4603      	mov	r3, r0
 800a606:	690a      	ldr	r2, [r1, #16]
 800a608:	6900      	ldr	r0, [r0, #16]
 800a60a:	b530      	push	{r4, r5, lr}
 800a60c:	1a80      	subs	r0, r0, r2
 800a60e:	d10e      	bne.n	800a62e <__mcmp+0x2a>
 800a610:	3314      	adds	r3, #20
 800a612:	3114      	adds	r1, #20
 800a614:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a618:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a61c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a620:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a624:	4295      	cmp	r5, r2
 800a626:	d003      	beq.n	800a630 <__mcmp+0x2c>
 800a628:	d205      	bcs.n	800a636 <__mcmp+0x32>
 800a62a:	f04f 30ff 	mov.w	r0, #4294967295
 800a62e:	bd30      	pop	{r4, r5, pc}
 800a630:	42a3      	cmp	r3, r4
 800a632:	d3f3      	bcc.n	800a61c <__mcmp+0x18>
 800a634:	e7fb      	b.n	800a62e <__mcmp+0x2a>
 800a636:	2001      	movs	r0, #1
 800a638:	e7f9      	b.n	800a62e <__mcmp+0x2a>
	...

0800a63c <__mdiff>:
 800a63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	4689      	mov	r9, r1
 800a642:	4606      	mov	r6, r0
 800a644:	4611      	mov	r1, r2
 800a646:	4648      	mov	r0, r9
 800a648:	4614      	mov	r4, r2
 800a64a:	f7ff ffdb 	bl	800a604 <__mcmp>
 800a64e:	1e05      	subs	r5, r0, #0
 800a650:	d112      	bne.n	800a678 <__mdiff+0x3c>
 800a652:	4629      	mov	r1, r5
 800a654:	4630      	mov	r0, r6
 800a656:	f7ff fd5d 	bl	800a114 <_Balloc>
 800a65a:	4602      	mov	r2, r0
 800a65c:	b928      	cbnz	r0, 800a66a <__mdiff+0x2e>
 800a65e:	f240 2137 	movw	r1, #567	@ 0x237
 800a662:	4b3e      	ldr	r3, [pc, #248]	@ (800a75c <__mdiff+0x120>)
 800a664:	483e      	ldr	r0, [pc, #248]	@ (800a760 <__mdiff+0x124>)
 800a666:	f000 faff 	bl	800ac68 <__assert_func>
 800a66a:	2301      	movs	r3, #1
 800a66c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a670:	4610      	mov	r0, r2
 800a672:	b003      	add	sp, #12
 800a674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a678:	bfbc      	itt	lt
 800a67a:	464b      	movlt	r3, r9
 800a67c:	46a1      	movlt	r9, r4
 800a67e:	4630      	mov	r0, r6
 800a680:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a684:	bfba      	itte	lt
 800a686:	461c      	movlt	r4, r3
 800a688:	2501      	movlt	r5, #1
 800a68a:	2500      	movge	r5, #0
 800a68c:	f7ff fd42 	bl	800a114 <_Balloc>
 800a690:	4602      	mov	r2, r0
 800a692:	b918      	cbnz	r0, 800a69c <__mdiff+0x60>
 800a694:	f240 2145 	movw	r1, #581	@ 0x245
 800a698:	4b30      	ldr	r3, [pc, #192]	@ (800a75c <__mdiff+0x120>)
 800a69a:	e7e3      	b.n	800a664 <__mdiff+0x28>
 800a69c:	f100 0b14 	add.w	fp, r0, #20
 800a6a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a6a4:	f109 0310 	add.w	r3, r9, #16
 800a6a8:	60c5      	str	r5, [r0, #12]
 800a6aa:	f04f 0c00 	mov.w	ip, #0
 800a6ae:	f109 0514 	add.w	r5, r9, #20
 800a6b2:	46d9      	mov	r9, fp
 800a6b4:	6926      	ldr	r6, [r4, #16]
 800a6b6:	f104 0e14 	add.w	lr, r4, #20
 800a6ba:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a6be:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	9b01      	ldr	r3, [sp, #4]
 800a6c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a6ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a6ce:	b281      	uxth	r1, r0
 800a6d0:	9301      	str	r3, [sp, #4]
 800a6d2:	fa1f f38a 	uxth.w	r3, sl
 800a6d6:	1a5b      	subs	r3, r3, r1
 800a6d8:	0c00      	lsrs	r0, r0, #16
 800a6da:	4463      	add	r3, ip
 800a6dc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a6e0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a6e4:	b29b      	uxth	r3, r3
 800a6e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a6ea:	4576      	cmp	r6, lr
 800a6ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a6f0:	f849 3b04 	str.w	r3, [r9], #4
 800a6f4:	d8e6      	bhi.n	800a6c4 <__mdiff+0x88>
 800a6f6:	1b33      	subs	r3, r6, r4
 800a6f8:	3b15      	subs	r3, #21
 800a6fa:	f023 0303 	bic.w	r3, r3, #3
 800a6fe:	3415      	adds	r4, #21
 800a700:	3304      	adds	r3, #4
 800a702:	42a6      	cmp	r6, r4
 800a704:	bf38      	it	cc
 800a706:	2304      	movcc	r3, #4
 800a708:	441d      	add	r5, r3
 800a70a:	445b      	add	r3, fp
 800a70c:	461e      	mov	r6, r3
 800a70e:	462c      	mov	r4, r5
 800a710:	4544      	cmp	r4, r8
 800a712:	d30e      	bcc.n	800a732 <__mdiff+0xf6>
 800a714:	f108 0103 	add.w	r1, r8, #3
 800a718:	1b49      	subs	r1, r1, r5
 800a71a:	f021 0103 	bic.w	r1, r1, #3
 800a71e:	3d03      	subs	r5, #3
 800a720:	45a8      	cmp	r8, r5
 800a722:	bf38      	it	cc
 800a724:	2100      	movcc	r1, #0
 800a726:	440b      	add	r3, r1
 800a728:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a72c:	b199      	cbz	r1, 800a756 <__mdiff+0x11a>
 800a72e:	6117      	str	r7, [r2, #16]
 800a730:	e79e      	b.n	800a670 <__mdiff+0x34>
 800a732:	46e6      	mov	lr, ip
 800a734:	f854 1b04 	ldr.w	r1, [r4], #4
 800a738:	fa1f fc81 	uxth.w	ip, r1
 800a73c:	44f4      	add	ip, lr
 800a73e:	0c08      	lsrs	r0, r1, #16
 800a740:	4471      	add	r1, lr
 800a742:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a746:	b289      	uxth	r1, r1
 800a748:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a74c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a750:	f846 1b04 	str.w	r1, [r6], #4
 800a754:	e7dc      	b.n	800a710 <__mdiff+0xd4>
 800a756:	3f01      	subs	r7, #1
 800a758:	e7e6      	b.n	800a728 <__mdiff+0xec>
 800a75a:	bf00      	nop
 800a75c:	0800bc66 	.word	0x0800bc66
 800a760:	0800bc77 	.word	0x0800bc77

0800a764 <__d2b>:
 800a764:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a768:	2101      	movs	r1, #1
 800a76a:	4690      	mov	r8, r2
 800a76c:	4699      	mov	r9, r3
 800a76e:	9e08      	ldr	r6, [sp, #32]
 800a770:	f7ff fcd0 	bl	800a114 <_Balloc>
 800a774:	4604      	mov	r4, r0
 800a776:	b930      	cbnz	r0, 800a786 <__d2b+0x22>
 800a778:	4602      	mov	r2, r0
 800a77a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a77e:	4b23      	ldr	r3, [pc, #140]	@ (800a80c <__d2b+0xa8>)
 800a780:	4823      	ldr	r0, [pc, #140]	@ (800a810 <__d2b+0xac>)
 800a782:	f000 fa71 	bl	800ac68 <__assert_func>
 800a786:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a78a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a78e:	b10d      	cbz	r5, 800a794 <__d2b+0x30>
 800a790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a794:	9301      	str	r3, [sp, #4]
 800a796:	f1b8 0300 	subs.w	r3, r8, #0
 800a79a:	d024      	beq.n	800a7e6 <__d2b+0x82>
 800a79c:	4668      	mov	r0, sp
 800a79e:	9300      	str	r3, [sp, #0]
 800a7a0:	f7ff fd7f 	bl	800a2a2 <__lo0bits>
 800a7a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a7a8:	b1d8      	cbz	r0, 800a7e2 <__d2b+0x7e>
 800a7aa:	f1c0 0320 	rsb	r3, r0, #32
 800a7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a7b2:	430b      	orrs	r3, r1
 800a7b4:	40c2      	lsrs	r2, r0
 800a7b6:	6163      	str	r3, [r4, #20]
 800a7b8:	9201      	str	r2, [sp, #4]
 800a7ba:	9b01      	ldr	r3, [sp, #4]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bf0c      	ite	eq
 800a7c0:	2201      	moveq	r2, #1
 800a7c2:	2202      	movne	r2, #2
 800a7c4:	61a3      	str	r3, [r4, #24]
 800a7c6:	6122      	str	r2, [r4, #16]
 800a7c8:	b1ad      	cbz	r5, 800a7f6 <__d2b+0x92>
 800a7ca:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a7ce:	4405      	add	r5, r0
 800a7d0:	6035      	str	r5, [r6, #0]
 800a7d2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a7d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7d8:	6018      	str	r0, [r3, #0]
 800a7da:	4620      	mov	r0, r4
 800a7dc:	b002      	add	sp, #8
 800a7de:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a7e2:	6161      	str	r1, [r4, #20]
 800a7e4:	e7e9      	b.n	800a7ba <__d2b+0x56>
 800a7e6:	a801      	add	r0, sp, #4
 800a7e8:	f7ff fd5b 	bl	800a2a2 <__lo0bits>
 800a7ec:	9b01      	ldr	r3, [sp, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	6163      	str	r3, [r4, #20]
 800a7f2:	3020      	adds	r0, #32
 800a7f4:	e7e7      	b.n	800a7c6 <__d2b+0x62>
 800a7f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a7fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7fe:	6030      	str	r0, [r6, #0]
 800a800:	6918      	ldr	r0, [r3, #16]
 800a802:	f7ff fd2f 	bl	800a264 <__hi0bits>
 800a806:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a80a:	e7e4      	b.n	800a7d6 <__d2b+0x72>
 800a80c:	0800bc66 	.word	0x0800bc66
 800a810:	0800bc77 	.word	0x0800bc77

0800a814 <__ssputs_r>:
 800a814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a818:	461f      	mov	r7, r3
 800a81a:	688e      	ldr	r6, [r1, #8]
 800a81c:	4682      	mov	sl, r0
 800a81e:	42be      	cmp	r6, r7
 800a820:	460c      	mov	r4, r1
 800a822:	4690      	mov	r8, r2
 800a824:	680b      	ldr	r3, [r1, #0]
 800a826:	d82d      	bhi.n	800a884 <__ssputs_r+0x70>
 800a828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a82c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a830:	d026      	beq.n	800a880 <__ssputs_r+0x6c>
 800a832:	6965      	ldr	r5, [r4, #20]
 800a834:	6909      	ldr	r1, [r1, #16]
 800a836:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a83a:	eba3 0901 	sub.w	r9, r3, r1
 800a83e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a842:	1c7b      	adds	r3, r7, #1
 800a844:	444b      	add	r3, r9
 800a846:	106d      	asrs	r5, r5, #1
 800a848:	429d      	cmp	r5, r3
 800a84a:	bf38      	it	cc
 800a84c:	461d      	movcc	r5, r3
 800a84e:	0553      	lsls	r3, r2, #21
 800a850:	d527      	bpl.n	800a8a2 <__ssputs_r+0x8e>
 800a852:	4629      	mov	r1, r5
 800a854:	f7ff fbd2 	bl	8009ffc <_malloc_r>
 800a858:	4606      	mov	r6, r0
 800a85a:	b360      	cbz	r0, 800a8b6 <__ssputs_r+0xa2>
 800a85c:	464a      	mov	r2, r9
 800a85e:	6921      	ldr	r1, [r4, #16]
 800a860:	f7fe fcfb 	bl	800925a <memcpy>
 800a864:	89a3      	ldrh	r3, [r4, #12]
 800a866:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a86e:	81a3      	strh	r3, [r4, #12]
 800a870:	6126      	str	r6, [r4, #16]
 800a872:	444e      	add	r6, r9
 800a874:	6026      	str	r6, [r4, #0]
 800a876:	463e      	mov	r6, r7
 800a878:	6165      	str	r5, [r4, #20]
 800a87a:	eba5 0509 	sub.w	r5, r5, r9
 800a87e:	60a5      	str	r5, [r4, #8]
 800a880:	42be      	cmp	r6, r7
 800a882:	d900      	bls.n	800a886 <__ssputs_r+0x72>
 800a884:	463e      	mov	r6, r7
 800a886:	4632      	mov	r2, r6
 800a888:	4641      	mov	r1, r8
 800a88a:	6820      	ldr	r0, [r4, #0]
 800a88c:	f000 f9c2 	bl	800ac14 <memmove>
 800a890:	2000      	movs	r0, #0
 800a892:	68a3      	ldr	r3, [r4, #8]
 800a894:	1b9b      	subs	r3, r3, r6
 800a896:	60a3      	str	r3, [r4, #8]
 800a898:	6823      	ldr	r3, [r4, #0]
 800a89a:	4433      	add	r3, r6
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a2:	462a      	mov	r2, r5
 800a8a4:	f000 fa24 	bl	800acf0 <_realloc_r>
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	2800      	cmp	r0, #0
 800a8ac:	d1e0      	bne.n	800a870 <__ssputs_r+0x5c>
 800a8ae:	4650      	mov	r0, sl
 800a8b0:	6921      	ldr	r1, [r4, #16]
 800a8b2:	f7ff fb31 	bl	8009f18 <_free_r>
 800a8b6:	230c      	movs	r3, #12
 800a8b8:	f8ca 3000 	str.w	r3, [sl]
 800a8bc:	89a3      	ldrh	r3, [r4, #12]
 800a8be:	f04f 30ff 	mov.w	r0, #4294967295
 800a8c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8c6:	81a3      	strh	r3, [r4, #12]
 800a8c8:	e7e9      	b.n	800a89e <__ssputs_r+0x8a>
	...

0800a8cc <_svfiprintf_r>:
 800a8cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d0:	4698      	mov	r8, r3
 800a8d2:	898b      	ldrh	r3, [r1, #12]
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	061b      	lsls	r3, r3, #24
 800a8d8:	460d      	mov	r5, r1
 800a8da:	4614      	mov	r4, r2
 800a8dc:	b09d      	sub	sp, #116	@ 0x74
 800a8de:	d510      	bpl.n	800a902 <_svfiprintf_r+0x36>
 800a8e0:	690b      	ldr	r3, [r1, #16]
 800a8e2:	b973      	cbnz	r3, 800a902 <_svfiprintf_r+0x36>
 800a8e4:	2140      	movs	r1, #64	@ 0x40
 800a8e6:	f7ff fb89 	bl	8009ffc <_malloc_r>
 800a8ea:	6028      	str	r0, [r5, #0]
 800a8ec:	6128      	str	r0, [r5, #16]
 800a8ee:	b930      	cbnz	r0, 800a8fe <_svfiprintf_r+0x32>
 800a8f0:	230c      	movs	r3, #12
 800a8f2:	603b      	str	r3, [r7, #0]
 800a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f8:	b01d      	add	sp, #116	@ 0x74
 800a8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8fe:	2340      	movs	r3, #64	@ 0x40
 800a900:	616b      	str	r3, [r5, #20]
 800a902:	2300      	movs	r3, #0
 800a904:	9309      	str	r3, [sp, #36]	@ 0x24
 800a906:	2320      	movs	r3, #32
 800a908:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a90c:	2330      	movs	r3, #48	@ 0x30
 800a90e:	f04f 0901 	mov.w	r9, #1
 800a912:	f8cd 800c 	str.w	r8, [sp, #12]
 800a916:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800aab0 <_svfiprintf_r+0x1e4>
 800a91a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a91e:	4623      	mov	r3, r4
 800a920:	469a      	mov	sl, r3
 800a922:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a926:	b10a      	cbz	r2, 800a92c <_svfiprintf_r+0x60>
 800a928:	2a25      	cmp	r2, #37	@ 0x25
 800a92a:	d1f9      	bne.n	800a920 <_svfiprintf_r+0x54>
 800a92c:	ebba 0b04 	subs.w	fp, sl, r4
 800a930:	d00b      	beq.n	800a94a <_svfiprintf_r+0x7e>
 800a932:	465b      	mov	r3, fp
 800a934:	4622      	mov	r2, r4
 800a936:	4629      	mov	r1, r5
 800a938:	4638      	mov	r0, r7
 800a93a:	f7ff ff6b 	bl	800a814 <__ssputs_r>
 800a93e:	3001      	adds	r0, #1
 800a940:	f000 80a7 	beq.w	800aa92 <_svfiprintf_r+0x1c6>
 800a944:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a946:	445a      	add	r2, fp
 800a948:	9209      	str	r2, [sp, #36]	@ 0x24
 800a94a:	f89a 3000 	ldrb.w	r3, [sl]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	f000 809f 	beq.w	800aa92 <_svfiprintf_r+0x1c6>
 800a954:	2300      	movs	r3, #0
 800a956:	f04f 32ff 	mov.w	r2, #4294967295
 800a95a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a95e:	f10a 0a01 	add.w	sl, sl, #1
 800a962:	9304      	str	r3, [sp, #16]
 800a964:	9307      	str	r3, [sp, #28]
 800a966:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a96a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a96c:	4654      	mov	r4, sl
 800a96e:	2205      	movs	r2, #5
 800a970:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a974:	484e      	ldr	r0, [pc, #312]	@ (800aab0 <_svfiprintf_r+0x1e4>)
 800a976:	f7fe fc62 	bl	800923e <memchr>
 800a97a:	9a04      	ldr	r2, [sp, #16]
 800a97c:	b9d8      	cbnz	r0, 800a9b6 <_svfiprintf_r+0xea>
 800a97e:	06d0      	lsls	r0, r2, #27
 800a980:	bf44      	itt	mi
 800a982:	2320      	movmi	r3, #32
 800a984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a988:	0711      	lsls	r1, r2, #28
 800a98a:	bf44      	itt	mi
 800a98c:	232b      	movmi	r3, #43	@ 0x2b
 800a98e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a992:	f89a 3000 	ldrb.w	r3, [sl]
 800a996:	2b2a      	cmp	r3, #42	@ 0x2a
 800a998:	d015      	beq.n	800a9c6 <_svfiprintf_r+0xfa>
 800a99a:	4654      	mov	r4, sl
 800a99c:	2000      	movs	r0, #0
 800a99e:	f04f 0c0a 	mov.w	ip, #10
 800a9a2:	9a07      	ldr	r2, [sp, #28]
 800a9a4:	4621      	mov	r1, r4
 800a9a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9aa:	3b30      	subs	r3, #48	@ 0x30
 800a9ac:	2b09      	cmp	r3, #9
 800a9ae:	d94b      	bls.n	800aa48 <_svfiprintf_r+0x17c>
 800a9b0:	b1b0      	cbz	r0, 800a9e0 <_svfiprintf_r+0x114>
 800a9b2:	9207      	str	r2, [sp, #28]
 800a9b4:	e014      	b.n	800a9e0 <_svfiprintf_r+0x114>
 800a9b6:	eba0 0308 	sub.w	r3, r0, r8
 800a9ba:	fa09 f303 	lsl.w	r3, r9, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	46a2      	mov	sl, r4
 800a9c2:	9304      	str	r3, [sp, #16]
 800a9c4:	e7d2      	b.n	800a96c <_svfiprintf_r+0xa0>
 800a9c6:	9b03      	ldr	r3, [sp, #12]
 800a9c8:	1d19      	adds	r1, r3, #4
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	9103      	str	r1, [sp, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfbb      	ittet	lt
 800a9d2:	425b      	neglt	r3, r3
 800a9d4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9d8:	9307      	strge	r3, [sp, #28]
 800a9da:	9307      	strlt	r3, [sp, #28]
 800a9dc:	bfb8      	it	lt
 800a9de:	9204      	strlt	r2, [sp, #16]
 800a9e0:	7823      	ldrb	r3, [r4, #0]
 800a9e2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a9e4:	d10a      	bne.n	800a9fc <_svfiprintf_r+0x130>
 800a9e6:	7863      	ldrb	r3, [r4, #1]
 800a9e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9ea:	d132      	bne.n	800aa52 <_svfiprintf_r+0x186>
 800a9ec:	9b03      	ldr	r3, [sp, #12]
 800a9ee:	3402      	adds	r4, #2
 800a9f0:	1d1a      	adds	r2, r3, #4
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	9203      	str	r2, [sp, #12]
 800a9f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9fa:	9305      	str	r3, [sp, #20]
 800a9fc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800aab4 <_svfiprintf_r+0x1e8>
 800aa00:	2203      	movs	r2, #3
 800aa02:	4650      	mov	r0, sl
 800aa04:	7821      	ldrb	r1, [r4, #0]
 800aa06:	f7fe fc1a 	bl	800923e <memchr>
 800aa0a:	b138      	cbz	r0, 800aa1c <_svfiprintf_r+0x150>
 800aa0c:	2240      	movs	r2, #64	@ 0x40
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	eba0 000a 	sub.w	r0, r0, sl
 800aa14:	4082      	lsls	r2, r0
 800aa16:	4313      	orrs	r3, r2
 800aa18:	3401      	adds	r4, #1
 800aa1a:	9304      	str	r3, [sp, #16]
 800aa1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa20:	2206      	movs	r2, #6
 800aa22:	4825      	ldr	r0, [pc, #148]	@ (800aab8 <_svfiprintf_r+0x1ec>)
 800aa24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa28:	f7fe fc09 	bl	800923e <memchr>
 800aa2c:	2800      	cmp	r0, #0
 800aa2e:	d036      	beq.n	800aa9e <_svfiprintf_r+0x1d2>
 800aa30:	4b22      	ldr	r3, [pc, #136]	@ (800aabc <_svfiprintf_r+0x1f0>)
 800aa32:	bb1b      	cbnz	r3, 800aa7c <_svfiprintf_r+0x1b0>
 800aa34:	9b03      	ldr	r3, [sp, #12]
 800aa36:	3307      	adds	r3, #7
 800aa38:	f023 0307 	bic.w	r3, r3, #7
 800aa3c:	3308      	adds	r3, #8
 800aa3e:	9303      	str	r3, [sp, #12]
 800aa40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa42:	4433      	add	r3, r6
 800aa44:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa46:	e76a      	b.n	800a91e <_svfiprintf_r+0x52>
 800aa48:	460c      	mov	r4, r1
 800aa4a:	2001      	movs	r0, #1
 800aa4c:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa50:	e7a8      	b.n	800a9a4 <_svfiprintf_r+0xd8>
 800aa52:	2300      	movs	r3, #0
 800aa54:	f04f 0c0a 	mov.w	ip, #10
 800aa58:	4619      	mov	r1, r3
 800aa5a:	3401      	adds	r4, #1
 800aa5c:	9305      	str	r3, [sp, #20]
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa64:	3a30      	subs	r2, #48	@ 0x30
 800aa66:	2a09      	cmp	r2, #9
 800aa68:	d903      	bls.n	800aa72 <_svfiprintf_r+0x1a6>
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d0c6      	beq.n	800a9fc <_svfiprintf_r+0x130>
 800aa6e:	9105      	str	r1, [sp, #20]
 800aa70:	e7c4      	b.n	800a9fc <_svfiprintf_r+0x130>
 800aa72:	4604      	mov	r4, r0
 800aa74:	2301      	movs	r3, #1
 800aa76:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa7a:	e7f0      	b.n	800aa5e <_svfiprintf_r+0x192>
 800aa7c:	ab03      	add	r3, sp, #12
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	462a      	mov	r2, r5
 800aa82:	4638      	mov	r0, r7
 800aa84:	4b0e      	ldr	r3, [pc, #56]	@ (800aac0 <_svfiprintf_r+0x1f4>)
 800aa86:	a904      	add	r1, sp, #16
 800aa88:	f7fd fdec 	bl	8008664 <_printf_float>
 800aa8c:	1c42      	adds	r2, r0, #1
 800aa8e:	4606      	mov	r6, r0
 800aa90:	d1d6      	bne.n	800aa40 <_svfiprintf_r+0x174>
 800aa92:	89ab      	ldrh	r3, [r5, #12]
 800aa94:	065b      	lsls	r3, r3, #25
 800aa96:	f53f af2d 	bmi.w	800a8f4 <_svfiprintf_r+0x28>
 800aa9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa9c:	e72c      	b.n	800a8f8 <_svfiprintf_r+0x2c>
 800aa9e:	ab03      	add	r3, sp, #12
 800aaa0:	9300      	str	r3, [sp, #0]
 800aaa2:	462a      	mov	r2, r5
 800aaa4:	4638      	mov	r0, r7
 800aaa6:	4b06      	ldr	r3, [pc, #24]	@ (800aac0 <_svfiprintf_r+0x1f4>)
 800aaa8:	a904      	add	r1, sp, #16
 800aaaa:	f7fe f879 	bl	8008ba0 <_printf_i>
 800aaae:	e7ed      	b.n	800aa8c <_svfiprintf_r+0x1c0>
 800aab0:	0800bdd0 	.word	0x0800bdd0
 800aab4:	0800bdd6 	.word	0x0800bdd6
 800aab8:	0800bdda 	.word	0x0800bdda
 800aabc:	08008665 	.word	0x08008665
 800aac0:	0800a815 	.word	0x0800a815

0800aac4 <__sflush_r>:
 800aac4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaca:	0716      	lsls	r6, r2, #28
 800aacc:	4605      	mov	r5, r0
 800aace:	460c      	mov	r4, r1
 800aad0:	d454      	bmi.n	800ab7c <__sflush_r+0xb8>
 800aad2:	684b      	ldr	r3, [r1, #4]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dc02      	bgt.n	800aade <__sflush_r+0x1a>
 800aad8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dd48      	ble.n	800ab70 <__sflush_r+0xac>
 800aade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	d045      	beq.n	800ab70 <__sflush_r+0xac>
 800aae4:	2300      	movs	r3, #0
 800aae6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aaea:	682f      	ldr	r7, [r5, #0]
 800aaec:	6a21      	ldr	r1, [r4, #32]
 800aaee:	602b      	str	r3, [r5, #0]
 800aaf0:	d030      	beq.n	800ab54 <__sflush_r+0x90>
 800aaf2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	0759      	lsls	r1, r3, #29
 800aaf8:	d505      	bpl.n	800ab06 <__sflush_r+0x42>
 800aafa:	6863      	ldr	r3, [r4, #4]
 800aafc:	1ad2      	subs	r2, r2, r3
 800aafe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab00:	b10b      	cbz	r3, 800ab06 <__sflush_r+0x42>
 800ab02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab04:	1ad2      	subs	r2, r2, r3
 800ab06:	2300      	movs	r3, #0
 800ab08:	4628      	mov	r0, r5
 800ab0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab0c:	6a21      	ldr	r1, [r4, #32]
 800ab0e:	47b0      	blx	r6
 800ab10:	1c43      	adds	r3, r0, #1
 800ab12:	89a3      	ldrh	r3, [r4, #12]
 800ab14:	d106      	bne.n	800ab24 <__sflush_r+0x60>
 800ab16:	6829      	ldr	r1, [r5, #0]
 800ab18:	291d      	cmp	r1, #29
 800ab1a:	d82b      	bhi.n	800ab74 <__sflush_r+0xb0>
 800ab1c:	4a28      	ldr	r2, [pc, #160]	@ (800abc0 <__sflush_r+0xfc>)
 800ab1e:	410a      	asrs	r2, r1
 800ab20:	07d6      	lsls	r6, r2, #31
 800ab22:	d427      	bmi.n	800ab74 <__sflush_r+0xb0>
 800ab24:	2200      	movs	r2, #0
 800ab26:	6062      	str	r2, [r4, #4]
 800ab28:	6922      	ldr	r2, [r4, #16]
 800ab2a:	04d9      	lsls	r1, r3, #19
 800ab2c:	6022      	str	r2, [r4, #0]
 800ab2e:	d504      	bpl.n	800ab3a <__sflush_r+0x76>
 800ab30:	1c42      	adds	r2, r0, #1
 800ab32:	d101      	bne.n	800ab38 <__sflush_r+0x74>
 800ab34:	682b      	ldr	r3, [r5, #0]
 800ab36:	b903      	cbnz	r3, 800ab3a <__sflush_r+0x76>
 800ab38:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab3c:	602f      	str	r7, [r5, #0]
 800ab3e:	b1b9      	cbz	r1, 800ab70 <__sflush_r+0xac>
 800ab40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab44:	4299      	cmp	r1, r3
 800ab46:	d002      	beq.n	800ab4e <__sflush_r+0x8a>
 800ab48:	4628      	mov	r0, r5
 800ab4a:	f7ff f9e5 	bl	8009f18 <_free_r>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab52:	e00d      	b.n	800ab70 <__sflush_r+0xac>
 800ab54:	2301      	movs	r3, #1
 800ab56:	4628      	mov	r0, r5
 800ab58:	47b0      	blx	r6
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	1c50      	adds	r0, r2, #1
 800ab5e:	d1c9      	bne.n	800aaf4 <__sflush_r+0x30>
 800ab60:	682b      	ldr	r3, [r5, #0]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0c6      	beq.n	800aaf4 <__sflush_r+0x30>
 800ab66:	2b1d      	cmp	r3, #29
 800ab68:	d001      	beq.n	800ab6e <__sflush_r+0xaa>
 800ab6a:	2b16      	cmp	r3, #22
 800ab6c:	d11d      	bne.n	800abaa <__sflush_r+0xe6>
 800ab6e:	602f      	str	r7, [r5, #0]
 800ab70:	2000      	movs	r0, #0
 800ab72:	e021      	b.n	800abb8 <__sflush_r+0xf4>
 800ab74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab78:	b21b      	sxth	r3, r3
 800ab7a:	e01a      	b.n	800abb2 <__sflush_r+0xee>
 800ab7c:	690f      	ldr	r7, [r1, #16]
 800ab7e:	2f00      	cmp	r7, #0
 800ab80:	d0f6      	beq.n	800ab70 <__sflush_r+0xac>
 800ab82:	0793      	lsls	r3, r2, #30
 800ab84:	bf18      	it	ne
 800ab86:	2300      	movne	r3, #0
 800ab88:	680e      	ldr	r6, [r1, #0]
 800ab8a:	bf08      	it	eq
 800ab8c:	694b      	ldreq	r3, [r1, #20]
 800ab8e:	1bf6      	subs	r6, r6, r7
 800ab90:	600f      	str	r7, [r1, #0]
 800ab92:	608b      	str	r3, [r1, #8]
 800ab94:	2e00      	cmp	r6, #0
 800ab96:	ddeb      	ble.n	800ab70 <__sflush_r+0xac>
 800ab98:	4633      	mov	r3, r6
 800ab9a:	463a      	mov	r2, r7
 800ab9c:	4628      	mov	r0, r5
 800ab9e:	6a21      	ldr	r1, [r4, #32]
 800aba0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800aba4:	47e0      	blx	ip
 800aba6:	2800      	cmp	r0, #0
 800aba8:	dc07      	bgt.n	800abba <__sflush_r+0xf6>
 800abaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	81a3      	strh	r3, [r4, #12]
 800abb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abba:	4407      	add	r7, r0
 800abbc:	1a36      	subs	r6, r6, r0
 800abbe:	e7e9      	b.n	800ab94 <__sflush_r+0xd0>
 800abc0:	dfbffffe 	.word	0xdfbffffe

0800abc4 <_fflush_r>:
 800abc4:	b538      	push	{r3, r4, r5, lr}
 800abc6:	690b      	ldr	r3, [r1, #16]
 800abc8:	4605      	mov	r5, r0
 800abca:	460c      	mov	r4, r1
 800abcc:	b913      	cbnz	r3, 800abd4 <_fflush_r+0x10>
 800abce:	2500      	movs	r5, #0
 800abd0:	4628      	mov	r0, r5
 800abd2:	bd38      	pop	{r3, r4, r5, pc}
 800abd4:	b118      	cbz	r0, 800abde <_fflush_r+0x1a>
 800abd6:	6a03      	ldr	r3, [r0, #32]
 800abd8:	b90b      	cbnz	r3, 800abde <_fflush_r+0x1a>
 800abda:	f7fe f98d 	bl	8008ef8 <__sinit>
 800abde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d0f3      	beq.n	800abce <_fflush_r+0xa>
 800abe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abe8:	07d0      	lsls	r0, r2, #31
 800abea:	d404      	bmi.n	800abf6 <_fflush_r+0x32>
 800abec:	0599      	lsls	r1, r3, #22
 800abee:	d402      	bmi.n	800abf6 <_fflush_r+0x32>
 800abf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abf2:	f7fe fb22 	bl	800923a <__retarget_lock_acquire_recursive>
 800abf6:	4628      	mov	r0, r5
 800abf8:	4621      	mov	r1, r4
 800abfa:	f7ff ff63 	bl	800aac4 <__sflush_r>
 800abfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac00:	4605      	mov	r5, r0
 800ac02:	07da      	lsls	r2, r3, #31
 800ac04:	d4e4      	bmi.n	800abd0 <_fflush_r+0xc>
 800ac06:	89a3      	ldrh	r3, [r4, #12]
 800ac08:	059b      	lsls	r3, r3, #22
 800ac0a:	d4e1      	bmi.n	800abd0 <_fflush_r+0xc>
 800ac0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac0e:	f7fe fb15 	bl	800923c <__retarget_lock_release_recursive>
 800ac12:	e7dd      	b.n	800abd0 <_fflush_r+0xc>

0800ac14 <memmove>:
 800ac14:	4288      	cmp	r0, r1
 800ac16:	b510      	push	{r4, lr}
 800ac18:	eb01 0402 	add.w	r4, r1, r2
 800ac1c:	d902      	bls.n	800ac24 <memmove+0x10>
 800ac1e:	4284      	cmp	r4, r0
 800ac20:	4623      	mov	r3, r4
 800ac22:	d807      	bhi.n	800ac34 <memmove+0x20>
 800ac24:	1e43      	subs	r3, r0, #1
 800ac26:	42a1      	cmp	r1, r4
 800ac28:	d008      	beq.n	800ac3c <memmove+0x28>
 800ac2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac32:	e7f8      	b.n	800ac26 <memmove+0x12>
 800ac34:	4601      	mov	r1, r0
 800ac36:	4402      	add	r2, r0
 800ac38:	428a      	cmp	r2, r1
 800ac3a:	d100      	bne.n	800ac3e <memmove+0x2a>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac46:	e7f7      	b.n	800ac38 <memmove+0x24>

0800ac48 <_sbrk_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	4d05      	ldr	r5, [pc, #20]	@ (800ac64 <_sbrk_r+0x1c>)
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	f7f7 fa56 	bl	8002104 <_sbrk>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_sbrk_r+0x1a>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_sbrk_r+0x1a>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	20003628 	.word	0x20003628

0800ac68 <__assert_func>:
 800ac68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	461a      	mov	r2, r3
 800ac6e:	4b09      	ldr	r3, [pc, #36]	@ (800ac94 <__assert_func+0x2c>)
 800ac70:	4605      	mov	r5, r0
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	68d8      	ldr	r0, [r3, #12]
 800ac76:	b954      	cbnz	r4, 800ac8e <__assert_func+0x26>
 800ac78:	4b07      	ldr	r3, [pc, #28]	@ (800ac98 <__assert_func+0x30>)
 800ac7a:	461c      	mov	r4, r3
 800ac7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac80:	9100      	str	r1, [sp, #0]
 800ac82:	462b      	mov	r3, r5
 800ac84:	4905      	ldr	r1, [pc, #20]	@ (800ac9c <__assert_func+0x34>)
 800ac86:	f000 f86f 	bl	800ad68 <fiprintf>
 800ac8a:	f000 f87f 	bl	800ad8c <abort>
 800ac8e:	4b04      	ldr	r3, [pc, #16]	@ (800aca0 <__assert_func+0x38>)
 800ac90:	e7f4      	b.n	800ac7c <__assert_func+0x14>
 800ac92:	bf00      	nop
 800ac94:	20000024 	.word	0x20000024
 800ac98:	0800be26 	.word	0x0800be26
 800ac9c:	0800bdf8 	.word	0x0800bdf8
 800aca0:	0800bdeb 	.word	0x0800bdeb

0800aca4 <_calloc_r>:
 800aca4:	b570      	push	{r4, r5, r6, lr}
 800aca6:	fba1 5402 	umull	r5, r4, r1, r2
 800acaa:	b93c      	cbnz	r4, 800acbc <_calloc_r+0x18>
 800acac:	4629      	mov	r1, r5
 800acae:	f7ff f9a5 	bl	8009ffc <_malloc_r>
 800acb2:	4606      	mov	r6, r0
 800acb4:	b928      	cbnz	r0, 800acc2 <_calloc_r+0x1e>
 800acb6:	2600      	movs	r6, #0
 800acb8:	4630      	mov	r0, r6
 800acba:	bd70      	pop	{r4, r5, r6, pc}
 800acbc:	220c      	movs	r2, #12
 800acbe:	6002      	str	r2, [r0, #0]
 800acc0:	e7f9      	b.n	800acb6 <_calloc_r+0x12>
 800acc2:	462a      	mov	r2, r5
 800acc4:	4621      	mov	r1, r4
 800acc6:	f7fe f9e4 	bl	8009092 <memset>
 800acca:	e7f5      	b.n	800acb8 <_calloc_r+0x14>

0800accc <__ascii_mbtowc>:
 800accc:	b082      	sub	sp, #8
 800acce:	b901      	cbnz	r1, 800acd2 <__ascii_mbtowc+0x6>
 800acd0:	a901      	add	r1, sp, #4
 800acd2:	b142      	cbz	r2, 800ace6 <__ascii_mbtowc+0x1a>
 800acd4:	b14b      	cbz	r3, 800acea <__ascii_mbtowc+0x1e>
 800acd6:	7813      	ldrb	r3, [r2, #0]
 800acd8:	600b      	str	r3, [r1, #0]
 800acda:	7812      	ldrb	r2, [r2, #0]
 800acdc:	1e10      	subs	r0, r2, #0
 800acde:	bf18      	it	ne
 800ace0:	2001      	movne	r0, #1
 800ace2:	b002      	add	sp, #8
 800ace4:	4770      	bx	lr
 800ace6:	4610      	mov	r0, r2
 800ace8:	e7fb      	b.n	800ace2 <__ascii_mbtowc+0x16>
 800acea:	f06f 0001 	mvn.w	r0, #1
 800acee:	e7f8      	b.n	800ace2 <__ascii_mbtowc+0x16>

0800acf0 <_realloc_r>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	4680      	mov	r8, r0
 800acf6:	4615      	mov	r5, r2
 800acf8:	460c      	mov	r4, r1
 800acfa:	b921      	cbnz	r1, 800ad06 <_realloc_r+0x16>
 800acfc:	4611      	mov	r1, r2
 800acfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad02:	f7ff b97b 	b.w	8009ffc <_malloc_r>
 800ad06:	b92a      	cbnz	r2, 800ad14 <_realloc_r+0x24>
 800ad08:	f7ff f906 	bl	8009f18 <_free_r>
 800ad0c:	2400      	movs	r4, #0
 800ad0e:	4620      	mov	r0, r4
 800ad10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad14:	f000 f841 	bl	800ad9a <_malloc_usable_size_r>
 800ad18:	4285      	cmp	r5, r0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	d802      	bhi.n	800ad24 <_realloc_r+0x34>
 800ad1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad22:	d8f4      	bhi.n	800ad0e <_realloc_r+0x1e>
 800ad24:	4629      	mov	r1, r5
 800ad26:	4640      	mov	r0, r8
 800ad28:	f7ff f968 	bl	8009ffc <_malloc_r>
 800ad2c:	4607      	mov	r7, r0
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d0ec      	beq.n	800ad0c <_realloc_r+0x1c>
 800ad32:	42b5      	cmp	r5, r6
 800ad34:	462a      	mov	r2, r5
 800ad36:	4621      	mov	r1, r4
 800ad38:	bf28      	it	cs
 800ad3a:	4632      	movcs	r2, r6
 800ad3c:	f7fe fa8d 	bl	800925a <memcpy>
 800ad40:	4621      	mov	r1, r4
 800ad42:	4640      	mov	r0, r8
 800ad44:	f7ff f8e8 	bl	8009f18 <_free_r>
 800ad48:	463c      	mov	r4, r7
 800ad4a:	e7e0      	b.n	800ad0e <_realloc_r+0x1e>

0800ad4c <__ascii_wctomb>:
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	b141      	cbz	r1, 800ad64 <__ascii_wctomb+0x18>
 800ad52:	2aff      	cmp	r2, #255	@ 0xff
 800ad54:	d904      	bls.n	800ad60 <__ascii_wctomb+0x14>
 800ad56:	228a      	movs	r2, #138	@ 0x8a
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	4770      	bx	lr
 800ad60:	2001      	movs	r0, #1
 800ad62:	700a      	strb	r2, [r1, #0]
 800ad64:	4770      	bx	lr
	...

0800ad68 <fiprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b503      	push	{r0, r1, lr}
 800ad6c:	4601      	mov	r1, r0
 800ad6e:	ab03      	add	r3, sp, #12
 800ad70:	4805      	ldr	r0, [pc, #20]	@ (800ad88 <fiprintf+0x20>)
 800ad72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad76:	6800      	ldr	r0, [r0, #0]
 800ad78:	9301      	str	r3, [sp, #4]
 800ad7a:	f000 f83d 	bl	800adf8 <_vfiprintf_r>
 800ad7e:	b002      	add	sp, #8
 800ad80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad84:	b003      	add	sp, #12
 800ad86:	4770      	bx	lr
 800ad88:	20000024 	.word	0x20000024

0800ad8c <abort>:
 800ad8c:	2006      	movs	r0, #6
 800ad8e:	b508      	push	{r3, lr}
 800ad90:	f000 fa06 	bl	800b1a0 <raise>
 800ad94:	2001      	movs	r0, #1
 800ad96:	f7f7 f940 	bl	800201a <_exit>

0800ad9a <_malloc_usable_size_r>:
 800ad9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad9e:	1f18      	subs	r0, r3, #4
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	bfbc      	itt	lt
 800ada4:	580b      	ldrlt	r3, [r1, r0]
 800ada6:	18c0      	addlt	r0, r0, r3
 800ada8:	4770      	bx	lr

0800adaa <__sfputc_r>:
 800adaa:	6893      	ldr	r3, [r2, #8]
 800adac:	b410      	push	{r4}
 800adae:	3b01      	subs	r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	6093      	str	r3, [r2, #8]
 800adb4:	da07      	bge.n	800adc6 <__sfputc_r+0x1c>
 800adb6:	6994      	ldr	r4, [r2, #24]
 800adb8:	42a3      	cmp	r3, r4
 800adba:	db01      	blt.n	800adc0 <__sfputc_r+0x16>
 800adbc:	290a      	cmp	r1, #10
 800adbe:	d102      	bne.n	800adc6 <__sfputc_r+0x1c>
 800adc0:	bc10      	pop	{r4}
 800adc2:	f000 b931 	b.w	800b028 <__swbuf_r>
 800adc6:	6813      	ldr	r3, [r2, #0]
 800adc8:	1c58      	adds	r0, r3, #1
 800adca:	6010      	str	r0, [r2, #0]
 800adcc:	7019      	strb	r1, [r3, #0]
 800adce:	4608      	mov	r0, r1
 800add0:	bc10      	pop	{r4}
 800add2:	4770      	bx	lr

0800add4 <__sfputs_r>:
 800add4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add6:	4606      	mov	r6, r0
 800add8:	460f      	mov	r7, r1
 800adda:	4614      	mov	r4, r2
 800addc:	18d5      	adds	r5, r2, r3
 800adde:	42ac      	cmp	r4, r5
 800ade0:	d101      	bne.n	800ade6 <__sfputs_r+0x12>
 800ade2:	2000      	movs	r0, #0
 800ade4:	e007      	b.n	800adf6 <__sfputs_r+0x22>
 800ade6:	463a      	mov	r2, r7
 800ade8:	4630      	mov	r0, r6
 800adea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adee:	f7ff ffdc 	bl	800adaa <__sfputc_r>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	d1f3      	bne.n	800adde <__sfputs_r+0xa>
 800adf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800adf8 <_vfiprintf_r>:
 800adf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adfc:	460d      	mov	r5, r1
 800adfe:	4614      	mov	r4, r2
 800ae00:	4698      	mov	r8, r3
 800ae02:	4606      	mov	r6, r0
 800ae04:	b09d      	sub	sp, #116	@ 0x74
 800ae06:	b118      	cbz	r0, 800ae10 <_vfiprintf_r+0x18>
 800ae08:	6a03      	ldr	r3, [r0, #32]
 800ae0a:	b90b      	cbnz	r3, 800ae10 <_vfiprintf_r+0x18>
 800ae0c:	f7fe f874 	bl	8008ef8 <__sinit>
 800ae10:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae12:	07d9      	lsls	r1, r3, #31
 800ae14:	d405      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae16:	89ab      	ldrh	r3, [r5, #12]
 800ae18:	059a      	lsls	r2, r3, #22
 800ae1a:	d402      	bmi.n	800ae22 <_vfiprintf_r+0x2a>
 800ae1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae1e:	f7fe fa0c 	bl	800923a <__retarget_lock_acquire_recursive>
 800ae22:	89ab      	ldrh	r3, [r5, #12]
 800ae24:	071b      	lsls	r3, r3, #28
 800ae26:	d501      	bpl.n	800ae2c <_vfiprintf_r+0x34>
 800ae28:	692b      	ldr	r3, [r5, #16]
 800ae2a:	b99b      	cbnz	r3, 800ae54 <_vfiprintf_r+0x5c>
 800ae2c:	4629      	mov	r1, r5
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f000 f938 	bl	800b0a4 <__swsetup_r>
 800ae34:	b170      	cbz	r0, 800ae54 <_vfiprintf_r+0x5c>
 800ae36:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae38:	07dc      	lsls	r4, r3, #31
 800ae3a:	d504      	bpl.n	800ae46 <_vfiprintf_r+0x4e>
 800ae3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae40:	b01d      	add	sp, #116	@ 0x74
 800ae42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae46:	89ab      	ldrh	r3, [r5, #12]
 800ae48:	0598      	lsls	r0, r3, #22
 800ae4a:	d4f7      	bmi.n	800ae3c <_vfiprintf_r+0x44>
 800ae4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae4e:	f7fe f9f5 	bl	800923c <__retarget_lock_release_recursive>
 800ae52:	e7f3      	b.n	800ae3c <_vfiprintf_r+0x44>
 800ae54:	2300      	movs	r3, #0
 800ae56:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae58:	2320      	movs	r3, #32
 800ae5a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae5e:	2330      	movs	r3, #48	@ 0x30
 800ae60:	f04f 0901 	mov.w	r9, #1
 800ae64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae68:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b014 <_vfiprintf_r+0x21c>
 800ae6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae70:	4623      	mov	r3, r4
 800ae72:	469a      	mov	sl, r3
 800ae74:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae78:	b10a      	cbz	r2, 800ae7e <_vfiprintf_r+0x86>
 800ae7a:	2a25      	cmp	r2, #37	@ 0x25
 800ae7c:	d1f9      	bne.n	800ae72 <_vfiprintf_r+0x7a>
 800ae7e:	ebba 0b04 	subs.w	fp, sl, r4
 800ae82:	d00b      	beq.n	800ae9c <_vfiprintf_r+0xa4>
 800ae84:	465b      	mov	r3, fp
 800ae86:	4622      	mov	r2, r4
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f7ff ffa2 	bl	800add4 <__sfputs_r>
 800ae90:	3001      	adds	r0, #1
 800ae92:	f000 80a7 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800ae96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae98:	445a      	add	r2, fp
 800ae9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae9c:	f89a 3000 	ldrb.w	r3, [sl]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	f000 809f 	beq.w	800afe4 <_vfiprintf_r+0x1ec>
 800aea6:	2300      	movs	r3, #0
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aeb0:	f10a 0a01 	add.w	sl, sl, #1
 800aeb4:	9304      	str	r3, [sp, #16]
 800aeb6:	9307      	str	r3, [sp, #28]
 800aeb8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aebc:	931a      	str	r3, [sp, #104]	@ 0x68
 800aebe:	4654      	mov	r4, sl
 800aec0:	2205      	movs	r2, #5
 800aec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aec6:	4853      	ldr	r0, [pc, #332]	@ (800b014 <_vfiprintf_r+0x21c>)
 800aec8:	f7fe f9b9 	bl	800923e <memchr>
 800aecc:	9a04      	ldr	r2, [sp, #16]
 800aece:	b9d8      	cbnz	r0, 800af08 <_vfiprintf_r+0x110>
 800aed0:	06d1      	lsls	r1, r2, #27
 800aed2:	bf44      	itt	mi
 800aed4:	2320      	movmi	r3, #32
 800aed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeda:	0713      	lsls	r3, r2, #28
 800aedc:	bf44      	itt	mi
 800aede:	232b      	movmi	r3, #43	@ 0x2b
 800aee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aee4:	f89a 3000 	ldrb.w	r3, [sl]
 800aee8:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeea:	d015      	beq.n	800af18 <_vfiprintf_r+0x120>
 800aeec:	4654      	mov	r4, sl
 800aeee:	2000      	movs	r0, #0
 800aef0:	f04f 0c0a 	mov.w	ip, #10
 800aef4:	9a07      	ldr	r2, [sp, #28]
 800aef6:	4621      	mov	r1, r4
 800aef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aefc:	3b30      	subs	r3, #48	@ 0x30
 800aefe:	2b09      	cmp	r3, #9
 800af00:	d94b      	bls.n	800af9a <_vfiprintf_r+0x1a2>
 800af02:	b1b0      	cbz	r0, 800af32 <_vfiprintf_r+0x13a>
 800af04:	9207      	str	r2, [sp, #28]
 800af06:	e014      	b.n	800af32 <_vfiprintf_r+0x13a>
 800af08:	eba0 0308 	sub.w	r3, r0, r8
 800af0c:	fa09 f303 	lsl.w	r3, r9, r3
 800af10:	4313      	orrs	r3, r2
 800af12:	46a2      	mov	sl, r4
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	e7d2      	b.n	800aebe <_vfiprintf_r+0xc6>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	1d19      	adds	r1, r3, #4
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	9103      	str	r1, [sp, #12]
 800af20:	2b00      	cmp	r3, #0
 800af22:	bfbb      	ittet	lt
 800af24:	425b      	neglt	r3, r3
 800af26:	f042 0202 	orrlt.w	r2, r2, #2
 800af2a:	9307      	strge	r3, [sp, #28]
 800af2c:	9307      	strlt	r3, [sp, #28]
 800af2e:	bfb8      	it	lt
 800af30:	9204      	strlt	r2, [sp, #16]
 800af32:	7823      	ldrb	r3, [r4, #0]
 800af34:	2b2e      	cmp	r3, #46	@ 0x2e
 800af36:	d10a      	bne.n	800af4e <_vfiprintf_r+0x156>
 800af38:	7863      	ldrb	r3, [r4, #1]
 800af3a:	2b2a      	cmp	r3, #42	@ 0x2a
 800af3c:	d132      	bne.n	800afa4 <_vfiprintf_r+0x1ac>
 800af3e:	9b03      	ldr	r3, [sp, #12]
 800af40:	3402      	adds	r4, #2
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	9203      	str	r2, [sp, #12]
 800af48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b018 <_vfiprintf_r+0x220>
 800af52:	2203      	movs	r2, #3
 800af54:	4650      	mov	r0, sl
 800af56:	7821      	ldrb	r1, [r4, #0]
 800af58:	f7fe f971 	bl	800923e <memchr>
 800af5c:	b138      	cbz	r0, 800af6e <_vfiprintf_r+0x176>
 800af5e:	2240      	movs	r2, #64	@ 0x40
 800af60:	9b04      	ldr	r3, [sp, #16]
 800af62:	eba0 000a 	sub.w	r0, r0, sl
 800af66:	4082      	lsls	r2, r0
 800af68:	4313      	orrs	r3, r2
 800af6a:	3401      	adds	r4, #1
 800af6c:	9304      	str	r3, [sp, #16]
 800af6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af72:	2206      	movs	r2, #6
 800af74:	4829      	ldr	r0, [pc, #164]	@ (800b01c <_vfiprintf_r+0x224>)
 800af76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af7a:	f7fe f960 	bl	800923e <memchr>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d03f      	beq.n	800b002 <_vfiprintf_r+0x20a>
 800af82:	4b27      	ldr	r3, [pc, #156]	@ (800b020 <_vfiprintf_r+0x228>)
 800af84:	bb1b      	cbnz	r3, 800afce <_vfiprintf_r+0x1d6>
 800af86:	9b03      	ldr	r3, [sp, #12]
 800af88:	3307      	adds	r3, #7
 800af8a:	f023 0307 	bic.w	r3, r3, #7
 800af8e:	3308      	adds	r3, #8
 800af90:	9303      	str	r3, [sp, #12]
 800af92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af94:	443b      	add	r3, r7
 800af96:	9309      	str	r3, [sp, #36]	@ 0x24
 800af98:	e76a      	b.n	800ae70 <_vfiprintf_r+0x78>
 800af9a:	460c      	mov	r4, r1
 800af9c:	2001      	movs	r0, #1
 800af9e:	fb0c 3202 	mla	r2, ip, r2, r3
 800afa2:	e7a8      	b.n	800aef6 <_vfiprintf_r+0xfe>
 800afa4:	2300      	movs	r3, #0
 800afa6:	f04f 0c0a 	mov.w	ip, #10
 800afaa:	4619      	mov	r1, r3
 800afac:	3401      	adds	r4, #1
 800afae:	9305      	str	r3, [sp, #20]
 800afb0:	4620      	mov	r0, r4
 800afb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afb6:	3a30      	subs	r2, #48	@ 0x30
 800afb8:	2a09      	cmp	r2, #9
 800afba:	d903      	bls.n	800afc4 <_vfiprintf_r+0x1cc>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0c6      	beq.n	800af4e <_vfiprintf_r+0x156>
 800afc0:	9105      	str	r1, [sp, #20]
 800afc2:	e7c4      	b.n	800af4e <_vfiprintf_r+0x156>
 800afc4:	4604      	mov	r4, r0
 800afc6:	2301      	movs	r3, #1
 800afc8:	fb0c 2101 	mla	r1, ip, r1, r2
 800afcc:	e7f0      	b.n	800afb0 <_vfiprintf_r+0x1b8>
 800afce:	ab03      	add	r3, sp, #12
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	462a      	mov	r2, r5
 800afd4:	4630      	mov	r0, r6
 800afd6:	4b13      	ldr	r3, [pc, #76]	@ (800b024 <_vfiprintf_r+0x22c>)
 800afd8:	a904      	add	r1, sp, #16
 800afda:	f7fd fb43 	bl	8008664 <_printf_float>
 800afde:	4607      	mov	r7, r0
 800afe0:	1c78      	adds	r0, r7, #1
 800afe2:	d1d6      	bne.n	800af92 <_vfiprintf_r+0x19a>
 800afe4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afe6:	07d9      	lsls	r1, r3, #31
 800afe8:	d405      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800afea:	89ab      	ldrh	r3, [r5, #12]
 800afec:	059a      	lsls	r2, r3, #22
 800afee:	d402      	bmi.n	800aff6 <_vfiprintf_r+0x1fe>
 800aff0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aff2:	f7fe f923 	bl	800923c <__retarget_lock_release_recursive>
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	065b      	lsls	r3, r3, #25
 800affa:	f53f af1f 	bmi.w	800ae3c <_vfiprintf_r+0x44>
 800affe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b000:	e71e      	b.n	800ae40 <_vfiprintf_r+0x48>
 800b002:	ab03      	add	r3, sp, #12
 800b004:	9300      	str	r3, [sp, #0]
 800b006:	462a      	mov	r2, r5
 800b008:	4630      	mov	r0, r6
 800b00a:	4b06      	ldr	r3, [pc, #24]	@ (800b024 <_vfiprintf_r+0x22c>)
 800b00c:	a904      	add	r1, sp, #16
 800b00e:	f7fd fdc7 	bl	8008ba0 <_printf_i>
 800b012:	e7e4      	b.n	800afde <_vfiprintf_r+0x1e6>
 800b014:	0800bdd0 	.word	0x0800bdd0
 800b018:	0800bdd6 	.word	0x0800bdd6
 800b01c:	0800bdda 	.word	0x0800bdda
 800b020:	08008665 	.word	0x08008665
 800b024:	0800add5 	.word	0x0800add5

0800b028 <__swbuf_r>:
 800b028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b02a:	460e      	mov	r6, r1
 800b02c:	4614      	mov	r4, r2
 800b02e:	4605      	mov	r5, r0
 800b030:	b118      	cbz	r0, 800b03a <__swbuf_r+0x12>
 800b032:	6a03      	ldr	r3, [r0, #32]
 800b034:	b90b      	cbnz	r3, 800b03a <__swbuf_r+0x12>
 800b036:	f7fd ff5f 	bl	8008ef8 <__sinit>
 800b03a:	69a3      	ldr	r3, [r4, #24]
 800b03c:	60a3      	str	r3, [r4, #8]
 800b03e:	89a3      	ldrh	r3, [r4, #12]
 800b040:	071a      	lsls	r2, r3, #28
 800b042:	d501      	bpl.n	800b048 <__swbuf_r+0x20>
 800b044:	6923      	ldr	r3, [r4, #16]
 800b046:	b943      	cbnz	r3, 800b05a <__swbuf_r+0x32>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 f82a 	bl	800b0a4 <__swsetup_r>
 800b050:	b118      	cbz	r0, 800b05a <__swbuf_r+0x32>
 800b052:	f04f 37ff 	mov.w	r7, #4294967295
 800b056:	4638      	mov	r0, r7
 800b058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	6922      	ldr	r2, [r4, #16]
 800b05e:	b2f6      	uxtb	r6, r6
 800b060:	1a98      	subs	r0, r3, r2
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	4637      	mov	r7, r6
 800b066:	4283      	cmp	r3, r0
 800b068:	dc05      	bgt.n	800b076 <__swbuf_r+0x4e>
 800b06a:	4621      	mov	r1, r4
 800b06c:	4628      	mov	r0, r5
 800b06e:	f7ff fda9 	bl	800abc4 <_fflush_r>
 800b072:	2800      	cmp	r0, #0
 800b074:	d1ed      	bne.n	800b052 <__swbuf_r+0x2a>
 800b076:	68a3      	ldr	r3, [r4, #8]
 800b078:	3b01      	subs	r3, #1
 800b07a:	60a3      	str	r3, [r4, #8]
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	6022      	str	r2, [r4, #0]
 800b082:	701e      	strb	r6, [r3, #0]
 800b084:	6962      	ldr	r2, [r4, #20]
 800b086:	1c43      	adds	r3, r0, #1
 800b088:	429a      	cmp	r2, r3
 800b08a:	d004      	beq.n	800b096 <__swbuf_r+0x6e>
 800b08c:	89a3      	ldrh	r3, [r4, #12]
 800b08e:	07db      	lsls	r3, r3, #31
 800b090:	d5e1      	bpl.n	800b056 <__swbuf_r+0x2e>
 800b092:	2e0a      	cmp	r6, #10
 800b094:	d1df      	bne.n	800b056 <__swbuf_r+0x2e>
 800b096:	4621      	mov	r1, r4
 800b098:	4628      	mov	r0, r5
 800b09a:	f7ff fd93 	bl	800abc4 <_fflush_r>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	d0d9      	beq.n	800b056 <__swbuf_r+0x2e>
 800b0a2:	e7d6      	b.n	800b052 <__swbuf_r+0x2a>

0800b0a4 <__swsetup_r>:
 800b0a4:	b538      	push	{r3, r4, r5, lr}
 800b0a6:	4b29      	ldr	r3, [pc, #164]	@ (800b14c <__swsetup_r+0xa8>)
 800b0a8:	4605      	mov	r5, r0
 800b0aa:	6818      	ldr	r0, [r3, #0]
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	b118      	cbz	r0, 800b0b8 <__swsetup_r+0x14>
 800b0b0:	6a03      	ldr	r3, [r0, #32]
 800b0b2:	b90b      	cbnz	r3, 800b0b8 <__swsetup_r+0x14>
 800b0b4:	f7fd ff20 	bl	8008ef8 <__sinit>
 800b0b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0bc:	0719      	lsls	r1, r3, #28
 800b0be:	d422      	bmi.n	800b106 <__swsetup_r+0x62>
 800b0c0:	06da      	lsls	r2, r3, #27
 800b0c2:	d407      	bmi.n	800b0d4 <__swsetup_r+0x30>
 800b0c4:	2209      	movs	r2, #9
 800b0c6:	602a      	str	r2, [r5, #0]
 800b0c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b0d0:	81a3      	strh	r3, [r4, #12]
 800b0d2:	e033      	b.n	800b13c <__swsetup_r+0x98>
 800b0d4:	0758      	lsls	r0, r3, #29
 800b0d6:	d512      	bpl.n	800b0fe <__swsetup_r+0x5a>
 800b0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0da:	b141      	cbz	r1, 800b0ee <__swsetup_r+0x4a>
 800b0dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0e0:	4299      	cmp	r1, r3
 800b0e2:	d002      	beq.n	800b0ea <__swsetup_r+0x46>
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	f7fe ff17 	bl	8009f18 <_free_r>
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0ee:	89a3      	ldrh	r3, [r4, #12]
 800b0f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b0f4:	81a3      	strh	r3, [r4, #12]
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	6063      	str	r3, [r4, #4]
 800b0fa:	6923      	ldr	r3, [r4, #16]
 800b0fc:	6023      	str	r3, [r4, #0]
 800b0fe:	89a3      	ldrh	r3, [r4, #12]
 800b100:	f043 0308 	orr.w	r3, r3, #8
 800b104:	81a3      	strh	r3, [r4, #12]
 800b106:	6923      	ldr	r3, [r4, #16]
 800b108:	b94b      	cbnz	r3, 800b11e <__swsetup_r+0x7a>
 800b10a:	89a3      	ldrh	r3, [r4, #12]
 800b10c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b114:	d003      	beq.n	800b11e <__swsetup_r+0x7a>
 800b116:	4621      	mov	r1, r4
 800b118:	4628      	mov	r0, r5
 800b11a:	f000 f882 	bl	800b222 <__smakebuf_r>
 800b11e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b122:	f013 0201 	ands.w	r2, r3, #1
 800b126:	d00a      	beq.n	800b13e <__swsetup_r+0x9a>
 800b128:	2200      	movs	r2, #0
 800b12a:	60a2      	str	r2, [r4, #8]
 800b12c:	6962      	ldr	r2, [r4, #20]
 800b12e:	4252      	negs	r2, r2
 800b130:	61a2      	str	r2, [r4, #24]
 800b132:	6922      	ldr	r2, [r4, #16]
 800b134:	b942      	cbnz	r2, 800b148 <__swsetup_r+0xa4>
 800b136:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b13a:	d1c5      	bne.n	800b0c8 <__swsetup_r+0x24>
 800b13c:	bd38      	pop	{r3, r4, r5, pc}
 800b13e:	0799      	lsls	r1, r3, #30
 800b140:	bf58      	it	pl
 800b142:	6962      	ldrpl	r2, [r4, #20]
 800b144:	60a2      	str	r2, [r4, #8]
 800b146:	e7f4      	b.n	800b132 <__swsetup_r+0x8e>
 800b148:	2000      	movs	r0, #0
 800b14a:	e7f7      	b.n	800b13c <__swsetup_r+0x98>
 800b14c:	20000024 	.word	0x20000024

0800b150 <_raise_r>:
 800b150:	291f      	cmp	r1, #31
 800b152:	b538      	push	{r3, r4, r5, lr}
 800b154:	4605      	mov	r5, r0
 800b156:	460c      	mov	r4, r1
 800b158:	d904      	bls.n	800b164 <_raise_r+0x14>
 800b15a:	2316      	movs	r3, #22
 800b15c:	6003      	str	r3, [r0, #0]
 800b15e:	f04f 30ff 	mov.w	r0, #4294967295
 800b162:	bd38      	pop	{r3, r4, r5, pc}
 800b164:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b166:	b112      	cbz	r2, 800b16e <_raise_r+0x1e>
 800b168:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b16c:	b94b      	cbnz	r3, 800b182 <_raise_r+0x32>
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f830 	bl	800b1d4 <_getpid_r>
 800b174:	4622      	mov	r2, r4
 800b176:	4601      	mov	r1, r0
 800b178:	4628      	mov	r0, r5
 800b17a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b17e:	f000 b817 	b.w	800b1b0 <_kill_r>
 800b182:	2b01      	cmp	r3, #1
 800b184:	d00a      	beq.n	800b19c <_raise_r+0x4c>
 800b186:	1c59      	adds	r1, r3, #1
 800b188:	d103      	bne.n	800b192 <_raise_r+0x42>
 800b18a:	2316      	movs	r3, #22
 800b18c:	6003      	str	r3, [r0, #0]
 800b18e:	2001      	movs	r0, #1
 800b190:	e7e7      	b.n	800b162 <_raise_r+0x12>
 800b192:	2100      	movs	r1, #0
 800b194:	4620      	mov	r0, r4
 800b196:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b19a:	4798      	blx	r3
 800b19c:	2000      	movs	r0, #0
 800b19e:	e7e0      	b.n	800b162 <_raise_r+0x12>

0800b1a0 <raise>:
 800b1a0:	4b02      	ldr	r3, [pc, #8]	@ (800b1ac <raise+0xc>)
 800b1a2:	4601      	mov	r1, r0
 800b1a4:	6818      	ldr	r0, [r3, #0]
 800b1a6:	f7ff bfd3 	b.w	800b150 <_raise_r>
 800b1aa:	bf00      	nop
 800b1ac:	20000024 	.word	0x20000024

0800b1b0 <_kill_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4d06      	ldr	r5, [pc, #24]	@ (800b1d0 <_kill_r+0x20>)
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	4611      	mov	r1, r2
 800b1bc:	602b      	str	r3, [r5, #0]
 800b1be:	f7f6 ff1c 	bl	8001ffa <_kill>
 800b1c2:	1c43      	adds	r3, r0, #1
 800b1c4:	d102      	bne.n	800b1cc <_kill_r+0x1c>
 800b1c6:	682b      	ldr	r3, [r5, #0]
 800b1c8:	b103      	cbz	r3, 800b1cc <_kill_r+0x1c>
 800b1ca:	6023      	str	r3, [r4, #0]
 800b1cc:	bd38      	pop	{r3, r4, r5, pc}
 800b1ce:	bf00      	nop
 800b1d0:	20003628 	.word	0x20003628

0800b1d4 <_getpid_r>:
 800b1d4:	f7f6 bf0a 	b.w	8001fec <_getpid>

0800b1d8 <__swhatbuf_r>:
 800b1d8:	b570      	push	{r4, r5, r6, lr}
 800b1da:	460c      	mov	r4, r1
 800b1dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b1e0:	4615      	mov	r5, r2
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	461e      	mov	r6, r3
 800b1e6:	b096      	sub	sp, #88	@ 0x58
 800b1e8:	da0c      	bge.n	800b204 <__swhatbuf_r+0x2c>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	2100      	movs	r1, #0
 800b1ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b1f2:	bf14      	ite	ne
 800b1f4:	2340      	movne	r3, #64	@ 0x40
 800b1f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	6031      	str	r1, [r6, #0]
 800b1fe:	602b      	str	r3, [r5, #0]
 800b200:	b016      	add	sp, #88	@ 0x58
 800b202:	bd70      	pop	{r4, r5, r6, pc}
 800b204:	466a      	mov	r2, sp
 800b206:	f000 f849 	bl	800b29c <_fstat_r>
 800b20a:	2800      	cmp	r0, #0
 800b20c:	dbed      	blt.n	800b1ea <__swhatbuf_r+0x12>
 800b20e:	9901      	ldr	r1, [sp, #4]
 800b210:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b214:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b218:	4259      	negs	r1, r3
 800b21a:	4159      	adcs	r1, r3
 800b21c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b220:	e7eb      	b.n	800b1fa <__swhatbuf_r+0x22>

0800b222 <__smakebuf_r>:
 800b222:	898b      	ldrh	r3, [r1, #12]
 800b224:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b226:	079d      	lsls	r5, r3, #30
 800b228:	4606      	mov	r6, r0
 800b22a:	460c      	mov	r4, r1
 800b22c:	d507      	bpl.n	800b23e <__smakebuf_r+0x1c>
 800b22e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b232:	6023      	str	r3, [r4, #0]
 800b234:	6123      	str	r3, [r4, #16]
 800b236:	2301      	movs	r3, #1
 800b238:	6163      	str	r3, [r4, #20]
 800b23a:	b003      	add	sp, #12
 800b23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b23e:	466a      	mov	r2, sp
 800b240:	ab01      	add	r3, sp, #4
 800b242:	f7ff ffc9 	bl	800b1d8 <__swhatbuf_r>
 800b246:	9f00      	ldr	r7, [sp, #0]
 800b248:	4605      	mov	r5, r0
 800b24a:	4639      	mov	r1, r7
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fe fed5 	bl	8009ffc <_malloc_r>
 800b252:	b948      	cbnz	r0, 800b268 <__smakebuf_r+0x46>
 800b254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b258:	059a      	lsls	r2, r3, #22
 800b25a:	d4ee      	bmi.n	800b23a <__smakebuf_r+0x18>
 800b25c:	f023 0303 	bic.w	r3, r3, #3
 800b260:	f043 0302 	orr.w	r3, r3, #2
 800b264:	81a3      	strh	r3, [r4, #12]
 800b266:	e7e2      	b.n	800b22e <__smakebuf_r+0xc>
 800b268:	89a3      	ldrh	r3, [r4, #12]
 800b26a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b26e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b272:	81a3      	strh	r3, [r4, #12]
 800b274:	9b01      	ldr	r3, [sp, #4]
 800b276:	6020      	str	r0, [r4, #0]
 800b278:	b15b      	cbz	r3, 800b292 <__smakebuf_r+0x70>
 800b27a:	4630      	mov	r0, r6
 800b27c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b280:	f000 f81e 	bl	800b2c0 <_isatty_r>
 800b284:	b128      	cbz	r0, 800b292 <__smakebuf_r+0x70>
 800b286:	89a3      	ldrh	r3, [r4, #12]
 800b288:	f023 0303 	bic.w	r3, r3, #3
 800b28c:	f043 0301 	orr.w	r3, r3, #1
 800b290:	81a3      	strh	r3, [r4, #12]
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	431d      	orrs	r5, r3
 800b296:	81a5      	strh	r5, [r4, #12]
 800b298:	e7cf      	b.n	800b23a <__smakebuf_r+0x18>
	...

0800b29c <_fstat_r>:
 800b29c:	b538      	push	{r3, r4, r5, lr}
 800b29e:	2300      	movs	r3, #0
 800b2a0:	4d06      	ldr	r5, [pc, #24]	@ (800b2bc <_fstat_r+0x20>)
 800b2a2:	4604      	mov	r4, r0
 800b2a4:	4608      	mov	r0, r1
 800b2a6:	4611      	mov	r1, r2
 800b2a8:	602b      	str	r3, [r5, #0]
 800b2aa:	f7f6 ff05 	bl	80020b8 <_fstat>
 800b2ae:	1c43      	adds	r3, r0, #1
 800b2b0:	d102      	bne.n	800b2b8 <_fstat_r+0x1c>
 800b2b2:	682b      	ldr	r3, [r5, #0]
 800b2b4:	b103      	cbz	r3, 800b2b8 <_fstat_r+0x1c>
 800b2b6:	6023      	str	r3, [r4, #0]
 800b2b8:	bd38      	pop	{r3, r4, r5, pc}
 800b2ba:	bf00      	nop
 800b2bc:	20003628 	.word	0x20003628

0800b2c0 <_isatty_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	4d05      	ldr	r5, [pc, #20]	@ (800b2dc <_isatty_r+0x1c>)
 800b2c6:	4604      	mov	r4, r0
 800b2c8:	4608      	mov	r0, r1
 800b2ca:	602b      	str	r3, [r5, #0]
 800b2cc:	f7f6 ff03 	bl	80020d6 <_isatty>
 800b2d0:	1c43      	adds	r3, r0, #1
 800b2d2:	d102      	bne.n	800b2da <_isatty_r+0x1a>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	b103      	cbz	r3, 800b2da <_isatty_r+0x1a>
 800b2d8:	6023      	str	r3, [r4, #0]
 800b2da:	bd38      	pop	{r3, r4, r5, pc}
 800b2dc:	20003628 	.word	0x20003628

0800b2e0 <_init>:
 800b2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2e2:	bf00      	nop
 800b2e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2e6:	bc08      	pop	{r3}
 800b2e8:	469e      	mov	lr, r3
 800b2ea:	4770      	bx	lr

0800b2ec <_fini>:
 800b2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2ee:	bf00      	nop
 800b2f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f2:	bc08      	pop	{r3}
 800b2f4:	469e      	mov	lr, r3
 800b2f6:	4770      	bx	lr
