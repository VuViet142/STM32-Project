
Don_nhiem_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007984  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b88  08007a98  08007a98  00008a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008620  08008620  0000a1dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008620  08008620  00009620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008628  08008628  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008628  08008628  00009628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800862c  0800862c  0000962c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  08008630  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001dc  0800880c  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000894  0800880c  0000a894  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001000f  00000000  00000000  0000a205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000252d  00000000  00000000  0001a214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a8  00000000  00000000  0001c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d28  00000000  00000000  0001d7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a4  00000000  00000000  0001e518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ada  00000000  00000000  000376bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee92  00000000  00000000  0004b196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005924  00000000  00000000  000da06c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000df990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08007a7c 	.word	0x08007a7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08007a7c 	.word	0x08007a7c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <microDelay>:
float humi = 0;

char strCopy[20];

void microDelay (uint16_t delay)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d62:	4b08      	ldr	r3, [pc, #32]	@ (8000d84 <microDelay+0x2c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 8000d6a:	bf00      	nop
 8000d6c:	4b05      	ldr	r3, [pc, #20]	@ (8000d84 <microDelay+0x2c>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d3f9      	bcc.n	8000d6c <microDelay+0x14>
}
 8000d78:	bf00      	nop
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	2000027c 	.word	0x2000027c

08000d88 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 8000d9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000da2:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2302      	movs	r3, #2
 8000daa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	4619      	mov	r1, r3
 8000db4:	482c      	ldr	r0, [pc, #176]	@ (8000e68 <DHT11_Start+0xe0>)
 8000db6:	f001 fb1d 	bl	80023f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dc0:	4829      	ldr	r0, [pc, #164]	@ (8000e68 <DHT11_Start+0xe0>)
 8000dc2:	f001 fcb2 	bl	800272a <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8000dc6:	2014      	movs	r0, #20
 8000dc8:	f001 f930 	bl	800202c <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000dcc:	2201      	movs	r2, #1
 8000dce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dd2:	4825      	ldr	r0, [pc, #148]	@ (8000e68 <DHT11_Start+0xe0>)
 8000dd4:	f001 fca9 	bl	800272a <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8000dd8:	201e      	movs	r0, #30
 8000dda:	f7ff ffbd 	bl	8000d58 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 8000de2:	2301      	movs	r3, #1
 8000de4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	4619      	mov	r1, r3
 8000dea:	481f      	ldr	r0, [pc, #124]	@ (8000e68 <DHT11_Start+0xe0>)
 8000dec:	f001 fb02 	bl	80023f4 <HAL_GPIO_Init>
  microDelay (40);
 8000df0:	2028      	movs	r0, #40	@ 0x28
 8000df2:	f7ff ffb1 	bl	8000d58 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000df6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfa:	481b      	ldr	r0, [pc, #108]	@ (8000e68 <DHT11_Start+0xe0>)
 8000dfc:	f001 fc7e 	bl	80026fc <HAL_GPIO_ReadPin>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10c      	bne.n	8000e20 <DHT11_Start+0x98>
  {
    microDelay (80);
 8000e06:	2050      	movs	r0, #80	@ 0x50
 8000e08:	f7ff ffa6 	bl	8000d58 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8000e0c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e10:	4815      	ldr	r0, [pc, #84]	@ (8000e68 <DHT11_Start+0xe0>)
 8000e12:	f001 fc73 	bl	80026fc <HAL_GPIO_ReadPin>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <DHT11_Start+0x98>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8000e20:	f001 f8fa 	bl	8002018 <HAL_GetTick>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a11      	ldr	r2, [pc, #68]	@ (8000e6c <DHT11_Start+0xe4>)
 8000e28:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 8000e2a:	f001 f8f5 	bl	8002018 <HAL_GetTick>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	4a0f      	ldr	r2, [pc, #60]	@ (8000e70 <DHT11_Start+0xe8>)
 8000e32:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e34:	e004      	b.n	8000e40 <DHT11_Start+0xb8>
  {
    cMillis = HAL_GetTick();
 8000e36:	f001 f8ef 	bl	8002018 <HAL_GetTick>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <DHT11_Start+0xe8>)
 8000e3e:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e44:	4808      	ldr	r0, [pc, #32]	@ (8000e68 <DHT11_Start+0xe0>)
 8000e46:	f001 fc59 	bl	80026fc <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <DHT11_Start+0xd6>
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <DHT11_Start+0xe4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	1c9a      	adds	r2, r3, #2
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <DHT11_Start+0xe8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d8eb      	bhi.n	8000e36 <DHT11_Start+0xae>
  }
  return Response;
 8000e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40010c00 	.word	0x40010c00
 8000e6c:	20000314 	.word	0x20000314
 8000e70:	20000318 	.word	0x20000318

08000e74 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	71fb      	strb	r3, [r7, #7]
 8000e7e:	e066      	b.n	8000f4e <DHT11_Read+0xda>
  {
    pMillis = HAL_GetTick();
 8000e80:	f001 f8ca 	bl	8002018 <HAL_GetTick>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4a36      	ldr	r2, [pc, #216]	@ (8000f60 <DHT11_Read+0xec>)
 8000e88:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000e8a:	f001 f8c5 	bl	8002018 <HAL_GetTick>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	4a34      	ldr	r2, [pc, #208]	@ (8000f64 <DHT11_Read+0xf0>)
 8000e92:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000e94:	e004      	b.n	8000ea0 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 8000e96:	f001 f8bf 	bl	8002018 <HAL_GetTick>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a31      	ldr	r2, [pc, #196]	@ (8000f64 <DHT11_Read+0xf0>)
 8000e9e:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ea4:	4830      	ldr	r0, [pc, #192]	@ (8000f68 <DHT11_Read+0xf4>)
 8000ea6:	f001 fc29 	bl	80026fc <HAL_GPIO_ReadPin>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d106      	bne.n	8000ebe <DHT11_Read+0x4a>
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <DHT11_Read+0xec>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1c9a      	adds	r2, r3, #2
 8000eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <DHT11_Read+0xf0>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d8eb      	bhi.n	8000e96 <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8000ebe:	2028      	movs	r0, #40	@ 0x28
 8000ec0:	f7ff ff4a 	bl	8000d58 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000ec4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ec8:	4827      	ldr	r0, [pc, #156]	@ (8000f68 <DHT11_Read+0xf4>)
 8000eca:	f001 fc17 	bl	80026fc <HAL_GPIO_ReadPin>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10e      	bne.n	8000ef2 <DHT11_Read+0x7e>
      b&= ~(1<<(7-a));
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2201      	movs	r2, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	b25a      	sxtb	r2, r3
 8000ee6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eea:	4013      	ands	r3, r2
 8000eec:	b25b      	sxtb	r3, r3
 8000eee:	71bb      	strb	r3, [r7, #6]
 8000ef0:	e00b      	b.n	8000f0a <DHT11_Read+0x96>
    else
      b|= (1<<(7-a));
 8000ef2:	79fb      	ldrb	r3, [r7, #7]
 8000ef4:	f1c3 0307 	rsb	r3, r3, #7
 8000ef8:	2201      	movs	r2, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	b25a      	sxtb	r2, r3
 8000f00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 8000f0a:	f001 f885 	bl	8002018 <HAL_GetTick>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a13      	ldr	r2, [pc, #76]	@ (8000f60 <DHT11_Read+0xec>)
 8000f12:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8000f14:	f001 f880 	bl	8002018 <HAL_GetTick>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a12      	ldr	r2, [pc, #72]	@ (8000f64 <DHT11_Read+0xf0>)
 8000f1c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f1e:	e004      	b.n	8000f2a <DHT11_Read+0xb6>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8000f20:	f001 f87a 	bl	8002018 <HAL_GetTick>
 8000f24:	4603      	mov	r3, r0
 8000f26:	4a0f      	ldr	r2, [pc, #60]	@ (8000f64 <DHT11_Read+0xf0>)
 8000f28:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8000f2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f2e:	480e      	ldr	r0, [pc, #56]	@ (8000f68 <DHT11_Read+0xf4>)
 8000f30:	f001 fbe4 	bl	80026fc <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d006      	beq.n	8000f48 <DHT11_Read+0xd4>
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <DHT11_Read+0xec>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	1c9a      	adds	r2, r3, #2
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <DHT11_Read+0xf0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8eb      	bhi.n	8000f20 <DHT11_Read+0xac>
  for (a=0;a<8;a++)
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	2b07      	cmp	r3, #7
 8000f52:	d995      	bls.n	8000e80 <DHT11_Read+0xc>
    }
  }
  return b;
 8000f54:	79bb      	ldrb	r3, [r7, #6]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000314 	.word	0x20000314
 8000f64:	20000318 	.word	0x20000318
 8000f68:	40010c00 	.word	0x40010c00

08000f6c <DO_NHIET_DO>:
void DO_NHIET_DO(void)
{
 8000f6c:	b598      	push	{r3, r4, r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	 if(DHT11_Start())
 8000f70:	f7ff ff0a 	bl	8000d88 <DHT11_Start>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d04c      	beq.n	8001014 <DO_NHIET_DO+0xa8>
		      {
		        RHI = DHT11_Read(); // Relative humidity integral
 8000f7a:	f7ff ff7b 	bl	8000e74 <DHT11_Read>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	461a      	mov	r2, r3
 8000f82:	4b25      	ldr	r3, [pc, #148]	@ (8001018 <DO_NHIET_DO+0xac>)
 8000f84:	701a      	strb	r2, [r3, #0]
		        RHD = DHT11_Read(); // Relative humidity decimal
 8000f86:	f7ff ff75 	bl	8000e74 <DHT11_Read>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b23      	ldr	r3, [pc, #140]	@ (800101c <DO_NHIET_DO+0xb0>)
 8000f90:	701a      	strb	r2, [r3, #0]
		        TCI = DHT11_Read(); // Celsius integral
 8000f92:	f7ff ff6f 	bl	8000e74 <DHT11_Read>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <DO_NHIET_DO+0xb4>)
 8000f9c:	701a      	strb	r2, [r3, #0]
		        TCD = DHT11_Read(); // Celsius decimal
 8000f9e:	f7ff ff69 	bl	8000e74 <DHT11_Read>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b1f      	ldr	r3, [pc, #124]	@ (8001024 <DO_NHIET_DO+0xb8>)
 8000fa8:	701a      	strb	r2, [r3, #0]
		        SUM = DHT11_Read(); // Check sum
 8000faa:	f7ff ff63 	bl	8000e74 <DHT11_Read>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001028 <DO_NHIET_DO+0xbc>)
 8000fb4:	701a      	strb	r2, [r3, #0]
		        if (RHI + RHD + TCI + TCD == SUM)
 8000fb6:	4b18      	ldr	r3, [pc, #96]	@ (8001018 <DO_NHIET_DO+0xac>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <DO_NHIET_DO+0xb0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <DO_NHIET_DO+0xb4>)
 8000fc4:	7812      	ldrb	r2, [r2, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <DO_NHIET_DO+0xb8>)
 8000fca:	7812      	ldrb	r2, [r2, #0]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a16      	ldr	r2, [pc, #88]	@ (8001028 <DO_NHIET_DO+0xbc>)
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d11e      	bne.n	8001014 <DO_NHIET_DO+0xa8>
		        {

		         temp = (float)TCI + (float)(TCD/10.0);
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <DO_NHIET_DO+0xb4>)
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe64 	bl	8000ca8 <__aeabi_ui2f>
 8000fe0:	4604      	mov	r4, r0
 8000fe2:	4b10      	ldr	r3, [pc, #64]	@ (8001024 <DO_NHIET_DO+0xb8>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fa16 	bl	8000418 <__aeabi_i2d>
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800102c <DO_NHIET_DO+0xc0>)
 8000ff2:	f7ff fba5 	bl	8000740 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4610      	mov	r0, r2
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f7ff fd4d 	bl	8000a9c <__aeabi_d2f>
 8001002:	4603      	mov	r3, r0
 8001004:	4619      	mov	r1, r3
 8001006:	4620      	mov	r0, r4
 8001008:	f7ff fd9e 	bl	8000b48 <__addsf3>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <DO_NHIET_DO+0xc4>)
 8001012:	601a      	str	r2, [r3, #0]

}
		      }
}
 8001014:	bf00      	nop
 8001016:	bd98      	pop	{r3, r4, r7, pc}
 8001018:	2000030c 	.word	0x2000030c
 800101c:	2000030d 	.word	0x2000030d
 8001020:	2000030e 	.word	0x2000030e
 8001024:	2000030f 	.word	0x2000030f
 8001028:	20000310 	.word	0x20000310
 800102c:	40240000 	.word	0x40240000
 8001030:	2000031c 	.word	0x2000031c

08001034 <DO_DO_AM>:

void DO_DO_AM(void)
{
 8001034:	b598      	push	{r3, r4, r7, lr}
 8001036:	af00      	add	r7, sp, #0
	 if(DHT11_Start())
 8001038:	f7ff fea6 	bl	8000d88 <DHT11_Start>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d04c      	beq.n	80010dc <DO_DO_AM+0xa8>
		      {
		        RHI = DHT11_Read(); // Relative humidity integral
 8001042:	f7ff ff17 	bl	8000e74 <DHT11_Read>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	4b25      	ldr	r3, [pc, #148]	@ (80010e0 <DO_DO_AM+0xac>)
 800104c:	701a      	strb	r2, [r3, #0]
		        RHD = DHT11_Read(); // Relative humidity decimal
 800104e:	f7ff ff11 	bl	8000e74 <DHT11_Read>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <DO_DO_AM+0xb0>)
 8001058:	701a      	strb	r2, [r3, #0]
		        TCI = DHT11_Read(); // Celsius integral
 800105a:	f7ff ff0b 	bl	8000e74 <DHT11_Read>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <DO_DO_AM+0xb4>)
 8001064:	701a      	strb	r2, [r3, #0]
		        TCD = DHT11_Read(); // Celsius decimal
 8001066:	f7ff ff05 	bl	8000e74 <DHT11_Read>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <DO_DO_AM+0xb8>)
 8001070:	701a      	strb	r2, [r3, #0]
		        SUM = DHT11_Read(); // Check sum
 8001072:	f7ff feff 	bl	8000e74 <DHT11_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b1d      	ldr	r3, [pc, #116]	@ (80010f0 <DO_DO_AM+0xbc>)
 800107c:	701a      	strb	r2, [r3, #0]
		       if (RHI + RHD + TCI + TCD == SUM)
 800107e:	4b18      	ldr	r3, [pc, #96]	@ (80010e0 <DO_DO_AM+0xac>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	461a      	mov	r2, r3
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <DO_DO_AM+0xb0>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	4413      	add	r3, r2
 800108a:	4a17      	ldr	r2, [pc, #92]	@ (80010e8 <DO_DO_AM+0xb4>)
 800108c:	7812      	ldrb	r2, [r2, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a16      	ldr	r2, [pc, #88]	@ (80010ec <DO_DO_AM+0xb8>)
 8001092:	7812      	ldrb	r2, [r2, #0]
 8001094:	4413      	add	r3, r2
 8001096:	4a16      	ldr	r2, [pc, #88]	@ (80010f0 <DO_DO_AM+0xbc>)
 8001098:	7812      	ldrb	r2, [r2, #0]
 800109a:	4293      	cmp	r3, r2
 800109c:	d11e      	bne.n	80010dc <DO_DO_AM+0xa8>
		       		        {
		          humi = (float)RHI + (float)(RHD/10.0);
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <DO_DO_AM+0xac>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fe00 	bl	8000ca8 <__aeabi_ui2f>
 80010a8:	4604      	mov	r4, r0
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <DO_DO_AM+0xb0>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9b2 	bl	8000418 <__aeabi_i2d>
 80010b4:	f04f 0200 	mov.w	r2, #0
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <DO_DO_AM+0xc0>)
 80010ba:	f7ff fb41 	bl	8000740 <__aeabi_ddiv>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f7ff fce9 	bl	8000a9c <__aeabi_d2f>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4619      	mov	r1, r3
 80010ce:	4620      	mov	r0, r4
 80010d0:	f7ff fd3a 	bl	8000b48 <__addsf3>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <DO_DO_AM+0xc4>)
 80010da:	601a      	str	r2, [r3, #0]
}
		      }
}
 80010dc:	bf00      	nop
 80010de:	bd98      	pop	{r3, r4, r7, pc}
 80010e0:	2000030c 	.word	0x2000030c
 80010e4:	2000030d 	.word	0x2000030d
 80010e8:	2000030e 	.word	0x2000030e
 80010ec:	2000030f 	.word	0x2000030f
 80010f0:	20000310 	.word	0x20000310
 80010f4:	40240000 	.word	0x40240000
 80010f8:	20000320 	.word	0x20000320

080010fc <HIEN_THI_OLED>:
void HIEN_THI_OLED()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	              SSD1306_Clear();
 8001100:	f000 fc8b 	bl	8001a1a <SSD1306_Clear>
	              sprintf(strCopy,"TEMP :%.1f C  ", temp);
 8001104:	4b15      	ldr	r3, [pc, #84]	@ (800115c <HIEN_THI_OLED+0x60>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff f997 	bl	800043c <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4913      	ldr	r1, [pc, #76]	@ (8001160 <HIEN_THI_OLED+0x64>)
 8001114:	4813      	ldr	r0, [pc, #76]	@ (8001164 <HIEN_THI_OLED+0x68>)
 8001116:	f004 fb7b 	bl	8005810 <siprintf>
		          SSD1306_GotoXY (0, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2000      	movs	r0, #0
 800111e:	f000 fbc3 	bl	80018a8 <SSD1306_GotoXY>
		          SSD1306_Puts (strCopy, &Font_7x10, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	4910      	ldr	r1, [pc, #64]	@ (8001168 <HIEN_THI_OLED+0x6c>)
 8001126:	480f      	ldr	r0, [pc, #60]	@ (8001164 <HIEN_THI_OLED+0x68>)
 8001128:	f000 fc52 	bl	80019d0 <SSD1306_Puts>
		          sprintf(strCopy,"HUMI :%.1f %%  ",humi);
 800112c:	4b0f      	ldr	r3, [pc, #60]	@ (800116c <HIEN_THI_OLED+0x70>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f983 	bl	800043c <__aeabi_f2d>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	490d      	ldr	r1, [pc, #52]	@ (8001170 <HIEN_THI_OLED+0x74>)
 800113c:	4809      	ldr	r0, [pc, #36]	@ (8001164 <HIEN_THI_OLED+0x68>)
 800113e:	f004 fb67 	bl	8005810 <siprintf>
		          SSD1306_GotoXY (0, 30);
 8001142:	211e      	movs	r1, #30
 8001144:	2000      	movs	r0, #0
 8001146:	f000 fbaf 	bl	80018a8 <SSD1306_GotoXY>
		          SSD1306_Puts (strCopy, &Font_7x10, 1);
 800114a:	2201      	movs	r2, #1
 800114c:	4906      	ldr	r1, [pc, #24]	@ (8001168 <HIEN_THI_OLED+0x6c>)
 800114e:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HIEN_THI_OLED+0x68>)
 8001150:	f000 fc3e 	bl	80019d0 <SSD1306_Puts>
		          SSD1306_UpdateScreen();
 8001154:	f000 fb04 	bl	8001760 <SSD1306_UpdateScreen>
}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	2000031c 	.word	0x2000031c
 8001160:	08007a98 	.word	0x08007a98
 8001164:	20000324 	.word	0x20000324
 8001168:	20000000 	.word	0x20000000
 800116c:	20000320 	.word	0x20000320
 8001170:	08007aa8 	.word	0x08007aa8

08001174 <TRUYEN_UART>:
void TRUYEN_UART()
{
 8001174:	b5b0      	push	{r4, r5, r7, lr}
 8001176:	b09e      	sub	sp, #120	@ 0x78
 8001178:	af04      	add	r7, sp, #16
    char buffer[100];


    snprintf(buffer, sizeof(buffer), "Temperature: %.1f C, Humidity: %.1f %%\r\n", temp,humi);
 800117a:	4b16      	ldr	r3, [pc, #88]	@ (80011d4 <TRUYEN_UART+0x60>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f95c 	bl	800043c <__aeabi_f2d>
 8001184:	4604      	mov	r4, r0
 8001186:	460d      	mov	r5, r1
 8001188:	4b13      	ldr	r3, [pc, #76]	@ (80011d8 <TRUYEN_UART+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f955 	bl	800043c <__aeabi_f2d>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	1d38      	adds	r0, r7, #4
 8001198:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800119c:	e9cd 4500 	strd	r4, r5, [sp]
 80011a0:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <TRUYEN_UART+0x68>)
 80011a2:	2164      	movs	r1, #100	@ 0x64
 80011a4:	f004 fb00 	bl	80057a8 <sniprintf>


    if (HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7fe ffda 	bl	8000164 <strlen>
 80011b0:	4603      	mov	r3, r0
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	1d39      	adds	r1, r7, #4
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ba:	4809      	ldr	r0, [pc, #36]	@ (80011e0 <TRUYEN_UART+0x6c>)
 80011bc:	f002 ffbc 	bl	8004138 <HAL_UART_Transmit>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <TRUYEN_UART+0x56>
    {

        Error_Handler();
 80011c6:	f000 fa01 	bl	80015cc <Error_Handler>
    }
}
 80011ca:	bf00      	nop
 80011cc:	3768      	adds	r7, #104	@ 0x68
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bdb0      	pop	{r4, r5, r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000031c 	.word	0x2000031c
 80011d8:	20000320 	.word	0x20000320
 80011dc:	08007ab8 	.word	0x08007ab8
 80011e0:	200002c4 	.word	0x200002c4

080011e4 <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a15      	ldr	r2, [pc, #84]	@ (8001248 <HAL_UART_RxCpltCallback+0x64>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d124      	bne.n	8001240 <HAL_UART_RxCpltCallback+0x5c>
    {
        if (u8_RxData != 13)
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2b0d      	cmp	r3, #13
 80011fc:	d00b      	beq.n	8001216 <HAL_UART_RxCpltCallback+0x32>
        {
           u8_RxBuff[_rxIndex++] = u8_RxData;
 80011fe:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	b2d1      	uxtb	r1, r2
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001208:	7011      	strb	r1, [r2, #0]
 800120a:	461a      	mov	r2, r3
 800120c:	4b0f      	ldr	r3, [pc, #60]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 800120e:	7819      	ldrb	r1, [r3, #0]
 8001210:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_UART_RxCpltCallback+0x70>)
 8001212:	5499      	strb	r1, [r3, r2]
 8001214:	e00f      	b.n	8001236 <HAL_UART_RxCpltCallback+0x52>
        }
        else if(u8_RxData == 13)
 8001216:	4b0d      	ldr	r3, [pc, #52]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b0d      	cmp	r3, #13
 800121c:	d10b      	bne.n	8001236 <HAL_UART_RxCpltCallback+0x52>
        {
        	 u8_RxBuff[_rxIndex] = '\0';
 800121e:	4b0c      	ldr	r3, [pc, #48]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <HAL_UART_RxCpltCallback+0x70>)
 8001226:	2100      	movs	r1, #0
 8001228:	5499      	strb	r1, [r3, r2]
            Tx_FLag = 1;
 800122a:	4b0b      	ldr	r3, [pc, #44]	@ (8001258 <HAL_UART_RxCpltCallback+0x74>)
 800122c:	2201      	movs	r2, #1
 800122e:	801a      	strh	r2, [r3, #0]
            _rxIndex = 0;
 8001230:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <HAL_UART_RxCpltCallback+0x6c>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1, &u8_RxData, 1);
 8001236:	2201      	movs	r2, #1
 8001238:	4904      	ldr	r1, [pc, #16]	@ (800124c <HAL_UART_RxCpltCallback+0x68>)
 800123a:	4808      	ldr	r0, [pc, #32]	@ (800125c <HAL_UART_RxCpltCallback+0x78>)
 800123c:	f003 f807 	bl	800424e <HAL_UART_Receive_IT>
    }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013800 	.word	0x40013800
 800124c:	2000020c 	.word	0x2000020c
 8001250:	20000224 	.word	0x20000224
 8001254:	200001f8 	.word	0x200001f8
 8001258:	20000226 	.word	0x20000226
 800125c:	200002c4 	.word	0x200002c4

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b5b0      	push	{r4, r5, r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001266:	f000 fe7f 	bl	8001f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126a:	f000 f875 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800126e:	f000 f961 	bl	8001534 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001272:	f000 f8b7 	bl	80013e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001276:	f000 f933 	bl	80014e0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800127a:	f000 f8e1 	bl	8001440 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 800127e:	482b      	ldr	r0, [pc, #172]	@ (800132c <main+0xcc>)
 8001280:	f002 fc96 	bl	8003bb0 <HAL_TIM_Base_Start>
      SSD1306_Init();
 8001284:	f000 f9a8 	bl	80015d8 <SSD1306_Init>

  HAL_UART_Transmit(&huart1, u8_TxBuff, sizeof(u8_TxBuff),100);
 8001288:	2364      	movs	r3, #100	@ 0x64
 800128a:	2214      	movs	r2, #20
 800128c:	4928      	ldr	r1, [pc, #160]	@ (8001330 <main+0xd0>)
 800128e:	4829      	ldr	r0, [pc, #164]	@ (8001334 <main+0xd4>)
 8001290:	f002 ff52 	bl	8004138 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1, &u8_RxData,1);
 8001294:	2201      	movs	r2, #1
 8001296:	4928      	ldr	r1, [pc, #160]	@ (8001338 <main+0xd8>)
 8001298:	4826      	ldr	r0, [pc, #152]	@ (8001334 <main+0xd4>)
 800129a:	f002 ffd8 	bl	800424e <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  DO_NHIET_DO();
 800129e:	f7ff fe65 	bl	8000f6c <DO_NHIET_DO>
  DO_DO_AM();
 80012a2:	f7ff fec7 	bl	8001034 <DO_DO_AM>

  while (1)
  {
    /* USER CODE END WHILE */
	  if (Tx_FLag)
 80012a6:	4b25      	ldr	r3, [pc, #148]	@ (800133c <main+0xdc>)
 80012a8:	881b      	ldrh	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0fb      	beq.n	80012a6 <main+0x46>
	  	         {
		  if (strcmp(u8_RxBuff, "TEMP") == 0) // Lệnh đo nhiệt độ
 80012ae:	4924      	ldr	r1, [pc, #144]	@ (8001340 <main+0xe0>)
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <main+0xe4>)
 80012b2:	f7fe ff4d 	bl	8000150 <strcmp>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <main+0x62>
		          {
		              DO_NHIET_DO(); // Đọc nhiệt độ
 80012bc:	f7ff fe56 	bl	8000f6c <DO_NHIET_DO>
 80012c0:	e030      	b.n	8001324 <main+0xc4>

		          }
		          else if (strcmp(u8_RxBuff, "HUMI") == 0) // Lệnh đo độ ẩm
 80012c2:	4921      	ldr	r1, [pc, #132]	@ (8001348 <main+0xe8>)
 80012c4:	481f      	ldr	r0, [pc, #124]	@ (8001344 <main+0xe4>)
 80012c6:	f7fe ff43 	bl	8000150 <strcmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <main+0x76>
		          {
		              DO_DO_AM(); // Đọc độ ẩm
 80012d0:	f7ff feb0 	bl	8001034 <DO_DO_AM>
 80012d4:	e026      	b.n	8001324 <main+0xc4>
		            ;
		          }
		          else if (strcmp(u8_RxBuff, "OLED") == 0) // Lệnh đo độ ẩm
 80012d6:	491d      	ldr	r1, [pc, #116]	@ (800134c <main+0xec>)
 80012d8:	481a      	ldr	r0, [pc, #104]	@ (8001344 <main+0xe4>)
 80012da:	f7fe ff39 	bl	8000150 <strcmp>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <main+0x8a>
		          {
		        	  HIEN_THI_OLED();
 80012e4:	f7ff ff0a 	bl	80010fc <HIEN_THI_OLED>
 80012e8:	e01c      	b.n	8001324 <main+0xc4>

		          }
		          else if (strcmp(u8_RxBuff, "UART") == 0) // Lệnh đo độ ẩm
 80012ea:	4919      	ldr	r1, [pc, #100]	@ (8001350 <main+0xf0>)
 80012ec:	4815      	ldr	r0, [pc, #84]	@ (8001344 <main+0xe4>)
 80012ee:	f7fe ff2f 	bl	8000150 <strcmp>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <main+0x9e>
		          {
		        	  TRUYEN_UART(); // Gửi độ ẩm qua UART
 80012f8:	f7ff ff3c 	bl	8001174 <TRUYEN_UART>
 80012fc:	e012      	b.n	8001324 <main+0xc4>
		          }
		          else // Lệnh không hợp lệ
		          {
		              char invalidMsg[] = "Invalid Command\r\n";
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <main+0xf4>)
 8001300:	1d3c      	adds	r4, r7, #4
 8001302:	461d      	mov	r5, r3
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001308:	682b      	ldr	r3, [r5, #0]
 800130a:	8023      	strh	r3, [r4, #0]
		              HAL_UART_Transmit(&huart1, (uint8_t*)invalidMsg, strlen(invalidMsg), HAL_MAX_DELAY);
 800130c:	1d3b      	adds	r3, r7, #4
 800130e:	4618      	mov	r0, r3
 8001310:	f7fe ff28 	bl	8000164 <strlen>
 8001314:	4603      	mov	r3, r0
 8001316:	b29a      	uxth	r2, r3
 8001318:	1d39      	adds	r1, r7, #4
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	4805      	ldr	r0, [pc, #20]	@ (8001334 <main+0xd4>)
 8001320:	f002 ff0a 	bl	8004138 <HAL_UART_Transmit>
		          }
		        Tx_FLag = 0; // Reset cờ lệnh
 8001324:	4b05      	ldr	r3, [pc, #20]	@ (800133c <main+0xdc>)
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]
	  if (Tx_FLag)
 800132a:	e7bc      	b.n	80012a6 <main+0x46>
 800132c:	2000027c 	.word	0x2000027c
 8001330:	20000210 	.word	0x20000210
 8001334:	200002c4 	.word	0x200002c4
 8001338:	2000020c 	.word	0x2000020c
 800133c:	20000226 	.word	0x20000226
 8001340:	08007ae4 	.word	0x08007ae4
 8001344:	200001f8 	.word	0x200001f8
 8001348:	08007aec 	.word	0x08007aec
 800134c:	08007af4 	.word	0x08007af4
 8001350:	08007afc 	.word	0x08007afc
 8001354:	08007b04 	.word	0x08007b04

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b090      	sub	sp, #64	@ 0x40
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	f107 0318 	add.w	r3, r7, #24
 8001362:	2228      	movs	r2, #40	@ 0x28
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f004 fab5 	bl	80058d6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137a:	2301      	movs	r3, #1
 800137c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001382:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001388:	2301      	movs	r3, #1
 800138a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138c:	2302      	movs	r3, #2
 800138e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001396:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 ffa5 	bl	80032f0 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80013ac:	f000 f90e 	bl	80015cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 fa12 	bl	80037f4 <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x82>
  {
    Error_Handler();
 80013d6:	f000 f8f9 	bl	80015cc <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	@ 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013e8:	4b12      	ldr	r3, [pc, #72]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <MX_I2C1_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f0:	4a12      	ldr	r2, [pc, #72]	@ (800143c <MX_I2C1_Init+0x58>)
 80013f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <MX_I2C1_Init+0x50>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001400:	4b0c      	ldr	r3, [pc, #48]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001402:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001406:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001408:	4b0a      	ldr	r3, [pc, #40]	@ (8001434 <MX_I2C1_Init+0x50>)
 800140a:	2200      	movs	r2, #0
 800140c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800140e:	4b09      	ldr	r3, [pc, #36]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001414:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <MX_I2C1_Init+0x50>)
 800141c:	2200      	movs	r2, #0
 800141e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001420:	4804      	ldr	r0, [pc, #16]	@ (8001434 <MX_I2C1_Init+0x50>)
 8001422:	f001 f99b 	bl	800275c <HAL_I2C_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800142c:	f000 f8ce 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20000228 	.word	0x20000228
 8001438:	40005400 	.word	0x40005400
 800143c:	00061a80 	.word	0x00061a80

08001440 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	463b      	mov	r3, r7
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800145c:	4b1e      	ldr	r3, [pc, #120]	@ (80014d8 <MX_TIM1_Init+0x98>)
 800145e:	4a1f      	ldr	r2, [pc, #124]	@ (80014dc <MX_TIM1_Init+0x9c>)
 8001460:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001462:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_TIM1_Init+0x98>)
 8001464:	2247      	movs	r2, #71	@ 0x47
 8001466:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b1b      	ldr	r3, [pc, #108]	@ (80014d8 <MX_TIM1_Init+0x98>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800146e:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_TIM1_Init+0x98>)
 8001470:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001474:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b18      	ldr	r3, [pc, #96]	@ (80014d8 <MX_TIM1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800147c:	4b16      	ldr	r3, [pc, #88]	@ (80014d8 <MX_TIM1_Init+0x98>)
 800147e:	2200      	movs	r2, #0
 8001480:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001482:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_TIM1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001488:	4813      	ldr	r0, [pc, #76]	@ (80014d8 <MX_TIM1_Init+0x98>)
 800148a:	f002 fb41 	bl	8003b10 <HAL_TIM_Base_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001494:	f000 f89a 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001498:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800149c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800149e:	f107 0308 	add.w	r3, r7, #8
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <MX_TIM1_Init+0x98>)
 80014a6:	f002 fbcd 	bl	8003c44 <HAL_TIM_ConfigClockSource>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014b0:	f000 f88c 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b8:	2300      	movs	r3, #0
 80014ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_TIM1_Init+0x98>)
 80014c2:	f002 fd8b 	bl	8003fdc <HAL_TIMEx_MasterConfigSynchronization>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80014cc:	f000 f87e 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	2000027c 	.word	0x2000027c
 80014dc:	40012c00 	.word	0x40012c00

080014e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <MX_USART1_UART_Init+0x50>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b09      	ldr	r3, [pc, #36]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b08      	ldr	r3, [pc, #32]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <MX_USART1_UART_Init+0x4c>)
 8001518:	f002 fdbe 	bl	8004098 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001522:	f000 f853 	bl	80015cc <Error_Handler>

  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002c4 	.word	0x200002c4
 8001530:	40013800 	.word	0x40013800

08001534 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001548:	4b1e      	ldr	r3, [pc, #120]	@ (80015c4 <MX_GPIO_Init+0x90>)
 800154a:	699b      	ldr	r3, [r3, #24]
 800154c:	4a1d      	ldr	r2, [pc, #116]	@ (80015c4 <MX_GPIO_Init+0x90>)
 800154e:	f043 0320 	orr.w	r3, r3, #32
 8001552:	6193      	str	r3, [r2, #24]
 8001554:	4b1b      	ldr	r3, [pc, #108]	@ (80015c4 <MX_GPIO_Init+0x90>)
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0320 	and.w	r3, r3, #32
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <MX_GPIO_Init+0x90>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a17      	ldr	r2, [pc, #92]	@ (80015c4 <MX_GPIO_Init+0x90>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b15      	ldr	r3, [pc, #84]	@ (80015c4 <MX_GPIO_Init+0x90>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_GPIO_Init+0x90>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	4a11      	ldr	r2, [pc, #68]	@ (80015c4 <MX_GPIO_Init+0x90>)
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6193      	str	r3, [r2, #24]
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_GPIO_Init+0x90>)
 8001586:	699b      	ldr	r3, [r3, #24]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 8001590:	2200      	movs	r2, #0
 8001592:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001596:	480c      	ldr	r0, [pc, #48]	@ (80015c8 <MX_GPIO_Init+0x94>)
 8001598:	f001 f8c7 	bl	800272a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2302      	movs	r3, #2
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0310 	add.w	r3, r7, #16
 80015b2:	4619      	mov	r1, r3
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_GPIO_Init+0x94>)
 80015b6:	f000 ff1d 	bl	80023f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ba:	bf00      	nop
 80015bc:	3720      	adds	r7, #32
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000
 80015c8:	40010c00 	.word	0x40010c00

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d0:	b672      	cpsid	i
}
 80015d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <Error_Handler+0x8>

080015d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80015de:	f000 fa25 	bl	8001a2c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80015e2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80015e6:	2201      	movs	r2, #1
 80015e8:	2178      	movs	r1, #120	@ 0x78
 80015ea:	485b      	ldr	r0, [pc, #364]	@ (8001758 <SSD1306_Init+0x180>)
 80015ec:	f001 faf8 	bl	8002be0 <HAL_I2C_IsDeviceReady>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e0a9      	b.n	800174e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80015fa:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80015fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001600:	e002      	b.n	8001608 <SSD1306_Init+0x30>
		p--;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3b01      	subs	r3, #1
 8001606:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1f9      	bne.n	8001602 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800160e:	22ae      	movs	r2, #174	@ 0xae
 8001610:	2100      	movs	r1, #0
 8001612:	2078      	movs	r0, #120	@ 0x78
 8001614:	f000 fa84 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001618:	2220      	movs	r2, #32
 800161a:	2100      	movs	r1, #0
 800161c:	2078      	movs	r0, #120	@ 0x78
 800161e:	f000 fa7f 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001622:	2210      	movs	r2, #16
 8001624:	2100      	movs	r1, #0
 8001626:	2078      	movs	r0, #120	@ 0x78
 8001628:	f000 fa7a 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800162c:	22b0      	movs	r2, #176	@ 0xb0
 800162e:	2100      	movs	r1, #0
 8001630:	2078      	movs	r0, #120	@ 0x78
 8001632:	f000 fa75 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001636:	22c8      	movs	r2, #200	@ 0xc8
 8001638:	2100      	movs	r1, #0
 800163a:	2078      	movs	r0, #120	@ 0x78
 800163c:	f000 fa70 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2078      	movs	r0, #120	@ 0x78
 8001646:	f000 fa6b 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800164a:	2210      	movs	r2, #16
 800164c:	2100      	movs	r1, #0
 800164e:	2078      	movs	r0, #120	@ 0x78
 8001650:	f000 fa66 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001654:	2240      	movs	r2, #64	@ 0x40
 8001656:	2100      	movs	r1, #0
 8001658:	2078      	movs	r0, #120	@ 0x78
 800165a:	f000 fa61 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800165e:	2281      	movs	r2, #129	@ 0x81
 8001660:	2100      	movs	r1, #0
 8001662:	2078      	movs	r0, #120	@ 0x78
 8001664:	f000 fa5c 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001668:	22ff      	movs	r2, #255	@ 0xff
 800166a:	2100      	movs	r1, #0
 800166c:	2078      	movs	r0, #120	@ 0x78
 800166e:	f000 fa57 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001672:	22a1      	movs	r2, #161	@ 0xa1
 8001674:	2100      	movs	r1, #0
 8001676:	2078      	movs	r0, #120	@ 0x78
 8001678:	f000 fa52 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800167c:	22a6      	movs	r2, #166	@ 0xa6
 800167e:	2100      	movs	r1, #0
 8001680:	2078      	movs	r0, #120	@ 0x78
 8001682:	f000 fa4d 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001686:	22a8      	movs	r2, #168	@ 0xa8
 8001688:	2100      	movs	r1, #0
 800168a:	2078      	movs	r0, #120	@ 0x78
 800168c:	f000 fa48 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001690:	223f      	movs	r2, #63	@ 0x3f
 8001692:	2100      	movs	r1, #0
 8001694:	2078      	movs	r0, #120	@ 0x78
 8001696:	f000 fa43 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800169a:	22a4      	movs	r2, #164	@ 0xa4
 800169c:	2100      	movs	r1, #0
 800169e:	2078      	movs	r0, #120	@ 0x78
 80016a0:	f000 fa3e 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016a4:	22d3      	movs	r2, #211	@ 0xd3
 80016a6:	2100      	movs	r1, #0
 80016a8:	2078      	movs	r0, #120	@ 0x78
 80016aa:	f000 fa39 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2078      	movs	r0, #120	@ 0x78
 80016b4:	f000 fa34 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80016b8:	22d5      	movs	r2, #213	@ 0xd5
 80016ba:	2100      	movs	r1, #0
 80016bc:	2078      	movs	r0, #120	@ 0x78
 80016be:	f000 fa2f 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80016c2:	22f0      	movs	r2, #240	@ 0xf0
 80016c4:	2100      	movs	r1, #0
 80016c6:	2078      	movs	r0, #120	@ 0x78
 80016c8:	f000 fa2a 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80016cc:	22d9      	movs	r2, #217	@ 0xd9
 80016ce:	2100      	movs	r1, #0
 80016d0:	2078      	movs	r0, #120	@ 0x78
 80016d2:	f000 fa25 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80016d6:	2222      	movs	r2, #34	@ 0x22
 80016d8:	2100      	movs	r1, #0
 80016da:	2078      	movs	r0, #120	@ 0x78
 80016dc:	f000 fa20 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80016e0:	22da      	movs	r2, #218	@ 0xda
 80016e2:	2100      	movs	r1, #0
 80016e4:	2078      	movs	r0, #120	@ 0x78
 80016e6:	f000 fa1b 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80016ea:	2212      	movs	r2, #18
 80016ec:	2100      	movs	r1, #0
 80016ee:	2078      	movs	r0, #120	@ 0x78
 80016f0:	f000 fa16 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80016f4:	22db      	movs	r2, #219	@ 0xdb
 80016f6:	2100      	movs	r1, #0
 80016f8:	2078      	movs	r0, #120	@ 0x78
 80016fa:	f000 fa11 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80016fe:	2220      	movs	r2, #32
 8001700:	2100      	movs	r1, #0
 8001702:	2078      	movs	r0, #120	@ 0x78
 8001704:	f000 fa0c 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001708:	228d      	movs	r2, #141	@ 0x8d
 800170a:	2100      	movs	r1, #0
 800170c:	2078      	movs	r0, #120	@ 0x78
 800170e:	f000 fa07 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001712:	2214      	movs	r2, #20
 8001714:	2100      	movs	r1, #0
 8001716:	2078      	movs	r0, #120	@ 0x78
 8001718:	f000 fa02 	bl	8001b20 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800171c:	22af      	movs	r2, #175	@ 0xaf
 800171e:	2100      	movs	r1, #0
 8001720:	2078      	movs	r0, #120	@ 0x78
 8001722:	f000 f9fd 	bl	8001b20 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001726:	222e      	movs	r2, #46	@ 0x2e
 8001728:	2100      	movs	r1, #0
 800172a:	2078      	movs	r0, #120	@ 0x78
 800172c:	f000 f9f8 	bl	8001b20 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001730:	2000      	movs	r0, #0
 8001732:	f000 f843 	bl	80017bc <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001736:	f000 f813 	bl	8001760 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800173a:	4b08      	ldr	r3, [pc, #32]	@ (800175c <SSD1306_Init+0x184>)
 800173c:	2200      	movs	r2, #0
 800173e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001740:	4b06      	ldr	r3, [pc, #24]	@ (800175c <SSD1306_Init+0x184>)
 8001742:	2200      	movs	r2, #0
 8001744:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001746:	4b05      	ldr	r3, [pc, #20]	@ (800175c <SSD1306_Init+0x184>)
 8001748:	2201      	movs	r2, #1
 800174a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800174c:	2301      	movs	r3, #1
}
 800174e:	4618      	mov	r0, r3
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000228 	.word	0x20000228
 800175c:	20000738 	.word	0x20000738

08001760 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001766:	2300      	movs	r3, #0
 8001768:	71fb      	strb	r3, [r7, #7]
 800176a:	e01d      	b.n	80017a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	3b50      	subs	r3, #80	@ 0x50
 8001770:	b2db      	uxtb	r3, r3
 8001772:	461a      	mov	r2, r3
 8001774:	2100      	movs	r1, #0
 8001776:	2078      	movs	r0, #120	@ 0x78
 8001778:	f000 f9d2 	bl	8001b20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800177c:	2200      	movs	r2, #0
 800177e:	2100      	movs	r1, #0
 8001780:	2078      	movs	r0, #120	@ 0x78
 8001782:	f000 f9cd 	bl	8001b20 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001786:	2210      	movs	r2, #16
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	@ 0x78
 800178c:	f000 f9c8 	bl	8001b20 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	01db      	lsls	r3, r3, #7
 8001794:	4a08      	ldr	r2, [pc, #32]	@ (80017b8 <SSD1306_UpdateScreen+0x58>)
 8001796:	441a      	add	r2, r3
 8001798:	2380      	movs	r3, #128	@ 0x80
 800179a:	2140      	movs	r1, #64	@ 0x40
 800179c:	2078      	movs	r0, #120	@ 0x78
 800179e:	f000 f959 	bl	8001a54 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	3301      	adds	r3, #1
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	2b07      	cmp	r3, #7
 80017ac:	d9de      	bls.n	800176c <SSD1306_UpdateScreen+0xc>
	}
}
 80017ae:	bf00      	nop
 80017b0:	bf00      	nop
 80017b2:	3708      	adds	r7, #8
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000338 	.word	0x20000338

080017bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <SSD1306_Fill+0x14>
 80017cc:	2300      	movs	r3, #0
 80017ce:	e000      	b.n	80017d2 <SSD1306_Fill+0x16>
 80017d0:	23ff      	movs	r3, #255	@ 0xff
 80017d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d6:	4619      	mov	r1, r3
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <SSD1306_Fill+0x2c>)
 80017da:	f004 f87c 	bl	80058d6 <memset>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000338 	.word	0x20000338

080017ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	80fb      	strh	r3, [r7, #6]
 80017f6:	460b      	mov	r3, r1
 80017f8:	80bb      	strh	r3, [r7, #4]
 80017fa:	4613      	mov	r3, r2
 80017fc:	70fb      	strb	r3, [r7, #3]
	if (
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b7f      	cmp	r3, #127	@ 0x7f
 8001802:	d848      	bhi.n	8001896 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001804:	88bb      	ldrh	r3, [r7, #4]
 8001806:	2b3f      	cmp	r3, #63	@ 0x3f
 8001808:	d845      	bhi.n	8001896 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800180a:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <SSD1306_DrawPixel+0xb4>)
 800180c:	791b      	ldrb	r3, [r3, #4]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001812:	78fb      	ldrb	r3, [r7, #3]
 8001814:	2b00      	cmp	r3, #0
 8001816:	bf0c      	ite	eq
 8001818:	2301      	moveq	r3, #1
 800181a:	2300      	movne	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d11a      	bne.n	800185c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001826:	88fa      	ldrh	r2, [r7, #6]
 8001828:	88bb      	ldrh	r3, [r7, #4]
 800182a:	08db      	lsrs	r3, r3, #3
 800182c:	b298      	uxth	r0, r3
 800182e:	4603      	mov	r3, r0
 8001830:	01db      	lsls	r3, r3, #7
 8001832:	4413      	add	r3, r2
 8001834:	4a1b      	ldr	r2, [pc, #108]	@ (80018a4 <SSD1306_DrawPixel+0xb8>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	b25a      	sxtb	r2, r3
 800183a:	88bb      	ldrh	r3, [r7, #4]
 800183c:	f003 0307 	and.w	r3, r3, #7
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	b25b      	sxtb	r3, r3
 8001848:	4313      	orrs	r3, r2
 800184a:	b259      	sxtb	r1, r3
 800184c:	88fa      	ldrh	r2, [r7, #6]
 800184e:	4603      	mov	r3, r0
 8001850:	01db      	lsls	r3, r3, #7
 8001852:	4413      	add	r3, r2
 8001854:	b2c9      	uxtb	r1, r1
 8001856:	4a13      	ldr	r2, [pc, #76]	@ (80018a4 <SSD1306_DrawPixel+0xb8>)
 8001858:	54d1      	strb	r1, [r2, r3]
 800185a:	e01d      	b.n	8001898 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800185c:	88fa      	ldrh	r2, [r7, #6]
 800185e:	88bb      	ldrh	r3, [r7, #4]
 8001860:	08db      	lsrs	r3, r3, #3
 8001862:	b298      	uxth	r0, r3
 8001864:	4603      	mov	r3, r0
 8001866:	01db      	lsls	r3, r3, #7
 8001868:	4413      	add	r3, r2
 800186a:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <SSD1306_DrawPixel+0xb8>)
 800186c:	5cd3      	ldrb	r3, [r2, r3]
 800186e:	b25a      	sxtb	r2, r3
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	2101      	movs	r1, #1
 8001878:	fa01 f303 	lsl.w	r3, r1, r3
 800187c:	b25b      	sxtb	r3, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	b25b      	sxtb	r3, r3
 8001882:	4013      	ands	r3, r2
 8001884:	b259      	sxtb	r1, r3
 8001886:	88fa      	ldrh	r2, [r7, #6]
 8001888:	4603      	mov	r3, r0
 800188a:	01db      	lsls	r3, r3, #7
 800188c:	4413      	add	r3, r2
 800188e:	b2c9      	uxtb	r1, r1
 8001890:	4a04      	ldr	r2, [pc, #16]	@ (80018a4 <SSD1306_DrawPixel+0xb8>)
 8001892:	54d1      	strb	r1, [r2, r3]
 8001894:	e000      	b.n	8001898 <SSD1306_DrawPixel+0xac>
		return;
 8001896:	bf00      	nop
	}
}
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	20000738 	.word	0x20000738
 80018a4:	20000338 	.word	0x20000338

080018a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	460a      	mov	r2, r1
 80018b2:	80fb      	strh	r3, [r7, #6]
 80018b4:	4613      	mov	r3, r2
 80018b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80018b8:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SSD1306_GotoXY+0x28>)
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <SSD1306_GotoXY+0x28>)
 80018c0:	88bb      	ldrh	r3, [r7, #4]
 80018c2:	8053      	strh	r3, [r2, #2]
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	20000738 	.word	0x20000738

080018d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80018e4:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <SSD1306_Putc+0xf8>)
 80018e6:	881b      	ldrh	r3, [r3, #0]
 80018e8:	461a      	mov	r2, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	4413      	add	r3, r2
	if (
 80018f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018f2:	dc07      	bgt.n	8001904 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80018f4:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <SSD1306_Putc+0xf8>)
 80018f6:	885b      	ldrh	r3, [r3, #2]
 80018f8:	461a      	mov	r2, r3
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001900:	2b3f      	cmp	r3, #63	@ 0x3f
 8001902:	dd01      	ble.n	8001908 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001904:	2300      	movs	r3, #0
 8001906:	e05d      	b.n	80019c4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001908:	2300      	movs	r3, #0
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e04b      	b.n	80019a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685a      	ldr	r2, [r3, #4]
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	3b20      	subs	r3, #32
 8001916:	6839      	ldr	r1, [r7, #0]
 8001918:	7849      	ldrb	r1, [r1, #1]
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4619      	mov	r1, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	440b      	add	r3, r1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800192c:	2300      	movs	r3, #0
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	e030      	b.n	8001994 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d010      	beq.n	8001964 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001944:	881a      	ldrh	r2, [r3, #0]
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	b29b      	uxth	r3, r3
 800194a:	4413      	add	r3, r2
 800194c:	b298      	uxth	r0, r3
 800194e:	4b1f      	ldr	r3, [pc, #124]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001950:	885a      	ldrh	r2, [r3, #2]
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	b29b      	uxth	r3, r3
 8001956:	4413      	add	r3, r2
 8001958:	b29b      	uxth	r3, r3
 800195a:	79ba      	ldrb	r2, [r7, #6]
 800195c:	4619      	mov	r1, r3
 800195e:	f7ff ff45 	bl	80017ec <SSD1306_DrawPixel>
 8001962:	e014      	b.n	800198e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001964:	4b19      	ldr	r3, [pc, #100]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001966:	881a      	ldrh	r2, [r3, #0]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b298      	uxth	r0, r3
 8001970:	4b16      	ldr	r3, [pc, #88]	@ (80019cc <SSD1306_Putc+0xf8>)
 8001972:	885a      	ldrh	r2, [r3, #2]
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	b29b      	uxth	r3, r3
 8001978:	4413      	add	r3, r2
 800197a:	b299      	uxth	r1, r3
 800197c:	79bb      	ldrb	r3, [r7, #6]
 800197e:	2b00      	cmp	r3, #0
 8001980:	bf0c      	ite	eq
 8001982:	2301      	moveq	r3, #1
 8001984:	2300      	movne	r3, #0
 8001986:	b2db      	uxtb	r3, r3
 8001988:	461a      	mov	r2, r3
 800198a:	f7ff ff2f 	bl	80017ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	3301      	adds	r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4293      	cmp	r3, r2
 800199e:	d3c8      	bcc.n	8001932 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	3301      	adds	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	785b      	ldrb	r3, [r3, #1]
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d3ad      	bcc.n	800190e <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80019b2:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <SSD1306_Putc+0xf8>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	7812      	ldrb	r2, [r2, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	b29a      	uxth	r2, r3
 80019be:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <SSD1306_Putc+0xf8>)
 80019c0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80019c2:	79fb      	ldrb	r3, [r7, #7]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000738 	.word	0x20000738

080019d0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	4613      	mov	r3, r2
 80019dc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80019de:	e012      	b.n	8001a06 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	68b9      	ldr	r1, [r7, #8]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff73 	bl	80018d4 <SSD1306_Putc>
 80019ee:	4603      	mov	r3, r0
 80019f0:	461a      	mov	r2, r3
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d002      	beq.n	8001a00 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	e008      	b.n	8001a12 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	3301      	adds	r3, #1
 8001a04:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1e8      	bne.n	80019e0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	781b      	ldrb	r3, [r3, #0]
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3710      	adds	r7, #16
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}

08001a1a <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8001a1a:	b580      	push	{r7, lr}
 8001a1c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f7ff fecc 	bl	80017bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001a24:	f7ff fe9c 	bl	8001760 <SSD1306_UpdateScreen>
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <ssd1306_I2C_Init+0x24>)
 8001a34:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a36:	e002      	b.n	8001a3e <ssd1306_I2C_Init+0x12>
		p--;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f9      	bne.n	8001a38 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr
 8001a50:	0003d090 	.word	0x0003d090

08001a54 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b0c7      	sub	sp, #284	@ 0x11c
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	4608      	mov	r0, r1
 8001a5e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001a62:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001a66:	600a      	str	r2, [r1, #0]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a6e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a72:	4622      	mov	r2, r4
 8001a74:	701a      	strb	r2, [r3, #0]
 8001a76:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a7a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001a7e:	4602      	mov	r2, r0
 8001a80:	701a      	strb	r2, [r3, #0]
 8001a82:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a86:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001a96:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a9a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001a9e:	7812      	ldrb	r2, [r2, #0]
 8001aa0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001aa8:	e015      	b.n	8001ad6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001aaa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001aae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ab2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001ab6:	6812      	ldr	r2, [r2, #0]
 8001ab8:	441a      	add	r2, r3
 8001aba:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001abe:	3301      	adds	r3, #1
 8001ac0:	7811      	ldrb	r1, [r2, #0]
 8001ac2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ac6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001aca:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001acc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001ad6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ae0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001ae4:	8812      	ldrh	r2, [r2, #0]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d8df      	bhi.n	8001aaa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001aea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001aee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	b299      	uxth	r1, r3
 8001af6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001afa:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	f107 020c 	add.w	r2, r7, #12
 8001b08:	200a      	movs	r0, #10
 8001b0a:	9000      	str	r0, [sp, #0]
 8001b0c:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <ssd1306_I2C_WriteMulti+0xc8>)
 8001b0e:	f000 ff69 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 8001b12:	bf00      	nop
 8001b14:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd90      	pop	{r4, r7, pc}
 8001b1c:	20000228 	.word	0x20000228

08001b20 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	71bb      	strb	r3, [r7, #6]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001b36:	797b      	ldrb	r3, [r7, #5]
 8001b38:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	b299      	uxth	r1, r3
 8001b3e:	f107 020c 	add.w	r2, r7, #12
 8001b42:	230a      	movs	r3, #10
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2302      	movs	r3, #2
 8001b48:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <ssd1306_I2C_Write+0x38>)
 8001b4a:	f000 ff4b 	bl	80029e4 <HAL_I2C_Master_Transmit>
}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000228 	.word	0x20000228

08001b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	6193      	str	r3, [r2, #24]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b70:	699b      	ldr	r3, [r3, #24]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60bb      	str	r3, [r7, #8]
 8001b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b0c      	ldr	r3, [pc, #48]	@ (8001bb8 <HAL_MspInit+0x5c>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b92:	4b0a      	ldr	r3, [pc, #40]	@ (8001bbc <HAL_MspInit+0x60>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	4a04      	ldr	r2, [pc, #16]	@ (8001bbc <HAL_MspInit+0x60>)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000

08001bc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b088      	sub	sp, #32
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_I2C_MspInit+0x70>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d123      	bne.n	8001c28 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001be6:	f043 0308 	orr.w	r3, r3, #8
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0308 	and.w	r3, r3, #8
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bf8:	23c0      	movs	r3, #192	@ 0xc0
 8001bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bfc:	2312      	movs	r3, #18
 8001bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c00:	2303      	movs	r3, #3
 8001c02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0310 	add.w	r3, r7, #16
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480b      	ldr	r0, [pc, #44]	@ (8001c38 <HAL_I2C_MspInit+0x78>)
 8001c0c:	f000 fbf2 	bl	80023f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c12:	69db      	ldr	r3, [r3, #28]
 8001c14:	4a07      	ldr	r2, [pc, #28]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c1a:	61d3      	str	r3, [r2, #28]
 8001c1c:	4b05      	ldr	r3, [pc, #20]	@ (8001c34 <HAL_I2C_MspInit+0x74>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c28:	bf00      	nop
 8001c2a:	3720      	adds	r7, #32
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40005400 	.word	0x40005400
 8001c34:	40021000 	.word	0x40021000
 8001c38:	40010c00 	.word	0x40010c00

08001c3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a09      	ldr	r2, [pc, #36]	@ (8001c70 <HAL_TIM_Base_MspInit+0x34>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d10b      	bne.n	8001c66 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c4e:	4b09      	ldr	r3, [pc, #36]	@ (8001c74 <HAL_TIM_Base_MspInit+0x38>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	4a08      	ldr	r2, [pc, #32]	@ (8001c74 <HAL_TIM_Base_MspInit+0x38>)
 8001c54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c58:	6193      	str	r3, [r2, #24]
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <HAL_TIM_Base_MspInit+0x38>)
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40021000 	.word	0x40021000

08001c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b088      	sub	sp, #32
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <HAL_UART_MspInit+0x9c>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d139      	bne.n	8001d0c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c98:	4b1f      	ldr	r3, [pc, #124]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb0:	4b19      	ldr	r3, [pc, #100]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a18      	ldr	r2, [pc, #96]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001cb6:	f043 0304 	orr.w	r3, r3, #4
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b16      	ldr	r3, [pc, #88]	@ (8001d18 <HAL_UART_MspInit+0xa0>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001cc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ccc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 0310 	add.w	r3, r7, #16
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480f      	ldr	r0, [pc, #60]	@ (8001d1c <HAL_UART_MspInit+0xa4>)
 8001cde:	f000 fb89 	bl	80023f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <HAL_UART_MspInit+0xa4>)
 8001cf8:	f000 fb7c 	bl	80023f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	2025      	movs	r0, #37	@ 0x25
 8001d02:	f000 fa8e 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d06:	2025      	movs	r0, #37	@ 0x25
 8001d08:	f000 faa7 	bl	800225a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3720      	adds	r7, #32
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	40010800 	.word	0x40010800

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d24:	bf00      	nop
 8001d26:	e7fd      	b.n	8001d24 <NMI_Handler+0x4>

08001d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2c:	bf00      	nop
 8001d2e:	e7fd      	b.n	8001d2c <HardFault_Handler+0x4>

08001d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d34:	bf00      	nop
 8001d36:	e7fd      	b.n	8001d34 <MemManage_Handler+0x4>

08001d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3c:	bf00      	nop
 8001d3e:	e7fd      	b.n	8001d3c <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	bf00      	nop
 8001d46:	e7fd      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d4c:	bf00      	nop
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d70:	f000 f940 	bl	8001ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d7c:	4802      	ldr	r0, [pc, #8]	@ (8001d88 <USART1_IRQHandler+0x10>)
 8001d7e:	f002 fa8b 	bl	8004298 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	200002c4 	.word	0x200002c4

08001d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return 1;
 8001d90:	2301      	movs	r3, #1
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <_kill>:

int _kill(int pid, int sig)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b082      	sub	sp, #8
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
 8001da2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001da4:	f003 fdea 	bl	800597c <__errno>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2216      	movs	r2, #22
 8001dac:	601a      	str	r2, [r3, #0]
  return -1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <_exit>:

void _exit (int status)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7ff ffe7 	bl	8001d9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001dcc:	bf00      	nop
 8001dce:	e7fd      	b.n	8001dcc <_exit+0x12>

08001dd0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	60f8      	str	r0, [r7, #12]
 8001dd8:	60b9      	str	r1, [r7, #8]
 8001dda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	e00a      	b.n	8001df8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001de2:	f3af 8000 	nop.w
 8001de6:	4601      	mov	r1, r0
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	60ba      	str	r2, [r7, #8]
 8001dee:	b2ca      	uxtb	r2, r1
 8001df0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	3301      	adds	r3, #1
 8001df6:	617b      	str	r3, [r7, #20]
 8001df8:	697a      	ldr	r2, [r7, #20]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	dbf0      	blt.n	8001de2 <_read+0x12>
  }

  return len;
 8001e00:	687b      	ldr	r3, [r7, #4]
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b086      	sub	sp, #24
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e009      	b.n	8001e30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697a      	ldr	r2, [r7, #20]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	dbf1      	blt.n	8001e1c <_write+0x12>
  }
  return len;
 8001e38:	687b      	ldr	r3, [r7, #4]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_close>:

int _close(int file)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	370c      	adds	r7, #12
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e68:	605a      	str	r2, [r3, #4]
  return 0;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr

08001e76 <_isatty>:

int _isatty(int file)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e7e:	2301      	movs	r3, #1
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr

08001e8a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b085      	sub	sp, #20
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	60f8      	str	r0, [r7, #12]
 8001e92:	60b9      	str	r1, [r7, #8]
 8001e94:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
	...

08001ea4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eac:	4a14      	ldr	r2, [pc, #80]	@ (8001f00 <_sbrk+0x5c>)
 8001eae:	4b15      	ldr	r3, [pc, #84]	@ (8001f04 <_sbrk+0x60>)
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eb8:	4b13      	ldr	r3, [pc, #76]	@ (8001f08 <_sbrk+0x64>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	@ (8001f08 <_sbrk+0x64>)
 8001ec2:	4a12      	ldr	r2, [pc, #72]	@ (8001f0c <_sbrk+0x68>)
 8001ec4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ec6:	4b10      	ldr	r3, [pc, #64]	@ (8001f08 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d207      	bcs.n	8001ee4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ed4:	f003 fd52 	bl	800597c <__errno>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	220c      	movs	r2, #12
 8001edc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee2:	e009      	b.n	8001ef8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ee4:	4b08      	ldr	r3, [pc, #32]	@ (8001f08 <_sbrk+0x64>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eea:	4b07      	ldr	r3, [pc, #28]	@ (8001f08 <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	4a05      	ldr	r2, [pc, #20]	@ (8001f08 <_sbrk+0x64>)
 8001ef4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3718      	adds	r7, #24
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	20005000 	.word	0x20005000
 8001f04:	00000400 	.word	0x00000400
 8001f08:	20000740 	.word	0x20000740
 8001f0c:	20000898 	.word	0x20000898

08001f10 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bc80      	pop	{r7}
 8001f1a:	4770      	bx	lr

08001f1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f1c:	f7ff fff8 	bl	8001f10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f20:	480b      	ldr	r0, [pc, #44]	@ (8001f50 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f22:	490c      	ldr	r1, [pc, #48]	@ (8001f54 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f24:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f28:	e002      	b.n	8001f30 <LoopCopyDataInit>

08001f2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f2e:	3304      	adds	r3, #4

08001f30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f34:	d3f9      	bcc.n	8001f2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f36:	4a09      	ldr	r2, [pc, #36]	@ (8001f5c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f38:	4c09      	ldr	r4, [pc, #36]	@ (8001f60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f3c:	e001      	b.n	8001f42 <LoopFillZerobss>

08001f3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f40:	3204      	adds	r2, #4

08001f42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f44:	d3fb      	bcc.n	8001f3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f46:	f003 fd1f 	bl	8005988 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f4a:	f7ff f989 	bl	8001260 <main>
  bx lr
 8001f4e:	4770      	bx	lr
  ldr r0, =_sdata
 8001f50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f54:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f58:	08008630 	.word	0x08008630
  ldr r2, =_sbss
 8001f5c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f60:	20000894 	.word	0x20000894

08001f64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f64:	e7fe      	b.n	8001f64 <ADC1_2_IRQHandler>
	...

08001f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f6c:	4b08      	ldr	r3, [pc, #32]	@ (8001f90 <HAL_Init+0x28>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a07      	ldr	r2, [pc, #28]	@ (8001f90 <HAL_Init+0x28>)
 8001f72:	f043 0310 	orr.w	r3, r3, #16
 8001f76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f78:	2003      	movs	r0, #3
 8001f7a:	f000 f947 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7e:	200f      	movs	r0, #15
 8001f80:	f000 f808 	bl	8001f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f84:	f7ff fdea 	bl	8001b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40022000 	.word	0x40022000

08001f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_InitTick+0x54>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4b12      	ldr	r3, [pc, #72]	@ (8001fec <HAL_InitTick+0x58>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f95f 	bl	8002276 <HAL_SYSTICK_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e00e      	b.n	8001fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2b0f      	cmp	r3, #15
 8001fc6:	d80a      	bhi.n	8001fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd0:	f000 f927 	bl	8002222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd4:	4a06      	ldr	r2, [pc, #24]	@ (8001ff0 <HAL_InitTick+0x5c>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	e000      	b.n	8001fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000010 	.word	0x20000010
 8001ff0:	2000000c 	.word	0x2000000c

08001ff4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff8:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <HAL_IncTick+0x1c>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_IncTick+0x20>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4413      	add	r3, r2
 8002004:	4a03      	ldr	r2, [pc, #12]	@ (8002014 <HAL_IncTick+0x20>)
 8002006:	6013      	str	r3, [r2, #0]
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	20000010 	.word	0x20000010
 8002014:	20000744 	.word	0x20000744

08002018 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b02      	ldr	r3, [pc, #8]	@ (8002028 <HAL_GetTick+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000744 	.word	0x20000744

0800202c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002034:	f7ff fff0 	bl	8002018 <HAL_GetTick>
 8002038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002044:	d005      	beq.n	8002052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002046:	4b0a      	ldr	r3, [pc, #40]	@ (8002070 <HAL_Delay+0x44>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	4413      	add	r3, r2
 8002050:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002052:	bf00      	nop
 8002054:	f7ff ffe0 	bl	8002018 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	429a      	cmp	r2, r3
 8002062:	d8f7      	bhi.n	8002054 <HAL_Delay+0x28>
  {
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000010 	.word	0x20000010

08002074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002090:	4013      	ands	r3, r2
 8002092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800209c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80020a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020a6:	4a04      	ldr	r2, [pc, #16]	@ (80020b8 <__NVIC_SetPriorityGrouping+0x44>)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	60d3      	str	r3, [r2, #12]
}
 80020ac:	bf00      	nop
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bc80      	pop	{r7}
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	e000ed00 	.word	0xe000ed00

080020bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c0:	4b04      	ldr	r3, [pc, #16]	@ (80020d4 <__NVIC_GetPriorityGrouping+0x18>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0307 	and.w	r3, r3, #7
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bc80      	pop	{r7}
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	e000ed00 	.word	0xe000ed00

080020d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4603      	mov	r3, r0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	db0b      	blt.n	8002102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	f003 021f 	and.w	r2, r3, #31
 80020f0:	4906      	ldr	r1, [pc, #24]	@ (800210c <__NVIC_EnableIRQ+0x34>)
 80020f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f6:	095b      	lsrs	r3, r3, #5
 80020f8:	2001      	movs	r0, #1
 80020fa:	fa00 f202 	lsl.w	r2, r0, r2
 80020fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002102:	bf00      	nop
 8002104:	370c      	adds	r7, #12
 8002106:	46bd      	mov	sp, r7
 8002108:	bc80      	pop	{r7}
 800210a:	4770      	bx	lr
 800210c:	e000e100 	.word	0xe000e100

08002110 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800211c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002120:	2b00      	cmp	r3, #0
 8002122:	db0a      	blt.n	800213a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	490c      	ldr	r1, [pc, #48]	@ (800215c <__NVIC_SetPriority+0x4c>)
 800212a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212e:	0112      	lsls	r2, r2, #4
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	440b      	add	r3, r1
 8002134:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002138:	e00a      	b.n	8002150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	b2da      	uxtb	r2, r3
 800213e:	4908      	ldr	r1, [pc, #32]	@ (8002160 <__NVIC_SetPriority+0x50>)
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	f003 030f 	and.w	r3, r3, #15
 8002146:	3b04      	subs	r3, #4
 8002148:	0112      	lsls	r2, r2, #4
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	440b      	add	r3, r1
 800214e:	761a      	strb	r2, [r3, #24]
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	bc80      	pop	{r7}
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	e000e100 	.word	0xe000e100
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	@ 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	f1c3 0307 	rsb	r3, r3, #7
 800217e:	2b04      	cmp	r3, #4
 8002180:	bf28      	it	cs
 8002182:	2304      	movcs	r3, #4
 8002184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	3304      	adds	r3, #4
 800218a:	2b06      	cmp	r3, #6
 800218c:	d902      	bls.n	8002194 <NVIC_EncodePriority+0x30>
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3b03      	subs	r3, #3
 8002192:	e000      	b.n	8002196 <NVIC_EncodePriority+0x32>
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002198:	f04f 32ff 	mov.w	r2, #4294967295
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	fa02 f303 	lsl.w	r3, r2, r3
 80021a2:	43da      	mvns	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	401a      	ands	r2, r3
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021ac:	f04f 31ff 	mov.w	r1, #4294967295
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43d9      	mvns	r1, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021bc:	4313      	orrs	r3, r2
         );
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3724      	adds	r7, #36	@ 0x24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff90 	bl	8002110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff2d 	bl	8002074 <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff42 	bl	80020bc <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff90 	bl	8002164 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5f 	bl	8002110 <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff35 	bl	80020d8 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800228e:	b480      	push	{r7}
 8002290:	b085      	sub	sp, #20
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d008      	beq.n	80022b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2204      	movs	r2, #4
 80022aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e020      	b.n	80022fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 020e 	bic.w	r2, r2, #14
 80022c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 0201 	bic.w	r2, r2, #1
 80022d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e0:	2101      	movs	r1, #1
 80022e2:	fa01 f202 	lsl.w	r2, r1, r2
 80022e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d005      	beq.n	8002328 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2204      	movs	r2, #4
 8002320:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e051      	b.n	80023cc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 020e 	bic.w	r2, r2, #14
 8002336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f022 0201 	bic.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a22      	ldr	r2, [pc, #136]	@ (80023d8 <HAL_DMA_Abort_IT+0xd4>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d029      	beq.n	80023a6 <HAL_DMA_Abort_IT+0xa2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <HAL_DMA_Abort_IT+0xd8>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d022      	beq.n	80023a2 <HAL_DMA_Abort_IT+0x9e>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1f      	ldr	r2, [pc, #124]	@ (80023e0 <HAL_DMA_Abort_IT+0xdc>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d01a      	beq.n	800239c <HAL_DMA_Abort_IT+0x98>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1e      	ldr	r2, [pc, #120]	@ (80023e4 <HAL_DMA_Abort_IT+0xe0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d012      	beq.n	8002396 <HAL_DMA_Abort_IT+0x92>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a1c      	ldr	r2, [pc, #112]	@ (80023e8 <HAL_DMA_Abort_IT+0xe4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d00a      	beq.n	8002390 <HAL_DMA_Abort_IT+0x8c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a1b      	ldr	r2, [pc, #108]	@ (80023ec <HAL_DMA_Abort_IT+0xe8>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d102      	bne.n	800238a <HAL_DMA_Abort_IT+0x86>
 8002384:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002388:	e00e      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 800238a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238e:	e00b      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 8002390:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002394:	e008      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 8002396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800239a:	e005      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 800239c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023a0:	e002      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 80023a2:	2310      	movs	r3, #16
 80023a4:	e000      	b.n	80023a8 <HAL_DMA_Abort_IT+0xa4>
 80023a6:	2301      	movs	r3, #1
 80023a8:	4a11      	ldr	r2, [pc, #68]	@ (80023f0 <HAL_DMA_Abort_IT+0xec>)
 80023aa:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d003      	beq.n	80023cc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
    } 
  }
  return status;
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3710      	adds	r7, #16
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40020008 	.word	0x40020008
 80023dc:	4002001c 	.word	0x4002001c
 80023e0:	40020030 	.word	0x40020030
 80023e4:	40020044 	.word	0x40020044
 80023e8:	40020058 	.word	0x40020058
 80023ec:	4002006c 	.word	0x4002006c
 80023f0:	40020000 	.word	0x40020000

080023f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	@ 0x2c
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002402:	2300      	movs	r3, #0
 8002404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002406:	e169      	b.n	80026dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002408:	2201      	movs	r2, #1
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	4013      	ands	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	429a      	cmp	r2, r3
 8002422:	f040 8158 	bne.w	80026d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a9a      	ldr	r2, [pc, #616]	@ (8002694 <HAL_GPIO_Init+0x2a0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d05e      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002430:	4a98      	ldr	r2, [pc, #608]	@ (8002694 <HAL_GPIO_Init+0x2a0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d875      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002436:	4a98      	ldr	r2, [pc, #608]	@ (8002698 <HAL_GPIO_Init+0x2a4>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d058      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 800243c:	4a96      	ldr	r2, [pc, #600]	@ (8002698 <HAL_GPIO_Init+0x2a4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d86f      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002442:	4a96      	ldr	r2, [pc, #600]	@ (800269c <HAL_GPIO_Init+0x2a8>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d052      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002448:	4a94      	ldr	r2, [pc, #592]	@ (800269c <HAL_GPIO_Init+0x2a8>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d869      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800244e:	4a94      	ldr	r2, [pc, #592]	@ (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d04c      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002454:	4a92      	ldr	r2, [pc, #584]	@ (80026a0 <HAL_GPIO_Init+0x2ac>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d863      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800245a:	4a92      	ldr	r2, [pc, #584]	@ (80026a4 <HAL_GPIO_Init+0x2b0>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d046      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
 8002460:	4a90      	ldr	r2, [pc, #576]	@ (80026a4 <HAL_GPIO_Init+0x2b0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d85d      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 8002466:	2b12      	cmp	r3, #18
 8002468:	d82a      	bhi.n	80024c0 <HAL_GPIO_Init+0xcc>
 800246a:	2b12      	cmp	r3, #18
 800246c:	d859      	bhi.n	8002522 <HAL_GPIO_Init+0x12e>
 800246e:	a201      	add	r2, pc, #4	@ (adr r2, 8002474 <HAL_GPIO_Init+0x80>)
 8002470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002474:	080024ef 	.word	0x080024ef
 8002478:	080024c9 	.word	0x080024c9
 800247c:	080024db 	.word	0x080024db
 8002480:	0800251d 	.word	0x0800251d
 8002484:	08002523 	.word	0x08002523
 8002488:	08002523 	.word	0x08002523
 800248c:	08002523 	.word	0x08002523
 8002490:	08002523 	.word	0x08002523
 8002494:	08002523 	.word	0x08002523
 8002498:	08002523 	.word	0x08002523
 800249c:	08002523 	.word	0x08002523
 80024a0:	08002523 	.word	0x08002523
 80024a4:	08002523 	.word	0x08002523
 80024a8:	08002523 	.word	0x08002523
 80024ac:	08002523 	.word	0x08002523
 80024b0:	08002523 	.word	0x08002523
 80024b4:	08002523 	.word	0x08002523
 80024b8:	080024d1 	.word	0x080024d1
 80024bc:	080024e5 	.word	0x080024e5
 80024c0:	4a79      	ldr	r2, [pc, #484]	@ (80026a8 <HAL_GPIO_Init+0x2b4>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d013      	beq.n	80024ee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80024c6:	e02c      	b.n	8002522 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	623b      	str	r3, [r7, #32]
          break;
 80024ce:	e029      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	3304      	adds	r3, #4
 80024d6:	623b      	str	r3, [r7, #32]
          break;
 80024d8:	e024      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	3308      	adds	r3, #8
 80024e0:	623b      	str	r3, [r7, #32]
          break;
 80024e2:	e01f      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	330c      	adds	r3, #12
 80024ea:	623b      	str	r3, [r7, #32]
          break;
 80024ec:	e01a      	b.n	8002524 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80024f6:	2304      	movs	r3, #4
 80024f8:	623b      	str	r3, [r7, #32]
          break;
 80024fa:	e013      	b.n	8002524 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d105      	bne.n	8002510 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002504:	2308      	movs	r3, #8
 8002506:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69fa      	ldr	r2, [r7, #28]
 800250c:	611a      	str	r2, [r3, #16]
          break;
 800250e:	e009      	b.n	8002524 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002510:	2308      	movs	r3, #8
 8002512:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69fa      	ldr	r2, [r7, #28]
 8002518:	615a      	str	r2, [r3, #20]
          break;
 800251a:	e003      	b.n	8002524 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800251c:	2300      	movs	r3, #0
 800251e:	623b      	str	r3, [r7, #32]
          break;
 8002520:	e000      	b.n	8002524 <HAL_GPIO_Init+0x130>
          break;
 8002522:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	2bff      	cmp	r3, #255	@ 0xff
 8002528:	d801      	bhi.n	800252e <HAL_GPIO_Init+0x13a>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	e001      	b.n	8002532 <HAL_GPIO_Init+0x13e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3304      	adds	r3, #4
 8002532:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	2bff      	cmp	r3, #255	@ 0xff
 8002538:	d802      	bhi.n	8002540 <HAL_GPIO_Init+0x14c>
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	e002      	b.n	8002546 <HAL_GPIO_Init+0x152>
 8002540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002542:	3b08      	subs	r3, #8
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	210f      	movs	r1, #15
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	fa01 f303 	lsl.w	r3, r1, r3
 8002554:	43db      	mvns	r3, r3
 8002556:	401a      	ands	r2, r3
 8002558:	6a39      	ldr	r1, [r7, #32]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	fa01 f303 	lsl.w	r3, r1, r3
 8002560:	431a      	orrs	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 80b1 	beq.w	80026d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002574:	4b4d      	ldr	r3, [pc, #308]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a4c      	ldr	r2, [pc, #304]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b4a      	ldr	r3, [pc, #296]	@ (80026ac <HAL_GPIO_Init+0x2b8>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	60bb      	str	r3, [r7, #8]
 800258a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800258c:	4a48      	ldr	r2, [pc, #288]	@ (80026b0 <HAL_GPIO_Init+0x2bc>)
 800258e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002590:	089b      	lsrs	r3, r3, #2
 8002592:	3302      	adds	r3, #2
 8002594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002598:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	220f      	movs	r2, #15
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4013      	ands	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a40      	ldr	r2, [pc, #256]	@ (80026b4 <HAL_GPIO_Init+0x2c0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <HAL_GPIO_Init+0x1ec>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a3f      	ldr	r2, [pc, #252]	@ (80026b8 <HAL_GPIO_Init+0x2c4>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d00d      	beq.n	80025dc <HAL_GPIO_Init+0x1e8>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3e      	ldr	r2, [pc, #248]	@ (80026bc <HAL_GPIO_Init+0x2c8>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d007      	beq.n	80025d8 <HAL_GPIO_Init+0x1e4>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a3d      	ldr	r2, [pc, #244]	@ (80026c0 <HAL_GPIO_Init+0x2cc>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_GPIO_Init+0x1e0>
 80025d0:	2303      	movs	r3, #3
 80025d2:	e006      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e004      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025d8:	2302      	movs	r3, #2
 80025da:	e002      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_GPIO_Init+0x1ee>
 80025e0:	2300      	movs	r3, #0
 80025e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e4:	f002 0203 	and.w	r2, r2, #3
 80025e8:	0092      	lsls	r2, r2, #2
 80025ea:	4093      	lsls	r3, r2
 80025ec:	68fa      	ldr	r2, [r7, #12]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80025f2:	492f      	ldr	r1, [pc, #188]	@ (80026b0 <HAL_GPIO_Init+0x2bc>)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f6:	089b      	lsrs	r3, r3, #2
 80025f8:	3302      	adds	r3, #2
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d006      	beq.n	800261a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800260c:	4b2d      	ldr	r3, [pc, #180]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800260e:	689a      	ldr	r2, [r3, #8]
 8002610:	492c      	ldr	r1, [pc, #176]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e006      	b.n	8002628 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800261a:	4b2a      	ldr	r3, [pc, #168]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800261c:	689a      	ldr	r2, [r3, #8]
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	43db      	mvns	r3, r3
 8002622:	4928      	ldr	r1, [pc, #160]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002624:	4013      	ands	r3, r2
 8002626:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d006      	beq.n	8002642 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002634:	4b23      	ldr	r3, [pc, #140]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	4922      	ldr	r1, [pc, #136]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002642:	4b20      	ldr	r3, [pc, #128]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	43db      	mvns	r3, r3
 800264a:	491e      	ldr	r1, [pc, #120]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800264c:	4013      	ands	r3, r2
 800264e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d006      	beq.n	800266a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800265c:	4b19      	ldr	r3, [pc, #100]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4918      	ldr	r1, [pc, #96]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
 8002668:	e006      	b.n	8002678 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800266a:	4b16      	ldr	r3, [pc, #88]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	43db      	mvns	r3, r3
 8002672:	4914      	ldr	r1, [pc, #80]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002674:	4013      	ands	r3, r2
 8002676:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d021      	beq.n	80026c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002684:	4b0f      	ldr	r3, [pc, #60]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	490e      	ldr	r1, [pc, #56]	@ (80026c4 <HAL_GPIO_Init+0x2d0>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e021      	b.n	80026d6 <HAL_GPIO_Init+0x2e2>
 8002692:	bf00      	nop
 8002694:	10320000 	.word	0x10320000
 8002698:	10310000 	.word	0x10310000
 800269c:	10220000 	.word	0x10220000
 80026a0:	10210000 	.word	0x10210000
 80026a4:	10120000 	.word	0x10120000
 80026a8:	10110000 	.word	0x10110000
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40010000 	.word	0x40010000
 80026b4:	40010800 	.word	0x40010800
 80026b8:	40010c00 	.word	0x40010c00
 80026bc:	40011000 	.word	0x40011000
 80026c0:	40011400 	.word	0x40011400
 80026c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80026c8:	4b0b      	ldr	r3, [pc, #44]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	4909      	ldr	r1, [pc, #36]	@ (80026f8 <HAL_GPIO_Init+0x304>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	3301      	adds	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	fa22 f303 	lsr.w	r3, r2, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f47f ae8e 	bne.w	8002408 <HAL_GPIO_Init+0x14>
  }
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	372c      	adds	r7, #44	@ 0x2c
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	40010400 	.word	0x40010400

080026fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	887b      	ldrh	r3, [r7, #2]
 800270e:	4013      	ands	r3, r2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002714:	2301      	movs	r3, #1
 8002716:	73fb      	strb	r3, [r7, #15]
 8002718:	e001      	b.n	800271e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800271e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
 8002736:	4613      	mov	r3, r2
 8002738:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800273a:	787b      	ldrb	r3, [r7, #1]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002740:	887a      	ldrh	r2, [r7, #2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002746:	e003      	b.n	8002750 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002748:	887b      	ldrh	r3, [r7, #2]
 800274a:	041a      	lsls	r2, r3, #16
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	611a      	str	r2, [r3, #16]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr
	...

0800275c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e12b      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002774:	b2db      	uxtb	r3, r3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d106      	bne.n	8002788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fa1c 	bl	8001bc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2224      	movs	r2, #36	@ 0x24
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027c0:	f001 f960 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 80027c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	4a81      	ldr	r2, [pc, #516]	@ (80029d0 <HAL_I2C_Init+0x274>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d807      	bhi.n	80027e0 <HAL_I2C_Init+0x84>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a80      	ldr	r2, [pc, #512]	@ (80029d4 <HAL_I2C_Init+0x278>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	e006      	b.n	80027ee <HAL_I2C_Init+0x92>
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	4a7d      	ldr	r2, [pc, #500]	@ (80029d8 <HAL_I2C_Init+0x27c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	bf94      	ite	ls
 80027e8:	2301      	movls	r3, #1
 80027ea:	2300      	movhi	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e0e7      	b.n	80029c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a78      	ldr	r2, [pc, #480]	@ (80029dc <HAL_I2C_Init+0x280>)
 80027fa:	fba2 2303 	umull	r2, r3, r2, r3
 80027fe:	0c9b      	lsrs	r3, r3, #18
 8002800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	430a      	orrs	r2, r1
 8002814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	4a6a      	ldr	r2, [pc, #424]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d802      	bhi.n	8002830 <HAL_I2C_Init+0xd4>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	3301      	adds	r3, #1
 800282e:	e009      	b.n	8002844 <HAL_I2C_Init+0xe8>
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	4a69      	ldr	r2, [pc, #420]	@ (80029e0 <HAL_I2C_Init+0x284>)
 800283c:	fba2 2303 	umull	r2, r3, r2, r3
 8002840:	099b      	lsrs	r3, r3, #6
 8002842:	3301      	adds	r3, #1
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6812      	ldr	r2, [r2, #0]
 8002848:	430b      	orrs	r3, r1
 800284a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69db      	ldr	r3, [r3, #28]
 8002852:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002856:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	495c      	ldr	r1, [pc, #368]	@ (80029d0 <HAL_I2C_Init+0x274>)
 8002860:	428b      	cmp	r3, r1
 8002862:	d819      	bhi.n	8002898 <HAL_I2C_Init+0x13c>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	1e59      	subs	r1, r3, #1
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002878:	400b      	ands	r3, r1
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_I2C_Init+0x138>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e59      	subs	r1, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fbb1 f3f3 	udiv	r3, r1, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	e051      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002894:	2304      	movs	r3, #4
 8002896:	e04f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d111      	bne.n	80028c4 <HAL_I2C_Init+0x168>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	1e58      	subs	r0, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80028b2:	3301      	adds	r3, #1
 80028b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	bf0c      	ite	eq
 80028bc:	2301      	moveq	r3, #1
 80028be:	2300      	movne	r3, #0
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	e012      	b.n	80028ea <HAL_I2C_Init+0x18e>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1e58      	subs	r0, r3, #1
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6859      	ldr	r1, [r3, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	0099      	lsls	r1, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028da:	3301      	adds	r3, #1
 80028dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	bf0c      	ite	eq
 80028e4:	2301      	moveq	r3, #1
 80028e6:	2300      	movne	r3, #0
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_I2C_Init+0x196>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e022      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10e      	bne.n	8002918 <HAL_I2C_Init+0x1bc>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e58      	subs	r0, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6859      	ldr	r1, [r3, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	440b      	add	r3, r1
 8002908:	fbb0 f3f3 	udiv	r3, r0, r3
 800290c:	3301      	adds	r3, #1
 800290e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002912:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002916:	e00f      	b.n	8002938 <HAL_I2C_Init+0x1dc>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1e58      	subs	r0, r3, #1
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	440b      	add	r3, r1
 8002926:	0099      	lsls	r1, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002938:	6879      	ldr	r1, [r7, #4]
 800293a:	6809      	ldr	r1, [r1, #0]
 800293c:	4313      	orrs	r3, r2
 800293e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69da      	ldr	r2, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1b      	ldr	r3, [r3, #32]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002966:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	6911      	ldr	r1, [r2, #16]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	4311      	orrs	r1, r2
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	430b      	orrs	r3, r1
 800297a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	695a      	ldr	r2, [r3, #20]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f042 0201 	orr.w	r2, r2, #1
 80029a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2220      	movs	r2, #32
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029c4:	2300      	movs	r3, #0
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	000186a0 	.word	0x000186a0
 80029d4:	001e847f 	.word	0x001e847f
 80029d8:	003d08ff 	.word	0x003d08ff
 80029dc:	431bde83 	.word	0x431bde83
 80029e0:	10624dd3 	.word	0x10624dd3

080029e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
 80029f4:	4613      	mov	r3, r2
 80029f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029f8:	f7ff fb0e 	bl	8002018 <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	f040 80e0 	bne.w	8002bcc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2319      	movs	r3, #25
 8002a12:	2201      	movs	r2, #1
 8002a14:	4970      	ldr	r1, [pc, #448]	@ (8002bd8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fa92 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a22:	2302      	movs	r3, #2
 8002a24:	e0d3      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_I2C_Master_Transmit+0x50>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0cc      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d007      	beq.n	8002a5a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f042 0201 	orr.w	r2, r2, #1
 8002a58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2221      	movs	r2, #33	@ 0x21
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2210      	movs	r2, #16
 8002a76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	893a      	ldrh	r2, [r7, #8]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a90:	b29a      	uxth	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a50      	ldr	r2, [pc, #320]	@ (8002bdc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a9c:	8979      	ldrh	r1, [r7, #10]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	6a3a      	ldr	r2, [r7, #32]
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f000 f9ca 	bl	8002e3c <I2C_MasterRequestWrite>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e08d      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ac8:	e066      	b.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	6a39      	ldr	r1, [r7, #32]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 fb50 	bl	8003174 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00d      	beq.n	8002af6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d107      	bne.n	8002af2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002af0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afa:	781a      	ldrb	r2, [r3, #0]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b06:	1c5a      	adds	r2, r3, #1
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d017      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b40:	781a      	ldrb	r2, [r3, #0]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	6a39      	ldr	r1, [r7, #32]
 8002b70:	68f8      	ldr	r0, [r7, #12]
 8002b72:	f000 fb47 	bl	8003204 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00d      	beq.n	8002b98 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b92:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e01a      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d194      	bne.n	8002aca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	00100002 	.word	0x00100002
 8002bdc:	ffff0000 	.word	0xffff0000

08002be0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08a      	sub	sp, #40	@ 0x28
 8002be4:	af02      	add	r7, sp, #8
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	460b      	mov	r3, r1
 8002bee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002bf0:	f7ff fa12 	bl	8002018 <HAL_GetTick>
 8002bf4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	f040 8111 	bne.w	8002e2a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	4988      	ldr	r1, [pc, #544]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f994 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e104      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_I2C_IsDeviceReady+0x50>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e0fd      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d007      	beq.n	8002c56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2224      	movs	r2, #36	@ 0x24
 8002c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2200      	movs	r2, #0
 8002c72:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a70      	ldr	r2, [pc, #448]	@ (8002e38 <HAL_I2C_IsDeviceReady+0x258>)
 8002c78:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f952 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb0:	d103      	bne.n	8002cba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e0b6      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cbe:	897b      	ldrh	r3, [r7, #10]
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	461a      	mov	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ccc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002cce:	f7ff f9a3 	bl	8002018 <HAL_GetTick>
 8002cd2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cf4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d02:	e025      	b.n	8002d50 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d04:	f7ff f988 	bl	8002018 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d302      	bcc.n	8002d1a <HAL_I2C_IsDeviceReady+0x13a>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	22a0      	movs	r2, #160	@ 0xa0
 8002d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	bf0c      	ite	eq
 8002d30:	2301      	moveq	r3, #1
 8002d32:	2300      	movne	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d46:	bf0c      	ite	eq
 8002d48:	2301      	moveq	r3, #1
 8002d4a:	2300      	movne	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d5a:	d005      	beq.n	8002d68 <HAL_I2C_IsDeviceReady+0x188>
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d102      	bne.n	8002d68 <HAL_I2C_IsDeviceReady+0x188>
 8002d62:	7dbb      	ldrb	r3, [r7, #22]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0cd      	beq.n	8002d04 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2220      	movs	r2, #32
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d129      	bne.n	8002dd2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d8c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	2319      	movs	r3, #25
 8002daa:	2201      	movs	r2, #1
 8002dac:	4921      	ldr	r1, [pc, #132]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f8c6 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e036      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e02c      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002de0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002dea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2319      	movs	r3, #25
 8002df2:	2201      	movs	r2, #1
 8002df4:	490f      	ldr	r1, [pc, #60]	@ (8002e34 <HAL_I2C_IsDeviceReady+0x254>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f8a2 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e012      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	f4ff af32 	bcc.w	8002c7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002e2a:	2302      	movs	r3, #2
  }
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3720      	adds	r7, #32
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	00100002 	.word	0x00100002
 8002e38:	ffff0000 	.word	0xffff0000

08002e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b088      	sub	sp, #32
 8002e40:	af02      	add	r7, sp, #8
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	460b      	mov	r3, r1
 8002e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d006      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d003      	beq.n	8002e66 <I2C_MasterRequestWrite+0x2a>
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e64:	d108      	bne.n	8002e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	e00b      	b.n	8002e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7c:	2b12      	cmp	r3, #18
 8002e7e:	d107      	bne.n	8002e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	9300      	str	r3, [sp, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 f84f 	bl	8002f40 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00d      	beq.n	8002ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eb6:	d103      	bne.n	8002ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ebe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e035      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ecc:	d108      	bne.n	8002ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ece:	897b      	ldrh	r3, [r7, #10]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002edc:	611a      	str	r2, [r3, #16]
 8002ede:	e01b      	b.n	8002f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee0:	897b      	ldrh	r3, [r7, #10]
 8002ee2:	11db      	asrs	r3, r3, #7
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0306 	and.w	r3, r3, #6
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f063 030f 	orn	r3, r3, #15
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	490e      	ldr	r1, [pc, #56]	@ (8002f38 <I2C_MasterRequestWrite+0xfc>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f898 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e010      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f0e:	897b      	ldrh	r3, [r7, #10]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4907      	ldr	r1, [pc, #28]	@ (8002f3c <I2C_MasterRequestWrite+0x100>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f888 	bl	8003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e000      	b.n	8002f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	00010008 	.word	0x00010008
 8002f3c:	00010002 	.word	0x00010002

08002f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f50:	e048      	b.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f58:	d044      	beq.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5a:	f7ff f85d 	bl	8002018 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d139      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	0c1b      	lsrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d10d      	bne.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	43da      	mvns	r2, r3
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	4013      	ands	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	461a      	mov	r2, r3
 8002f94:	e00c      	b.n	8002fb0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	bf0c      	ite	eq
 8002fa8:	2301      	moveq	r3, #1
 8002faa:	2300      	movne	r3, #0
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	461a      	mov	r2, r3
 8002fb0:	79fb      	ldrb	r3, [r7, #7]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d116      	bne.n	8002fe4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	f043 0220 	orr.w	r2, r3, #32
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e023      	b.n	800302c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	0c1b      	lsrs	r3, r3, #16
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d10d      	bne.n	800300a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	43da      	mvns	r2, r3
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	bf0c      	ite	eq
 8003000:	2301      	moveq	r3, #1
 8003002:	2300      	movne	r3, #0
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	e00c      	b.n	8003024 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	43da      	mvns	r2, r3
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4013      	ands	r3, r2
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	bf0c      	ite	eq
 800301c:	2301      	moveq	r3, #1
 800301e:	2300      	movne	r3, #0
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	79fb      	ldrb	r3, [r7, #7]
 8003026:	429a      	cmp	r2, r3
 8003028:	d093      	beq.n	8002f52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	607a      	str	r2, [r7, #4]
 8003040:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003042:	e071      	b.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800304e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003052:	d123      	bne.n	800309c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003062:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800306c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	f043 0204 	orr.w	r2, r3, #4
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e067      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a2:	d041      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a4:	f7fe ffb8 	bl	8002018 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d302      	bcc.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d136      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d016      	beq.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f043 0220 	orr.w	r2, r3, #32
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e021      	b.n	800316c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	0c1b      	lsrs	r3, r3, #16
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b01      	cmp	r3, #1
 8003130:	d10c      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	43da      	mvns	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4013      	ands	r3, r2
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf14      	ite	ne
 8003144:	2301      	movne	r3, #1
 8003146:	2300      	moveq	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	e00b      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf14      	ite	ne
 800315e:	2301      	movne	r3, #1
 8003160:	2300      	moveq	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	f47f af6d 	bne.w	8003044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003180:	e034      	b.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f886 	bl	8003294 <I2C_IsAcknowledgeFailed>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e034      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003198:	d028      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fe ff3d 	bl	8002018 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	68ba      	ldr	r2, [r7, #8]
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11d      	bne.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	695b      	ldr	r3, [r3, #20]
 80031b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ba:	2b80      	cmp	r3, #128	@ 0x80
 80031bc:	d016      	beq.n	80031ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2200      	movs	r2, #0
 80031c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d8:	f043 0220 	orr.w	r2, r3, #32
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e007      	b.n	80031fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f6:	2b80      	cmp	r3, #128	@ 0x80
 80031f8:	d1c3      	bne.n	8003182 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3710      	adds	r7, #16
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003210:	e034      	b.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f83e 	bl	8003294 <I2C_IsAcknowledgeFailed>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e034      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003228:	d028      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800322a:	f7fe fef5 	bl	8002018 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	429a      	cmp	r2, r3
 8003238:	d302      	bcc.n	8003240 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d11d      	bne.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d016      	beq.n	800327c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2220      	movs	r2, #32
 8003258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f043 0220 	orr.w	r2, r3, #32
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e007      	b.n	800328c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b04      	cmp	r3, #4
 8003288:	d1c3      	bne.n	8003212 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032aa:	d11b      	bne.n	80032e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2220      	movs	r2, #32
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	f043 0204 	orr.w	r2, r3, #4
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e272      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 8087 	beq.w	800341e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003310:	4b92      	ldr	r3, [pc, #584]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f003 030c 	and.w	r3, r3, #12
 8003318:	2b04      	cmp	r3, #4
 800331a:	d00c      	beq.n	8003336 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800331c:	4b8f      	ldr	r3, [pc, #572]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d112      	bne.n	800334e <HAL_RCC_OscConfig+0x5e>
 8003328:	4b8c      	ldr	r3, [pc, #560]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003330:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003334:	d10b      	bne.n	800334e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003336:	4b89      	ldr	r3, [pc, #548]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d06c      	beq.n	800341c <HAL_RCC_OscConfig+0x12c>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d168      	bne.n	800341c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e24c      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003356:	d106      	bne.n	8003366 <HAL_RCC_OscConfig+0x76>
 8003358:	4b80      	ldr	r3, [pc, #512]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a7f      	ldr	r2, [pc, #508]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800335e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	e02e      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCC_OscConfig+0x98>
 800336e:	4b7b      	ldr	r3, [pc, #492]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a7a      	ldr	r2, [pc, #488]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	4b78      	ldr	r3, [pc, #480]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a77      	ldr	r2, [pc, #476]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003380:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0xbc>
 8003392:	4b72      	ldr	r3, [pc, #456]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a71      	ldr	r2, [pc, #452]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b6f      	ldr	r3, [pc, #444]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a6e      	ldr	r2, [pc, #440]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xd4>
 80033ac:	4b6b      	ldr	r3, [pc, #428]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b68      	ldr	r3, [pc, #416]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a67      	ldr	r2, [pc, #412]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fe24 	bl	8002018 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fe20 	bl	8002018 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e200      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b5d      	ldr	r3, [pc, #372]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xe4>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fe10 	bl	8002018 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fe0c 	bl	8002018 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1ec      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	4b53      	ldr	r3, [pc, #332]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x10c>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d063      	beq.n	80034f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800342a:	4b4c      	ldr	r3, [pc, #304]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003436:	4b49      	ldr	r3, [pc, #292]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x18c>
 8003442:	4b46      	ldr	r3, [pc, #280]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b43      	ldr	r3, [pc, #268]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x176>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1c0      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4939      	ldr	r1, [pc, #228]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e03a      	b.n	80034f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b36      	ldr	r3, [pc, #216]	@ (8003560 <HAL_RCC_OscConfig+0x270>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fe fdc5 	bl	8002018 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fdc1 	bl	8002018 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e1a1      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	4b2d      	ldr	r3, [pc, #180]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b2a      	ldr	r3, [pc, #168]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4927      	ldr	r1, [pc, #156]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <HAL_RCC_OscConfig+0x270>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe fda4 	bl	8002018 <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe fda0 	bl	8002018 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e180      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	4b1d      	ldr	r3, [pc, #116]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d03a      	beq.n	8003574 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	699b      	ldr	r3, [r3, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d019      	beq.n	800353a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003506:	4b17      	ldr	r3, [pc, #92]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fe fd84 	bl	8002018 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe fd80 	bl	8002018 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e160      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	4b0d      	ldr	r3, [pc, #52]	@ (800355c <HAL_RCC_OscConfig+0x26c>)
 8003528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003532:	2001      	movs	r0, #1
 8003534:	f000 face 	bl	8003ad4 <RCC_Delay>
 8003538:	e01c      	b.n	8003574 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4b0a      	ldr	r3, [pc, #40]	@ (8003564 <HAL_RCC_OscConfig+0x274>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003540:	f7fe fd6a 	bl	8002018 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003546:	e00f      	b.n	8003568 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003548:	f7fe fd66 	bl	8002018 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d908      	bls.n	8003568 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e146      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
 800355a:	bf00      	nop
 800355c:	40021000 	.word	0x40021000
 8003560:	42420000 	.word	0x42420000
 8003564:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003568:	4b92      	ldr	r3, [pc, #584]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800356a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e9      	bne.n	8003548 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80a6 	beq.w	80036ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003582:	2300      	movs	r3, #0
 8003584:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003586:	4b8b      	ldr	r3, [pc, #556]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10d      	bne.n	80035ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003592:	4b88      	ldr	r3, [pc, #544]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	4a87      	ldr	r2, [pc, #540]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359c:	61d3      	str	r3, [r2, #28]
 800359e:	4b85      	ldr	r3, [pc, #532]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035a0:	69db      	ldr	r3, [r3, #28]
 80035a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035aa:	2301      	movs	r3, #1
 80035ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b82      	ldr	r3, [pc, #520]	@ (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b7f      	ldr	r3, [pc, #508]	@ (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7e      	ldr	r2, [pc, #504]	@ (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fe fd27 	bl	8002018 <HAL_GetTick>
 80035ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fe fd23 	bl	8002018 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	@ 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e103      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b75      	ldr	r3, [pc, #468]	@ (80037b8 <HAL_RCC_OscConfig+0x4c8>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d106      	bne.n	8003602 <HAL_RCC_OscConfig+0x312>
 80035f4:	4b6f      	ldr	r3, [pc, #444]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a6e      	ldr	r2, [pc, #440]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6213      	str	r3, [r2, #32]
 8003600:	e02d      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10c      	bne.n	8003624 <HAL_RCC_OscConfig+0x334>
 800360a:	4b6a      	ldr	r3, [pc, #424]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	4a69      	ldr	r2, [pc, #420]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	6213      	str	r3, [r2, #32]
 8003616:	4b67      	ldr	r3, [pc, #412]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	4a66      	ldr	r2, [pc, #408]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800361c:	f023 0304 	bic.w	r3, r3, #4
 8003620:	6213      	str	r3, [r2, #32]
 8003622:	e01c      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	2b05      	cmp	r3, #5
 800362a:	d10c      	bne.n	8003646 <HAL_RCC_OscConfig+0x356>
 800362c:	4b61      	ldr	r3, [pc, #388]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	4a60      	ldr	r2, [pc, #384]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003632:	f043 0304 	orr.w	r3, r3, #4
 8003636:	6213      	str	r3, [r2, #32]
 8003638:	4b5e      	ldr	r3, [pc, #376]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	4a5d      	ldr	r2, [pc, #372]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6213      	str	r3, [r2, #32]
 8003644:	e00b      	b.n	800365e <HAL_RCC_OscConfig+0x36e>
 8003646:	4b5b      	ldr	r3, [pc, #364]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	4a5a      	ldr	r2, [pc, #360]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	6213      	str	r3, [r2, #32]
 8003652:	4b58      	ldr	r3, [pc, #352]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	4a57      	ldr	r2, [pc, #348]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	f023 0304 	bic.w	r3, r3, #4
 800365c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d015      	beq.n	8003692 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003666:	f7fe fcd7 	bl	8002018 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366c:	e00a      	b.n	8003684 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800366e:	f7fe fcd3 	bl	8002018 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800367c:	4293      	cmp	r3, r2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0b1      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003684:	4b4b      	ldr	r3, [pc, #300]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0ee      	beq.n	800366e <HAL_RCC_OscConfig+0x37e>
 8003690:	e014      	b.n	80036bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003692:	f7fe fcc1 	bl	8002018 <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00a      	b.n	80036b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe fcbd 	bl	8002018 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e09b      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036b0:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1ee      	bne.n	800369a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036bc:	7dfb      	ldrb	r3, [r7, #23]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d105      	bne.n	80036ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c2:	4b3c      	ldr	r3, [pc, #240]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4a3b      	ldr	r2, [pc, #236]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036d8:	4b36      	ldr	r3, [pc, #216]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d061      	beq.n	80037a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d146      	bne.n	800377a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ec:	4b33      	ldr	r3, [pc, #204]	@ (80037bc <HAL_RCC_OscConfig+0x4cc>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fc91 	bl	8002018 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fe fc8d 	bl	8002018 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e06d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800370c:	4b29      	ldr	r3, [pc, #164]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003720:	d108      	bne.n	8003734 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003722:	4b24      	ldr	r3, [pc, #144]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4921      	ldr	r1, [pc, #132]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003730:	4313      	orrs	r3, r2
 8003732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003734:	4b1f      	ldr	r3, [pc, #124]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a19      	ldr	r1, [r3, #32]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003744:	430b      	orrs	r3, r1
 8003746:	491b      	ldr	r1, [pc, #108]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800374c:	4b1b      	ldr	r3, [pc, #108]	@ (80037bc <HAL_RCC_OscConfig+0x4cc>)
 800374e:	2201      	movs	r2, #1
 8003750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003752:	f7fe fc61 	bl	8002018 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003758:	e008      	b.n	800376c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375a:	f7fe fc5d 	bl	8002018 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d901      	bls.n	800376c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800376c:	4b11      	ldr	r3, [pc, #68]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0f0      	beq.n	800375a <HAL_RCC_OscConfig+0x46a>
 8003778:	e035      	b.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800377a:	4b10      	ldr	r3, [pc, #64]	@ (80037bc <HAL_RCC_OscConfig+0x4cc>)
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003780:	f7fe fc4a 	bl	8002018 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fc46 	bl	8002018 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e026      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800379a:	4b06      	ldr	r3, [pc, #24]	@ (80037b4 <HAL_RCC_OscConfig+0x4c4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0x498>
 80037a6:	e01e      	b.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d107      	bne.n	80037c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e019      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
 80037b4:	40021000 	.word	0x40021000
 80037b8:	40007000 	.word	0x40007000
 80037bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037c0:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <HAL_RCC_OscConfig+0x500>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037de:	429a      	cmp	r2, r3
 80037e0:	d001      	beq.n	80037e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e000      	b.n	80037e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40021000 	.word	0x40021000

080037f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d0      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b6a      	ldr	r3, [pc, #424]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d910      	bls.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b67      	ldr	r3, [pc, #412]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f023 0207 	bic.w	r2, r3, #7
 800381e:	4965      	ldr	r1, [pc, #404]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003826:	4b63      	ldr	r3, [pc, #396]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	683a      	ldr	r2, [r7, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d001      	beq.n	8003838 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e0b8      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0304 	and.w	r3, r3, #4
 800384c:	2b00      	cmp	r3, #0
 800384e:	d005      	beq.n	800385c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003850:	4b59      	ldr	r3, [pc, #356]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a58      	ldr	r2, [pc, #352]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800385a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0308 	and.w	r3, r3, #8
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003868:	4b53      	ldr	r3, [pc, #332]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a52      	ldr	r2, [pc, #328]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800386e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003872:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003874:	4b50      	ldr	r3, [pc, #320]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	494d      	ldr	r1, [pc, #308]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d040      	beq.n	8003914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d107      	bne.n	80038aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b47      	ldr	r3, [pc, #284]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d115      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e07f      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b41      	ldr	r3, [pc, #260]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e073      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b3d      	ldr	r3, [pc, #244]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e06b      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b39      	ldr	r3, [pc, #228]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4936      	ldr	r1, [pc, #216]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7fe fb98 	bl	8002018 <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe fb94 	bl	8002018 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e053      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b2d      	ldr	r3, [pc, #180]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b27      	ldr	r3, [pc, #156]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d210      	bcs.n	8003944 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b24      	ldr	r3, [pc, #144]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f023 0207 	bic.w	r2, r3, #7
 800392a:	4922      	ldr	r1, [pc, #136]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b20      	ldr	r3, [pc, #128]	@ (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e032      	b.n	80039aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d008      	beq.n	8003962 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003950:	4b19      	ldr	r3, [pc, #100]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4916      	ldr	r1, [pc, #88]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d009      	beq.n	8003982 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800396e:	4b12      	ldr	r3, [pc, #72]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	490e      	ldr	r1, [pc, #56]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800397e:	4313      	orrs	r3, r2
 8003980:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003982:	f000 f821 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003986:	4602      	mov	r2, r0
 8003988:	4b0b      	ldr	r3, [pc, #44]	@ (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	091b      	lsrs	r3, r3, #4
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	490a      	ldr	r1, [pc, #40]	@ (80039bc <HAL_RCC_ClockConfig+0x1c8>)
 8003994:	5ccb      	ldrb	r3, [r1, r3]
 8003996:	fa22 f303 	lsr.w	r3, r2, r3
 800399a:	4a09      	ldr	r2, [pc, #36]	@ (80039c0 <HAL_RCC_ClockConfig+0x1cc>)
 800399c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800399e:	4b09      	ldr	r3, [pc, #36]	@ (80039c4 <HAL_RCC_ClockConfig+0x1d0>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fe faf6 	bl	8001f94 <HAL_InitTick>

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40022000 	.word	0x40022000
 80039b8:	40021000 	.word	0x40021000
 80039bc:	08008284 	.word	0x08008284
 80039c0:	20000008 	.word	0x20000008
 80039c4:	2000000c 	.word	0x2000000c

080039c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]
 80039d6:	2300      	movs	r3, #0
 80039d8:	617b      	str	r3, [r7, #20]
 80039da:	2300      	movs	r3, #0
 80039dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039e2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x94>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d002      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x30>
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d003      	beq.n	80039fe <HAL_RCC_GetSysClockFreq+0x36>
 80039f6:	e027      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039f8:	4b19      	ldr	r3, [pc, #100]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 80039fa:	613b      	str	r3, [r7, #16]
      break;
 80039fc:	e027      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	0c9b      	lsrs	r3, r3, #18
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a08:	5cd3      	ldrb	r3, [r2, r3]
 8003a0a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d010      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a16:	4b11      	ldr	r3, [pc, #68]	@ (8003a5c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	0c5b      	lsrs	r3, r3, #17
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	4a11      	ldr	r2, [pc, #68]	@ (8003a68 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a22:	5cd3      	ldrb	r3, [r2, r3]
 8003a24:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a0d      	ldr	r2, [pc, #52]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	fb03 f202 	mul.w	r2, r3, r2
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e004      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a3c:	fb02 f303 	mul.w	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	613b      	str	r3, [r7, #16]
      break;
 8003a46:	e002      	b.n	8003a4e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a48:	4b05      	ldr	r3, [pc, #20]	@ (8003a60 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4e:	693b      	ldr	r3, [r7, #16]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	007a1200 	.word	0x007a1200
 8003a64:	0800829c 	.word	0x0800829c
 8003a68:	080082ac 	.word	0x080082ac
 8003a6c:	003d0900 	.word	0x003d0900

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b02      	ldr	r3, [pc, #8]	@ (8003a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr
 8003a80:	20000008 	.word	0x20000008

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a88:	f7ff fff2 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	4b05      	ldr	r3, [pc, #20]	@ (8003aa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	4903      	ldr	r1, [pc, #12]	@ (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a9a:	5ccb      	ldrb	r3, [r1, r3]
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40021000 	.word	0x40021000
 8003aa8:	08008294 	.word	0x08008294

08003aac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab0:	f7ff ffde 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	4b05      	ldr	r3, [pc, #20]	@ (8003acc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	0adb      	lsrs	r3, r3, #11
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	4903      	ldr	r1, [pc, #12]	@ (8003ad0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ac2:	5ccb      	ldrb	r3, [r1, r3]
 8003ac4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	40021000 	.word	0x40021000
 8003ad0:	08008294 	.word	0x08008294

08003ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b08 <RCC_Delay+0x34>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	@ (8003b0c <RCC_Delay+0x38>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0a5b      	lsrs	r3, r3, #9
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af0:	bf00      	nop
  }
  while (Delay --);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	60fa      	str	r2, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f9      	bne.n	8003af0 <RCC_Delay+0x1c>
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000008 	.word	0x20000008
 8003b0c:	10624dd3 	.word	0x10624dd3

08003b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e041      	b.n	8003ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fe f880 	bl	8001c3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4610      	mov	r0, r2
 8003b50:	f000 f940 	bl	8003dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2201      	movs	r2, #1
 8003b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3708      	adds	r7, #8
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d001      	beq.n	8003bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e032      	b.n	8003c2e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a18      	ldr	r2, [pc, #96]	@ (8003c38 <HAL_TIM_Base_Start+0x88>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d00e      	beq.n	8003bf8 <HAL_TIM_Base_Start+0x48>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be2:	d009      	beq.n	8003bf8 <HAL_TIM_Base_Start+0x48>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a14      	ldr	r2, [pc, #80]	@ (8003c3c <HAL_TIM_Base_Start+0x8c>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <HAL_TIM_Base_Start+0x48>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a13      	ldr	r2, [pc, #76]	@ (8003c40 <HAL_TIM_Base_Start+0x90>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d111      	bne.n	8003c1c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0307 	and.w	r3, r3, #7
 8003c02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b06      	cmp	r3, #6
 8003c08:	d010      	beq.n	8003c2c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c1a:	e007      	b.n	8003c2c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f042 0201 	orr.w	r2, r2, #1
 8003c2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bc80      	pop	{r7}
 8003c36:	4770      	bx	lr
 8003c38:	40012c00 	.word	0x40012c00
 8003c3c:	40000400 	.word	0x40000400
 8003c40:	40000800 	.word	0x40000800

08003c44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d101      	bne.n	8003c60 <HAL_TIM_ConfigClockSource+0x1c>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	e0b4      	b.n	8003dca <HAL_TIM_ConfigClockSource+0x186>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003c7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c98:	d03e      	beq.n	8003d18 <HAL_TIM_ConfigClockSource+0xd4>
 8003c9a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c9e:	f200 8087 	bhi.w	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ca6:	f000 8086 	beq.w	8003db6 <HAL_TIM_ConfigClockSource+0x172>
 8003caa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cae:	d87f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b70      	cmp	r3, #112	@ 0x70
 8003cb2:	d01a      	beq.n	8003cea <HAL_TIM_ConfigClockSource+0xa6>
 8003cb4:	2b70      	cmp	r3, #112	@ 0x70
 8003cb6:	d87b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b60      	cmp	r3, #96	@ 0x60
 8003cba:	d050      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x11a>
 8003cbc:	2b60      	cmp	r3, #96	@ 0x60
 8003cbe:	d877      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b50      	cmp	r3, #80	@ 0x50
 8003cc2:	d03c      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0xfa>
 8003cc4:	2b50      	cmp	r3, #80	@ 0x50
 8003cc6:	d873      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc8:	2b40      	cmp	r3, #64	@ 0x40
 8003cca:	d058      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x13a>
 8003ccc:	2b40      	cmp	r3, #64	@ 0x40
 8003cce:	d86f      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd0:	2b30      	cmp	r3, #48	@ 0x30
 8003cd2:	d064      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003cd4:	2b30      	cmp	r3, #48	@ 0x30
 8003cd6:	d86b      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003cd8:	2b20      	cmp	r3, #32
 8003cda:	d060      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003cdc:	2b20      	cmp	r3, #32
 8003cde:	d867      	bhi.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d05c      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ce4:	2b10      	cmp	r3, #16
 8003ce6:	d05a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	e062      	b.n	8003db0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cfa:	f000 f950 	bl	8003f9e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003d0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	609a      	str	r2, [r3, #8]
      break;
 8003d16:	e04f      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d28:	f000 f939 	bl	8003f9e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d3a:	609a      	str	r2, [r3, #8]
      break;
 8003d3c:	e03c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 f8b0 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2150      	movs	r1, #80	@ 0x50
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 f907 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e02c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 f8ce 	bl	8003f0c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2160      	movs	r1, #96	@ 0x60
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 f8f7 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e01c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 f890 	bl	8003eb0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2140      	movs	r1, #64	@ 0x40
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 f8e7 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e00c      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4619      	mov	r1, r3
 8003da8:	4610      	mov	r0, r2
 8003daa:	f000 f8de 	bl	8003f6a <TIM_ITRx_SetConfig>
      break;
 8003dae:	e003      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
      break;
 8003db4:	e000      	b.n	8003db8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003db6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b085      	sub	sp, #20
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ea4 <TIM_Base_SetConfig+0xd0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d00b      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df2:	d007      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea8 <TIM_Base_SetConfig+0xd4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d003      	beq.n	8003e04 <TIM_Base_SetConfig+0x30>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a2b      	ldr	r2, [pc, #172]	@ (8003eac <TIM_Base_SetConfig+0xd8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d108      	bne.n	8003e16 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	68fa      	ldr	r2, [r7, #12]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <TIM_Base_SetConfig+0xd0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d00b      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e24:	d007      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a1f      	ldr	r2, [pc, #124]	@ (8003ea8 <TIM_Base_SetConfig+0xd4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d003      	beq.n	8003e36 <TIM_Base_SetConfig+0x62>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	@ (8003eac <TIM_Base_SetConfig+0xd8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d108      	bne.n	8003e48 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	695b      	ldr	r3, [r3, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	689a      	ldr	r2, [r3, #8]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <TIM_Base_SetConfig+0xd0>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d103      	bne.n	8003e7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	691a      	ldr	r2, [r3, #16]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	f023 0201 	bic.w	r2, r3, #1
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	611a      	str	r2, [r3, #16]
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bc80      	pop	{r7}
 8003ea2:	4770      	bx	lr
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800

08003eb0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6a1b      	ldr	r3, [r3, #32]
 8003ec0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f023 0201 	bic.w	r2, r3, #1
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003eda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	011b      	lsls	r3, r3, #4
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f023 030a 	bic.w	r3, r3, #10
 8003eec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	693a      	ldr	r2, [r7, #16]
 8003efa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	621a      	str	r2, [r3, #32]
}
 8003f02:	bf00      	nop
 8003f04:	371c      	adds	r7, #28
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr

08003f0c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	f023 0210 	bic.w	r2, r3, #16
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	031b      	lsls	r3, r3, #12
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f48:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	693a      	ldr	r2, [r7, #16]
 8003f58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	621a      	str	r2, [r3, #32]
}
 8003f60:	bf00      	nop
 8003f62:	371c      	adds	r7, #28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bc80      	pop	{r7}
 8003f68:	4770      	bx	lr

08003f6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	f043 0307 	orr.w	r3, r3, #7
 8003f8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	609a      	str	r2, [r3, #8]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr

08003f9e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b087      	sub	sp, #28
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	60f8      	str	r0, [r7, #12]
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	609a      	str	r2, [r3, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	371c      	adds	r7, #28
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bc80      	pop	{r7}
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d101      	bne.n	8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	e046      	b.n	8004082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800401a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68fa      	ldr	r2, [r7, #12]
 800402c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a16      	ldr	r2, [pc, #88]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d00e      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004040:	d009      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a12      	ldr	r2, [pc, #72]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d004      	beq.n	8004056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a10      	ldr	r2, [pc, #64]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10c      	bne.n	8004070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800405c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4313      	orrs	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	bc80      	pop	{r7}
 800408a:	4770      	bx	lr
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40000400 	.word	0x40000400
 8004094:	40000800 	.word	0x40000800

08004098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e042      	b.n	8004130 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fdda 	bl	8001c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	@ 0x24
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fdb7 	bl	8004c50 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	@ 0x28
 800413c:	af02      	add	r7, sp, #8
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	4613      	mov	r3, r2
 8004146:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b20      	cmp	r3, #32
 8004156:	d175      	bne.n	8004244 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_UART_Transmit+0x2c>
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e06e      	b.n	8004246 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2221      	movs	r2, #33	@ 0x21
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004176:	f7fd ff4f 	bl	8002018 <HAL_GetTick>
 800417a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	88fa      	ldrh	r2, [r7, #6]
 8004186:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004190:	d108      	bne.n	80041a4 <HAL_UART_Transmit+0x6c>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	691b      	ldr	r3, [r3, #16]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d104      	bne.n	80041a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	61bb      	str	r3, [r7, #24]
 80041a2:	e003      	b.n	80041ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041ac:	e02e      	b.n	800420c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	2200      	movs	r2, #0
 80041b6:	2180      	movs	r1, #128	@ 0x80
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 fb1c 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d005      	beq.n	80041d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e03a      	b.n	8004246 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10b      	bne.n	80041ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	881b      	ldrh	r3, [r3, #0]
 80041da:	461a      	mov	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	3302      	adds	r3, #2
 80041ea:	61bb      	str	r3, [r7, #24]
 80041ec:	e007      	b.n	80041fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	781a      	ldrb	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	3301      	adds	r3, #1
 80041fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004210:	b29b      	uxth	r3, r3
 8004212:	2b00      	cmp	r3, #0
 8004214:	d1cb      	bne.n	80041ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	2140      	movs	r1, #64	@ 0x40
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 fae8 	bl	80047f6 <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	2220      	movs	r2, #32
 8004230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e006      	b.n	8004246 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	e000      	b.n	8004246 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004244:	2302      	movs	r3, #2
  }
}
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b084      	sub	sp, #16
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	4613      	mov	r3, r2
 800425a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b20      	cmp	r3, #32
 8004266:	d112      	bne.n	800428e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d002      	beq.n	8004274 <HAL_UART_Receive_IT+0x26>
 800426e:	88fb      	ldrh	r3, [r7, #6]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e00b      	b.n	8004290 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800427e:	88fb      	ldrh	r3, [r7, #6]
 8004280:	461a      	mov	r2, r3
 8004282:	68b9      	ldr	r1, [r7, #8]
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 fb0f 	bl	80048a8 <UART_Start_Receive_IT>
 800428a:	4603      	mov	r3, r0
 800428c:	e000      	b.n	8004290 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800428e:	2302      	movs	r3, #2
  }
}
 8004290:	4618      	mov	r0, r3
 8004292:	3710      	adds	r7, #16
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b0ba      	sub	sp, #232	@ 0xe8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80042be:	2300      	movs	r3, #0
 80042c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80042ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ce:	f003 030f 	and.w	r3, r3, #15
 80042d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80042d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10f      	bne.n	80042fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_UART_IRQHandler+0x66>
 80042ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ee:	f003 0320 	and.w	r3, r3, #32
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 fbec 	bl	8004ad4 <UART_Receive_IT>
      return;
 80042fc:	e25b      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 80de 	beq.w	80044c4 <HAL_UART_IRQHandler+0x22c>
 8004308:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800430c:	f003 0301 	and.w	r3, r3, #1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d106      	bne.n	8004322 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004318:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80d1 	beq.w	80044c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <HAL_UART_IRQHandler+0xae>
 800432e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0201 	orr.w	r2, r3, #1
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004346:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434a:	f003 0304 	and.w	r3, r3, #4
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_UART_IRQHandler+0xd2>
 8004352:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d005      	beq.n	800436a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004362:	f043 0202 	orr.w	r2, r3, #2
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800436a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <HAL_UART_IRQHandler+0xf6>
 8004376:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800437a:	f003 0301 	and.w	r3, r3, #1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d005      	beq.n	800438e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	f043 0204 	orr.w	r2, r3, #4
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800438e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_UART_IRQHandler+0x126>
 800439a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800439e:	f003 0320 	and.w	r3, r3, #32
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d005      	beq.n	80043be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043b6:	f043 0208 	orr.w	r2, r3, #8
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	f000 81f2 	beq.w	80047ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80043c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043cc:	f003 0320 	and.w	r3, r3, #32
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_UART_IRQHandler+0x14e>
 80043d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043d8:	f003 0320 	and.w	r3, r3, #32
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d002      	beq.n	80043e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f000 fb77 	bl	8004ad4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	695b      	ldr	r3, [r3, #20]
 80043ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004402:	f003 0308 	and.w	r3, r3, #8
 8004406:	2b00      	cmp	r3, #0
 8004408:	d103      	bne.n	8004412 <HAL_UART_IRQHandler+0x17a>
 800440a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800440e:	2b00      	cmp	r3, #0
 8004410:	d04f      	beq.n	80044b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f000 fa81 	bl	800491a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d041      	beq.n	80044aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	3314      	adds	r3, #20
 800442c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800443c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004440:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004444:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004452:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004456:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800445a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800445e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004462:	e841 2300 	strex	r3, r2, [r1]
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800446a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1d9      	bne.n	8004426 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d013      	beq.n	80044a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800447e:	4a7e      	ldr	r2, [pc, #504]	@ (8004678 <HAL_UART_IRQHandler+0x3e0>)
 8004480:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004486:	4618      	mov	r0, r3
 8004488:	f7fd ff3c 	bl	8002304 <HAL_DMA_Abort_IT>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004496:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800449c:	4610      	mov	r0, r2
 800449e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a0:	e00e      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f993 	bl	80047ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044a8:	e00a      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f98f 	bl	80047ce <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e006      	b.n	80044c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f98b 	bl	80047ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80044be:	e175      	b.n	80047ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	bf00      	nop
    return;
 80044c2:	e173      	b.n	80047ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	f040 814f 	bne.w	800476c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80044ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 8148 	beq.w	800476c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80044dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 8141 	beq.w	800476c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60bb      	str	r3, [r7, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	60bb      	str	r3, [r7, #8]
 80044fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80b6 	beq.w	800467c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800451c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 8145 	beq.w	80047b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800452a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800452e:	429a      	cmp	r2, r3
 8004530:	f080 813e 	bcs.w	80047b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800453a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	2b20      	cmp	r3, #32
 8004544:	f000 8088 	beq.w	8004658 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800455e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004562:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004566:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004574:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004578:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004580:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004584:	e841 2300 	strex	r3, r2, [r1]
 8004588:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1d9      	bne.n	8004548 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	3314      	adds	r3, #20
 800459a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045a6:	f023 0301 	bic.w	r3, r3, #1
 80045aa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3314      	adds	r3, #20
 80045b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80045b8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80045bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80045c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80045c4:	e841 2300 	strex	r3, r2, [r1]
 80045c8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80045ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e1      	bne.n	8004594 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3314      	adds	r3, #20
 80045d6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045da:	e853 3f00 	ldrex	r3, [r3]
 80045de:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80045e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80045e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3314      	adds	r3, #20
 80045f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045f4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e3      	bne.n	80045d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004626:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800463a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800463c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004640:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004648:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e3      	bne.n	8004616 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	4618      	mov	r0, r3
 8004654:	f7fd fe1b 	bl	800228e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004666:	b29b      	uxth	r3, r3
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	b29b      	uxth	r3, r3
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f000 f8b6 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004674:	e09c      	b.n	80047b0 <HAL_UART_IRQHandler+0x518>
 8004676:	bf00      	nop
 8004678:	080049df 	.word	0x080049df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004684:	b29b      	uxth	r3, r3
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004690:	b29b      	uxth	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	f000 808e 	beq.w	80047b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004698:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8089 	beq.w	80047b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80046b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80046b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	330c      	adds	r3, #12
 80046c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80046c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80046c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80046cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80046ce:	e841 2300 	strex	r3, r2, [r1]
 80046d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80046d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d1e3      	bne.n	80046a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	623b      	str	r3, [r7, #32]
   return(result);
 80046ea:	6a3b      	ldr	r3, [r7, #32]
 80046ec:	f023 0301 	bic.w	r3, r3, #1
 80046f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2220      	movs	r2, #32
 8004716:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	330c      	adds	r3, #12
 8004726:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f023 0310 	bic.w	r3, r3, #16
 8004736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	330c      	adds	r3, #12
 8004740:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004744:	61fa      	str	r2, [r7, #28]
 8004746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004748:	69b9      	ldr	r1, [r7, #24]
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	e841 2300 	strex	r3, r2, [r1]
 8004750:	617b      	str	r3, [r7, #20]
   return(result);
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d1e3      	bne.n	8004720 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800475e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004762:	4619      	mov	r1, r3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f83b 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800476a:	e023      	b.n	80047b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004770:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004774:	2b00      	cmp	r3, #0
 8004776:	d009      	beq.n	800478c <HAL_UART_IRQHandler+0x4f4>
 8004778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800477c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f93e 	bl	8004a06 <UART_Transmit_IT>
    return;
 800478a:	e014      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800478c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00e      	beq.n	80047b6 <HAL_UART_IRQHandler+0x51e>
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800479c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d008      	beq.n	80047b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f000 f97d 	bl	8004aa4 <UART_EndTransmit_IT>
    return;
 80047aa:	e004      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80047ac:	bf00      	nop
 80047ae:	e002      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047b0:	bf00      	nop
 80047b2:	e000      	b.n	80047b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80047b4:	bf00      	nop
  }
}
 80047b6:	37e8      	adds	r7, #232	@ 0xe8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bc80      	pop	{r7}
 80047cc:	4770      	bx	lr

080047ce <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047ce:	b480      	push	{r7}
 80047d0:	b083      	sub	sp, #12
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	460b      	mov	r3, r1
 80047ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ec:	bf00      	nop
 80047ee:	370c      	adds	r7, #12
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr

080047f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047f6:	b580      	push	{r7, lr}
 80047f8:	b086      	sub	sp, #24
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	60f8      	str	r0, [r7, #12]
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	4613      	mov	r3, r2
 8004804:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004806:	e03b      	b.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800480e:	d037      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004810:	f7fd fc02 	bl	8002018 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	6a3a      	ldr	r2, [r7, #32]
 800481c:	429a      	cmp	r2, r3
 800481e:	d302      	bcc.n	8004826 <UART_WaitOnFlagUntilTimeout+0x30>
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e03a      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	2b80      	cmp	r3, #128	@ 0x80
 800483c:	d020      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b40      	cmp	r3, #64	@ 0x40
 8004842:	d01d      	beq.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b08      	cmp	r3, #8
 8004850:	d116      	bne.n	8004880 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004852:	2300      	movs	r3, #0
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 f856 	bl	800491a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2208      	movs	r2, #8
 8004872:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e00f      	b.n	80048a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	4013      	ands	r3, r2
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	429a      	cmp	r2, r3
 800488e:	bf0c      	ite	eq
 8004890:	2301      	moveq	r3, #1
 8004892:	2300      	movne	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	79fb      	ldrb	r3, [r7, #7]
 800489a:	429a      	cmp	r2, r3
 800489c:	d0b4      	beq.n	8004808 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	4613      	mov	r3, r2
 80048b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	88fa      	ldrh	r2, [r7, #6]
 80048c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	88fa      	ldrh	r2, [r7, #6]
 80048c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2222      	movs	r2, #34	@ 0x22
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d007      	beq.n	80048ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695a      	ldr	r2, [r3, #20]
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f042 0201 	orr.w	r2, r2, #1
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	68da      	ldr	r2, [r3, #12]
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	bc80      	pop	{r7}
 8004918:	4770      	bx	lr

0800491a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800491a:	b480      	push	{r7}
 800491c:	b095      	sub	sp, #84	@ 0x54
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	330c      	adds	r3, #12
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	e853 3f00 	ldrex	r3, [r3]
 8004930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	330c      	adds	r3, #12
 8004940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004942:	643a      	str	r2, [r7, #64]	@ 0x40
 8004944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800494a:	e841 2300 	strex	r3, r2, [r1]
 800494e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1e5      	bne.n	8004922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3314      	adds	r3, #20
 800495c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	61fb      	str	r3, [r7, #28]
   return(result);
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	3314      	adds	r3, #20
 8004974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800497c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e5      	bne.n	8004956 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800498e:	2b01      	cmp	r3, #1
 8004990:	d119      	bne.n	80049c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	330c      	adds	r3, #12
 8004998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	f023 0310 	bic.w	r3, r3, #16
 80049a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b2:	61ba      	str	r2, [r7, #24]
 80049b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b6:	6979      	ldr	r1, [r7, #20]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	e841 2300 	strex	r3, r2, [r1]
 80049be:	613b      	str	r3, [r7, #16]
   return(result);
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1e5      	bne.n	8004992 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80049d4:	bf00      	nop
 80049d6:	3754      	adds	r7, #84	@ 0x54
 80049d8:	46bd      	mov	sp, r7
 80049da:	bc80      	pop	{r7}
 80049dc:	4770      	bx	lr

080049de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff fee8 	bl	80047ce <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049fe:	bf00      	nop
 8004a00:	3710      	adds	r7, #16
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}

08004a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b21      	cmp	r3, #33	@ 0x21
 8004a18:	d13e      	bne.n	8004a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a22:	d114      	bne.n	8004a4e <UART_Transmit_IT+0x48>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d110      	bne.n	8004a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	881b      	ldrh	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	1c9a      	adds	r2, r3, #2
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	621a      	str	r2, [r3, #32]
 8004a4c:	e008      	b.n	8004a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1c59      	adds	r1, r3, #1
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6211      	str	r1, [r2, #32]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	3b01      	subs	r3, #1
 8004a68:	b29b      	uxth	r3, r3
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10f      	bne.n	8004a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a94:	2300      	movs	r3, #0
 8004a96:	e000      	b.n	8004a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
  }
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bc80      	pop	{r7}
 8004aa2:	4770      	bx	lr

08004aa4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004aba:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fe79 	bl	80047bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08c      	sub	sp, #48	@ 0x30
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b22      	cmp	r3, #34	@ 0x22
 8004ae6:	f040 80ae 	bne.w	8004c46 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af2:	d117      	bne.n	8004b24 <UART_Receive_IT+0x50>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d113      	bne.n	8004b24 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004afc:	2300      	movs	r3, #0
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	1c9a      	adds	r2, r3, #2
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	629a      	str	r2, [r3, #40]	@ 0x28
 8004b22:	e026      	b.n	8004b72 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b36:	d007      	beq.n	8004b48 <UART_Receive_IT+0x74>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <UART_Receive_IT+0x82>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d106      	bne.n	8004b56 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e008      	b.n	8004b68 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b62:	b2da      	uxtb	r2, r3
 8004b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b66:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4619      	mov	r1, r3
 8004b80:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d15d      	bne.n	8004c42 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68da      	ldr	r2, [r3, #12]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 0220 	bic.w	r2, r2, #32
 8004b94:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68da      	ldr	r2, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ba4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0201 	bic.w	r2, r2, #1
 8004bb4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d135      	bne.n	8004c38 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	330c      	adds	r3, #12
 8004bd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	e853 3f00 	ldrex	r3, [r3]
 8004be0:	613b      	str	r3, [r7, #16]
   return(result);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	f023 0310 	bic.w	r3, r3, #16
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	330c      	adds	r3, #12
 8004bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bf2:	623a      	str	r2, [r7, #32]
 8004bf4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf6:	69f9      	ldr	r1, [r7, #28]
 8004bf8:	6a3a      	ldr	r2, [r7, #32]
 8004bfa:	e841 2300 	strex	r3, r2, [r1]
 8004bfe:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1e5      	bne.n	8004bd2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0310 	and.w	r3, r3, #16
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d10a      	bne.n	8004c2a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c2e:	4619      	mov	r1, r3
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff fdd5 	bl	80047e0 <HAL_UARTEx_RxEventCallback>
 8004c36:	e002      	b.n	8004c3e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fc fad3 	bl	80011e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	e002      	b.n	8004c48 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004c42:	2300      	movs	r3, #0
 8004c44:	e000      	b.n	8004c48 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3730      	adds	r7, #48	@ 0x30
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	430a      	orrs	r2, r1
 8004c6c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689a      	ldr	r2, [r3, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c8a:	f023 030c 	bic.w	r3, r3, #12
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	6812      	ldr	r2, [r2, #0]
 8004c92:	68b9      	ldr	r1, [r7, #8]
 8004c94:	430b      	orrs	r3, r1
 8004c96:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a2c      	ldr	r2, [pc, #176]	@ (8004d64 <UART_SetConfig+0x114>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d103      	bne.n	8004cc0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004cb8:	f7fe fef8 	bl	8003aac <HAL_RCC_GetPCLK2Freq>
 8004cbc:	60f8      	str	r0, [r7, #12]
 8004cbe:	e002      	b.n	8004cc6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004cc0:	f7fe fee0 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8004cc4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009a      	lsls	r2, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cdc:	4a22      	ldr	r2, [pc, #136]	@ (8004d68 <UART_SetConfig+0x118>)
 8004cde:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce2:	095b      	lsrs	r3, r3, #5
 8004ce4:	0119      	lsls	r1, r3, #4
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	009a      	lsls	r2, r3, #2
 8004cf0:	441a      	add	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <UART_SetConfig+0x118>)
 8004cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	2064      	movs	r0, #100	@ 0x64
 8004d06:	fb00 f303 	mul.w	r3, r0, r3
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	011b      	lsls	r3, r3, #4
 8004d0e:	3332      	adds	r3, #50	@ 0x32
 8004d10:	4a15      	ldr	r2, [pc, #84]	@ (8004d68 <UART_SetConfig+0x118>)
 8004d12:	fba2 2303 	umull	r2, r3, r2, r3
 8004d16:	095b      	lsrs	r3, r3, #5
 8004d18:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004d1c:	4419      	add	r1, r3
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4613      	mov	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	4413      	add	r3, r2
 8004d26:	009a      	lsls	r2, r3, #2
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d34:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <UART_SetConfig+0x118>)
 8004d36:	fba3 0302 	umull	r0, r3, r3, r2
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2064      	movs	r0, #100	@ 0x64
 8004d3e:	fb00 f303 	mul.w	r3, r0, r3
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	011b      	lsls	r3, r3, #4
 8004d46:	3332      	adds	r3, #50	@ 0x32
 8004d48:	4a07      	ldr	r2, [pc, #28]	@ (8004d68 <UART_SetConfig+0x118>)
 8004d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	f003 020f 	and.w	r2, r3, #15
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	440a      	add	r2, r1
 8004d5a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d5c:	bf00      	nop
 8004d5e:	3710      	adds	r7, #16
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	40013800 	.word	0x40013800
 8004d68:	51eb851f 	.word	0x51eb851f

08004d6c <__cvt>:
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d72:	461d      	mov	r5, r3
 8004d74:	bfbb      	ittet	lt
 8004d76:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004d7a:	461d      	movlt	r5, r3
 8004d7c:	2300      	movge	r3, #0
 8004d7e:	232d      	movlt	r3, #45	@ 0x2d
 8004d80:	b088      	sub	sp, #32
 8004d82:	4614      	mov	r4, r2
 8004d84:	bfb8      	it	lt
 8004d86:	4614      	movlt	r4, r2
 8004d88:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004d8a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004d8c:	7013      	strb	r3, [r2, #0]
 8004d8e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d90:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004d94:	f023 0820 	bic.w	r8, r3, #32
 8004d98:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d9c:	d005      	beq.n	8004daa <__cvt+0x3e>
 8004d9e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004da2:	d100      	bne.n	8004da6 <__cvt+0x3a>
 8004da4:	3601      	adds	r6, #1
 8004da6:	2302      	movs	r3, #2
 8004da8:	e000      	b.n	8004dac <__cvt+0x40>
 8004daa:	2303      	movs	r3, #3
 8004dac:	aa07      	add	r2, sp, #28
 8004dae:	9204      	str	r2, [sp, #16]
 8004db0:	aa06      	add	r2, sp, #24
 8004db2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004db6:	e9cd 3600 	strd	r3, r6, [sp]
 8004dba:	4622      	mov	r2, r4
 8004dbc:	462b      	mov	r3, r5
 8004dbe:	f000 fea3 	bl	8005b08 <_dtoa_r>
 8004dc2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004dc6:	4607      	mov	r7, r0
 8004dc8:	d119      	bne.n	8004dfe <__cvt+0x92>
 8004dca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004dcc:	07db      	lsls	r3, r3, #31
 8004dce:	d50e      	bpl.n	8004dee <__cvt+0x82>
 8004dd0:	eb00 0906 	add.w	r9, r0, r6
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f7fb fdee 	bl	80009bc <__aeabi_dcmpeq>
 8004de0:	b108      	cbz	r0, 8004de6 <__cvt+0x7a>
 8004de2:	f8cd 901c 	str.w	r9, [sp, #28]
 8004de6:	2230      	movs	r2, #48	@ 0x30
 8004de8:	9b07      	ldr	r3, [sp, #28]
 8004dea:	454b      	cmp	r3, r9
 8004dec:	d31e      	bcc.n	8004e2c <__cvt+0xc0>
 8004dee:	4638      	mov	r0, r7
 8004df0:	9b07      	ldr	r3, [sp, #28]
 8004df2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004df4:	1bdb      	subs	r3, r3, r7
 8004df6:	6013      	str	r3, [r2, #0]
 8004df8:	b008      	add	sp, #32
 8004dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfe:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004e02:	eb00 0906 	add.w	r9, r0, r6
 8004e06:	d1e5      	bne.n	8004dd4 <__cvt+0x68>
 8004e08:	7803      	ldrb	r3, [r0, #0]
 8004e0a:	2b30      	cmp	r3, #48	@ 0x30
 8004e0c:	d10a      	bne.n	8004e24 <__cvt+0xb8>
 8004e0e:	2200      	movs	r2, #0
 8004e10:	2300      	movs	r3, #0
 8004e12:	4620      	mov	r0, r4
 8004e14:	4629      	mov	r1, r5
 8004e16:	f7fb fdd1 	bl	80009bc <__aeabi_dcmpeq>
 8004e1a:	b918      	cbnz	r0, 8004e24 <__cvt+0xb8>
 8004e1c:	f1c6 0601 	rsb	r6, r6, #1
 8004e20:	f8ca 6000 	str.w	r6, [sl]
 8004e24:	f8da 3000 	ldr.w	r3, [sl]
 8004e28:	4499      	add	r9, r3
 8004e2a:	e7d3      	b.n	8004dd4 <__cvt+0x68>
 8004e2c:	1c59      	adds	r1, r3, #1
 8004e2e:	9107      	str	r1, [sp, #28]
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	e7d9      	b.n	8004de8 <__cvt+0x7c>

08004e34 <__exponent>:
 8004e34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e36:	2900      	cmp	r1, #0
 8004e38:	bfb6      	itet	lt
 8004e3a:	232d      	movlt	r3, #45	@ 0x2d
 8004e3c:	232b      	movge	r3, #43	@ 0x2b
 8004e3e:	4249      	neglt	r1, r1
 8004e40:	2909      	cmp	r1, #9
 8004e42:	7002      	strb	r2, [r0, #0]
 8004e44:	7043      	strb	r3, [r0, #1]
 8004e46:	dd29      	ble.n	8004e9c <__exponent+0x68>
 8004e48:	f10d 0307 	add.w	r3, sp, #7
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	270a      	movs	r7, #10
 8004e50:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e54:	461a      	mov	r2, r3
 8004e56:	fb07 1416 	mls	r4, r7, r6, r1
 8004e5a:	3430      	adds	r4, #48	@ 0x30
 8004e5c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e60:	460c      	mov	r4, r1
 8004e62:	2c63      	cmp	r4, #99	@ 0x63
 8004e64:	4631      	mov	r1, r6
 8004e66:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e6a:	dcf1      	bgt.n	8004e50 <__exponent+0x1c>
 8004e6c:	3130      	adds	r1, #48	@ 0x30
 8004e6e:	1e94      	subs	r4, r2, #2
 8004e70:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e74:	4623      	mov	r3, r4
 8004e76:	1c41      	adds	r1, r0, #1
 8004e78:	42ab      	cmp	r3, r5
 8004e7a:	d30a      	bcc.n	8004e92 <__exponent+0x5e>
 8004e7c:	f10d 0309 	add.w	r3, sp, #9
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	42ac      	cmp	r4, r5
 8004e84:	bf88      	it	hi
 8004e86:	2300      	movhi	r3, #0
 8004e88:	3302      	adds	r3, #2
 8004e8a:	4403      	add	r3, r0
 8004e8c:	1a18      	subs	r0, r3, r0
 8004e8e:	b003      	add	sp, #12
 8004e90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e92:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e96:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e9a:	e7ed      	b.n	8004e78 <__exponent+0x44>
 8004e9c:	2330      	movs	r3, #48	@ 0x30
 8004e9e:	3130      	adds	r1, #48	@ 0x30
 8004ea0:	7083      	strb	r3, [r0, #2]
 8004ea2:	70c1      	strb	r1, [r0, #3]
 8004ea4:	1d03      	adds	r3, r0, #4
 8004ea6:	e7f1      	b.n	8004e8c <__exponent+0x58>

08004ea8 <_printf_float>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	b091      	sub	sp, #68	@ 0x44
 8004eae:	460c      	mov	r4, r1
 8004eb0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004eb4:	4616      	mov	r6, r2
 8004eb6:	461f      	mov	r7, r3
 8004eb8:	4605      	mov	r5, r0
 8004eba:	f000 fd15 	bl	80058e8 <_localeconv_r>
 8004ebe:	6803      	ldr	r3, [r0, #0]
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	9308      	str	r3, [sp, #32]
 8004ec4:	f7fb f94e 	bl	8000164 <strlen>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	930e      	str	r3, [sp, #56]	@ 0x38
 8004ecc:	f8d8 3000 	ldr.w	r3, [r8]
 8004ed0:	9009      	str	r0, [sp, #36]	@ 0x24
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	f023 0307 	bic.w	r3, r3, #7
 8004ed8:	f103 0208 	add.w	r2, r3, #8
 8004edc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ee0:	f8d4 b000 	ldr.w	fp, [r4]
 8004ee4:	f8c8 2000 	str.w	r2, [r8]
 8004ee8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eec:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ef0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ef2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004efe:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004f02:	4b9c      	ldr	r3, [pc, #624]	@ (8005174 <_printf_float+0x2cc>)
 8004f04:	f7fb fd8c 	bl	8000a20 <__aeabi_dcmpun>
 8004f08:	bb70      	cbnz	r0, 8004f68 <_printf_float+0xc0>
 8004f0a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f12:	4b98      	ldr	r3, [pc, #608]	@ (8005174 <_printf_float+0x2cc>)
 8004f14:	f7fb fd66 	bl	80009e4 <__aeabi_dcmple>
 8004f18:	bb30      	cbnz	r0, 8004f68 <_printf_float+0xc0>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	4640      	mov	r0, r8
 8004f20:	4649      	mov	r1, r9
 8004f22:	f7fb fd55 	bl	80009d0 <__aeabi_dcmplt>
 8004f26:	b110      	cbz	r0, 8004f2e <_printf_float+0x86>
 8004f28:	232d      	movs	r3, #45	@ 0x2d
 8004f2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f2e:	4a92      	ldr	r2, [pc, #584]	@ (8005178 <_printf_float+0x2d0>)
 8004f30:	4b92      	ldr	r3, [pc, #584]	@ (800517c <_printf_float+0x2d4>)
 8004f32:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004f36:	bf94      	ite	ls
 8004f38:	4690      	movls	r8, r2
 8004f3a:	4698      	movhi	r8, r3
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	f04f 0900 	mov.w	r9, #0
 8004f42:	6123      	str	r3, [r4, #16]
 8004f44:	f02b 0304 	bic.w	r3, fp, #4
 8004f48:	6023      	str	r3, [r4, #0]
 8004f4a:	4633      	mov	r3, r6
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4628      	mov	r0, r5
 8004f50:	9700      	str	r7, [sp, #0]
 8004f52:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004f54:	f000 f9d4 	bl	8005300 <_printf_common>
 8004f58:	3001      	adds	r0, #1
 8004f5a:	f040 8090 	bne.w	800507e <_printf_float+0x1d6>
 8004f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f62:	b011      	add	sp, #68	@ 0x44
 8004f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f68:	4642      	mov	r2, r8
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	4640      	mov	r0, r8
 8004f6e:	4649      	mov	r1, r9
 8004f70:	f7fb fd56 	bl	8000a20 <__aeabi_dcmpun>
 8004f74:	b148      	cbz	r0, 8004f8a <_printf_float+0xe2>
 8004f76:	464b      	mov	r3, r9
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	bfb8      	it	lt
 8004f7c:	232d      	movlt	r3, #45	@ 0x2d
 8004f7e:	4a80      	ldr	r2, [pc, #512]	@ (8005180 <_printf_float+0x2d8>)
 8004f80:	bfb8      	it	lt
 8004f82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f86:	4b7f      	ldr	r3, [pc, #508]	@ (8005184 <_printf_float+0x2dc>)
 8004f88:	e7d3      	b.n	8004f32 <_printf_float+0x8a>
 8004f8a:	6863      	ldr	r3, [r4, #4]
 8004f8c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004f90:	1c5a      	adds	r2, r3, #1
 8004f92:	d13f      	bne.n	8005014 <_printf_float+0x16c>
 8004f94:	2306      	movs	r3, #6
 8004f96:	6063      	str	r3, [r4, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	9206      	str	r2, [sp, #24]
 8004fa2:	aa0e      	add	r2, sp, #56	@ 0x38
 8004fa4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004fa8:	aa0d      	add	r2, sp, #52	@ 0x34
 8004faa:	9203      	str	r2, [sp, #12]
 8004fac:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004fb0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004fb4:	6863      	ldr	r3, [r4, #4]
 8004fb6:	4642      	mov	r2, r8
 8004fb8:	9300      	str	r3, [sp, #0]
 8004fba:	4628      	mov	r0, r5
 8004fbc:	464b      	mov	r3, r9
 8004fbe:	910a      	str	r1, [sp, #40]	@ 0x28
 8004fc0:	f7ff fed4 	bl	8004d6c <__cvt>
 8004fc4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004fc6:	4680      	mov	r8, r0
 8004fc8:	2947      	cmp	r1, #71	@ 0x47
 8004fca:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004fcc:	d128      	bne.n	8005020 <_printf_float+0x178>
 8004fce:	1cc8      	adds	r0, r1, #3
 8004fd0:	db02      	blt.n	8004fd8 <_printf_float+0x130>
 8004fd2:	6863      	ldr	r3, [r4, #4]
 8004fd4:	4299      	cmp	r1, r3
 8004fd6:	dd40      	ble.n	800505a <_printf_float+0x1b2>
 8004fd8:	f1aa 0a02 	sub.w	sl, sl, #2
 8004fdc:	fa5f fa8a 	uxtb.w	sl, sl
 8004fe0:	4652      	mov	r2, sl
 8004fe2:	3901      	subs	r1, #1
 8004fe4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fe8:	910d      	str	r1, [sp, #52]	@ 0x34
 8004fea:	f7ff ff23 	bl	8004e34 <__exponent>
 8004fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004ff0:	4681      	mov	r9, r0
 8004ff2:	1813      	adds	r3, r2, r0
 8004ff4:	2a01      	cmp	r2, #1
 8004ff6:	6123      	str	r3, [r4, #16]
 8004ff8:	dc02      	bgt.n	8005000 <_printf_float+0x158>
 8004ffa:	6822      	ldr	r2, [r4, #0]
 8004ffc:	07d2      	lsls	r2, r2, #31
 8004ffe:	d501      	bpl.n	8005004 <_printf_float+0x15c>
 8005000:	3301      	adds	r3, #1
 8005002:	6123      	str	r3, [r4, #16]
 8005004:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005008:	2b00      	cmp	r3, #0
 800500a:	d09e      	beq.n	8004f4a <_printf_float+0xa2>
 800500c:	232d      	movs	r3, #45	@ 0x2d
 800500e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005012:	e79a      	b.n	8004f4a <_printf_float+0xa2>
 8005014:	2947      	cmp	r1, #71	@ 0x47
 8005016:	d1bf      	bne.n	8004f98 <_printf_float+0xf0>
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1bd      	bne.n	8004f98 <_printf_float+0xf0>
 800501c:	2301      	movs	r3, #1
 800501e:	e7ba      	b.n	8004f96 <_printf_float+0xee>
 8005020:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005024:	d9dc      	bls.n	8004fe0 <_printf_float+0x138>
 8005026:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800502a:	d118      	bne.n	800505e <_printf_float+0x1b6>
 800502c:	2900      	cmp	r1, #0
 800502e:	6863      	ldr	r3, [r4, #4]
 8005030:	dd0b      	ble.n	800504a <_printf_float+0x1a2>
 8005032:	6121      	str	r1, [r4, #16]
 8005034:	b913      	cbnz	r3, 800503c <_printf_float+0x194>
 8005036:	6822      	ldr	r2, [r4, #0]
 8005038:	07d0      	lsls	r0, r2, #31
 800503a:	d502      	bpl.n	8005042 <_printf_float+0x19a>
 800503c:	3301      	adds	r3, #1
 800503e:	440b      	add	r3, r1
 8005040:	6123      	str	r3, [r4, #16]
 8005042:	f04f 0900 	mov.w	r9, #0
 8005046:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005048:	e7dc      	b.n	8005004 <_printf_float+0x15c>
 800504a:	b913      	cbnz	r3, 8005052 <_printf_float+0x1aa>
 800504c:	6822      	ldr	r2, [r4, #0]
 800504e:	07d2      	lsls	r2, r2, #31
 8005050:	d501      	bpl.n	8005056 <_printf_float+0x1ae>
 8005052:	3302      	adds	r3, #2
 8005054:	e7f4      	b.n	8005040 <_printf_float+0x198>
 8005056:	2301      	movs	r3, #1
 8005058:	e7f2      	b.n	8005040 <_printf_float+0x198>
 800505a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800505e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005060:	4299      	cmp	r1, r3
 8005062:	db05      	blt.n	8005070 <_printf_float+0x1c8>
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	6121      	str	r1, [r4, #16]
 8005068:	07d8      	lsls	r0, r3, #31
 800506a:	d5ea      	bpl.n	8005042 <_printf_float+0x19a>
 800506c:	1c4b      	adds	r3, r1, #1
 800506e:	e7e7      	b.n	8005040 <_printf_float+0x198>
 8005070:	2900      	cmp	r1, #0
 8005072:	bfcc      	ite	gt
 8005074:	2201      	movgt	r2, #1
 8005076:	f1c1 0202 	rsble	r2, r1, #2
 800507a:	4413      	add	r3, r2
 800507c:	e7e0      	b.n	8005040 <_printf_float+0x198>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	055a      	lsls	r2, r3, #21
 8005082:	d407      	bmi.n	8005094 <_printf_float+0x1ec>
 8005084:	6923      	ldr	r3, [r4, #16]
 8005086:	4642      	mov	r2, r8
 8005088:	4631      	mov	r1, r6
 800508a:	4628      	mov	r0, r5
 800508c:	47b8      	blx	r7
 800508e:	3001      	adds	r0, #1
 8005090:	d12b      	bne.n	80050ea <_printf_float+0x242>
 8005092:	e764      	b.n	8004f5e <_printf_float+0xb6>
 8005094:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005098:	f240 80dc 	bls.w	8005254 <_printf_float+0x3ac>
 800509c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050a0:	2200      	movs	r2, #0
 80050a2:	2300      	movs	r3, #0
 80050a4:	f7fb fc8a 	bl	80009bc <__aeabi_dcmpeq>
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d033      	beq.n	8005114 <_printf_float+0x26c>
 80050ac:	2301      	movs	r3, #1
 80050ae:	4631      	mov	r1, r6
 80050b0:	4628      	mov	r0, r5
 80050b2:	4a35      	ldr	r2, [pc, #212]	@ (8005188 <_printf_float+0x2e0>)
 80050b4:	47b8      	blx	r7
 80050b6:	3001      	adds	r0, #1
 80050b8:	f43f af51 	beq.w	8004f5e <_printf_float+0xb6>
 80050bc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80050c0:	4543      	cmp	r3, r8
 80050c2:	db02      	blt.n	80050ca <_printf_float+0x222>
 80050c4:	6823      	ldr	r3, [r4, #0]
 80050c6:	07d8      	lsls	r0, r3, #31
 80050c8:	d50f      	bpl.n	80050ea <_printf_float+0x242>
 80050ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	f43f af42 	beq.w	8004f5e <_printf_float+0xb6>
 80050da:	f04f 0900 	mov.w	r9, #0
 80050de:	f108 38ff 	add.w	r8, r8, #4294967295
 80050e2:	f104 0a1a 	add.w	sl, r4, #26
 80050e6:	45c8      	cmp	r8, r9
 80050e8:	dc09      	bgt.n	80050fe <_printf_float+0x256>
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	079b      	lsls	r3, r3, #30
 80050ee:	f100 8102 	bmi.w	80052f6 <_printf_float+0x44e>
 80050f2:	68e0      	ldr	r0, [r4, #12]
 80050f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050f6:	4298      	cmp	r0, r3
 80050f8:	bfb8      	it	lt
 80050fa:	4618      	movlt	r0, r3
 80050fc:	e731      	b.n	8004f62 <_printf_float+0xba>
 80050fe:	2301      	movs	r3, #1
 8005100:	4652      	mov	r2, sl
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	f43f af28 	beq.w	8004f5e <_printf_float+0xb6>
 800510e:	f109 0901 	add.w	r9, r9, #1
 8005112:	e7e8      	b.n	80050e6 <_printf_float+0x23e>
 8005114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	dc38      	bgt.n	800518c <_printf_float+0x2e4>
 800511a:	2301      	movs	r3, #1
 800511c:	4631      	mov	r1, r6
 800511e:	4628      	mov	r0, r5
 8005120:	4a19      	ldr	r2, [pc, #100]	@ (8005188 <_printf_float+0x2e0>)
 8005122:	47b8      	blx	r7
 8005124:	3001      	adds	r0, #1
 8005126:	f43f af1a 	beq.w	8004f5e <_printf_float+0xb6>
 800512a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800512e:	ea59 0303 	orrs.w	r3, r9, r3
 8005132:	d102      	bne.n	800513a <_printf_float+0x292>
 8005134:	6823      	ldr	r3, [r4, #0]
 8005136:	07d9      	lsls	r1, r3, #31
 8005138:	d5d7      	bpl.n	80050ea <_printf_float+0x242>
 800513a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	f43f af0a 	beq.w	8004f5e <_printf_float+0xb6>
 800514a:	f04f 0a00 	mov.w	sl, #0
 800514e:	f104 0b1a 	add.w	fp, r4, #26
 8005152:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005154:	425b      	negs	r3, r3
 8005156:	4553      	cmp	r3, sl
 8005158:	dc01      	bgt.n	800515e <_printf_float+0x2b6>
 800515a:	464b      	mov	r3, r9
 800515c:	e793      	b.n	8005086 <_printf_float+0x1de>
 800515e:	2301      	movs	r3, #1
 8005160:	465a      	mov	r2, fp
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	f43f aef8 	beq.w	8004f5e <_printf_float+0xb6>
 800516e:	f10a 0a01 	add.w	sl, sl, #1
 8005172:	e7ee      	b.n	8005152 <_printf_float+0x2aa>
 8005174:	7fefffff 	.word	0x7fefffff
 8005178:	080082ae 	.word	0x080082ae
 800517c:	080082b2 	.word	0x080082b2
 8005180:	080082b6 	.word	0x080082b6
 8005184:	080082ba 	.word	0x080082ba
 8005188:	080082be 	.word	0x080082be
 800518c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800518e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005192:	4553      	cmp	r3, sl
 8005194:	bfa8      	it	ge
 8005196:	4653      	movge	r3, sl
 8005198:	2b00      	cmp	r3, #0
 800519a:	4699      	mov	r9, r3
 800519c:	dc36      	bgt.n	800520c <_printf_float+0x364>
 800519e:	f04f 0b00 	mov.w	fp, #0
 80051a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a6:	f104 021a 	add.w	r2, r4, #26
 80051aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80051ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80051ae:	eba3 0309 	sub.w	r3, r3, r9
 80051b2:	455b      	cmp	r3, fp
 80051b4:	dc31      	bgt.n	800521a <_printf_float+0x372>
 80051b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051b8:	459a      	cmp	sl, r3
 80051ba:	dc3a      	bgt.n	8005232 <_printf_float+0x38a>
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	07da      	lsls	r2, r3, #31
 80051c0:	d437      	bmi.n	8005232 <_printf_float+0x38a>
 80051c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051c4:	ebaa 0903 	sub.w	r9, sl, r3
 80051c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80051ca:	ebaa 0303 	sub.w	r3, sl, r3
 80051ce:	4599      	cmp	r9, r3
 80051d0:	bfa8      	it	ge
 80051d2:	4699      	movge	r9, r3
 80051d4:	f1b9 0f00 	cmp.w	r9, #0
 80051d8:	dc33      	bgt.n	8005242 <_printf_float+0x39a>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051e2:	f104 0b1a 	add.w	fp, r4, #26
 80051e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051e8:	ebaa 0303 	sub.w	r3, sl, r3
 80051ec:	eba3 0309 	sub.w	r3, r3, r9
 80051f0:	4543      	cmp	r3, r8
 80051f2:	f77f af7a 	ble.w	80050ea <_printf_float+0x242>
 80051f6:	2301      	movs	r3, #1
 80051f8:	465a      	mov	r2, fp
 80051fa:	4631      	mov	r1, r6
 80051fc:	4628      	mov	r0, r5
 80051fe:	47b8      	blx	r7
 8005200:	3001      	adds	r0, #1
 8005202:	f43f aeac 	beq.w	8004f5e <_printf_float+0xb6>
 8005206:	f108 0801 	add.w	r8, r8, #1
 800520a:	e7ec      	b.n	80051e6 <_printf_float+0x33e>
 800520c:	4642      	mov	r2, r8
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	d1c2      	bne.n	800519e <_printf_float+0x2f6>
 8005218:	e6a1      	b.n	8004f5e <_printf_float+0xb6>
 800521a:	2301      	movs	r3, #1
 800521c:	4631      	mov	r1, r6
 800521e:	4628      	mov	r0, r5
 8005220:	920a      	str	r2, [sp, #40]	@ 0x28
 8005222:	47b8      	blx	r7
 8005224:	3001      	adds	r0, #1
 8005226:	f43f ae9a 	beq.w	8004f5e <_printf_float+0xb6>
 800522a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800522c:	f10b 0b01 	add.w	fp, fp, #1
 8005230:	e7bb      	b.n	80051aa <_printf_float+0x302>
 8005232:	4631      	mov	r1, r6
 8005234:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	d1c0      	bne.n	80051c2 <_printf_float+0x31a>
 8005240:	e68d      	b.n	8004f5e <_printf_float+0xb6>
 8005242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005244:	464b      	mov	r3, r9
 8005246:	4631      	mov	r1, r6
 8005248:	4628      	mov	r0, r5
 800524a:	4442      	add	r2, r8
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	d1c3      	bne.n	80051da <_printf_float+0x332>
 8005252:	e684      	b.n	8004f5e <_printf_float+0xb6>
 8005254:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005258:	f1ba 0f01 	cmp.w	sl, #1
 800525c:	dc01      	bgt.n	8005262 <_printf_float+0x3ba>
 800525e:	07db      	lsls	r3, r3, #31
 8005260:	d536      	bpl.n	80052d0 <_printf_float+0x428>
 8005262:	2301      	movs	r3, #1
 8005264:	4642      	mov	r2, r8
 8005266:	4631      	mov	r1, r6
 8005268:	4628      	mov	r0, r5
 800526a:	47b8      	blx	r7
 800526c:	3001      	adds	r0, #1
 800526e:	f43f ae76 	beq.w	8004f5e <_printf_float+0xb6>
 8005272:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005276:	4631      	mov	r1, r6
 8005278:	4628      	mov	r0, r5
 800527a:	47b8      	blx	r7
 800527c:	3001      	adds	r0, #1
 800527e:	f43f ae6e 	beq.w	8004f5e <_printf_float+0xb6>
 8005282:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800528e:	f7fb fb95 	bl	80009bc <__aeabi_dcmpeq>
 8005292:	b9c0      	cbnz	r0, 80052c6 <_printf_float+0x41e>
 8005294:	4653      	mov	r3, sl
 8005296:	f108 0201 	add.w	r2, r8, #1
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	d10c      	bne.n	80052be <_printf_float+0x416>
 80052a4:	e65b      	b.n	8004f5e <_printf_float+0xb6>
 80052a6:	2301      	movs	r3, #1
 80052a8:	465a      	mov	r2, fp
 80052aa:	4631      	mov	r1, r6
 80052ac:	4628      	mov	r0, r5
 80052ae:	47b8      	blx	r7
 80052b0:	3001      	adds	r0, #1
 80052b2:	f43f ae54 	beq.w	8004f5e <_printf_float+0xb6>
 80052b6:	f108 0801 	add.w	r8, r8, #1
 80052ba:	45d0      	cmp	r8, sl
 80052bc:	dbf3      	blt.n	80052a6 <_printf_float+0x3fe>
 80052be:	464b      	mov	r3, r9
 80052c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80052c4:	e6e0      	b.n	8005088 <_printf_float+0x1e0>
 80052c6:	f04f 0800 	mov.w	r8, #0
 80052ca:	f104 0b1a 	add.w	fp, r4, #26
 80052ce:	e7f4      	b.n	80052ba <_printf_float+0x412>
 80052d0:	2301      	movs	r3, #1
 80052d2:	4642      	mov	r2, r8
 80052d4:	e7e1      	b.n	800529a <_printf_float+0x3f2>
 80052d6:	2301      	movs	r3, #1
 80052d8:	464a      	mov	r2, r9
 80052da:	4631      	mov	r1, r6
 80052dc:	4628      	mov	r0, r5
 80052de:	47b8      	blx	r7
 80052e0:	3001      	adds	r0, #1
 80052e2:	f43f ae3c 	beq.w	8004f5e <_printf_float+0xb6>
 80052e6:	f108 0801 	add.w	r8, r8, #1
 80052ea:	68e3      	ldr	r3, [r4, #12]
 80052ec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80052ee:	1a5b      	subs	r3, r3, r1
 80052f0:	4543      	cmp	r3, r8
 80052f2:	dcf0      	bgt.n	80052d6 <_printf_float+0x42e>
 80052f4:	e6fd      	b.n	80050f2 <_printf_float+0x24a>
 80052f6:	f04f 0800 	mov.w	r8, #0
 80052fa:	f104 0919 	add.w	r9, r4, #25
 80052fe:	e7f4      	b.n	80052ea <_printf_float+0x442>

08005300 <_printf_common>:
 8005300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	4616      	mov	r6, r2
 8005306:	4698      	mov	r8, r3
 8005308:	688a      	ldr	r2, [r1, #8]
 800530a:	690b      	ldr	r3, [r1, #16]
 800530c:	4607      	mov	r7, r0
 800530e:	4293      	cmp	r3, r2
 8005310:	bfb8      	it	lt
 8005312:	4613      	movlt	r3, r2
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800531a:	460c      	mov	r4, r1
 800531c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005320:	b10a      	cbz	r2, 8005326 <_printf_common+0x26>
 8005322:	3301      	adds	r3, #1
 8005324:	6033      	str	r3, [r6, #0]
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	0699      	lsls	r1, r3, #26
 800532a:	bf42      	ittt	mi
 800532c:	6833      	ldrmi	r3, [r6, #0]
 800532e:	3302      	addmi	r3, #2
 8005330:	6033      	strmi	r3, [r6, #0]
 8005332:	6825      	ldr	r5, [r4, #0]
 8005334:	f015 0506 	ands.w	r5, r5, #6
 8005338:	d106      	bne.n	8005348 <_printf_common+0x48>
 800533a:	f104 0a19 	add.w	sl, r4, #25
 800533e:	68e3      	ldr	r3, [r4, #12]
 8005340:	6832      	ldr	r2, [r6, #0]
 8005342:	1a9b      	subs	r3, r3, r2
 8005344:	42ab      	cmp	r3, r5
 8005346:	dc2b      	bgt.n	80053a0 <_printf_common+0xa0>
 8005348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800534c:	6822      	ldr	r2, [r4, #0]
 800534e:	3b00      	subs	r3, #0
 8005350:	bf18      	it	ne
 8005352:	2301      	movne	r3, #1
 8005354:	0692      	lsls	r2, r2, #26
 8005356:	d430      	bmi.n	80053ba <_printf_common+0xba>
 8005358:	4641      	mov	r1, r8
 800535a:	4638      	mov	r0, r7
 800535c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005360:	47c8      	blx	r9
 8005362:	3001      	adds	r0, #1
 8005364:	d023      	beq.n	80053ae <_printf_common+0xae>
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	6922      	ldr	r2, [r4, #16]
 800536a:	f003 0306 	and.w	r3, r3, #6
 800536e:	2b04      	cmp	r3, #4
 8005370:	bf14      	ite	ne
 8005372:	2500      	movne	r5, #0
 8005374:	6833      	ldreq	r3, [r6, #0]
 8005376:	f04f 0600 	mov.w	r6, #0
 800537a:	bf08      	it	eq
 800537c:	68e5      	ldreq	r5, [r4, #12]
 800537e:	f104 041a 	add.w	r4, r4, #26
 8005382:	bf08      	it	eq
 8005384:	1aed      	subeq	r5, r5, r3
 8005386:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800538a:	bf08      	it	eq
 800538c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005390:	4293      	cmp	r3, r2
 8005392:	bfc4      	itt	gt
 8005394:	1a9b      	subgt	r3, r3, r2
 8005396:	18ed      	addgt	r5, r5, r3
 8005398:	42b5      	cmp	r5, r6
 800539a:	d11a      	bne.n	80053d2 <_printf_common+0xd2>
 800539c:	2000      	movs	r0, #0
 800539e:	e008      	b.n	80053b2 <_printf_common+0xb2>
 80053a0:	2301      	movs	r3, #1
 80053a2:	4652      	mov	r2, sl
 80053a4:	4641      	mov	r1, r8
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c8      	blx	r9
 80053aa:	3001      	adds	r0, #1
 80053ac:	d103      	bne.n	80053b6 <_printf_common+0xb6>
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b6:	3501      	adds	r5, #1
 80053b8:	e7c1      	b.n	800533e <_printf_common+0x3e>
 80053ba:	2030      	movs	r0, #48	@ 0x30
 80053bc:	18e1      	adds	r1, r4, r3
 80053be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053c8:	4422      	add	r2, r4
 80053ca:	3302      	adds	r3, #2
 80053cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053d0:	e7c2      	b.n	8005358 <_printf_common+0x58>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4622      	mov	r2, r4
 80053d6:	4641      	mov	r1, r8
 80053d8:	4638      	mov	r0, r7
 80053da:	47c8      	blx	r9
 80053dc:	3001      	adds	r0, #1
 80053de:	d0e6      	beq.n	80053ae <_printf_common+0xae>
 80053e0:	3601      	adds	r6, #1
 80053e2:	e7d9      	b.n	8005398 <_printf_common+0x98>

080053e4 <_printf_i>:
 80053e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e8:	7e0f      	ldrb	r7, [r1, #24]
 80053ea:	4691      	mov	r9, r2
 80053ec:	2f78      	cmp	r7, #120	@ 0x78
 80053ee:	4680      	mov	r8, r0
 80053f0:	460c      	mov	r4, r1
 80053f2:	469a      	mov	sl, r3
 80053f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053fa:	d807      	bhi.n	800540c <_printf_i+0x28>
 80053fc:	2f62      	cmp	r7, #98	@ 0x62
 80053fe:	d80a      	bhi.n	8005416 <_printf_i+0x32>
 8005400:	2f00      	cmp	r7, #0
 8005402:	f000 80d3 	beq.w	80055ac <_printf_i+0x1c8>
 8005406:	2f58      	cmp	r7, #88	@ 0x58
 8005408:	f000 80ba 	beq.w	8005580 <_printf_i+0x19c>
 800540c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005410:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005414:	e03a      	b.n	800548c <_printf_i+0xa8>
 8005416:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800541a:	2b15      	cmp	r3, #21
 800541c:	d8f6      	bhi.n	800540c <_printf_i+0x28>
 800541e:	a101      	add	r1, pc, #4	@ (adr r1, 8005424 <_printf_i+0x40>)
 8005420:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005424:	0800547d 	.word	0x0800547d
 8005428:	08005491 	.word	0x08005491
 800542c:	0800540d 	.word	0x0800540d
 8005430:	0800540d 	.word	0x0800540d
 8005434:	0800540d 	.word	0x0800540d
 8005438:	0800540d 	.word	0x0800540d
 800543c:	08005491 	.word	0x08005491
 8005440:	0800540d 	.word	0x0800540d
 8005444:	0800540d 	.word	0x0800540d
 8005448:	0800540d 	.word	0x0800540d
 800544c:	0800540d 	.word	0x0800540d
 8005450:	08005593 	.word	0x08005593
 8005454:	080054bb 	.word	0x080054bb
 8005458:	0800554d 	.word	0x0800554d
 800545c:	0800540d 	.word	0x0800540d
 8005460:	0800540d 	.word	0x0800540d
 8005464:	080055b5 	.word	0x080055b5
 8005468:	0800540d 	.word	0x0800540d
 800546c:	080054bb 	.word	0x080054bb
 8005470:	0800540d 	.word	0x0800540d
 8005474:	0800540d 	.word	0x0800540d
 8005478:	08005555 	.word	0x08005555
 800547c:	6833      	ldr	r3, [r6, #0]
 800547e:	1d1a      	adds	r2, r3, #4
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6032      	str	r2, [r6, #0]
 8005484:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005488:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800548c:	2301      	movs	r3, #1
 800548e:	e09e      	b.n	80055ce <_printf_i+0x1ea>
 8005490:	6833      	ldr	r3, [r6, #0]
 8005492:	6820      	ldr	r0, [r4, #0]
 8005494:	1d19      	adds	r1, r3, #4
 8005496:	6031      	str	r1, [r6, #0]
 8005498:	0606      	lsls	r6, r0, #24
 800549a:	d501      	bpl.n	80054a0 <_printf_i+0xbc>
 800549c:	681d      	ldr	r5, [r3, #0]
 800549e:	e003      	b.n	80054a8 <_printf_i+0xc4>
 80054a0:	0645      	lsls	r5, r0, #25
 80054a2:	d5fb      	bpl.n	800549c <_printf_i+0xb8>
 80054a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	da03      	bge.n	80054b4 <_printf_i+0xd0>
 80054ac:	232d      	movs	r3, #45	@ 0x2d
 80054ae:	426d      	negs	r5, r5
 80054b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b4:	230a      	movs	r3, #10
 80054b6:	4859      	ldr	r0, [pc, #356]	@ (800561c <_printf_i+0x238>)
 80054b8:	e011      	b.n	80054de <_printf_i+0xfa>
 80054ba:	6821      	ldr	r1, [r4, #0]
 80054bc:	6833      	ldr	r3, [r6, #0]
 80054be:	0608      	lsls	r0, r1, #24
 80054c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c4:	d402      	bmi.n	80054cc <_printf_i+0xe8>
 80054c6:	0649      	lsls	r1, r1, #25
 80054c8:	bf48      	it	mi
 80054ca:	b2ad      	uxthmi	r5, r5
 80054cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054ce:	6033      	str	r3, [r6, #0]
 80054d0:	bf14      	ite	ne
 80054d2:	230a      	movne	r3, #10
 80054d4:	2308      	moveq	r3, #8
 80054d6:	4851      	ldr	r0, [pc, #324]	@ (800561c <_printf_i+0x238>)
 80054d8:	2100      	movs	r1, #0
 80054da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054de:	6866      	ldr	r6, [r4, #4]
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	bfa8      	it	ge
 80054e4:	6821      	ldrge	r1, [r4, #0]
 80054e6:	60a6      	str	r6, [r4, #8]
 80054e8:	bfa4      	itt	ge
 80054ea:	f021 0104 	bicge.w	r1, r1, #4
 80054ee:	6021      	strge	r1, [r4, #0]
 80054f0:	b90d      	cbnz	r5, 80054f6 <_printf_i+0x112>
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	d04b      	beq.n	800558e <_printf_i+0x1aa>
 80054f6:	4616      	mov	r6, r2
 80054f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80054fc:	fb03 5711 	mls	r7, r3, r1, r5
 8005500:	5dc7      	ldrb	r7, [r0, r7]
 8005502:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005506:	462f      	mov	r7, r5
 8005508:	42bb      	cmp	r3, r7
 800550a:	460d      	mov	r5, r1
 800550c:	d9f4      	bls.n	80054f8 <_printf_i+0x114>
 800550e:	2b08      	cmp	r3, #8
 8005510:	d10b      	bne.n	800552a <_printf_i+0x146>
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	07df      	lsls	r7, r3, #31
 8005516:	d508      	bpl.n	800552a <_printf_i+0x146>
 8005518:	6923      	ldr	r3, [r4, #16]
 800551a:	6861      	ldr	r1, [r4, #4]
 800551c:	4299      	cmp	r1, r3
 800551e:	bfde      	ittt	le
 8005520:	2330      	movle	r3, #48	@ 0x30
 8005522:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005526:	f106 36ff 	addle.w	r6, r6, #4294967295
 800552a:	1b92      	subs	r2, r2, r6
 800552c:	6122      	str	r2, [r4, #16]
 800552e:	464b      	mov	r3, r9
 8005530:	4621      	mov	r1, r4
 8005532:	4640      	mov	r0, r8
 8005534:	f8cd a000 	str.w	sl, [sp]
 8005538:	aa03      	add	r2, sp, #12
 800553a:	f7ff fee1 	bl	8005300 <_printf_common>
 800553e:	3001      	adds	r0, #1
 8005540:	d14a      	bne.n	80055d8 <_printf_i+0x1f4>
 8005542:	f04f 30ff 	mov.w	r0, #4294967295
 8005546:	b004      	add	sp, #16
 8005548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554c:	6823      	ldr	r3, [r4, #0]
 800554e:	f043 0320 	orr.w	r3, r3, #32
 8005552:	6023      	str	r3, [r4, #0]
 8005554:	2778      	movs	r7, #120	@ 0x78
 8005556:	4832      	ldr	r0, [pc, #200]	@ (8005620 <_printf_i+0x23c>)
 8005558:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	6831      	ldr	r1, [r6, #0]
 8005560:	061f      	lsls	r7, r3, #24
 8005562:	f851 5b04 	ldr.w	r5, [r1], #4
 8005566:	d402      	bmi.n	800556e <_printf_i+0x18a>
 8005568:	065f      	lsls	r7, r3, #25
 800556a:	bf48      	it	mi
 800556c:	b2ad      	uxthmi	r5, r5
 800556e:	6031      	str	r1, [r6, #0]
 8005570:	07d9      	lsls	r1, r3, #31
 8005572:	bf44      	itt	mi
 8005574:	f043 0320 	orrmi.w	r3, r3, #32
 8005578:	6023      	strmi	r3, [r4, #0]
 800557a:	b11d      	cbz	r5, 8005584 <_printf_i+0x1a0>
 800557c:	2310      	movs	r3, #16
 800557e:	e7ab      	b.n	80054d8 <_printf_i+0xf4>
 8005580:	4826      	ldr	r0, [pc, #152]	@ (800561c <_printf_i+0x238>)
 8005582:	e7e9      	b.n	8005558 <_printf_i+0x174>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	f023 0320 	bic.w	r3, r3, #32
 800558a:	6023      	str	r3, [r4, #0]
 800558c:	e7f6      	b.n	800557c <_printf_i+0x198>
 800558e:	4616      	mov	r6, r2
 8005590:	e7bd      	b.n	800550e <_printf_i+0x12a>
 8005592:	6833      	ldr	r3, [r6, #0]
 8005594:	6825      	ldr	r5, [r4, #0]
 8005596:	1d18      	adds	r0, r3, #4
 8005598:	6961      	ldr	r1, [r4, #20]
 800559a:	6030      	str	r0, [r6, #0]
 800559c:	062e      	lsls	r6, r5, #24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	d501      	bpl.n	80055a6 <_printf_i+0x1c2>
 80055a2:	6019      	str	r1, [r3, #0]
 80055a4:	e002      	b.n	80055ac <_printf_i+0x1c8>
 80055a6:	0668      	lsls	r0, r5, #25
 80055a8:	d5fb      	bpl.n	80055a2 <_printf_i+0x1be>
 80055aa:	8019      	strh	r1, [r3, #0]
 80055ac:	2300      	movs	r3, #0
 80055ae:	4616      	mov	r6, r2
 80055b0:	6123      	str	r3, [r4, #16]
 80055b2:	e7bc      	b.n	800552e <_printf_i+0x14a>
 80055b4:	6833      	ldr	r3, [r6, #0]
 80055b6:	2100      	movs	r1, #0
 80055b8:	1d1a      	adds	r2, r3, #4
 80055ba:	6032      	str	r2, [r6, #0]
 80055bc:	681e      	ldr	r6, [r3, #0]
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	4630      	mov	r0, r6
 80055c2:	f000 fa08 	bl	80059d6 <memchr>
 80055c6:	b108      	cbz	r0, 80055cc <_printf_i+0x1e8>
 80055c8:	1b80      	subs	r0, r0, r6
 80055ca:	6060      	str	r0, [r4, #4]
 80055cc:	6863      	ldr	r3, [r4, #4]
 80055ce:	6123      	str	r3, [r4, #16]
 80055d0:	2300      	movs	r3, #0
 80055d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d6:	e7aa      	b.n	800552e <_printf_i+0x14a>
 80055d8:	4632      	mov	r2, r6
 80055da:	4649      	mov	r1, r9
 80055dc:	4640      	mov	r0, r8
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	47d0      	blx	sl
 80055e2:	3001      	adds	r0, #1
 80055e4:	d0ad      	beq.n	8005542 <_printf_i+0x15e>
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	079b      	lsls	r3, r3, #30
 80055ea:	d413      	bmi.n	8005614 <_printf_i+0x230>
 80055ec:	68e0      	ldr	r0, [r4, #12]
 80055ee:	9b03      	ldr	r3, [sp, #12]
 80055f0:	4298      	cmp	r0, r3
 80055f2:	bfb8      	it	lt
 80055f4:	4618      	movlt	r0, r3
 80055f6:	e7a6      	b.n	8005546 <_printf_i+0x162>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4632      	mov	r2, r6
 80055fc:	4649      	mov	r1, r9
 80055fe:	4640      	mov	r0, r8
 8005600:	47d0      	blx	sl
 8005602:	3001      	adds	r0, #1
 8005604:	d09d      	beq.n	8005542 <_printf_i+0x15e>
 8005606:	3501      	adds	r5, #1
 8005608:	68e3      	ldr	r3, [r4, #12]
 800560a:	9903      	ldr	r1, [sp, #12]
 800560c:	1a5b      	subs	r3, r3, r1
 800560e:	42ab      	cmp	r3, r5
 8005610:	dcf2      	bgt.n	80055f8 <_printf_i+0x214>
 8005612:	e7eb      	b.n	80055ec <_printf_i+0x208>
 8005614:	2500      	movs	r5, #0
 8005616:	f104 0619 	add.w	r6, r4, #25
 800561a:	e7f5      	b.n	8005608 <_printf_i+0x224>
 800561c:	080082c0 	.word	0x080082c0
 8005620:	080082d1 	.word	0x080082d1

08005624 <std>:
 8005624:	2300      	movs	r3, #0
 8005626:	b510      	push	{r4, lr}
 8005628:	4604      	mov	r4, r0
 800562a:	e9c0 3300 	strd	r3, r3, [r0]
 800562e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005632:	6083      	str	r3, [r0, #8]
 8005634:	8181      	strh	r1, [r0, #12]
 8005636:	6643      	str	r3, [r0, #100]	@ 0x64
 8005638:	81c2      	strh	r2, [r0, #14]
 800563a:	6183      	str	r3, [r0, #24]
 800563c:	4619      	mov	r1, r3
 800563e:	2208      	movs	r2, #8
 8005640:	305c      	adds	r0, #92	@ 0x5c
 8005642:	f000 f948 	bl	80058d6 <memset>
 8005646:	4b0d      	ldr	r3, [pc, #52]	@ (800567c <std+0x58>)
 8005648:	6224      	str	r4, [r4, #32]
 800564a:	6263      	str	r3, [r4, #36]	@ 0x24
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <std+0x5c>)
 800564e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005650:	4b0c      	ldr	r3, [pc, #48]	@ (8005684 <std+0x60>)
 8005652:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005654:	4b0c      	ldr	r3, [pc, #48]	@ (8005688 <std+0x64>)
 8005656:	6323      	str	r3, [r4, #48]	@ 0x30
 8005658:	4b0c      	ldr	r3, [pc, #48]	@ (800568c <std+0x68>)
 800565a:	429c      	cmp	r4, r3
 800565c:	d006      	beq.n	800566c <std+0x48>
 800565e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005662:	4294      	cmp	r4, r2
 8005664:	d002      	beq.n	800566c <std+0x48>
 8005666:	33d0      	adds	r3, #208	@ 0xd0
 8005668:	429c      	cmp	r4, r3
 800566a:	d105      	bne.n	8005678 <std+0x54>
 800566c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005674:	f000 b9ac 	b.w	80059d0 <__retarget_lock_init_recursive>
 8005678:	bd10      	pop	{r4, pc}
 800567a:	bf00      	nop
 800567c:	08005851 	.word	0x08005851
 8005680:	08005873 	.word	0x08005873
 8005684:	080058ab 	.word	0x080058ab
 8005688:	080058cf 	.word	0x080058cf
 800568c:	20000748 	.word	0x20000748

08005690 <stdio_exit_handler>:
 8005690:	4a02      	ldr	r2, [pc, #8]	@ (800569c <stdio_exit_handler+0xc>)
 8005692:	4903      	ldr	r1, [pc, #12]	@ (80056a0 <stdio_exit_handler+0x10>)
 8005694:	4803      	ldr	r0, [pc, #12]	@ (80056a4 <stdio_exit_handler+0x14>)
 8005696:	f000 b869 	b.w	800576c <_fwalk_sglue>
 800569a:	bf00      	nop
 800569c:	20000014 	.word	0x20000014
 80056a0:	08007345 	.word	0x08007345
 80056a4:	20000024 	.word	0x20000024

080056a8 <cleanup_stdio>:
 80056a8:	6841      	ldr	r1, [r0, #4]
 80056aa:	4b0c      	ldr	r3, [pc, #48]	@ (80056dc <cleanup_stdio+0x34>)
 80056ac:	b510      	push	{r4, lr}
 80056ae:	4299      	cmp	r1, r3
 80056b0:	4604      	mov	r4, r0
 80056b2:	d001      	beq.n	80056b8 <cleanup_stdio+0x10>
 80056b4:	f001 fe46 	bl	8007344 <_fflush_r>
 80056b8:	68a1      	ldr	r1, [r4, #8]
 80056ba:	4b09      	ldr	r3, [pc, #36]	@ (80056e0 <cleanup_stdio+0x38>)
 80056bc:	4299      	cmp	r1, r3
 80056be:	d002      	beq.n	80056c6 <cleanup_stdio+0x1e>
 80056c0:	4620      	mov	r0, r4
 80056c2:	f001 fe3f 	bl	8007344 <_fflush_r>
 80056c6:	68e1      	ldr	r1, [r4, #12]
 80056c8:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <cleanup_stdio+0x3c>)
 80056ca:	4299      	cmp	r1, r3
 80056cc:	d004      	beq.n	80056d8 <cleanup_stdio+0x30>
 80056ce:	4620      	mov	r0, r4
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f001 be36 	b.w	8007344 <_fflush_r>
 80056d8:	bd10      	pop	{r4, pc}
 80056da:	bf00      	nop
 80056dc:	20000748 	.word	0x20000748
 80056e0:	200007b0 	.word	0x200007b0
 80056e4:	20000818 	.word	0x20000818

080056e8 <global_stdio_init.part.0>:
 80056e8:	b510      	push	{r4, lr}
 80056ea:	4b0b      	ldr	r3, [pc, #44]	@ (8005718 <global_stdio_init.part.0+0x30>)
 80056ec:	4c0b      	ldr	r4, [pc, #44]	@ (800571c <global_stdio_init.part.0+0x34>)
 80056ee:	4a0c      	ldr	r2, [pc, #48]	@ (8005720 <global_stdio_init.part.0+0x38>)
 80056f0:	4620      	mov	r0, r4
 80056f2:	601a      	str	r2, [r3, #0]
 80056f4:	2104      	movs	r1, #4
 80056f6:	2200      	movs	r2, #0
 80056f8:	f7ff ff94 	bl	8005624 <std>
 80056fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005700:	2201      	movs	r2, #1
 8005702:	2109      	movs	r1, #9
 8005704:	f7ff ff8e 	bl	8005624 <std>
 8005708:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800570c:	2202      	movs	r2, #2
 800570e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005712:	2112      	movs	r1, #18
 8005714:	f7ff bf86 	b.w	8005624 <std>
 8005718:	20000880 	.word	0x20000880
 800571c:	20000748 	.word	0x20000748
 8005720:	08005691 	.word	0x08005691

08005724 <__sfp_lock_acquire>:
 8005724:	4801      	ldr	r0, [pc, #4]	@ (800572c <__sfp_lock_acquire+0x8>)
 8005726:	f000 b954 	b.w	80059d2 <__retarget_lock_acquire_recursive>
 800572a:	bf00      	nop
 800572c:	20000889 	.word	0x20000889

08005730 <__sfp_lock_release>:
 8005730:	4801      	ldr	r0, [pc, #4]	@ (8005738 <__sfp_lock_release+0x8>)
 8005732:	f000 b94f 	b.w	80059d4 <__retarget_lock_release_recursive>
 8005736:	bf00      	nop
 8005738:	20000889 	.word	0x20000889

0800573c <__sinit>:
 800573c:	b510      	push	{r4, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	f7ff fff0 	bl	8005724 <__sfp_lock_acquire>
 8005744:	6a23      	ldr	r3, [r4, #32]
 8005746:	b11b      	cbz	r3, 8005750 <__sinit+0x14>
 8005748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800574c:	f7ff bff0 	b.w	8005730 <__sfp_lock_release>
 8005750:	4b04      	ldr	r3, [pc, #16]	@ (8005764 <__sinit+0x28>)
 8005752:	6223      	str	r3, [r4, #32]
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__sinit+0x2c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f5      	bne.n	8005748 <__sinit+0xc>
 800575c:	f7ff ffc4 	bl	80056e8 <global_stdio_init.part.0>
 8005760:	e7f2      	b.n	8005748 <__sinit+0xc>
 8005762:	bf00      	nop
 8005764:	080056a9 	.word	0x080056a9
 8005768:	20000880 	.word	0x20000880

0800576c <_fwalk_sglue>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	4607      	mov	r7, r0
 8005772:	4688      	mov	r8, r1
 8005774:	4614      	mov	r4, r2
 8005776:	2600      	movs	r6, #0
 8005778:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800577c:	f1b9 0901 	subs.w	r9, r9, #1
 8005780:	d505      	bpl.n	800578e <_fwalk_sglue+0x22>
 8005782:	6824      	ldr	r4, [r4, #0]
 8005784:	2c00      	cmp	r4, #0
 8005786:	d1f7      	bne.n	8005778 <_fwalk_sglue+0xc>
 8005788:	4630      	mov	r0, r6
 800578a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800578e:	89ab      	ldrh	r3, [r5, #12]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d907      	bls.n	80057a4 <_fwalk_sglue+0x38>
 8005794:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005798:	3301      	adds	r3, #1
 800579a:	d003      	beq.n	80057a4 <_fwalk_sglue+0x38>
 800579c:	4629      	mov	r1, r5
 800579e:	4638      	mov	r0, r7
 80057a0:	47c0      	blx	r8
 80057a2:	4306      	orrs	r6, r0
 80057a4:	3568      	adds	r5, #104	@ 0x68
 80057a6:	e7e9      	b.n	800577c <_fwalk_sglue+0x10>

080057a8 <sniprintf>:
 80057a8:	b40c      	push	{r2, r3}
 80057aa:	b530      	push	{r4, r5, lr}
 80057ac:	4b17      	ldr	r3, [pc, #92]	@ (800580c <sniprintf+0x64>)
 80057ae:	1e0c      	subs	r4, r1, #0
 80057b0:	681d      	ldr	r5, [r3, #0]
 80057b2:	b09d      	sub	sp, #116	@ 0x74
 80057b4:	da08      	bge.n	80057c8 <sniprintf+0x20>
 80057b6:	238b      	movs	r3, #139	@ 0x8b
 80057b8:	f04f 30ff 	mov.w	r0, #4294967295
 80057bc:	602b      	str	r3, [r5, #0]
 80057be:	b01d      	add	sp, #116	@ 0x74
 80057c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057c4:	b002      	add	sp, #8
 80057c6:	4770      	bx	lr
 80057c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80057cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057d0:	bf0c      	ite	eq
 80057d2:	4623      	moveq	r3, r4
 80057d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057d8:	9304      	str	r3, [sp, #16]
 80057da:	9307      	str	r3, [sp, #28]
 80057dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057e0:	9002      	str	r0, [sp, #8]
 80057e2:	9006      	str	r0, [sp, #24]
 80057e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057e8:	4628      	mov	r0, r5
 80057ea:	ab21      	add	r3, sp, #132	@ 0x84
 80057ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057ee:	a902      	add	r1, sp, #8
 80057f0:	9301      	str	r3, [sp, #4]
 80057f2:	f001 fc2b 	bl	800704c <_svfiprintf_r>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	bfbc      	itt	lt
 80057fa:	238b      	movlt	r3, #139	@ 0x8b
 80057fc:	602b      	strlt	r3, [r5, #0]
 80057fe:	2c00      	cmp	r4, #0
 8005800:	d0dd      	beq.n	80057be <sniprintf+0x16>
 8005802:	2200      	movs	r2, #0
 8005804:	9b02      	ldr	r3, [sp, #8]
 8005806:	701a      	strb	r2, [r3, #0]
 8005808:	e7d9      	b.n	80057be <sniprintf+0x16>
 800580a:	bf00      	nop
 800580c:	20000020 	.word	0x20000020

08005810 <siprintf>:
 8005810:	b40e      	push	{r1, r2, r3}
 8005812:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005816:	b500      	push	{lr}
 8005818:	b09c      	sub	sp, #112	@ 0x70
 800581a:	ab1d      	add	r3, sp, #116	@ 0x74
 800581c:	9002      	str	r0, [sp, #8]
 800581e:	9006      	str	r0, [sp, #24]
 8005820:	9107      	str	r1, [sp, #28]
 8005822:	9104      	str	r1, [sp, #16]
 8005824:	4808      	ldr	r0, [pc, #32]	@ (8005848 <siprintf+0x38>)
 8005826:	4909      	ldr	r1, [pc, #36]	@ (800584c <siprintf+0x3c>)
 8005828:	f853 2b04 	ldr.w	r2, [r3], #4
 800582c:	9105      	str	r1, [sp, #20]
 800582e:	6800      	ldr	r0, [r0, #0]
 8005830:	a902      	add	r1, sp, #8
 8005832:	9301      	str	r3, [sp, #4]
 8005834:	f001 fc0a 	bl	800704c <_svfiprintf_r>
 8005838:	2200      	movs	r2, #0
 800583a:	9b02      	ldr	r3, [sp, #8]
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	b01c      	add	sp, #112	@ 0x70
 8005840:	f85d eb04 	ldr.w	lr, [sp], #4
 8005844:	b003      	add	sp, #12
 8005846:	4770      	bx	lr
 8005848:	20000020 	.word	0x20000020
 800584c:	ffff0208 	.word	0xffff0208

08005850 <__sread>:
 8005850:	b510      	push	{r4, lr}
 8005852:	460c      	mov	r4, r1
 8005854:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005858:	f000 f86c 	bl	8005934 <_read_r>
 800585c:	2800      	cmp	r0, #0
 800585e:	bfab      	itete	ge
 8005860:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005862:	89a3      	ldrhlt	r3, [r4, #12]
 8005864:	181b      	addge	r3, r3, r0
 8005866:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800586a:	bfac      	ite	ge
 800586c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800586e:	81a3      	strhlt	r3, [r4, #12]
 8005870:	bd10      	pop	{r4, pc}

08005872 <__swrite>:
 8005872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005876:	461f      	mov	r7, r3
 8005878:	898b      	ldrh	r3, [r1, #12]
 800587a:	4605      	mov	r5, r0
 800587c:	05db      	lsls	r3, r3, #23
 800587e:	460c      	mov	r4, r1
 8005880:	4616      	mov	r6, r2
 8005882:	d505      	bpl.n	8005890 <__swrite+0x1e>
 8005884:	2302      	movs	r3, #2
 8005886:	2200      	movs	r2, #0
 8005888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800588c:	f000 f840 	bl	8005910 <_lseek_r>
 8005890:	89a3      	ldrh	r3, [r4, #12]
 8005892:	4632      	mov	r2, r6
 8005894:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	4628      	mov	r0, r5
 800589c:	463b      	mov	r3, r7
 800589e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058a6:	f000 b857 	b.w	8005958 <_write_r>

080058aa <__sseek>:
 80058aa:	b510      	push	{r4, lr}
 80058ac:	460c      	mov	r4, r1
 80058ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b2:	f000 f82d 	bl	8005910 <_lseek_r>
 80058b6:	1c43      	adds	r3, r0, #1
 80058b8:	89a3      	ldrh	r3, [r4, #12]
 80058ba:	bf15      	itete	ne
 80058bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058c6:	81a3      	strheq	r3, [r4, #12]
 80058c8:	bf18      	it	ne
 80058ca:	81a3      	strhne	r3, [r4, #12]
 80058cc:	bd10      	pop	{r4, pc}

080058ce <__sclose>:
 80058ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058d2:	f000 b80d 	b.w	80058f0 <_close_r>

080058d6 <memset>:
 80058d6:	4603      	mov	r3, r0
 80058d8:	4402      	add	r2, r0
 80058da:	4293      	cmp	r3, r2
 80058dc:	d100      	bne.n	80058e0 <memset+0xa>
 80058de:	4770      	bx	lr
 80058e0:	f803 1b01 	strb.w	r1, [r3], #1
 80058e4:	e7f9      	b.n	80058da <memset+0x4>
	...

080058e8 <_localeconv_r>:
 80058e8:	4800      	ldr	r0, [pc, #0]	@ (80058ec <_localeconv_r+0x4>)
 80058ea:	4770      	bx	lr
 80058ec:	20000160 	.word	0x20000160

080058f0 <_close_r>:
 80058f0:	b538      	push	{r3, r4, r5, lr}
 80058f2:	2300      	movs	r3, #0
 80058f4:	4d05      	ldr	r5, [pc, #20]	@ (800590c <_close_r+0x1c>)
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	602b      	str	r3, [r5, #0]
 80058fc:	f7fc faa1 	bl	8001e42 <_close>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_close_r+0x1a>
 8005904:	682b      	ldr	r3, [r5, #0]
 8005906:	b103      	cbz	r3, 800590a <_close_r+0x1a>
 8005908:	6023      	str	r3, [r4, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	20000884 	.word	0x20000884

08005910 <_lseek_r>:
 8005910:	b538      	push	{r3, r4, r5, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	4608      	mov	r0, r1
 8005916:	4611      	mov	r1, r2
 8005918:	2200      	movs	r2, #0
 800591a:	4d05      	ldr	r5, [pc, #20]	@ (8005930 <_lseek_r+0x20>)
 800591c:	602a      	str	r2, [r5, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	f7fc fab3 	bl	8001e8a <_lseek>
 8005924:	1c43      	adds	r3, r0, #1
 8005926:	d102      	bne.n	800592e <_lseek_r+0x1e>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	b103      	cbz	r3, 800592e <_lseek_r+0x1e>
 800592c:	6023      	str	r3, [r4, #0]
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000884 	.word	0x20000884

08005934 <_read_r>:
 8005934:	b538      	push	{r3, r4, r5, lr}
 8005936:	4604      	mov	r4, r0
 8005938:	4608      	mov	r0, r1
 800593a:	4611      	mov	r1, r2
 800593c:	2200      	movs	r2, #0
 800593e:	4d05      	ldr	r5, [pc, #20]	@ (8005954 <_read_r+0x20>)
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	f7fc fa44 	bl	8001dd0 <_read>
 8005948:	1c43      	adds	r3, r0, #1
 800594a:	d102      	bne.n	8005952 <_read_r+0x1e>
 800594c:	682b      	ldr	r3, [r5, #0]
 800594e:	b103      	cbz	r3, 8005952 <_read_r+0x1e>
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	bd38      	pop	{r3, r4, r5, pc}
 8005954:	20000884 	.word	0x20000884

08005958 <_write_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	4608      	mov	r0, r1
 800595e:	4611      	mov	r1, r2
 8005960:	2200      	movs	r2, #0
 8005962:	4d05      	ldr	r5, [pc, #20]	@ (8005978 <_write_r+0x20>)
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fc fa4f 	bl	8001e0a <_write>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_write_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_write_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000884 	.word	0x20000884

0800597c <__errno>:
 800597c:	4b01      	ldr	r3, [pc, #4]	@ (8005984 <__errno+0x8>)
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20000020 	.word	0x20000020

08005988 <__libc_init_array>:
 8005988:	b570      	push	{r4, r5, r6, lr}
 800598a:	2600      	movs	r6, #0
 800598c:	4d0c      	ldr	r5, [pc, #48]	@ (80059c0 <__libc_init_array+0x38>)
 800598e:	4c0d      	ldr	r4, [pc, #52]	@ (80059c4 <__libc_init_array+0x3c>)
 8005990:	1b64      	subs	r4, r4, r5
 8005992:	10a4      	asrs	r4, r4, #2
 8005994:	42a6      	cmp	r6, r4
 8005996:	d109      	bne.n	80059ac <__libc_init_array+0x24>
 8005998:	f002 f870 	bl	8007a7c <_init>
 800599c:	2600      	movs	r6, #0
 800599e:	4d0a      	ldr	r5, [pc, #40]	@ (80059c8 <__libc_init_array+0x40>)
 80059a0:	4c0a      	ldr	r4, [pc, #40]	@ (80059cc <__libc_init_array+0x44>)
 80059a2:	1b64      	subs	r4, r4, r5
 80059a4:	10a4      	asrs	r4, r4, #2
 80059a6:	42a6      	cmp	r6, r4
 80059a8:	d105      	bne.n	80059b6 <__libc_init_array+0x2e>
 80059aa:	bd70      	pop	{r4, r5, r6, pc}
 80059ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80059b0:	4798      	blx	r3
 80059b2:	3601      	adds	r6, #1
 80059b4:	e7ee      	b.n	8005994 <__libc_init_array+0xc>
 80059b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ba:	4798      	blx	r3
 80059bc:	3601      	adds	r6, #1
 80059be:	e7f2      	b.n	80059a6 <__libc_init_array+0x1e>
 80059c0:	08008628 	.word	0x08008628
 80059c4:	08008628 	.word	0x08008628
 80059c8:	08008628 	.word	0x08008628
 80059cc:	0800862c 	.word	0x0800862c

080059d0 <__retarget_lock_init_recursive>:
 80059d0:	4770      	bx	lr

080059d2 <__retarget_lock_acquire_recursive>:
 80059d2:	4770      	bx	lr

080059d4 <__retarget_lock_release_recursive>:
 80059d4:	4770      	bx	lr

080059d6 <memchr>:
 80059d6:	4603      	mov	r3, r0
 80059d8:	b510      	push	{r4, lr}
 80059da:	b2c9      	uxtb	r1, r1
 80059dc:	4402      	add	r2, r0
 80059de:	4293      	cmp	r3, r2
 80059e0:	4618      	mov	r0, r3
 80059e2:	d101      	bne.n	80059e8 <memchr+0x12>
 80059e4:	2000      	movs	r0, #0
 80059e6:	e003      	b.n	80059f0 <memchr+0x1a>
 80059e8:	7804      	ldrb	r4, [r0, #0]
 80059ea:	3301      	adds	r3, #1
 80059ec:	428c      	cmp	r4, r1
 80059ee:	d1f6      	bne.n	80059de <memchr+0x8>
 80059f0:	bd10      	pop	{r4, pc}

080059f2 <quorem>:
 80059f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f6:	6903      	ldr	r3, [r0, #16]
 80059f8:	690c      	ldr	r4, [r1, #16]
 80059fa:	4607      	mov	r7, r0
 80059fc:	42a3      	cmp	r3, r4
 80059fe:	db7e      	blt.n	8005afe <quorem+0x10c>
 8005a00:	3c01      	subs	r4, #1
 8005a02:	00a3      	lsls	r3, r4, #2
 8005a04:	f100 0514 	add.w	r5, r0, #20
 8005a08:	f101 0814 	add.w	r8, r1, #20
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a12:	9301      	str	r3, [sp, #4]
 8005a14:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a18:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a28:	d32e      	bcc.n	8005a88 <quorem+0x96>
 8005a2a:	f04f 0a00 	mov.w	sl, #0
 8005a2e:	46c4      	mov	ip, r8
 8005a30:	46ae      	mov	lr, r5
 8005a32:	46d3      	mov	fp, sl
 8005a34:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005a38:	b298      	uxth	r0, r3
 8005a3a:	fb06 a000 	mla	r0, r6, r0, sl
 8005a3e:	0c1b      	lsrs	r3, r3, #16
 8005a40:	0c02      	lsrs	r2, r0, #16
 8005a42:	fb06 2303 	mla	r3, r6, r3, r2
 8005a46:	f8de 2000 	ldr.w	r2, [lr]
 8005a4a:	b280      	uxth	r0, r0
 8005a4c:	b292      	uxth	r2, r2
 8005a4e:	1a12      	subs	r2, r2, r0
 8005a50:	445a      	add	r2, fp
 8005a52:	f8de 0000 	ldr.w	r0, [lr]
 8005a56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005a60:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005a64:	b292      	uxth	r2, r2
 8005a66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005a6a:	45e1      	cmp	r9, ip
 8005a6c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005a70:	f84e 2b04 	str.w	r2, [lr], #4
 8005a74:	d2de      	bcs.n	8005a34 <quorem+0x42>
 8005a76:	9b00      	ldr	r3, [sp, #0]
 8005a78:	58eb      	ldr	r3, [r5, r3]
 8005a7a:	b92b      	cbnz	r3, 8005a88 <quorem+0x96>
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	3b04      	subs	r3, #4
 8005a80:	429d      	cmp	r5, r3
 8005a82:	461a      	mov	r2, r3
 8005a84:	d32f      	bcc.n	8005ae6 <quorem+0xf4>
 8005a86:	613c      	str	r4, [r7, #16]
 8005a88:	4638      	mov	r0, r7
 8005a8a:	f001 f97b 	bl	8006d84 <__mcmp>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	db25      	blt.n	8005ade <quorem+0xec>
 8005a92:	4629      	mov	r1, r5
 8005a94:	2000      	movs	r0, #0
 8005a96:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a9a:	f8d1 c000 	ldr.w	ip, [r1]
 8005a9e:	fa1f fe82 	uxth.w	lr, r2
 8005aa2:	fa1f f38c 	uxth.w	r3, ip
 8005aa6:	eba3 030e 	sub.w	r3, r3, lr
 8005aaa:	4403      	add	r3, r0
 8005aac:	0c12      	lsrs	r2, r2, #16
 8005aae:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005ab2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005abc:	45c1      	cmp	r9, r8
 8005abe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ac2:	f841 3b04 	str.w	r3, [r1], #4
 8005ac6:	d2e6      	bcs.n	8005a96 <quorem+0xa4>
 8005ac8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005acc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005ad0:	b922      	cbnz	r2, 8005adc <quorem+0xea>
 8005ad2:	3b04      	subs	r3, #4
 8005ad4:	429d      	cmp	r5, r3
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	d30b      	bcc.n	8005af2 <quorem+0x100>
 8005ada:	613c      	str	r4, [r7, #16]
 8005adc:	3601      	adds	r6, #1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	b003      	add	sp, #12
 8005ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ae6:	6812      	ldr	r2, [r2, #0]
 8005ae8:	3b04      	subs	r3, #4
 8005aea:	2a00      	cmp	r2, #0
 8005aec:	d1cb      	bne.n	8005a86 <quorem+0x94>
 8005aee:	3c01      	subs	r4, #1
 8005af0:	e7c6      	b.n	8005a80 <quorem+0x8e>
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	3b04      	subs	r3, #4
 8005af6:	2a00      	cmp	r2, #0
 8005af8:	d1ef      	bne.n	8005ada <quorem+0xe8>
 8005afa:	3c01      	subs	r4, #1
 8005afc:	e7ea      	b.n	8005ad4 <quorem+0xe2>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7ee      	b.n	8005ae0 <quorem+0xee>
 8005b02:	0000      	movs	r0, r0
 8005b04:	0000      	movs	r0, r0
	...

08005b08 <_dtoa_r>:
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	461d      	mov	r5, r3
 8005b10:	69c7      	ldr	r7, [r0, #28]
 8005b12:	b097      	sub	sp, #92	@ 0x5c
 8005b14:	4683      	mov	fp, r0
 8005b16:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005b1a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8005b1c:	b97f      	cbnz	r7, 8005b3e <_dtoa_r+0x36>
 8005b1e:	2010      	movs	r0, #16
 8005b20:	f000 fe02 	bl	8006728 <malloc>
 8005b24:	4602      	mov	r2, r0
 8005b26:	f8cb 001c 	str.w	r0, [fp, #28]
 8005b2a:	b920      	cbnz	r0, 8005b36 <_dtoa_r+0x2e>
 8005b2c:	21ef      	movs	r1, #239	@ 0xef
 8005b2e:	4ba8      	ldr	r3, [pc, #672]	@ (8005dd0 <_dtoa_r+0x2c8>)
 8005b30:	48a8      	ldr	r0, [pc, #672]	@ (8005dd4 <_dtoa_r+0x2cc>)
 8005b32:	f001 fc67 	bl	8007404 <__assert_func>
 8005b36:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005b3a:	6007      	str	r7, [r0, #0]
 8005b3c:	60c7      	str	r7, [r0, #12]
 8005b3e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b42:	6819      	ldr	r1, [r3, #0]
 8005b44:	b159      	cbz	r1, 8005b5e <_dtoa_r+0x56>
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	2301      	movs	r3, #1
 8005b4a:	4093      	lsls	r3, r2
 8005b4c:	604a      	str	r2, [r1, #4]
 8005b4e:	608b      	str	r3, [r1, #8]
 8005b50:	4658      	mov	r0, fp
 8005b52:	f000 fedf 	bl	8006914 <_Bfree>
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	1e2b      	subs	r3, r5, #0
 8005b60:	bfaf      	iteee	ge
 8005b62:	2300      	movge	r3, #0
 8005b64:	2201      	movlt	r2, #1
 8005b66:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005b6a:	9303      	strlt	r3, [sp, #12]
 8005b6c:	bfa8      	it	ge
 8005b6e:	6033      	strge	r3, [r6, #0]
 8005b70:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b74:	4b98      	ldr	r3, [pc, #608]	@ (8005dd8 <_dtoa_r+0x2d0>)
 8005b76:	bfb8      	it	lt
 8005b78:	6032      	strlt	r2, [r6, #0]
 8005b7a:	ea33 0308 	bics.w	r3, r3, r8
 8005b7e:	d112      	bne.n	8005ba6 <_dtoa_r+0x9e>
 8005b80:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005b84:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005b86:	6013      	str	r3, [r2, #0]
 8005b88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005b8c:	4323      	orrs	r3, r4
 8005b8e:	f000 8550 	beq.w	8006632 <_dtoa_r+0xb2a>
 8005b92:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005b94:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8005ddc <_dtoa_r+0x2d4>
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8552 	beq.w	8006642 <_dtoa_r+0xb3a>
 8005b9e:	f10a 0303 	add.w	r3, sl, #3
 8005ba2:	f000 bd4c 	b.w	800663e <_dtoa_r+0xb36>
 8005ba6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005baa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005bae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f7fa ff01 	bl	80009bc <__aeabi_dcmpeq>
 8005bba:	4607      	mov	r7, r0
 8005bbc:	b158      	cbz	r0, 8005bd6 <_dtoa_r+0xce>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005bc6:	b113      	cbz	r3, 8005bce <_dtoa_r+0xc6>
 8005bc8:	4b85      	ldr	r3, [pc, #532]	@ (8005de0 <_dtoa_r+0x2d8>)
 8005bca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8005de4 <_dtoa_r+0x2dc>
 8005bd2:	f000 bd36 	b.w	8006642 <_dtoa_r+0xb3a>
 8005bd6:	ab14      	add	r3, sp, #80	@ 0x50
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	ab15      	add	r3, sp, #84	@ 0x54
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	4658      	mov	r0, fp
 8005be0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005be4:	f001 f97e 	bl	8006ee4 <__d2b>
 8005be8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8005bec:	4681      	mov	r9, r0
 8005bee:	2e00      	cmp	r6, #0
 8005bf0:	d077      	beq.n	8005ce2 <_dtoa_r+0x1da>
 8005bf2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bf8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005bfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c00:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005c04:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005c08:	9712      	str	r7, [sp, #72]	@ 0x48
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	4b76      	ldr	r3, [pc, #472]	@ (8005de8 <_dtoa_r+0x2e0>)
 8005c10:	f7fa fab4 	bl	800017c <__aeabi_dsub>
 8005c14:	a368      	add	r3, pc, #416	@ (adr r3, 8005db8 <_dtoa_r+0x2b0>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	f7fa fc67 	bl	80004ec <__aeabi_dmul>
 8005c1e:	a368      	add	r3, pc, #416	@ (adr r3, 8005dc0 <_dtoa_r+0x2b8>)
 8005c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c24:	f7fa faac 	bl	8000180 <__adddf3>
 8005c28:	4604      	mov	r4, r0
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	460d      	mov	r5, r1
 8005c2e:	f7fa fbf3 	bl	8000418 <__aeabi_i2d>
 8005c32:	a365      	add	r3, pc, #404	@ (adr r3, 8005dc8 <_dtoa_r+0x2c0>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fc58 	bl	80004ec <__aeabi_dmul>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4620      	mov	r0, r4
 8005c42:	4629      	mov	r1, r5
 8005c44:	f7fa fa9c 	bl	8000180 <__adddf3>
 8005c48:	4604      	mov	r4, r0
 8005c4a:	460d      	mov	r5, r1
 8005c4c:	f7fa fefe 	bl	8000a4c <__aeabi_d2iz>
 8005c50:	2200      	movs	r2, #0
 8005c52:	4607      	mov	r7, r0
 8005c54:	2300      	movs	r3, #0
 8005c56:	4620      	mov	r0, r4
 8005c58:	4629      	mov	r1, r5
 8005c5a:	f7fa feb9 	bl	80009d0 <__aeabi_dcmplt>
 8005c5e:	b140      	cbz	r0, 8005c72 <_dtoa_r+0x16a>
 8005c60:	4638      	mov	r0, r7
 8005c62:	f7fa fbd9 	bl	8000418 <__aeabi_i2d>
 8005c66:	4622      	mov	r2, r4
 8005c68:	462b      	mov	r3, r5
 8005c6a:	f7fa fea7 	bl	80009bc <__aeabi_dcmpeq>
 8005c6e:	b900      	cbnz	r0, 8005c72 <_dtoa_r+0x16a>
 8005c70:	3f01      	subs	r7, #1
 8005c72:	2f16      	cmp	r7, #22
 8005c74:	d853      	bhi.n	8005d1e <_dtoa_r+0x216>
 8005c76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c7a:	4b5c      	ldr	r3, [pc, #368]	@ (8005dec <_dtoa_r+0x2e4>)
 8005c7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fea4 	bl	80009d0 <__aeabi_dcmplt>
 8005c88:	2800      	cmp	r0, #0
 8005c8a:	d04a      	beq.n	8005d22 <_dtoa_r+0x21a>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	3f01      	subs	r7, #1
 8005c90:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c92:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c94:	1b9b      	subs	r3, r3, r6
 8005c96:	1e5a      	subs	r2, r3, #1
 8005c98:	bf46      	itte	mi
 8005c9a:	f1c3 0801 	rsbmi	r8, r3, #1
 8005c9e:	2300      	movmi	r3, #0
 8005ca0:	f04f 0800 	movpl.w	r8, #0
 8005ca4:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ca6:	bf48      	it	mi
 8005ca8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005caa:	2f00      	cmp	r7, #0
 8005cac:	db3b      	blt.n	8005d26 <_dtoa_r+0x21e>
 8005cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb0:	970e      	str	r7, [sp, #56]	@ 0x38
 8005cb2:	443b      	add	r3, r7
 8005cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cbc:	2b09      	cmp	r3, #9
 8005cbe:	d866      	bhi.n	8005d8e <_dtoa_r+0x286>
 8005cc0:	2b05      	cmp	r3, #5
 8005cc2:	bfc4      	itt	gt
 8005cc4:	3b04      	subgt	r3, #4
 8005cc6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005cc8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005cca:	bfc8      	it	gt
 8005ccc:	2400      	movgt	r4, #0
 8005cce:	f1a3 0302 	sub.w	r3, r3, #2
 8005cd2:	bfd8      	it	le
 8005cd4:	2401      	movle	r4, #1
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d864      	bhi.n	8005da4 <_dtoa_r+0x29c>
 8005cda:	e8df f003 	tbb	[pc, r3]
 8005cde:	382b      	.short	0x382b
 8005ce0:	5636      	.short	0x5636
 8005ce2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ce6:	441e      	add	r6, r3
 8005ce8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005cec:	2b20      	cmp	r3, #32
 8005cee:	bfc1      	itttt	gt
 8005cf0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005cf4:	fa08 f803 	lslgt.w	r8, r8, r3
 8005cf8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005cfc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005d00:	bfd6      	itet	le
 8005d02:	f1c3 0320 	rsble	r3, r3, #32
 8005d06:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d0a:	fa04 f003 	lslle.w	r0, r4, r3
 8005d0e:	f7fa fb73 	bl	80003f8 <__aeabi_ui2d>
 8005d12:	2201      	movs	r2, #1
 8005d14:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005d18:	3e01      	subs	r6, #1
 8005d1a:	9212      	str	r2, [sp, #72]	@ 0x48
 8005d1c:	e775      	b.n	8005c0a <_dtoa_r+0x102>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e7b6      	b.n	8005c90 <_dtoa_r+0x188>
 8005d22:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005d24:	e7b5      	b.n	8005c92 <_dtoa_r+0x18a>
 8005d26:	427b      	negs	r3, r7
 8005d28:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	eba8 0807 	sub.w	r8, r8, r7
 8005d30:	930e      	str	r3, [sp, #56]	@ 0x38
 8005d32:	e7c2      	b.n	8005cba <_dtoa_r+0x1b2>
 8005d34:	2300      	movs	r3, #0
 8005d36:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dc35      	bgt.n	8005daa <_dtoa_r+0x2a2>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	461a      	mov	r2, r3
 8005d42:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005d46:	9221      	str	r2, [sp, #132]	@ 0x84
 8005d48:	e00b      	b.n	8005d62 <_dtoa_r+0x25a>
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e7f3      	b.n	8005d36 <_dtoa_r+0x22e>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d52:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d54:	18fb      	adds	r3, r7, r3
 8005d56:	9308      	str	r3, [sp, #32]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	9307      	str	r3, [sp, #28]
 8005d5e:	bfb8      	it	lt
 8005d60:	2301      	movlt	r3, #1
 8005d62:	2100      	movs	r1, #0
 8005d64:	2204      	movs	r2, #4
 8005d66:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005d6a:	f102 0514 	add.w	r5, r2, #20
 8005d6e:	429d      	cmp	r5, r3
 8005d70:	d91f      	bls.n	8005db2 <_dtoa_r+0x2aa>
 8005d72:	6041      	str	r1, [r0, #4]
 8005d74:	4658      	mov	r0, fp
 8005d76:	f000 fd8d 	bl	8006894 <_Balloc>
 8005d7a:	4682      	mov	sl, r0
 8005d7c:	2800      	cmp	r0, #0
 8005d7e:	d139      	bne.n	8005df4 <_dtoa_r+0x2ec>
 8005d80:	4602      	mov	r2, r0
 8005d82:	f240 11af 	movw	r1, #431	@ 0x1af
 8005d86:	4b1a      	ldr	r3, [pc, #104]	@ (8005df0 <_dtoa_r+0x2e8>)
 8005d88:	e6d2      	b.n	8005b30 <_dtoa_r+0x28>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e7e0      	b.n	8005d50 <_dtoa_r+0x248>
 8005d8e:	2401      	movs	r4, #1
 8005d90:	2300      	movs	r3, #0
 8005d92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005d94:	9320      	str	r3, [sp, #128]	@ 0x80
 8005d96:	f04f 33ff 	mov.w	r3, #4294967295
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005da0:	2312      	movs	r3, #18
 8005da2:	e7d0      	b.n	8005d46 <_dtoa_r+0x23e>
 8005da4:	2301      	movs	r3, #1
 8005da6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005da8:	e7f5      	b.n	8005d96 <_dtoa_r+0x28e>
 8005daa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8005db0:	e7d7      	b.n	8005d62 <_dtoa_r+0x25a>
 8005db2:	3101      	adds	r1, #1
 8005db4:	0052      	lsls	r2, r2, #1
 8005db6:	e7d8      	b.n	8005d6a <_dtoa_r+0x262>
 8005db8:	636f4361 	.word	0x636f4361
 8005dbc:	3fd287a7 	.word	0x3fd287a7
 8005dc0:	8b60c8b3 	.word	0x8b60c8b3
 8005dc4:	3fc68a28 	.word	0x3fc68a28
 8005dc8:	509f79fb 	.word	0x509f79fb
 8005dcc:	3fd34413 	.word	0x3fd34413
 8005dd0:	080082ef 	.word	0x080082ef
 8005dd4:	08008306 	.word	0x08008306
 8005dd8:	7ff00000 	.word	0x7ff00000
 8005ddc:	080082eb 	.word	0x080082eb
 8005de0:	080082bf 	.word	0x080082bf
 8005de4:	080082be 	.word	0x080082be
 8005de8:	3ff80000 	.word	0x3ff80000
 8005dec:	08008400 	.word	0x08008400
 8005df0:	0800835e 	.word	0x0800835e
 8005df4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005df8:	6018      	str	r0, [r3, #0]
 8005dfa:	9b07      	ldr	r3, [sp, #28]
 8005dfc:	2b0e      	cmp	r3, #14
 8005dfe:	f200 80a4 	bhi.w	8005f4a <_dtoa_r+0x442>
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	f000 80a1 	beq.w	8005f4a <_dtoa_r+0x442>
 8005e08:	2f00      	cmp	r7, #0
 8005e0a:	dd33      	ble.n	8005e74 <_dtoa_r+0x36c>
 8005e0c:	4b86      	ldr	r3, [pc, #536]	@ (8006028 <_dtoa_r+0x520>)
 8005e0e:	f007 020f 	and.w	r2, r7, #15
 8005e12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e16:	05f8      	lsls	r0, r7, #23
 8005e18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e20:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005e24:	d516      	bpl.n	8005e54 <_dtoa_r+0x34c>
 8005e26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e2a:	4b80      	ldr	r3, [pc, #512]	@ (800602c <_dtoa_r+0x524>)
 8005e2c:	2603      	movs	r6, #3
 8005e2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e32:	f7fa fc85 	bl	8000740 <__aeabi_ddiv>
 8005e36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e3a:	f004 040f 	and.w	r4, r4, #15
 8005e3e:	4d7b      	ldr	r5, [pc, #492]	@ (800602c <_dtoa_r+0x524>)
 8005e40:	b954      	cbnz	r4, 8005e58 <_dtoa_r+0x350>
 8005e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e4a:	f7fa fc79 	bl	8000740 <__aeabi_ddiv>
 8005e4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e52:	e028      	b.n	8005ea6 <_dtoa_r+0x39e>
 8005e54:	2602      	movs	r6, #2
 8005e56:	e7f2      	b.n	8005e3e <_dtoa_r+0x336>
 8005e58:	07e1      	lsls	r1, r4, #31
 8005e5a:	d508      	bpl.n	8005e6e <_dtoa_r+0x366>
 8005e5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e60:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e64:	f7fa fb42 	bl	80004ec <__aeabi_dmul>
 8005e68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e6c:	3601      	adds	r6, #1
 8005e6e:	1064      	asrs	r4, r4, #1
 8005e70:	3508      	adds	r5, #8
 8005e72:	e7e5      	b.n	8005e40 <_dtoa_r+0x338>
 8005e74:	f000 80d2 	beq.w	800601c <_dtoa_r+0x514>
 8005e78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e7c:	427c      	negs	r4, r7
 8005e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006028 <_dtoa_r+0x520>)
 8005e80:	f004 020f 	and.w	r2, r4, #15
 8005e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fb2e 	bl	80004ec <__aeabi_dmul>
 8005e90:	2602      	movs	r6, #2
 8005e92:	2300      	movs	r3, #0
 8005e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e98:	4d64      	ldr	r5, [pc, #400]	@ (800602c <_dtoa_r+0x524>)
 8005e9a:	1124      	asrs	r4, r4, #4
 8005e9c:	2c00      	cmp	r4, #0
 8005e9e:	f040 80b2 	bne.w	8006006 <_dtoa_r+0x4fe>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1d3      	bne.n	8005e4e <_dtoa_r+0x346>
 8005ea6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	f000 80b7 	beq.w	8006020 <_dtoa_r+0x518>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	4629      	mov	r1, r5
 8005eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8006030 <_dtoa_r+0x528>)
 8005eba:	f7fa fd89 	bl	80009d0 <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	f000 80ae 	beq.w	8006020 <_dtoa_r+0x518>
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f000 80aa 	beq.w	8006020 <_dtoa_r+0x518>
 8005ecc:	9b08      	ldr	r3, [sp, #32]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	dd37      	ble.n	8005f42 <_dtoa_r+0x43a>
 8005ed2:	1e7b      	subs	r3, r7, #1
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	9304      	str	r3, [sp, #16]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	4629      	mov	r1, r5
 8005edc:	4b55      	ldr	r3, [pc, #340]	@ (8006034 <_dtoa_r+0x52c>)
 8005ede:	f7fa fb05 	bl	80004ec <__aeabi_dmul>
 8005ee2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ee6:	9c08      	ldr	r4, [sp, #32]
 8005ee8:	3601      	adds	r6, #1
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7fa fa94 	bl	8000418 <__aeabi_i2d>
 8005ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ef4:	f7fa fafa 	bl	80004ec <__aeabi_dmul>
 8005ef8:	2200      	movs	r2, #0
 8005efa:	4b4f      	ldr	r3, [pc, #316]	@ (8006038 <_dtoa_r+0x530>)
 8005efc:	f7fa f940 	bl	8000180 <__adddf3>
 8005f00:	4605      	mov	r5, r0
 8005f02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005f06:	2c00      	cmp	r4, #0
 8005f08:	f040 809a 	bne.w	8006040 <_dtoa_r+0x538>
 8005f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f10:	2200      	movs	r2, #0
 8005f12:	4b4a      	ldr	r3, [pc, #296]	@ (800603c <_dtoa_r+0x534>)
 8005f14:	f7fa f932 	bl	800017c <__aeabi_dsub>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	460b      	mov	r3, r1
 8005f1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f20:	462a      	mov	r2, r5
 8005f22:	4633      	mov	r3, r6
 8005f24:	f7fa fd72 	bl	8000a0c <__aeabi_dcmpgt>
 8005f28:	2800      	cmp	r0, #0
 8005f2a:	f040 828e 	bne.w	800644a <_dtoa_r+0x942>
 8005f2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f32:	462a      	mov	r2, r5
 8005f34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005f38:	f7fa fd4a 	bl	80009d0 <__aeabi_dcmplt>
 8005f3c:	2800      	cmp	r0, #0
 8005f3e:	f040 8127 	bne.w	8006190 <_dtoa_r+0x688>
 8005f42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005f46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005f4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f2c0 8163 	blt.w	8006218 <_dtoa_r+0x710>
 8005f52:	2f0e      	cmp	r7, #14
 8005f54:	f300 8160 	bgt.w	8006218 <_dtoa_r+0x710>
 8005f58:	4b33      	ldr	r3, [pc, #204]	@ (8006028 <_dtoa_r+0x520>)
 8005f5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005f5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005f66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	da03      	bge.n	8005f74 <_dtoa_r+0x46c>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	f340 8100 	ble.w	8006174 <_dtoa_r+0x66c>
 8005f74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005f78:	4656      	mov	r6, sl
 8005f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7e:	4620      	mov	r0, r4
 8005f80:	4629      	mov	r1, r5
 8005f82:	f7fa fbdd 	bl	8000740 <__aeabi_ddiv>
 8005f86:	f7fa fd61 	bl	8000a4c <__aeabi_d2iz>
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	f7fa fa44 	bl	8000418 <__aeabi_i2d>
 8005f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f94:	f7fa faaa 	bl	80004ec <__aeabi_dmul>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	460b      	mov	r3, r1
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	f7fa f8ec 	bl	800017c <__aeabi_dsub>
 8005fa4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005fa8:	9d07      	ldr	r5, [sp, #28]
 8005faa:	f806 4b01 	strb.w	r4, [r6], #1
 8005fae:	eba6 040a 	sub.w	r4, r6, sl
 8005fb2:	42a5      	cmp	r5, r4
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	f040 8116 	bne.w	80061e8 <_dtoa_r+0x6e0>
 8005fbc:	f7fa f8e0 	bl	8000180 <__adddf3>
 8005fc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fc4:	4604      	mov	r4, r0
 8005fc6:	460d      	mov	r5, r1
 8005fc8:	f7fa fd20 	bl	8000a0c <__aeabi_dcmpgt>
 8005fcc:	2800      	cmp	r0, #0
 8005fce:	f040 80f8 	bne.w	80061c2 <_dtoa_r+0x6ba>
 8005fd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa fcef 	bl	80009bc <__aeabi_dcmpeq>
 8005fde:	b118      	cbz	r0, 8005fe8 <_dtoa_r+0x4e0>
 8005fe0:	f018 0f01 	tst.w	r8, #1
 8005fe4:	f040 80ed 	bne.w	80061c2 <_dtoa_r+0x6ba>
 8005fe8:	4649      	mov	r1, r9
 8005fea:	4658      	mov	r0, fp
 8005fec:	f000 fc92 	bl	8006914 <_Bfree>
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	7033      	strb	r3, [r6, #0]
 8005ff4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005ff6:	3701      	adds	r7, #1
 8005ff8:	601f      	str	r7, [r3, #0]
 8005ffa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f000 8320 	beq.w	8006642 <_dtoa_r+0xb3a>
 8006002:	601e      	str	r6, [r3, #0]
 8006004:	e31d      	b.n	8006642 <_dtoa_r+0xb3a>
 8006006:	07e2      	lsls	r2, r4, #31
 8006008:	d505      	bpl.n	8006016 <_dtoa_r+0x50e>
 800600a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800600e:	f7fa fa6d 	bl	80004ec <__aeabi_dmul>
 8006012:	2301      	movs	r3, #1
 8006014:	3601      	adds	r6, #1
 8006016:	1064      	asrs	r4, r4, #1
 8006018:	3508      	adds	r5, #8
 800601a:	e73f      	b.n	8005e9c <_dtoa_r+0x394>
 800601c:	2602      	movs	r6, #2
 800601e:	e742      	b.n	8005ea6 <_dtoa_r+0x39e>
 8006020:	9c07      	ldr	r4, [sp, #28]
 8006022:	9704      	str	r7, [sp, #16]
 8006024:	e761      	b.n	8005eea <_dtoa_r+0x3e2>
 8006026:	bf00      	nop
 8006028:	08008400 	.word	0x08008400
 800602c:	080083d8 	.word	0x080083d8
 8006030:	3ff00000 	.word	0x3ff00000
 8006034:	40240000 	.word	0x40240000
 8006038:	401c0000 	.word	0x401c0000
 800603c:	40140000 	.word	0x40140000
 8006040:	4b70      	ldr	r3, [pc, #448]	@ (8006204 <_dtoa_r+0x6fc>)
 8006042:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006044:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006048:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800604c:	4454      	add	r4, sl
 800604e:	2900      	cmp	r1, #0
 8006050:	d045      	beq.n	80060de <_dtoa_r+0x5d6>
 8006052:	2000      	movs	r0, #0
 8006054:	496c      	ldr	r1, [pc, #432]	@ (8006208 <_dtoa_r+0x700>)
 8006056:	f7fa fb73 	bl	8000740 <__aeabi_ddiv>
 800605a:	4633      	mov	r3, r6
 800605c:	462a      	mov	r2, r5
 800605e:	f7fa f88d 	bl	800017c <__aeabi_dsub>
 8006062:	4656      	mov	r6, sl
 8006064:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800606c:	f7fa fcee 	bl	8000a4c <__aeabi_d2iz>
 8006070:	4605      	mov	r5, r0
 8006072:	f7fa f9d1 	bl	8000418 <__aeabi_i2d>
 8006076:	4602      	mov	r2, r0
 8006078:	460b      	mov	r3, r1
 800607a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800607e:	f7fa f87d 	bl	800017c <__aeabi_dsub>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	3530      	adds	r5, #48	@ 0x30
 8006088:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800608c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006090:	f806 5b01 	strb.w	r5, [r6], #1
 8006094:	f7fa fc9c 	bl	80009d0 <__aeabi_dcmplt>
 8006098:	2800      	cmp	r0, #0
 800609a:	d163      	bne.n	8006164 <_dtoa_r+0x65c>
 800609c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a0:	2000      	movs	r0, #0
 80060a2:	495a      	ldr	r1, [pc, #360]	@ (800620c <_dtoa_r+0x704>)
 80060a4:	f7fa f86a 	bl	800017c <__aeabi_dsub>
 80060a8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80060ac:	f7fa fc90 	bl	80009d0 <__aeabi_dcmplt>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	f040 8087 	bne.w	80061c4 <_dtoa_r+0x6bc>
 80060b6:	42a6      	cmp	r6, r4
 80060b8:	f43f af43 	beq.w	8005f42 <_dtoa_r+0x43a>
 80060bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80060c0:	2200      	movs	r2, #0
 80060c2:	4b53      	ldr	r3, [pc, #332]	@ (8006210 <_dtoa_r+0x708>)
 80060c4:	f7fa fa12 	bl	80004ec <__aeabi_dmul>
 80060c8:	2200      	movs	r2, #0
 80060ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060d2:	4b4f      	ldr	r3, [pc, #316]	@ (8006210 <_dtoa_r+0x708>)
 80060d4:	f7fa fa0a 	bl	80004ec <__aeabi_dmul>
 80060d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060dc:	e7c4      	b.n	8006068 <_dtoa_r+0x560>
 80060de:	4631      	mov	r1, r6
 80060e0:	4628      	mov	r0, r5
 80060e2:	f7fa fa03 	bl	80004ec <__aeabi_dmul>
 80060e6:	4656      	mov	r6, sl
 80060e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80060ec:	9413      	str	r4, [sp, #76]	@ 0x4c
 80060ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80060f2:	f7fa fcab 	bl	8000a4c <__aeabi_d2iz>
 80060f6:	4605      	mov	r5, r0
 80060f8:	f7fa f98e 	bl	8000418 <__aeabi_i2d>
 80060fc:	4602      	mov	r2, r0
 80060fe:	460b      	mov	r3, r1
 8006100:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006104:	f7fa f83a 	bl	800017c <__aeabi_dsub>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	3530      	adds	r5, #48	@ 0x30
 800610e:	f806 5b01 	strb.w	r5, [r6], #1
 8006112:	42a6      	cmp	r6, r4
 8006114:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006118:	f04f 0200 	mov.w	r2, #0
 800611c:	d124      	bne.n	8006168 <_dtoa_r+0x660>
 800611e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006122:	4b39      	ldr	r3, [pc, #228]	@ (8006208 <_dtoa_r+0x700>)
 8006124:	f7fa f82c 	bl	8000180 <__adddf3>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006130:	f7fa fc6c 	bl	8000a0c <__aeabi_dcmpgt>
 8006134:	2800      	cmp	r0, #0
 8006136:	d145      	bne.n	80061c4 <_dtoa_r+0x6bc>
 8006138:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800613c:	2000      	movs	r0, #0
 800613e:	4932      	ldr	r1, [pc, #200]	@ (8006208 <_dtoa_r+0x700>)
 8006140:	f7fa f81c 	bl	800017c <__aeabi_dsub>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614c:	f7fa fc40 	bl	80009d0 <__aeabi_dcmplt>
 8006150:	2800      	cmp	r0, #0
 8006152:	f43f aef6 	beq.w	8005f42 <_dtoa_r+0x43a>
 8006156:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006158:	1e73      	subs	r3, r6, #1
 800615a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800615c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006160:	2b30      	cmp	r3, #48	@ 0x30
 8006162:	d0f8      	beq.n	8006156 <_dtoa_r+0x64e>
 8006164:	9f04      	ldr	r7, [sp, #16]
 8006166:	e73f      	b.n	8005fe8 <_dtoa_r+0x4e0>
 8006168:	4b29      	ldr	r3, [pc, #164]	@ (8006210 <_dtoa_r+0x708>)
 800616a:	f7fa f9bf 	bl	80004ec <__aeabi_dmul>
 800616e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006172:	e7bc      	b.n	80060ee <_dtoa_r+0x5e6>
 8006174:	d10c      	bne.n	8006190 <_dtoa_r+0x688>
 8006176:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800617a:	2200      	movs	r2, #0
 800617c:	4b25      	ldr	r3, [pc, #148]	@ (8006214 <_dtoa_r+0x70c>)
 800617e:	f7fa f9b5 	bl	80004ec <__aeabi_dmul>
 8006182:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006186:	f7fa fc37 	bl	80009f8 <__aeabi_dcmpge>
 800618a:	2800      	cmp	r0, #0
 800618c:	f000 815b 	beq.w	8006446 <_dtoa_r+0x93e>
 8006190:	2400      	movs	r4, #0
 8006192:	4625      	mov	r5, r4
 8006194:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006196:	4656      	mov	r6, sl
 8006198:	43db      	mvns	r3, r3
 800619a:	9304      	str	r3, [sp, #16]
 800619c:	2700      	movs	r7, #0
 800619e:	4621      	mov	r1, r4
 80061a0:	4658      	mov	r0, fp
 80061a2:	f000 fbb7 	bl	8006914 <_Bfree>
 80061a6:	2d00      	cmp	r5, #0
 80061a8:	d0dc      	beq.n	8006164 <_dtoa_r+0x65c>
 80061aa:	b12f      	cbz	r7, 80061b8 <_dtoa_r+0x6b0>
 80061ac:	42af      	cmp	r7, r5
 80061ae:	d003      	beq.n	80061b8 <_dtoa_r+0x6b0>
 80061b0:	4639      	mov	r1, r7
 80061b2:	4658      	mov	r0, fp
 80061b4:	f000 fbae 	bl	8006914 <_Bfree>
 80061b8:	4629      	mov	r1, r5
 80061ba:	4658      	mov	r0, fp
 80061bc:	f000 fbaa 	bl	8006914 <_Bfree>
 80061c0:	e7d0      	b.n	8006164 <_dtoa_r+0x65c>
 80061c2:	9704      	str	r7, [sp, #16]
 80061c4:	4633      	mov	r3, r6
 80061c6:	461e      	mov	r6, r3
 80061c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061cc:	2a39      	cmp	r2, #57	@ 0x39
 80061ce:	d107      	bne.n	80061e0 <_dtoa_r+0x6d8>
 80061d0:	459a      	cmp	sl, r3
 80061d2:	d1f8      	bne.n	80061c6 <_dtoa_r+0x6be>
 80061d4:	9a04      	ldr	r2, [sp, #16]
 80061d6:	3201      	adds	r2, #1
 80061d8:	9204      	str	r2, [sp, #16]
 80061da:	2230      	movs	r2, #48	@ 0x30
 80061dc:	f88a 2000 	strb.w	r2, [sl]
 80061e0:	781a      	ldrb	r2, [r3, #0]
 80061e2:	3201      	adds	r2, #1
 80061e4:	701a      	strb	r2, [r3, #0]
 80061e6:	e7bd      	b.n	8006164 <_dtoa_r+0x65c>
 80061e8:	2200      	movs	r2, #0
 80061ea:	4b09      	ldr	r3, [pc, #36]	@ (8006210 <_dtoa_r+0x708>)
 80061ec:	f7fa f97e 	bl	80004ec <__aeabi_dmul>
 80061f0:	2200      	movs	r2, #0
 80061f2:	2300      	movs	r3, #0
 80061f4:	4604      	mov	r4, r0
 80061f6:	460d      	mov	r5, r1
 80061f8:	f7fa fbe0 	bl	80009bc <__aeabi_dcmpeq>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	f43f aebc 	beq.w	8005f7a <_dtoa_r+0x472>
 8006202:	e6f1      	b.n	8005fe8 <_dtoa_r+0x4e0>
 8006204:	08008400 	.word	0x08008400
 8006208:	3fe00000 	.word	0x3fe00000
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	40240000 	.word	0x40240000
 8006214:	40140000 	.word	0x40140000
 8006218:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800621a:	2a00      	cmp	r2, #0
 800621c:	f000 80db 	beq.w	80063d6 <_dtoa_r+0x8ce>
 8006220:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006222:	2a01      	cmp	r2, #1
 8006224:	f300 80bf 	bgt.w	80063a6 <_dtoa_r+0x89e>
 8006228:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800622a:	2a00      	cmp	r2, #0
 800622c:	f000 80b7 	beq.w	800639e <_dtoa_r+0x896>
 8006230:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006234:	4646      	mov	r6, r8
 8006236:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006238:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800623a:	2101      	movs	r1, #1
 800623c:	441a      	add	r2, r3
 800623e:	4658      	mov	r0, fp
 8006240:	4498      	add	r8, r3
 8006242:	9209      	str	r2, [sp, #36]	@ 0x24
 8006244:	f000 fc1a 	bl	8006a7c <__i2b>
 8006248:	4605      	mov	r5, r0
 800624a:	b15e      	cbz	r6, 8006264 <_dtoa_r+0x75c>
 800624c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800624e:	2b00      	cmp	r3, #0
 8006250:	dd08      	ble.n	8006264 <_dtoa_r+0x75c>
 8006252:	42b3      	cmp	r3, r6
 8006254:	bfa8      	it	ge
 8006256:	4633      	movge	r3, r6
 8006258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800625a:	eba8 0803 	sub.w	r8, r8, r3
 800625e:	1af6      	subs	r6, r6, r3
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	9309      	str	r3, [sp, #36]	@ 0x24
 8006264:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006266:	b1f3      	cbz	r3, 80062a6 <_dtoa_r+0x79e>
 8006268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800626a:	2b00      	cmp	r3, #0
 800626c:	f000 80b7 	beq.w	80063de <_dtoa_r+0x8d6>
 8006270:	b18c      	cbz	r4, 8006296 <_dtoa_r+0x78e>
 8006272:	4629      	mov	r1, r5
 8006274:	4622      	mov	r2, r4
 8006276:	4658      	mov	r0, fp
 8006278:	f000 fcbe 	bl	8006bf8 <__pow5mult>
 800627c:	464a      	mov	r2, r9
 800627e:	4601      	mov	r1, r0
 8006280:	4605      	mov	r5, r0
 8006282:	4658      	mov	r0, fp
 8006284:	f000 fc10 	bl	8006aa8 <__multiply>
 8006288:	4649      	mov	r1, r9
 800628a:	9004      	str	r0, [sp, #16]
 800628c:	4658      	mov	r0, fp
 800628e:	f000 fb41 	bl	8006914 <_Bfree>
 8006292:	9b04      	ldr	r3, [sp, #16]
 8006294:	4699      	mov	r9, r3
 8006296:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006298:	1b1a      	subs	r2, r3, r4
 800629a:	d004      	beq.n	80062a6 <_dtoa_r+0x79e>
 800629c:	4649      	mov	r1, r9
 800629e:	4658      	mov	r0, fp
 80062a0:	f000 fcaa 	bl	8006bf8 <__pow5mult>
 80062a4:	4681      	mov	r9, r0
 80062a6:	2101      	movs	r1, #1
 80062a8:	4658      	mov	r0, fp
 80062aa:	f000 fbe7 	bl	8006a7c <__i2b>
 80062ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062b0:	4604      	mov	r4, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 81c9 	beq.w	800664a <_dtoa_r+0xb42>
 80062b8:	461a      	mov	r2, r3
 80062ba:	4601      	mov	r1, r0
 80062bc:	4658      	mov	r0, fp
 80062be:	f000 fc9b 	bl	8006bf8 <__pow5mult>
 80062c2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062c4:	4604      	mov	r4, r0
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	f300 808f 	bgt.w	80063ea <_dtoa_r+0x8e2>
 80062cc:	9b02      	ldr	r3, [sp, #8]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f040 8087 	bne.w	80063e2 <_dtoa_r+0x8da>
 80062d4:	9b03      	ldr	r3, [sp, #12]
 80062d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f040 8083 	bne.w	80063e6 <_dtoa_r+0x8de>
 80062e0:	9b03      	ldr	r3, [sp, #12]
 80062e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80062e6:	0d1b      	lsrs	r3, r3, #20
 80062e8:	051b      	lsls	r3, r3, #20
 80062ea:	b12b      	cbz	r3, 80062f8 <_dtoa_r+0x7f0>
 80062ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ee:	f108 0801 	add.w	r8, r8, #1
 80062f2:	3301      	adds	r3, #1
 80062f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80062f6:	2301      	movs	r3, #1
 80062f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80062fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 81aa 	beq.w	8006656 <_dtoa_r+0xb4e>
 8006302:	6923      	ldr	r3, [r4, #16]
 8006304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006308:	6918      	ldr	r0, [r3, #16]
 800630a:	f000 fb6b 	bl	80069e4 <__hi0bits>
 800630e:	f1c0 0020 	rsb	r0, r0, #32
 8006312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006314:	4418      	add	r0, r3
 8006316:	f010 001f 	ands.w	r0, r0, #31
 800631a:	d071      	beq.n	8006400 <_dtoa_r+0x8f8>
 800631c:	f1c0 0320 	rsb	r3, r0, #32
 8006320:	2b04      	cmp	r3, #4
 8006322:	dd65      	ble.n	80063f0 <_dtoa_r+0x8e8>
 8006324:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006326:	f1c0 001c 	rsb	r0, r0, #28
 800632a:	4403      	add	r3, r0
 800632c:	4480      	add	r8, r0
 800632e:	4406      	add	r6, r0
 8006330:	9309      	str	r3, [sp, #36]	@ 0x24
 8006332:	f1b8 0f00 	cmp.w	r8, #0
 8006336:	dd05      	ble.n	8006344 <_dtoa_r+0x83c>
 8006338:	4649      	mov	r1, r9
 800633a:	4642      	mov	r2, r8
 800633c:	4658      	mov	r0, fp
 800633e:	f000 fcb5 	bl	8006cac <__lshift>
 8006342:	4681      	mov	r9, r0
 8006344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006346:	2b00      	cmp	r3, #0
 8006348:	dd05      	ble.n	8006356 <_dtoa_r+0x84e>
 800634a:	4621      	mov	r1, r4
 800634c:	461a      	mov	r2, r3
 800634e:	4658      	mov	r0, fp
 8006350:	f000 fcac 	bl	8006cac <__lshift>
 8006354:	4604      	mov	r4, r0
 8006356:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006358:	2b00      	cmp	r3, #0
 800635a:	d053      	beq.n	8006404 <_dtoa_r+0x8fc>
 800635c:	4621      	mov	r1, r4
 800635e:	4648      	mov	r0, r9
 8006360:	f000 fd10 	bl	8006d84 <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	da4d      	bge.n	8006404 <_dtoa_r+0x8fc>
 8006368:	1e7b      	subs	r3, r7, #1
 800636a:	4649      	mov	r1, r9
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	220a      	movs	r2, #10
 8006370:	2300      	movs	r3, #0
 8006372:	4658      	mov	r0, fp
 8006374:	f000 faf0 	bl	8006958 <__multadd>
 8006378:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800637a:	4681      	mov	r9, r0
 800637c:	2b00      	cmp	r3, #0
 800637e:	f000 816c 	beq.w	800665a <_dtoa_r+0xb52>
 8006382:	2300      	movs	r3, #0
 8006384:	4629      	mov	r1, r5
 8006386:	220a      	movs	r2, #10
 8006388:	4658      	mov	r0, fp
 800638a:	f000 fae5 	bl	8006958 <__multadd>
 800638e:	9b08      	ldr	r3, [sp, #32]
 8006390:	4605      	mov	r5, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	dc61      	bgt.n	800645a <_dtoa_r+0x952>
 8006396:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006398:	2b02      	cmp	r3, #2
 800639a:	dc3b      	bgt.n	8006414 <_dtoa_r+0x90c>
 800639c:	e05d      	b.n	800645a <_dtoa_r+0x952>
 800639e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80063a0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80063a4:	e746      	b.n	8006234 <_dtoa_r+0x72c>
 80063a6:	9b07      	ldr	r3, [sp, #28]
 80063a8:	1e5c      	subs	r4, r3, #1
 80063aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80063ac:	42a3      	cmp	r3, r4
 80063ae:	bfbf      	itttt	lt
 80063b0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80063b2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80063b4:	1ae3      	sublt	r3, r4, r3
 80063b6:	18d2      	addlt	r2, r2, r3
 80063b8:	bfa8      	it	ge
 80063ba:	1b1c      	subge	r4, r3, r4
 80063bc:	9b07      	ldr	r3, [sp, #28]
 80063be:	bfbe      	ittt	lt
 80063c0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80063c2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80063c4:	2400      	movlt	r4, #0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	bfb5      	itete	lt
 80063ca:	eba8 0603 	sublt.w	r6, r8, r3
 80063ce:	4646      	movge	r6, r8
 80063d0:	2300      	movlt	r3, #0
 80063d2:	9b07      	ldrge	r3, [sp, #28]
 80063d4:	e730      	b.n	8006238 <_dtoa_r+0x730>
 80063d6:	4646      	mov	r6, r8
 80063d8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80063da:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80063dc:	e735      	b.n	800624a <_dtoa_r+0x742>
 80063de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063e0:	e75c      	b.n	800629c <_dtoa_r+0x794>
 80063e2:	2300      	movs	r3, #0
 80063e4:	e788      	b.n	80062f8 <_dtoa_r+0x7f0>
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	e786      	b.n	80062f8 <_dtoa_r+0x7f0>
 80063ea:	2300      	movs	r3, #0
 80063ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80063ee:	e788      	b.n	8006302 <_dtoa_r+0x7fa>
 80063f0:	d09f      	beq.n	8006332 <_dtoa_r+0x82a>
 80063f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063f4:	331c      	adds	r3, #28
 80063f6:	441a      	add	r2, r3
 80063f8:	4498      	add	r8, r3
 80063fa:	441e      	add	r6, r3
 80063fc:	9209      	str	r2, [sp, #36]	@ 0x24
 80063fe:	e798      	b.n	8006332 <_dtoa_r+0x82a>
 8006400:	4603      	mov	r3, r0
 8006402:	e7f6      	b.n	80063f2 <_dtoa_r+0x8ea>
 8006404:	9b07      	ldr	r3, [sp, #28]
 8006406:	9704      	str	r7, [sp, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	dc20      	bgt.n	800644e <_dtoa_r+0x946>
 800640c:	9308      	str	r3, [sp, #32]
 800640e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006410:	2b02      	cmp	r3, #2
 8006412:	dd1e      	ble.n	8006452 <_dtoa_r+0x94a>
 8006414:	9b08      	ldr	r3, [sp, #32]
 8006416:	2b00      	cmp	r3, #0
 8006418:	f47f aebc 	bne.w	8006194 <_dtoa_r+0x68c>
 800641c:	4621      	mov	r1, r4
 800641e:	2205      	movs	r2, #5
 8006420:	4658      	mov	r0, fp
 8006422:	f000 fa99 	bl	8006958 <__multadd>
 8006426:	4601      	mov	r1, r0
 8006428:	4604      	mov	r4, r0
 800642a:	4648      	mov	r0, r9
 800642c:	f000 fcaa 	bl	8006d84 <__mcmp>
 8006430:	2800      	cmp	r0, #0
 8006432:	f77f aeaf 	ble.w	8006194 <_dtoa_r+0x68c>
 8006436:	2331      	movs	r3, #49	@ 0x31
 8006438:	4656      	mov	r6, sl
 800643a:	f806 3b01 	strb.w	r3, [r6], #1
 800643e:	9b04      	ldr	r3, [sp, #16]
 8006440:	3301      	adds	r3, #1
 8006442:	9304      	str	r3, [sp, #16]
 8006444:	e6aa      	b.n	800619c <_dtoa_r+0x694>
 8006446:	9c07      	ldr	r4, [sp, #28]
 8006448:	9704      	str	r7, [sp, #16]
 800644a:	4625      	mov	r5, r4
 800644c:	e7f3      	b.n	8006436 <_dtoa_r+0x92e>
 800644e:	9b07      	ldr	r3, [sp, #28]
 8006450:	9308      	str	r3, [sp, #32]
 8006452:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006454:	2b00      	cmp	r3, #0
 8006456:	f000 8104 	beq.w	8006662 <_dtoa_r+0xb5a>
 800645a:	2e00      	cmp	r6, #0
 800645c:	dd05      	ble.n	800646a <_dtoa_r+0x962>
 800645e:	4629      	mov	r1, r5
 8006460:	4632      	mov	r2, r6
 8006462:	4658      	mov	r0, fp
 8006464:	f000 fc22 	bl	8006cac <__lshift>
 8006468:	4605      	mov	r5, r0
 800646a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800646c:	2b00      	cmp	r3, #0
 800646e:	d05a      	beq.n	8006526 <_dtoa_r+0xa1e>
 8006470:	4658      	mov	r0, fp
 8006472:	6869      	ldr	r1, [r5, #4]
 8006474:	f000 fa0e 	bl	8006894 <_Balloc>
 8006478:	4606      	mov	r6, r0
 800647a:	b928      	cbnz	r0, 8006488 <_dtoa_r+0x980>
 800647c:	4602      	mov	r2, r0
 800647e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006482:	4b83      	ldr	r3, [pc, #524]	@ (8006690 <_dtoa_r+0xb88>)
 8006484:	f7ff bb54 	b.w	8005b30 <_dtoa_r+0x28>
 8006488:	692a      	ldr	r2, [r5, #16]
 800648a:	f105 010c 	add.w	r1, r5, #12
 800648e:	3202      	adds	r2, #2
 8006490:	0092      	lsls	r2, r2, #2
 8006492:	300c      	adds	r0, #12
 8006494:	f000 ffa8 	bl	80073e8 <memcpy>
 8006498:	2201      	movs	r2, #1
 800649a:	4631      	mov	r1, r6
 800649c:	4658      	mov	r0, fp
 800649e:	f000 fc05 	bl	8006cac <__lshift>
 80064a2:	462f      	mov	r7, r5
 80064a4:	4605      	mov	r5, r0
 80064a6:	f10a 0301 	add.w	r3, sl, #1
 80064aa:	9307      	str	r3, [sp, #28]
 80064ac:	9b08      	ldr	r3, [sp, #32]
 80064ae:	4453      	add	r3, sl
 80064b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80064ba:	9b07      	ldr	r3, [sp, #28]
 80064bc:	4621      	mov	r1, r4
 80064be:	3b01      	subs	r3, #1
 80064c0:	4648      	mov	r0, r9
 80064c2:	9302      	str	r3, [sp, #8]
 80064c4:	f7ff fa95 	bl	80059f2 <quorem>
 80064c8:	4639      	mov	r1, r7
 80064ca:	9008      	str	r0, [sp, #32]
 80064cc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064d0:	4648      	mov	r0, r9
 80064d2:	f000 fc57 	bl	8006d84 <__mcmp>
 80064d6:	462a      	mov	r2, r5
 80064d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80064da:	4621      	mov	r1, r4
 80064dc:	4658      	mov	r0, fp
 80064de:	f000 fc6d 	bl	8006dbc <__mdiff>
 80064e2:	68c2      	ldr	r2, [r0, #12]
 80064e4:	4606      	mov	r6, r0
 80064e6:	bb02      	cbnz	r2, 800652a <_dtoa_r+0xa22>
 80064e8:	4601      	mov	r1, r0
 80064ea:	4648      	mov	r0, r9
 80064ec:	f000 fc4a 	bl	8006d84 <__mcmp>
 80064f0:	4602      	mov	r2, r0
 80064f2:	4631      	mov	r1, r6
 80064f4:	4658      	mov	r0, fp
 80064f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80064f8:	f000 fa0c 	bl	8006914 <_Bfree>
 80064fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80064fe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006500:	9e07      	ldr	r6, [sp, #28]
 8006502:	ea43 0102 	orr.w	r1, r3, r2
 8006506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006508:	4319      	orrs	r1, r3
 800650a:	d110      	bne.n	800652e <_dtoa_r+0xa26>
 800650c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006510:	d029      	beq.n	8006566 <_dtoa_r+0xa5e>
 8006512:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006514:	2b00      	cmp	r3, #0
 8006516:	dd02      	ble.n	800651e <_dtoa_r+0xa16>
 8006518:	9b08      	ldr	r3, [sp, #32]
 800651a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	f883 8000 	strb.w	r8, [r3]
 8006524:	e63b      	b.n	800619e <_dtoa_r+0x696>
 8006526:	4628      	mov	r0, r5
 8006528:	e7bb      	b.n	80064a2 <_dtoa_r+0x99a>
 800652a:	2201      	movs	r2, #1
 800652c:	e7e1      	b.n	80064f2 <_dtoa_r+0x9ea>
 800652e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	db04      	blt.n	800653e <_dtoa_r+0xa36>
 8006534:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006536:	430b      	orrs	r3, r1
 8006538:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800653a:	430b      	orrs	r3, r1
 800653c:	d120      	bne.n	8006580 <_dtoa_r+0xa78>
 800653e:	2a00      	cmp	r2, #0
 8006540:	dded      	ble.n	800651e <_dtoa_r+0xa16>
 8006542:	4649      	mov	r1, r9
 8006544:	2201      	movs	r2, #1
 8006546:	4658      	mov	r0, fp
 8006548:	f000 fbb0 	bl	8006cac <__lshift>
 800654c:	4621      	mov	r1, r4
 800654e:	4681      	mov	r9, r0
 8006550:	f000 fc18 	bl	8006d84 <__mcmp>
 8006554:	2800      	cmp	r0, #0
 8006556:	dc03      	bgt.n	8006560 <_dtoa_r+0xa58>
 8006558:	d1e1      	bne.n	800651e <_dtoa_r+0xa16>
 800655a:	f018 0f01 	tst.w	r8, #1
 800655e:	d0de      	beq.n	800651e <_dtoa_r+0xa16>
 8006560:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006564:	d1d8      	bne.n	8006518 <_dtoa_r+0xa10>
 8006566:	2339      	movs	r3, #57	@ 0x39
 8006568:	9a02      	ldr	r2, [sp, #8]
 800656a:	7013      	strb	r3, [r2, #0]
 800656c:	4633      	mov	r3, r6
 800656e:	461e      	mov	r6, r3
 8006570:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006574:	3b01      	subs	r3, #1
 8006576:	2a39      	cmp	r2, #57	@ 0x39
 8006578:	d052      	beq.n	8006620 <_dtoa_r+0xb18>
 800657a:	3201      	adds	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e60e      	b.n	800619e <_dtoa_r+0x696>
 8006580:	2a00      	cmp	r2, #0
 8006582:	dd07      	ble.n	8006594 <_dtoa_r+0xa8c>
 8006584:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006588:	d0ed      	beq.n	8006566 <_dtoa_r+0xa5e>
 800658a:	9a02      	ldr	r2, [sp, #8]
 800658c:	f108 0301 	add.w	r3, r8, #1
 8006590:	7013      	strb	r3, [r2, #0]
 8006592:	e604      	b.n	800619e <_dtoa_r+0x696>
 8006594:	9b07      	ldr	r3, [sp, #28]
 8006596:	9a07      	ldr	r2, [sp, #28]
 8006598:	f803 8c01 	strb.w	r8, [r3, #-1]
 800659c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800659e:	4293      	cmp	r3, r2
 80065a0:	d028      	beq.n	80065f4 <_dtoa_r+0xaec>
 80065a2:	4649      	mov	r1, r9
 80065a4:	2300      	movs	r3, #0
 80065a6:	220a      	movs	r2, #10
 80065a8:	4658      	mov	r0, fp
 80065aa:	f000 f9d5 	bl	8006958 <__multadd>
 80065ae:	42af      	cmp	r7, r5
 80065b0:	4681      	mov	r9, r0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	f04f 020a 	mov.w	r2, #10
 80065ba:	4639      	mov	r1, r7
 80065bc:	4658      	mov	r0, fp
 80065be:	d107      	bne.n	80065d0 <_dtoa_r+0xac8>
 80065c0:	f000 f9ca 	bl	8006958 <__multadd>
 80065c4:	4607      	mov	r7, r0
 80065c6:	4605      	mov	r5, r0
 80065c8:	9b07      	ldr	r3, [sp, #28]
 80065ca:	3301      	adds	r3, #1
 80065cc:	9307      	str	r3, [sp, #28]
 80065ce:	e774      	b.n	80064ba <_dtoa_r+0x9b2>
 80065d0:	f000 f9c2 	bl	8006958 <__multadd>
 80065d4:	4629      	mov	r1, r5
 80065d6:	4607      	mov	r7, r0
 80065d8:	2300      	movs	r3, #0
 80065da:	220a      	movs	r2, #10
 80065dc:	4658      	mov	r0, fp
 80065de:	f000 f9bb 	bl	8006958 <__multadd>
 80065e2:	4605      	mov	r5, r0
 80065e4:	e7f0      	b.n	80065c8 <_dtoa_r+0xac0>
 80065e6:	9b08      	ldr	r3, [sp, #32]
 80065e8:	2700      	movs	r7, #0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	bfcc      	ite	gt
 80065ee:	461e      	movgt	r6, r3
 80065f0:	2601      	movle	r6, #1
 80065f2:	4456      	add	r6, sl
 80065f4:	4649      	mov	r1, r9
 80065f6:	2201      	movs	r2, #1
 80065f8:	4658      	mov	r0, fp
 80065fa:	f000 fb57 	bl	8006cac <__lshift>
 80065fe:	4621      	mov	r1, r4
 8006600:	4681      	mov	r9, r0
 8006602:	f000 fbbf 	bl	8006d84 <__mcmp>
 8006606:	2800      	cmp	r0, #0
 8006608:	dcb0      	bgt.n	800656c <_dtoa_r+0xa64>
 800660a:	d102      	bne.n	8006612 <_dtoa_r+0xb0a>
 800660c:	f018 0f01 	tst.w	r8, #1
 8006610:	d1ac      	bne.n	800656c <_dtoa_r+0xa64>
 8006612:	4633      	mov	r3, r6
 8006614:	461e      	mov	r6, r3
 8006616:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800661a:	2a30      	cmp	r2, #48	@ 0x30
 800661c:	d0fa      	beq.n	8006614 <_dtoa_r+0xb0c>
 800661e:	e5be      	b.n	800619e <_dtoa_r+0x696>
 8006620:	459a      	cmp	sl, r3
 8006622:	d1a4      	bne.n	800656e <_dtoa_r+0xa66>
 8006624:	9b04      	ldr	r3, [sp, #16]
 8006626:	3301      	adds	r3, #1
 8006628:	9304      	str	r3, [sp, #16]
 800662a:	2331      	movs	r3, #49	@ 0x31
 800662c:	f88a 3000 	strb.w	r3, [sl]
 8006630:	e5b5      	b.n	800619e <_dtoa_r+0x696>
 8006632:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006634:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006694 <_dtoa_r+0xb8c>
 8006638:	b11b      	cbz	r3, 8006642 <_dtoa_r+0xb3a>
 800663a:	f10a 0308 	add.w	r3, sl, #8
 800663e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	4650      	mov	r0, sl
 8006644:	b017      	add	sp, #92	@ 0x5c
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800664c:	2b01      	cmp	r3, #1
 800664e:	f77f ae3d 	ble.w	80062cc <_dtoa_r+0x7c4>
 8006652:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006654:	930a      	str	r3, [sp, #40]	@ 0x28
 8006656:	2001      	movs	r0, #1
 8006658:	e65b      	b.n	8006312 <_dtoa_r+0x80a>
 800665a:	9b08      	ldr	r3, [sp, #32]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f77f aed6 	ble.w	800640e <_dtoa_r+0x906>
 8006662:	4656      	mov	r6, sl
 8006664:	4621      	mov	r1, r4
 8006666:	4648      	mov	r0, r9
 8006668:	f7ff f9c3 	bl	80059f2 <quorem>
 800666c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006670:	9b08      	ldr	r3, [sp, #32]
 8006672:	f806 8b01 	strb.w	r8, [r6], #1
 8006676:	eba6 020a 	sub.w	r2, r6, sl
 800667a:	4293      	cmp	r3, r2
 800667c:	ddb3      	ble.n	80065e6 <_dtoa_r+0xade>
 800667e:	4649      	mov	r1, r9
 8006680:	2300      	movs	r3, #0
 8006682:	220a      	movs	r2, #10
 8006684:	4658      	mov	r0, fp
 8006686:	f000 f967 	bl	8006958 <__multadd>
 800668a:	4681      	mov	r9, r0
 800668c:	e7ea      	b.n	8006664 <_dtoa_r+0xb5c>
 800668e:	bf00      	nop
 8006690:	0800835e 	.word	0x0800835e
 8006694:	080082e2 	.word	0x080082e2

08006698 <_free_r>:
 8006698:	b538      	push	{r3, r4, r5, lr}
 800669a:	4605      	mov	r5, r0
 800669c:	2900      	cmp	r1, #0
 800669e:	d040      	beq.n	8006722 <_free_r+0x8a>
 80066a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066a4:	1f0c      	subs	r4, r1, #4
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bfb8      	it	lt
 80066aa:	18e4      	addlt	r4, r4, r3
 80066ac:	f000 f8e6 	bl	800687c <__malloc_lock>
 80066b0:	4a1c      	ldr	r2, [pc, #112]	@ (8006724 <_free_r+0x8c>)
 80066b2:	6813      	ldr	r3, [r2, #0]
 80066b4:	b933      	cbnz	r3, 80066c4 <_free_r+0x2c>
 80066b6:	6063      	str	r3, [r4, #4]
 80066b8:	6014      	str	r4, [r2, #0]
 80066ba:	4628      	mov	r0, r5
 80066bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066c0:	f000 b8e2 	b.w	8006888 <__malloc_unlock>
 80066c4:	42a3      	cmp	r3, r4
 80066c6:	d908      	bls.n	80066da <_free_r+0x42>
 80066c8:	6820      	ldr	r0, [r4, #0]
 80066ca:	1821      	adds	r1, r4, r0
 80066cc:	428b      	cmp	r3, r1
 80066ce:	bf01      	itttt	eq
 80066d0:	6819      	ldreq	r1, [r3, #0]
 80066d2:	685b      	ldreq	r3, [r3, #4]
 80066d4:	1809      	addeq	r1, r1, r0
 80066d6:	6021      	streq	r1, [r4, #0]
 80066d8:	e7ed      	b.n	80066b6 <_free_r+0x1e>
 80066da:	461a      	mov	r2, r3
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	b10b      	cbz	r3, 80066e4 <_free_r+0x4c>
 80066e0:	42a3      	cmp	r3, r4
 80066e2:	d9fa      	bls.n	80066da <_free_r+0x42>
 80066e4:	6811      	ldr	r1, [r2, #0]
 80066e6:	1850      	adds	r0, r2, r1
 80066e8:	42a0      	cmp	r0, r4
 80066ea:	d10b      	bne.n	8006704 <_free_r+0x6c>
 80066ec:	6820      	ldr	r0, [r4, #0]
 80066ee:	4401      	add	r1, r0
 80066f0:	1850      	adds	r0, r2, r1
 80066f2:	4283      	cmp	r3, r0
 80066f4:	6011      	str	r1, [r2, #0]
 80066f6:	d1e0      	bne.n	80066ba <_free_r+0x22>
 80066f8:	6818      	ldr	r0, [r3, #0]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	4408      	add	r0, r1
 80066fe:	6010      	str	r0, [r2, #0]
 8006700:	6053      	str	r3, [r2, #4]
 8006702:	e7da      	b.n	80066ba <_free_r+0x22>
 8006704:	d902      	bls.n	800670c <_free_r+0x74>
 8006706:	230c      	movs	r3, #12
 8006708:	602b      	str	r3, [r5, #0]
 800670a:	e7d6      	b.n	80066ba <_free_r+0x22>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	1821      	adds	r1, r4, r0
 8006710:	428b      	cmp	r3, r1
 8006712:	bf01      	itttt	eq
 8006714:	6819      	ldreq	r1, [r3, #0]
 8006716:	685b      	ldreq	r3, [r3, #4]
 8006718:	1809      	addeq	r1, r1, r0
 800671a:	6021      	streq	r1, [r4, #0]
 800671c:	6063      	str	r3, [r4, #4]
 800671e:	6054      	str	r4, [r2, #4]
 8006720:	e7cb      	b.n	80066ba <_free_r+0x22>
 8006722:	bd38      	pop	{r3, r4, r5, pc}
 8006724:	20000890 	.word	0x20000890

08006728 <malloc>:
 8006728:	4b02      	ldr	r3, [pc, #8]	@ (8006734 <malloc+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f000 b825 	b.w	800677c <_malloc_r>
 8006732:	bf00      	nop
 8006734:	20000020 	.word	0x20000020

08006738 <sbrk_aligned>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	4e0f      	ldr	r6, [pc, #60]	@ (8006778 <sbrk_aligned+0x40>)
 800673c:	460c      	mov	r4, r1
 800673e:	6831      	ldr	r1, [r6, #0]
 8006740:	4605      	mov	r5, r0
 8006742:	b911      	cbnz	r1, 800674a <sbrk_aligned+0x12>
 8006744:	f000 fe40 	bl	80073c8 <_sbrk_r>
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	4621      	mov	r1, r4
 800674c:	4628      	mov	r0, r5
 800674e:	f000 fe3b 	bl	80073c8 <_sbrk_r>
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	d103      	bne.n	800675e <sbrk_aligned+0x26>
 8006756:	f04f 34ff 	mov.w	r4, #4294967295
 800675a:	4620      	mov	r0, r4
 800675c:	bd70      	pop	{r4, r5, r6, pc}
 800675e:	1cc4      	adds	r4, r0, #3
 8006760:	f024 0403 	bic.w	r4, r4, #3
 8006764:	42a0      	cmp	r0, r4
 8006766:	d0f8      	beq.n	800675a <sbrk_aligned+0x22>
 8006768:	1a21      	subs	r1, r4, r0
 800676a:	4628      	mov	r0, r5
 800676c:	f000 fe2c 	bl	80073c8 <_sbrk_r>
 8006770:	3001      	adds	r0, #1
 8006772:	d1f2      	bne.n	800675a <sbrk_aligned+0x22>
 8006774:	e7ef      	b.n	8006756 <sbrk_aligned+0x1e>
 8006776:	bf00      	nop
 8006778:	2000088c 	.word	0x2000088c

0800677c <_malloc_r>:
 800677c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006780:	1ccd      	adds	r5, r1, #3
 8006782:	f025 0503 	bic.w	r5, r5, #3
 8006786:	3508      	adds	r5, #8
 8006788:	2d0c      	cmp	r5, #12
 800678a:	bf38      	it	cc
 800678c:	250c      	movcc	r5, #12
 800678e:	2d00      	cmp	r5, #0
 8006790:	4606      	mov	r6, r0
 8006792:	db01      	blt.n	8006798 <_malloc_r+0x1c>
 8006794:	42a9      	cmp	r1, r5
 8006796:	d904      	bls.n	80067a2 <_malloc_r+0x26>
 8006798:	230c      	movs	r3, #12
 800679a:	6033      	str	r3, [r6, #0]
 800679c:	2000      	movs	r0, #0
 800679e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006878 <_malloc_r+0xfc>
 80067a6:	f000 f869 	bl	800687c <__malloc_lock>
 80067aa:	f8d8 3000 	ldr.w	r3, [r8]
 80067ae:	461c      	mov	r4, r3
 80067b0:	bb44      	cbnz	r4, 8006804 <_malloc_r+0x88>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff ffbf 	bl	8006738 <sbrk_aligned>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	4604      	mov	r4, r0
 80067be:	d158      	bne.n	8006872 <_malloc_r+0xf6>
 80067c0:	f8d8 4000 	ldr.w	r4, [r8]
 80067c4:	4627      	mov	r7, r4
 80067c6:	2f00      	cmp	r7, #0
 80067c8:	d143      	bne.n	8006852 <_malloc_r+0xd6>
 80067ca:	2c00      	cmp	r4, #0
 80067cc:	d04b      	beq.n	8006866 <_malloc_r+0xea>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	4639      	mov	r1, r7
 80067d2:	4630      	mov	r0, r6
 80067d4:	eb04 0903 	add.w	r9, r4, r3
 80067d8:	f000 fdf6 	bl	80073c8 <_sbrk_r>
 80067dc:	4581      	cmp	r9, r0
 80067de:	d142      	bne.n	8006866 <_malloc_r+0xea>
 80067e0:	6821      	ldr	r1, [r4, #0]
 80067e2:	4630      	mov	r0, r6
 80067e4:	1a6d      	subs	r5, r5, r1
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7ff ffa6 	bl	8006738 <sbrk_aligned>
 80067ec:	3001      	adds	r0, #1
 80067ee:	d03a      	beq.n	8006866 <_malloc_r+0xea>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	442b      	add	r3, r5
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	f8d8 3000 	ldr.w	r3, [r8]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	bb62      	cbnz	r2, 8006858 <_malloc_r+0xdc>
 80067fe:	f8c8 7000 	str.w	r7, [r8]
 8006802:	e00f      	b.n	8006824 <_malloc_r+0xa8>
 8006804:	6822      	ldr	r2, [r4, #0]
 8006806:	1b52      	subs	r2, r2, r5
 8006808:	d420      	bmi.n	800684c <_malloc_r+0xd0>
 800680a:	2a0b      	cmp	r2, #11
 800680c:	d917      	bls.n	800683e <_malloc_r+0xc2>
 800680e:	1961      	adds	r1, r4, r5
 8006810:	42a3      	cmp	r3, r4
 8006812:	6025      	str	r5, [r4, #0]
 8006814:	bf18      	it	ne
 8006816:	6059      	strne	r1, [r3, #4]
 8006818:	6863      	ldr	r3, [r4, #4]
 800681a:	bf08      	it	eq
 800681c:	f8c8 1000 	streq.w	r1, [r8]
 8006820:	5162      	str	r2, [r4, r5]
 8006822:	604b      	str	r3, [r1, #4]
 8006824:	4630      	mov	r0, r6
 8006826:	f000 f82f 	bl	8006888 <__malloc_unlock>
 800682a:	f104 000b 	add.w	r0, r4, #11
 800682e:	1d23      	adds	r3, r4, #4
 8006830:	f020 0007 	bic.w	r0, r0, #7
 8006834:	1ac2      	subs	r2, r0, r3
 8006836:	bf1c      	itt	ne
 8006838:	1a1b      	subne	r3, r3, r0
 800683a:	50a3      	strne	r3, [r4, r2]
 800683c:	e7af      	b.n	800679e <_malloc_r+0x22>
 800683e:	6862      	ldr	r2, [r4, #4]
 8006840:	42a3      	cmp	r3, r4
 8006842:	bf0c      	ite	eq
 8006844:	f8c8 2000 	streq.w	r2, [r8]
 8006848:	605a      	strne	r2, [r3, #4]
 800684a:	e7eb      	b.n	8006824 <_malloc_r+0xa8>
 800684c:	4623      	mov	r3, r4
 800684e:	6864      	ldr	r4, [r4, #4]
 8006850:	e7ae      	b.n	80067b0 <_malloc_r+0x34>
 8006852:	463c      	mov	r4, r7
 8006854:	687f      	ldr	r7, [r7, #4]
 8006856:	e7b6      	b.n	80067c6 <_malloc_r+0x4a>
 8006858:	461a      	mov	r2, r3
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	42a3      	cmp	r3, r4
 800685e:	d1fb      	bne.n	8006858 <_malloc_r+0xdc>
 8006860:	2300      	movs	r3, #0
 8006862:	6053      	str	r3, [r2, #4]
 8006864:	e7de      	b.n	8006824 <_malloc_r+0xa8>
 8006866:	230c      	movs	r3, #12
 8006868:	4630      	mov	r0, r6
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f000 f80c 	bl	8006888 <__malloc_unlock>
 8006870:	e794      	b.n	800679c <_malloc_r+0x20>
 8006872:	6005      	str	r5, [r0, #0]
 8006874:	e7d6      	b.n	8006824 <_malloc_r+0xa8>
 8006876:	bf00      	nop
 8006878:	20000890 	.word	0x20000890

0800687c <__malloc_lock>:
 800687c:	4801      	ldr	r0, [pc, #4]	@ (8006884 <__malloc_lock+0x8>)
 800687e:	f7ff b8a8 	b.w	80059d2 <__retarget_lock_acquire_recursive>
 8006882:	bf00      	nop
 8006884:	20000888 	.word	0x20000888

08006888 <__malloc_unlock>:
 8006888:	4801      	ldr	r0, [pc, #4]	@ (8006890 <__malloc_unlock+0x8>)
 800688a:	f7ff b8a3 	b.w	80059d4 <__retarget_lock_release_recursive>
 800688e:	bf00      	nop
 8006890:	20000888 	.word	0x20000888

08006894 <_Balloc>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	69c6      	ldr	r6, [r0, #28]
 8006898:	4604      	mov	r4, r0
 800689a:	460d      	mov	r5, r1
 800689c:	b976      	cbnz	r6, 80068bc <_Balloc+0x28>
 800689e:	2010      	movs	r0, #16
 80068a0:	f7ff ff42 	bl	8006728 <malloc>
 80068a4:	4602      	mov	r2, r0
 80068a6:	61e0      	str	r0, [r4, #28]
 80068a8:	b920      	cbnz	r0, 80068b4 <_Balloc+0x20>
 80068aa:	216b      	movs	r1, #107	@ 0x6b
 80068ac:	4b17      	ldr	r3, [pc, #92]	@ (800690c <_Balloc+0x78>)
 80068ae:	4818      	ldr	r0, [pc, #96]	@ (8006910 <_Balloc+0x7c>)
 80068b0:	f000 fda8 	bl	8007404 <__assert_func>
 80068b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80068b8:	6006      	str	r6, [r0, #0]
 80068ba:	60c6      	str	r6, [r0, #12]
 80068bc:	69e6      	ldr	r6, [r4, #28]
 80068be:	68f3      	ldr	r3, [r6, #12]
 80068c0:	b183      	cbz	r3, 80068e4 <_Balloc+0x50>
 80068c2:	69e3      	ldr	r3, [r4, #28]
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80068ca:	b9b8      	cbnz	r0, 80068fc <_Balloc+0x68>
 80068cc:	2101      	movs	r1, #1
 80068ce:	fa01 f605 	lsl.w	r6, r1, r5
 80068d2:	1d72      	adds	r2, r6, #5
 80068d4:	4620      	mov	r0, r4
 80068d6:	0092      	lsls	r2, r2, #2
 80068d8:	f000 fdb2 	bl	8007440 <_calloc_r>
 80068dc:	b160      	cbz	r0, 80068f8 <_Balloc+0x64>
 80068de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80068e2:	e00e      	b.n	8006902 <_Balloc+0x6e>
 80068e4:	2221      	movs	r2, #33	@ 0x21
 80068e6:	2104      	movs	r1, #4
 80068e8:	4620      	mov	r0, r4
 80068ea:	f000 fda9 	bl	8007440 <_calloc_r>
 80068ee:	69e3      	ldr	r3, [r4, #28]
 80068f0:	60f0      	str	r0, [r6, #12]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1e4      	bne.n	80068c2 <_Balloc+0x2e>
 80068f8:	2000      	movs	r0, #0
 80068fa:	bd70      	pop	{r4, r5, r6, pc}
 80068fc:	6802      	ldr	r2, [r0, #0]
 80068fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006902:	2300      	movs	r3, #0
 8006904:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006908:	e7f7      	b.n	80068fa <_Balloc+0x66>
 800690a:	bf00      	nop
 800690c:	080082ef 	.word	0x080082ef
 8006910:	0800836f 	.word	0x0800836f

08006914 <_Bfree>:
 8006914:	b570      	push	{r4, r5, r6, lr}
 8006916:	69c6      	ldr	r6, [r0, #28]
 8006918:	4605      	mov	r5, r0
 800691a:	460c      	mov	r4, r1
 800691c:	b976      	cbnz	r6, 800693c <_Bfree+0x28>
 800691e:	2010      	movs	r0, #16
 8006920:	f7ff ff02 	bl	8006728 <malloc>
 8006924:	4602      	mov	r2, r0
 8006926:	61e8      	str	r0, [r5, #28]
 8006928:	b920      	cbnz	r0, 8006934 <_Bfree+0x20>
 800692a:	218f      	movs	r1, #143	@ 0x8f
 800692c:	4b08      	ldr	r3, [pc, #32]	@ (8006950 <_Bfree+0x3c>)
 800692e:	4809      	ldr	r0, [pc, #36]	@ (8006954 <_Bfree+0x40>)
 8006930:	f000 fd68 	bl	8007404 <__assert_func>
 8006934:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006938:	6006      	str	r6, [r0, #0]
 800693a:	60c6      	str	r6, [r0, #12]
 800693c:	b13c      	cbz	r4, 800694e <_Bfree+0x3a>
 800693e:	69eb      	ldr	r3, [r5, #28]
 8006940:	6862      	ldr	r2, [r4, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006948:	6021      	str	r1, [r4, #0]
 800694a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800694e:	bd70      	pop	{r4, r5, r6, pc}
 8006950:	080082ef 	.word	0x080082ef
 8006954:	0800836f 	.word	0x0800836f

08006958 <__multadd>:
 8006958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800695c:	4607      	mov	r7, r0
 800695e:	460c      	mov	r4, r1
 8006960:	461e      	mov	r6, r3
 8006962:	2000      	movs	r0, #0
 8006964:	690d      	ldr	r5, [r1, #16]
 8006966:	f101 0c14 	add.w	ip, r1, #20
 800696a:	f8dc 3000 	ldr.w	r3, [ip]
 800696e:	3001      	adds	r0, #1
 8006970:	b299      	uxth	r1, r3
 8006972:	fb02 6101 	mla	r1, r2, r1, r6
 8006976:	0c1e      	lsrs	r6, r3, #16
 8006978:	0c0b      	lsrs	r3, r1, #16
 800697a:	fb02 3306 	mla	r3, r2, r6, r3
 800697e:	b289      	uxth	r1, r1
 8006980:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006984:	4285      	cmp	r5, r0
 8006986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800698a:	f84c 1b04 	str.w	r1, [ip], #4
 800698e:	dcec      	bgt.n	800696a <__multadd+0x12>
 8006990:	b30e      	cbz	r6, 80069d6 <__multadd+0x7e>
 8006992:	68a3      	ldr	r3, [r4, #8]
 8006994:	42ab      	cmp	r3, r5
 8006996:	dc19      	bgt.n	80069cc <__multadd+0x74>
 8006998:	6861      	ldr	r1, [r4, #4]
 800699a:	4638      	mov	r0, r7
 800699c:	3101      	adds	r1, #1
 800699e:	f7ff ff79 	bl	8006894 <_Balloc>
 80069a2:	4680      	mov	r8, r0
 80069a4:	b928      	cbnz	r0, 80069b2 <__multadd+0x5a>
 80069a6:	4602      	mov	r2, r0
 80069a8:	21ba      	movs	r1, #186	@ 0xba
 80069aa:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <__multadd+0x84>)
 80069ac:	480c      	ldr	r0, [pc, #48]	@ (80069e0 <__multadd+0x88>)
 80069ae:	f000 fd29 	bl	8007404 <__assert_func>
 80069b2:	6922      	ldr	r2, [r4, #16]
 80069b4:	f104 010c 	add.w	r1, r4, #12
 80069b8:	3202      	adds	r2, #2
 80069ba:	0092      	lsls	r2, r2, #2
 80069bc:	300c      	adds	r0, #12
 80069be:	f000 fd13 	bl	80073e8 <memcpy>
 80069c2:	4621      	mov	r1, r4
 80069c4:	4638      	mov	r0, r7
 80069c6:	f7ff ffa5 	bl	8006914 <_Bfree>
 80069ca:	4644      	mov	r4, r8
 80069cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80069d0:	3501      	adds	r5, #1
 80069d2:	615e      	str	r6, [r3, #20]
 80069d4:	6125      	str	r5, [r4, #16]
 80069d6:	4620      	mov	r0, r4
 80069d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069dc:	0800835e 	.word	0x0800835e
 80069e0:	0800836f 	.word	0x0800836f

080069e4 <__hi0bits>:
 80069e4:	4603      	mov	r3, r0
 80069e6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80069ea:	bf3a      	itte	cc
 80069ec:	0403      	lslcc	r3, r0, #16
 80069ee:	2010      	movcc	r0, #16
 80069f0:	2000      	movcs	r0, #0
 80069f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80069f6:	bf3c      	itt	cc
 80069f8:	021b      	lslcc	r3, r3, #8
 80069fa:	3008      	addcc	r0, #8
 80069fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a00:	bf3c      	itt	cc
 8006a02:	011b      	lslcc	r3, r3, #4
 8006a04:	3004      	addcc	r0, #4
 8006a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a0a:	bf3c      	itt	cc
 8006a0c:	009b      	lslcc	r3, r3, #2
 8006a0e:	3002      	addcc	r0, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	db05      	blt.n	8006a20 <__hi0bits+0x3c>
 8006a14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006a18:	f100 0001 	add.w	r0, r0, #1
 8006a1c:	bf08      	it	eq
 8006a1e:	2020      	moveq	r0, #32
 8006a20:	4770      	bx	lr

08006a22 <__lo0bits>:
 8006a22:	6803      	ldr	r3, [r0, #0]
 8006a24:	4602      	mov	r2, r0
 8006a26:	f013 0007 	ands.w	r0, r3, #7
 8006a2a:	d00b      	beq.n	8006a44 <__lo0bits+0x22>
 8006a2c:	07d9      	lsls	r1, r3, #31
 8006a2e:	d421      	bmi.n	8006a74 <__lo0bits+0x52>
 8006a30:	0798      	lsls	r0, r3, #30
 8006a32:	bf49      	itett	mi
 8006a34:	085b      	lsrmi	r3, r3, #1
 8006a36:	089b      	lsrpl	r3, r3, #2
 8006a38:	2001      	movmi	r0, #1
 8006a3a:	6013      	strmi	r3, [r2, #0]
 8006a3c:	bf5c      	itt	pl
 8006a3e:	2002      	movpl	r0, #2
 8006a40:	6013      	strpl	r3, [r2, #0]
 8006a42:	4770      	bx	lr
 8006a44:	b299      	uxth	r1, r3
 8006a46:	b909      	cbnz	r1, 8006a4c <__lo0bits+0x2a>
 8006a48:	2010      	movs	r0, #16
 8006a4a:	0c1b      	lsrs	r3, r3, #16
 8006a4c:	b2d9      	uxtb	r1, r3
 8006a4e:	b909      	cbnz	r1, 8006a54 <__lo0bits+0x32>
 8006a50:	3008      	adds	r0, #8
 8006a52:	0a1b      	lsrs	r3, r3, #8
 8006a54:	0719      	lsls	r1, r3, #28
 8006a56:	bf04      	itt	eq
 8006a58:	091b      	lsreq	r3, r3, #4
 8006a5a:	3004      	addeq	r0, #4
 8006a5c:	0799      	lsls	r1, r3, #30
 8006a5e:	bf04      	itt	eq
 8006a60:	089b      	lsreq	r3, r3, #2
 8006a62:	3002      	addeq	r0, #2
 8006a64:	07d9      	lsls	r1, r3, #31
 8006a66:	d403      	bmi.n	8006a70 <__lo0bits+0x4e>
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	f100 0001 	add.w	r0, r0, #1
 8006a6e:	d003      	beq.n	8006a78 <__lo0bits+0x56>
 8006a70:	6013      	str	r3, [r2, #0]
 8006a72:	4770      	bx	lr
 8006a74:	2000      	movs	r0, #0
 8006a76:	4770      	bx	lr
 8006a78:	2020      	movs	r0, #32
 8006a7a:	4770      	bx	lr

08006a7c <__i2b>:
 8006a7c:	b510      	push	{r4, lr}
 8006a7e:	460c      	mov	r4, r1
 8006a80:	2101      	movs	r1, #1
 8006a82:	f7ff ff07 	bl	8006894 <_Balloc>
 8006a86:	4602      	mov	r2, r0
 8006a88:	b928      	cbnz	r0, 8006a96 <__i2b+0x1a>
 8006a8a:	f240 1145 	movw	r1, #325	@ 0x145
 8006a8e:	4b04      	ldr	r3, [pc, #16]	@ (8006aa0 <__i2b+0x24>)
 8006a90:	4804      	ldr	r0, [pc, #16]	@ (8006aa4 <__i2b+0x28>)
 8006a92:	f000 fcb7 	bl	8007404 <__assert_func>
 8006a96:	2301      	movs	r3, #1
 8006a98:	6144      	str	r4, [r0, #20]
 8006a9a:	6103      	str	r3, [r0, #16]
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	bf00      	nop
 8006aa0:	0800835e 	.word	0x0800835e
 8006aa4:	0800836f 	.word	0x0800836f

08006aa8 <__multiply>:
 8006aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aac:	4614      	mov	r4, r2
 8006aae:	690a      	ldr	r2, [r1, #16]
 8006ab0:	6923      	ldr	r3, [r4, #16]
 8006ab2:	460f      	mov	r7, r1
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	bfa2      	ittt	ge
 8006ab8:	4623      	movge	r3, r4
 8006aba:	460c      	movge	r4, r1
 8006abc:	461f      	movge	r7, r3
 8006abe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ac2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	6861      	ldr	r1, [r4, #4]
 8006aca:	eb0a 0609 	add.w	r6, sl, r9
 8006ace:	42b3      	cmp	r3, r6
 8006ad0:	b085      	sub	sp, #20
 8006ad2:	bfb8      	it	lt
 8006ad4:	3101      	addlt	r1, #1
 8006ad6:	f7ff fedd 	bl	8006894 <_Balloc>
 8006ada:	b930      	cbnz	r0, 8006aea <__multiply+0x42>
 8006adc:	4602      	mov	r2, r0
 8006ade:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ae2:	4b43      	ldr	r3, [pc, #268]	@ (8006bf0 <__multiply+0x148>)
 8006ae4:	4843      	ldr	r0, [pc, #268]	@ (8006bf4 <__multiply+0x14c>)
 8006ae6:	f000 fc8d 	bl	8007404 <__assert_func>
 8006aea:	f100 0514 	add.w	r5, r0, #20
 8006aee:	462b      	mov	r3, r5
 8006af0:	2200      	movs	r2, #0
 8006af2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006af6:	4543      	cmp	r3, r8
 8006af8:	d321      	bcc.n	8006b3e <__multiply+0x96>
 8006afa:	f107 0114 	add.w	r1, r7, #20
 8006afe:	f104 0214 	add.w	r2, r4, #20
 8006b02:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006b06:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006b0a:	9302      	str	r3, [sp, #8]
 8006b0c:	1b13      	subs	r3, r2, r4
 8006b0e:	3b15      	subs	r3, #21
 8006b10:	f023 0303 	bic.w	r3, r3, #3
 8006b14:	3304      	adds	r3, #4
 8006b16:	f104 0715 	add.w	r7, r4, #21
 8006b1a:	42ba      	cmp	r2, r7
 8006b1c:	bf38      	it	cc
 8006b1e:	2304      	movcc	r3, #4
 8006b20:	9301      	str	r3, [sp, #4]
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	9103      	str	r1, [sp, #12]
 8006b26:	428b      	cmp	r3, r1
 8006b28:	d80c      	bhi.n	8006b44 <__multiply+0x9c>
 8006b2a:	2e00      	cmp	r6, #0
 8006b2c:	dd03      	ble.n	8006b36 <__multiply+0x8e>
 8006b2e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d05a      	beq.n	8006bec <__multiply+0x144>
 8006b36:	6106      	str	r6, [r0, #16]
 8006b38:	b005      	add	sp, #20
 8006b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3e:	f843 2b04 	str.w	r2, [r3], #4
 8006b42:	e7d8      	b.n	8006af6 <__multiply+0x4e>
 8006b44:	f8b1 a000 	ldrh.w	sl, [r1]
 8006b48:	f1ba 0f00 	cmp.w	sl, #0
 8006b4c:	d023      	beq.n	8006b96 <__multiply+0xee>
 8006b4e:	46a9      	mov	r9, r5
 8006b50:	f04f 0c00 	mov.w	ip, #0
 8006b54:	f104 0e14 	add.w	lr, r4, #20
 8006b58:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006b5c:	f8d9 3000 	ldr.w	r3, [r9]
 8006b60:	fa1f fb87 	uxth.w	fp, r7
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	fb0a 330b 	mla	r3, sl, fp, r3
 8006b6a:	4463      	add	r3, ip
 8006b6c:	f8d9 c000 	ldr.w	ip, [r9]
 8006b70:	0c3f      	lsrs	r7, r7, #16
 8006b72:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006b76:	fb0a c707 	mla	r7, sl, r7, ip
 8006b7a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006b84:	4572      	cmp	r2, lr
 8006b86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006b8a:	f849 3b04 	str.w	r3, [r9], #4
 8006b8e:	d8e3      	bhi.n	8006b58 <__multiply+0xb0>
 8006b90:	9b01      	ldr	r3, [sp, #4]
 8006b92:	f845 c003 	str.w	ip, [r5, r3]
 8006b96:	9b03      	ldr	r3, [sp, #12]
 8006b98:	3104      	adds	r1, #4
 8006b9a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006b9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ba2:	d021      	beq.n	8006be8 <__multiply+0x140>
 8006ba4:	46ae      	mov	lr, r5
 8006ba6:	f04f 0a00 	mov.w	sl, #0
 8006baa:	682b      	ldr	r3, [r5, #0]
 8006bac:	f104 0c14 	add.w	ip, r4, #20
 8006bb0:	f8bc b000 	ldrh.w	fp, [ip]
 8006bb4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	fb09 770b 	mla	r7, r9, fp, r7
 8006bbe:	4457      	add	r7, sl
 8006bc0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006bc4:	f84e 3b04 	str.w	r3, [lr], #4
 8006bc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006bcc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006bd0:	f8be 3000 	ldrh.w	r3, [lr]
 8006bd4:	4562      	cmp	r2, ip
 8006bd6:	fb09 330a 	mla	r3, r9, sl, r3
 8006bda:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006bde:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006be2:	d8e5      	bhi.n	8006bb0 <__multiply+0x108>
 8006be4:	9f01      	ldr	r7, [sp, #4]
 8006be6:	51eb      	str	r3, [r5, r7]
 8006be8:	3504      	adds	r5, #4
 8006bea:	e79a      	b.n	8006b22 <__multiply+0x7a>
 8006bec:	3e01      	subs	r6, #1
 8006bee:	e79c      	b.n	8006b2a <__multiply+0x82>
 8006bf0:	0800835e 	.word	0x0800835e
 8006bf4:	0800836f 	.word	0x0800836f

08006bf8 <__pow5mult>:
 8006bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bfc:	4615      	mov	r5, r2
 8006bfe:	f012 0203 	ands.w	r2, r2, #3
 8006c02:	4607      	mov	r7, r0
 8006c04:	460e      	mov	r6, r1
 8006c06:	d007      	beq.n	8006c18 <__pow5mult+0x20>
 8006c08:	4c25      	ldr	r4, [pc, #148]	@ (8006ca0 <__pow5mult+0xa8>)
 8006c0a:	3a01      	subs	r2, #1
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c12:	f7ff fea1 	bl	8006958 <__multadd>
 8006c16:	4606      	mov	r6, r0
 8006c18:	10ad      	asrs	r5, r5, #2
 8006c1a:	d03d      	beq.n	8006c98 <__pow5mult+0xa0>
 8006c1c:	69fc      	ldr	r4, [r7, #28]
 8006c1e:	b97c      	cbnz	r4, 8006c40 <__pow5mult+0x48>
 8006c20:	2010      	movs	r0, #16
 8006c22:	f7ff fd81 	bl	8006728 <malloc>
 8006c26:	4602      	mov	r2, r0
 8006c28:	61f8      	str	r0, [r7, #28]
 8006c2a:	b928      	cbnz	r0, 8006c38 <__pow5mult+0x40>
 8006c2c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006c30:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca4 <__pow5mult+0xac>)
 8006c32:	481d      	ldr	r0, [pc, #116]	@ (8006ca8 <__pow5mult+0xb0>)
 8006c34:	f000 fbe6 	bl	8007404 <__assert_func>
 8006c38:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c3c:	6004      	str	r4, [r0, #0]
 8006c3e:	60c4      	str	r4, [r0, #12]
 8006c40:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006c44:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c48:	b94c      	cbnz	r4, 8006c5e <__pow5mult+0x66>
 8006c4a:	f240 2171 	movw	r1, #625	@ 0x271
 8006c4e:	4638      	mov	r0, r7
 8006c50:	f7ff ff14 	bl	8006a7c <__i2b>
 8006c54:	2300      	movs	r3, #0
 8006c56:	4604      	mov	r4, r0
 8006c58:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c5c:	6003      	str	r3, [r0, #0]
 8006c5e:	f04f 0900 	mov.w	r9, #0
 8006c62:	07eb      	lsls	r3, r5, #31
 8006c64:	d50a      	bpl.n	8006c7c <__pow5mult+0x84>
 8006c66:	4631      	mov	r1, r6
 8006c68:	4622      	mov	r2, r4
 8006c6a:	4638      	mov	r0, r7
 8006c6c:	f7ff ff1c 	bl	8006aa8 <__multiply>
 8006c70:	4680      	mov	r8, r0
 8006c72:	4631      	mov	r1, r6
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff fe4d 	bl	8006914 <_Bfree>
 8006c7a:	4646      	mov	r6, r8
 8006c7c:	106d      	asrs	r5, r5, #1
 8006c7e:	d00b      	beq.n	8006c98 <__pow5mult+0xa0>
 8006c80:	6820      	ldr	r0, [r4, #0]
 8006c82:	b938      	cbnz	r0, 8006c94 <__pow5mult+0x9c>
 8006c84:	4622      	mov	r2, r4
 8006c86:	4621      	mov	r1, r4
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff ff0d 	bl	8006aa8 <__multiply>
 8006c8e:	6020      	str	r0, [r4, #0]
 8006c90:	f8c0 9000 	str.w	r9, [r0]
 8006c94:	4604      	mov	r4, r0
 8006c96:	e7e4      	b.n	8006c62 <__pow5mult+0x6a>
 8006c98:	4630      	mov	r0, r6
 8006c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c9e:	bf00      	nop
 8006ca0:	080083c8 	.word	0x080083c8
 8006ca4:	080082ef 	.word	0x080082ef
 8006ca8:	0800836f 	.word	0x0800836f

08006cac <__lshift>:
 8006cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cb0:	460c      	mov	r4, r1
 8006cb2:	4607      	mov	r7, r0
 8006cb4:	4691      	mov	r9, r2
 8006cb6:	6923      	ldr	r3, [r4, #16]
 8006cb8:	6849      	ldr	r1, [r1, #4]
 8006cba:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006cbe:	68a3      	ldr	r3, [r4, #8]
 8006cc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006cc4:	f108 0601 	add.w	r6, r8, #1
 8006cc8:	42b3      	cmp	r3, r6
 8006cca:	db0b      	blt.n	8006ce4 <__lshift+0x38>
 8006ccc:	4638      	mov	r0, r7
 8006cce:	f7ff fde1 	bl	8006894 <_Balloc>
 8006cd2:	4605      	mov	r5, r0
 8006cd4:	b948      	cbnz	r0, 8006cea <__lshift+0x3e>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006cdc:	4b27      	ldr	r3, [pc, #156]	@ (8006d7c <__lshift+0xd0>)
 8006cde:	4828      	ldr	r0, [pc, #160]	@ (8006d80 <__lshift+0xd4>)
 8006ce0:	f000 fb90 	bl	8007404 <__assert_func>
 8006ce4:	3101      	adds	r1, #1
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	e7ee      	b.n	8006cc8 <__lshift+0x1c>
 8006cea:	2300      	movs	r3, #0
 8006cec:	f100 0114 	add.w	r1, r0, #20
 8006cf0:	f100 0210 	add.w	r2, r0, #16
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	4553      	cmp	r3, sl
 8006cf8:	db33      	blt.n	8006d62 <__lshift+0xb6>
 8006cfa:	6920      	ldr	r0, [r4, #16]
 8006cfc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d00:	f104 0314 	add.w	r3, r4, #20
 8006d04:	f019 091f 	ands.w	r9, r9, #31
 8006d08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d10:	d02b      	beq.n	8006d6a <__lshift+0xbe>
 8006d12:	468a      	mov	sl, r1
 8006d14:	2200      	movs	r2, #0
 8006d16:	f1c9 0e20 	rsb	lr, r9, #32
 8006d1a:	6818      	ldr	r0, [r3, #0]
 8006d1c:	fa00 f009 	lsl.w	r0, r0, r9
 8006d20:	4310      	orrs	r0, r2
 8006d22:	f84a 0b04 	str.w	r0, [sl], #4
 8006d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d2a:	459c      	cmp	ip, r3
 8006d2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d30:	d8f3      	bhi.n	8006d1a <__lshift+0x6e>
 8006d32:	ebac 0304 	sub.w	r3, ip, r4
 8006d36:	3b15      	subs	r3, #21
 8006d38:	f023 0303 	bic.w	r3, r3, #3
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	f104 0015 	add.w	r0, r4, #21
 8006d42:	4584      	cmp	ip, r0
 8006d44:	bf38      	it	cc
 8006d46:	2304      	movcc	r3, #4
 8006d48:	50ca      	str	r2, [r1, r3]
 8006d4a:	b10a      	cbz	r2, 8006d50 <__lshift+0xa4>
 8006d4c:	f108 0602 	add.w	r6, r8, #2
 8006d50:	3e01      	subs	r6, #1
 8006d52:	4638      	mov	r0, r7
 8006d54:	4621      	mov	r1, r4
 8006d56:	612e      	str	r6, [r5, #16]
 8006d58:	f7ff fddc 	bl	8006914 <_Bfree>
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d62:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d66:	3301      	adds	r3, #1
 8006d68:	e7c5      	b.n	8006cf6 <__lshift+0x4a>
 8006d6a:	3904      	subs	r1, #4
 8006d6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d70:	459c      	cmp	ip, r3
 8006d72:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d76:	d8f9      	bhi.n	8006d6c <__lshift+0xc0>
 8006d78:	e7ea      	b.n	8006d50 <__lshift+0xa4>
 8006d7a:	bf00      	nop
 8006d7c:	0800835e 	.word	0x0800835e
 8006d80:	0800836f 	.word	0x0800836f

08006d84 <__mcmp>:
 8006d84:	4603      	mov	r3, r0
 8006d86:	690a      	ldr	r2, [r1, #16]
 8006d88:	6900      	ldr	r0, [r0, #16]
 8006d8a:	b530      	push	{r4, r5, lr}
 8006d8c:	1a80      	subs	r0, r0, r2
 8006d8e:	d10e      	bne.n	8006dae <__mcmp+0x2a>
 8006d90:	3314      	adds	r3, #20
 8006d92:	3114      	adds	r1, #20
 8006d94:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006d98:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006d9c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006da0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006da4:	4295      	cmp	r5, r2
 8006da6:	d003      	beq.n	8006db0 <__mcmp+0x2c>
 8006da8:	d205      	bcs.n	8006db6 <__mcmp+0x32>
 8006daa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dae:	bd30      	pop	{r4, r5, pc}
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	d3f3      	bcc.n	8006d9c <__mcmp+0x18>
 8006db4:	e7fb      	b.n	8006dae <__mcmp+0x2a>
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7f9      	b.n	8006dae <__mcmp+0x2a>
	...

08006dbc <__mdiff>:
 8006dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc0:	4689      	mov	r9, r1
 8006dc2:	4606      	mov	r6, r0
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	4648      	mov	r0, r9
 8006dc8:	4614      	mov	r4, r2
 8006dca:	f7ff ffdb 	bl	8006d84 <__mcmp>
 8006dce:	1e05      	subs	r5, r0, #0
 8006dd0:	d112      	bne.n	8006df8 <__mdiff+0x3c>
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	4630      	mov	r0, r6
 8006dd6:	f7ff fd5d 	bl	8006894 <_Balloc>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	b928      	cbnz	r0, 8006dea <__mdiff+0x2e>
 8006dde:	f240 2137 	movw	r1, #567	@ 0x237
 8006de2:	4b3e      	ldr	r3, [pc, #248]	@ (8006edc <__mdiff+0x120>)
 8006de4:	483e      	ldr	r0, [pc, #248]	@ (8006ee0 <__mdiff+0x124>)
 8006de6:	f000 fb0d 	bl	8007404 <__assert_func>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006df0:	4610      	mov	r0, r2
 8006df2:	b003      	add	sp, #12
 8006df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df8:	bfbc      	itt	lt
 8006dfa:	464b      	movlt	r3, r9
 8006dfc:	46a1      	movlt	r9, r4
 8006dfe:	4630      	mov	r0, r6
 8006e00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006e04:	bfba      	itte	lt
 8006e06:	461c      	movlt	r4, r3
 8006e08:	2501      	movlt	r5, #1
 8006e0a:	2500      	movge	r5, #0
 8006e0c:	f7ff fd42 	bl	8006894 <_Balloc>
 8006e10:	4602      	mov	r2, r0
 8006e12:	b918      	cbnz	r0, 8006e1c <__mdiff+0x60>
 8006e14:	f240 2145 	movw	r1, #581	@ 0x245
 8006e18:	4b30      	ldr	r3, [pc, #192]	@ (8006edc <__mdiff+0x120>)
 8006e1a:	e7e3      	b.n	8006de4 <__mdiff+0x28>
 8006e1c:	f100 0b14 	add.w	fp, r0, #20
 8006e20:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006e24:	f109 0310 	add.w	r3, r9, #16
 8006e28:	60c5      	str	r5, [r0, #12]
 8006e2a:	f04f 0c00 	mov.w	ip, #0
 8006e2e:	f109 0514 	add.w	r5, r9, #20
 8006e32:	46d9      	mov	r9, fp
 8006e34:	6926      	ldr	r6, [r4, #16]
 8006e36:	f104 0e14 	add.w	lr, r4, #20
 8006e3a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006e3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006e4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006e4e:	b281      	uxth	r1, r0
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	fa1f f38a 	uxth.w	r3, sl
 8006e56:	1a5b      	subs	r3, r3, r1
 8006e58:	0c00      	lsrs	r0, r0, #16
 8006e5a:	4463      	add	r3, ip
 8006e5c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006e60:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006e6a:	4576      	cmp	r6, lr
 8006e6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006e70:	f849 3b04 	str.w	r3, [r9], #4
 8006e74:	d8e6      	bhi.n	8006e44 <__mdiff+0x88>
 8006e76:	1b33      	subs	r3, r6, r4
 8006e78:	3b15      	subs	r3, #21
 8006e7a:	f023 0303 	bic.w	r3, r3, #3
 8006e7e:	3415      	adds	r4, #21
 8006e80:	3304      	adds	r3, #4
 8006e82:	42a6      	cmp	r6, r4
 8006e84:	bf38      	it	cc
 8006e86:	2304      	movcc	r3, #4
 8006e88:	441d      	add	r5, r3
 8006e8a:	445b      	add	r3, fp
 8006e8c:	461e      	mov	r6, r3
 8006e8e:	462c      	mov	r4, r5
 8006e90:	4544      	cmp	r4, r8
 8006e92:	d30e      	bcc.n	8006eb2 <__mdiff+0xf6>
 8006e94:	f108 0103 	add.w	r1, r8, #3
 8006e98:	1b49      	subs	r1, r1, r5
 8006e9a:	f021 0103 	bic.w	r1, r1, #3
 8006e9e:	3d03      	subs	r5, #3
 8006ea0:	45a8      	cmp	r8, r5
 8006ea2:	bf38      	it	cc
 8006ea4:	2100      	movcc	r1, #0
 8006ea6:	440b      	add	r3, r1
 8006ea8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006eac:	b199      	cbz	r1, 8006ed6 <__mdiff+0x11a>
 8006eae:	6117      	str	r7, [r2, #16]
 8006eb0:	e79e      	b.n	8006df0 <__mdiff+0x34>
 8006eb2:	46e6      	mov	lr, ip
 8006eb4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006eb8:	fa1f fc81 	uxth.w	ip, r1
 8006ebc:	44f4      	add	ip, lr
 8006ebe:	0c08      	lsrs	r0, r1, #16
 8006ec0:	4471      	add	r1, lr
 8006ec2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006ec6:	b289      	uxth	r1, r1
 8006ec8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ed0:	f846 1b04 	str.w	r1, [r6], #4
 8006ed4:	e7dc      	b.n	8006e90 <__mdiff+0xd4>
 8006ed6:	3f01      	subs	r7, #1
 8006ed8:	e7e6      	b.n	8006ea8 <__mdiff+0xec>
 8006eda:	bf00      	nop
 8006edc:	0800835e 	.word	0x0800835e
 8006ee0:	0800836f 	.word	0x0800836f

08006ee4 <__d2b>:
 8006ee4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006ee8:	2101      	movs	r1, #1
 8006eea:	4690      	mov	r8, r2
 8006eec:	4699      	mov	r9, r3
 8006eee:	9e08      	ldr	r6, [sp, #32]
 8006ef0:	f7ff fcd0 	bl	8006894 <_Balloc>
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	b930      	cbnz	r0, 8006f06 <__d2b+0x22>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	f240 310f 	movw	r1, #783	@ 0x30f
 8006efe:	4b23      	ldr	r3, [pc, #140]	@ (8006f8c <__d2b+0xa8>)
 8006f00:	4823      	ldr	r0, [pc, #140]	@ (8006f90 <__d2b+0xac>)
 8006f02:	f000 fa7f 	bl	8007404 <__assert_func>
 8006f06:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f0e:	b10d      	cbz	r5, 8006f14 <__d2b+0x30>
 8006f10:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f14:	9301      	str	r3, [sp, #4]
 8006f16:	f1b8 0300 	subs.w	r3, r8, #0
 8006f1a:	d024      	beq.n	8006f66 <__d2b+0x82>
 8006f1c:	4668      	mov	r0, sp
 8006f1e:	9300      	str	r3, [sp, #0]
 8006f20:	f7ff fd7f 	bl	8006a22 <__lo0bits>
 8006f24:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f28:	b1d8      	cbz	r0, 8006f62 <__d2b+0x7e>
 8006f2a:	f1c0 0320 	rsb	r3, r0, #32
 8006f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f32:	430b      	orrs	r3, r1
 8006f34:	40c2      	lsrs	r2, r0
 8006f36:	6163      	str	r3, [r4, #20]
 8006f38:	9201      	str	r2, [sp, #4]
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf0c      	ite	eq
 8006f40:	2201      	moveq	r2, #1
 8006f42:	2202      	movne	r2, #2
 8006f44:	61a3      	str	r3, [r4, #24]
 8006f46:	6122      	str	r2, [r4, #16]
 8006f48:	b1ad      	cbz	r5, 8006f76 <__d2b+0x92>
 8006f4a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f4e:	4405      	add	r5, r0
 8006f50:	6035      	str	r5, [r6, #0]
 8006f52:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f58:	6018      	str	r0, [r3, #0]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	b002      	add	sp, #8
 8006f5e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006f62:	6161      	str	r1, [r4, #20]
 8006f64:	e7e9      	b.n	8006f3a <__d2b+0x56>
 8006f66:	a801      	add	r0, sp, #4
 8006f68:	f7ff fd5b 	bl	8006a22 <__lo0bits>
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	6163      	str	r3, [r4, #20]
 8006f72:	3020      	adds	r0, #32
 8006f74:	e7e7      	b.n	8006f46 <__d2b+0x62>
 8006f76:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f7e:	6030      	str	r0, [r6, #0]
 8006f80:	6918      	ldr	r0, [r3, #16]
 8006f82:	f7ff fd2f 	bl	80069e4 <__hi0bits>
 8006f86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f8a:	e7e4      	b.n	8006f56 <__d2b+0x72>
 8006f8c:	0800835e 	.word	0x0800835e
 8006f90:	0800836f 	.word	0x0800836f

08006f94 <__ssputs_r>:
 8006f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f98:	461f      	mov	r7, r3
 8006f9a:	688e      	ldr	r6, [r1, #8]
 8006f9c:	4682      	mov	sl, r0
 8006f9e:	42be      	cmp	r6, r7
 8006fa0:	460c      	mov	r4, r1
 8006fa2:	4690      	mov	r8, r2
 8006fa4:	680b      	ldr	r3, [r1, #0]
 8006fa6:	d82d      	bhi.n	8007004 <__ssputs_r+0x70>
 8006fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fb0:	d026      	beq.n	8007000 <__ssputs_r+0x6c>
 8006fb2:	6965      	ldr	r5, [r4, #20]
 8006fb4:	6909      	ldr	r1, [r1, #16]
 8006fb6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fba:	eba3 0901 	sub.w	r9, r3, r1
 8006fbe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006fc2:	1c7b      	adds	r3, r7, #1
 8006fc4:	444b      	add	r3, r9
 8006fc6:	106d      	asrs	r5, r5, #1
 8006fc8:	429d      	cmp	r5, r3
 8006fca:	bf38      	it	cc
 8006fcc:	461d      	movcc	r5, r3
 8006fce:	0553      	lsls	r3, r2, #21
 8006fd0:	d527      	bpl.n	8007022 <__ssputs_r+0x8e>
 8006fd2:	4629      	mov	r1, r5
 8006fd4:	f7ff fbd2 	bl	800677c <_malloc_r>
 8006fd8:	4606      	mov	r6, r0
 8006fda:	b360      	cbz	r0, 8007036 <__ssputs_r+0xa2>
 8006fdc:	464a      	mov	r2, r9
 8006fde:	6921      	ldr	r1, [r4, #16]
 8006fe0:	f000 fa02 	bl	80073e8 <memcpy>
 8006fe4:	89a3      	ldrh	r3, [r4, #12]
 8006fe6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fee:	81a3      	strh	r3, [r4, #12]
 8006ff0:	6126      	str	r6, [r4, #16]
 8006ff2:	444e      	add	r6, r9
 8006ff4:	6026      	str	r6, [r4, #0]
 8006ff6:	463e      	mov	r6, r7
 8006ff8:	6165      	str	r5, [r4, #20]
 8006ffa:	eba5 0509 	sub.w	r5, r5, r9
 8006ffe:	60a5      	str	r5, [r4, #8]
 8007000:	42be      	cmp	r6, r7
 8007002:	d900      	bls.n	8007006 <__ssputs_r+0x72>
 8007004:	463e      	mov	r6, r7
 8007006:	4632      	mov	r2, r6
 8007008:	4641      	mov	r1, r8
 800700a:	6820      	ldr	r0, [r4, #0]
 800700c:	f000 f9c2 	bl	8007394 <memmove>
 8007010:	2000      	movs	r0, #0
 8007012:	68a3      	ldr	r3, [r4, #8]
 8007014:	1b9b      	subs	r3, r3, r6
 8007016:	60a3      	str	r3, [r4, #8]
 8007018:	6823      	ldr	r3, [r4, #0]
 800701a:	4433      	add	r3, r6
 800701c:	6023      	str	r3, [r4, #0]
 800701e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007022:	462a      	mov	r2, r5
 8007024:	f000 fa32 	bl	800748c <_realloc_r>
 8007028:	4606      	mov	r6, r0
 800702a:	2800      	cmp	r0, #0
 800702c:	d1e0      	bne.n	8006ff0 <__ssputs_r+0x5c>
 800702e:	4650      	mov	r0, sl
 8007030:	6921      	ldr	r1, [r4, #16]
 8007032:	f7ff fb31 	bl	8006698 <_free_r>
 8007036:	230c      	movs	r3, #12
 8007038:	f8ca 3000 	str.w	r3, [sl]
 800703c:	89a3      	ldrh	r3, [r4, #12]
 800703e:	f04f 30ff 	mov.w	r0, #4294967295
 8007042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007046:	81a3      	strh	r3, [r4, #12]
 8007048:	e7e9      	b.n	800701e <__ssputs_r+0x8a>
	...

0800704c <_svfiprintf_r>:
 800704c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007050:	4698      	mov	r8, r3
 8007052:	898b      	ldrh	r3, [r1, #12]
 8007054:	4607      	mov	r7, r0
 8007056:	061b      	lsls	r3, r3, #24
 8007058:	460d      	mov	r5, r1
 800705a:	4614      	mov	r4, r2
 800705c:	b09d      	sub	sp, #116	@ 0x74
 800705e:	d510      	bpl.n	8007082 <_svfiprintf_r+0x36>
 8007060:	690b      	ldr	r3, [r1, #16]
 8007062:	b973      	cbnz	r3, 8007082 <_svfiprintf_r+0x36>
 8007064:	2140      	movs	r1, #64	@ 0x40
 8007066:	f7ff fb89 	bl	800677c <_malloc_r>
 800706a:	6028      	str	r0, [r5, #0]
 800706c:	6128      	str	r0, [r5, #16]
 800706e:	b930      	cbnz	r0, 800707e <_svfiprintf_r+0x32>
 8007070:	230c      	movs	r3, #12
 8007072:	603b      	str	r3, [r7, #0]
 8007074:	f04f 30ff 	mov.w	r0, #4294967295
 8007078:	b01d      	add	sp, #116	@ 0x74
 800707a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	2340      	movs	r3, #64	@ 0x40
 8007080:	616b      	str	r3, [r5, #20]
 8007082:	2300      	movs	r3, #0
 8007084:	9309      	str	r3, [sp, #36]	@ 0x24
 8007086:	2320      	movs	r3, #32
 8007088:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800708c:	2330      	movs	r3, #48	@ 0x30
 800708e:	f04f 0901 	mov.w	r9, #1
 8007092:	f8cd 800c 	str.w	r8, [sp, #12]
 8007096:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007230 <_svfiprintf_r+0x1e4>
 800709a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800709e:	4623      	mov	r3, r4
 80070a0:	469a      	mov	sl, r3
 80070a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070a6:	b10a      	cbz	r2, 80070ac <_svfiprintf_r+0x60>
 80070a8:	2a25      	cmp	r2, #37	@ 0x25
 80070aa:	d1f9      	bne.n	80070a0 <_svfiprintf_r+0x54>
 80070ac:	ebba 0b04 	subs.w	fp, sl, r4
 80070b0:	d00b      	beq.n	80070ca <_svfiprintf_r+0x7e>
 80070b2:	465b      	mov	r3, fp
 80070b4:	4622      	mov	r2, r4
 80070b6:	4629      	mov	r1, r5
 80070b8:	4638      	mov	r0, r7
 80070ba:	f7ff ff6b 	bl	8006f94 <__ssputs_r>
 80070be:	3001      	adds	r0, #1
 80070c0:	f000 80a7 	beq.w	8007212 <_svfiprintf_r+0x1c6>
 80070c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070c6:	445a      	add	r2, fp
 80070c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80070ca:	f89a 3000 	ldrb.w	r3, [sl]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	f000 809f 	beq.w	8007212 <_svfiprintf_r+0x1c6>
 80070d4:	2300      	movs	r3, #0
 80070d6:	f04f 32ff 	mov.w	r2, #4294967295
 80070da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070de:	f10a 0a01 	add.w	sl, sl, #1
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	9307      	str	r3, [sp, #28]
 80070e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80070ec:	4654      	mov	r4, sl
 80070ee:	2205      	movs	r2, #5
 80070f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070f4:	484e      	ldr	r0, [pc, #312]	@ (8007230 <_svfiprintf_r+0x1e4>)
 80070f6:	f7fe fc6e 	bl	80059d6 <memchr>
 80070fa:	9a04      	ldr	r2, [sp, #16]
 80070fc:	b9d8      	cbnz	r0, 8007136 <_svfiprintf_r+0xea>
 80070fe:	06d0      	lsls	r0, r2, #27
 8007100:	bf44      	itt	mi
 8007102:	2320      	movmi	r3, #32
 8007104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007108:	0711      	lsls	r1, r2, #28
 800710a:	bf44      	itt	mi
 800710c:	232b      	movmi	r3, #43	@ 0x2b
 800710e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007112:	f89a 3000 	ldrb.w	r3, [sl]
 8007116:	2b2a      	cmp	r3, #42	@ 0x2a
 8007118:	d015      	beq.n	8007146 <_svfiprintf_r+0xfa>
 800711a:	4654      	mov	r4, sl
 800711c:	2000      	movs	r0, #0
 800711e:	f04f 0c0a 	mov.w	ip, #10
 8007122:	9a07      	ldr	r2, [sp, #28]
 8007124:	4621      	mov	r1, r4
 8007126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800712a:	3b30      	subs	r3, #48	@ 0x30
 800712c:	2b09      	cmp	r3, #9
 800712e:	d94b      	bls.n	80071c8 <_svfiprintf_r+0x17c>
 8007130:	b1b0      	cbz	r0, 8007160 <_svfiprintf_r+0x114>
 8007132:	9207      	str	r2, [sp, #28]
 8007134:	e014      	b.n	8007160 <_svfiprintf_r+0x114>
 8007136:	eba0 0308 	sub.w	r3, r0, r8
 800713a:	fa09 f303 	lsl.w	r3, r9, r3
 800713e:	4313      	orrs	r3, r2
 8007140:	46a2      	mov	sl, r4
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	e7d2      	b.n	80070ec <_svfiprintf_r+0xa0>
 8007146:	9b03      	ldr	r3, [sp, #12]
 8007148:	1d19      	adds	r1, r3, #4
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	9103      	str	r1, [sp, #12]
 800714e:	2b00      	cmp	r3, #0
 8007150:	bfbb      	ittet	lt
 8007152:	425b      	neglt	r3, r3
 8007154:	f042 0202 	orrlt.w	r2, r2, #2
 8007158:	9307      	strge	r3, [sp, #28]
 800715a:	9307      	strlt	r3, [sp, #28]
 800715c:	bfb8      	it	lt
 800715e:	9204      	strlt	r2, [sp, #16]
 8007160:	7823      	ldrb	r3, [r4, #0]
 8007162:	2b2e      	cmp	r3, #46	@ 0x2e
 8007164:	d10a      	bne.n	800717c <_svfiprintf_r+0x130>
 8007166:	7863      	ldrb	r3, [r4, #1]
 8007168:	2b2a      	cmp	r3, #42	@ 0x2a
 800716a:	d132      	bne.n	80071d2 <_svfiprintf_r+0x186>
 800716c:	9b03      	ldr	r3, [sp, #12]
 800716e:	3402      	adds	r4, #2
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	9203      	str	r2, [sp, #12]
 8007176:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007234 <_svfiprintf_r+0x1e8>
 8007180:	2203      	movs	r2, #3
 8007182:	4650      	mov	r0, sl
 8007184:	7821      	ldrb	r1, [r4, #0]
 8007186:	f7fe fc26 	bl	80059d6 <memchr>
 800718a:	b138      	cbz	r0, 800719c <_svfiprintf_r+0x150>
 800718c:	2240      	movs	r2, #64	@ 0x40
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	eba0 000a 	sub.w	r0, r0, sl
 8007194:	4082      	lsls	r2, r0
 8007196:	4313      	orrs	r3, r2
 8007198:	3401      	adds	r4, #1
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071a0:	2206      	movs	r2, #6
 80071a2:	4825      	ldr	r0, [pc, #148]	@ (8007238 <_svfiprintf_r+0x1ec>)
 80071a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071a8:	f7fe fc15 	bl	80059d6 <memchr>
 80071ac:	2800      	cmp	r0, #0
 80071ae:	d036      	beq.n	800721e <_svfiprintf_r+0x1d2>
 80071b0:	4b22      	ldr	r3, [pc, #136]	@ (800723c <_svfiprintf_r+0x1f0>)
 80071b2:	bb1b      	cbnz	r3, 80071fc <_svfiprintf_r+0x1b0>
 80071b4:	9b03      	ldr	r3, [sp, #12]
 80071b6:	3307      	adds	r3, #7
 80071b8:	f023 0307 	bic.w	r3, r3, #7
 80071bc:	3308      	adds	r3, #8
 80071be:	9303      	str	r3, [sp, #12]
 80071c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c2:	4433      	add	r3, r6
 80071c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80071c6:	e76a      	b.n	800709e <_svfiprintf_r+0x52>
 80071c8:	460c      	mov	r4, r1
 80071ca:	2001      	movs	r0, #1
 80071cc:	fb0c 3202 	mla	r2, ip, r2, r3
 80071d0:	e7a8      	b.n	8007124 <_svfiprintf_r+0xd8>
 80071d2:	2300      	movs	r3, #0
 80071d4:	f04f 0c0a 	mov.w	ip, #10
 80071d8:	4619      	mov	r1, r3
 80071da:	3401      	adds	r4, #1
 80071dc:	9305      	str	r3, [sp, #20]
 80071de:	4620      	mov	r0, r4
 80071e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071e4:	3a30      	subs	r2, #48	@ 0x30
 80071e6:	2a09      	cmp	r2, #9
 80071e8:	d903      	bls.n	80071f2 <_svfiprintf_r+0x1a6>
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d0c6      	beq.n	800717c <_svfiprintf_r+0x130>
 80071ee:	9105      	str	r1, [sp, #20]
 80071f0:	e7c4      	b.n	800717c <_svfiprintf_r+0x130>
 80071f2:	4604      	mov	r4, r0
 80071f4:	2301      	movs	r3, #1
 80071f6:	fb0c 2101 	mla	r1, ip, r1, r2
 80071fa:	e7f0      	b.n	80071de <_svfiprintf_r+0x192>
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	462a      	mov	r2, r5
 8007202:	4638      	mov	r0, r7
 8007204:	4b0e      	ldr	r3, [pc, #56]	@ (8007240 <_svfiprintf_r+0x1f4>)
 8007206:	a904      	add	r1, sp, #16
 8007208:	f7fd fe4e 	bl	8004ea8 <_printf_float>
 800720c:	1c42      	adds	r2, r0, #1
 800720e:	4606      	mov	r6, r0
 8007210:	d1d6      	bne.n	80071c0 <_svfiprintf_r+0x174>
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	065b      	lsls	r3, r3, #25
 8007216:	f53f af2d 	bmi.w	8007074 <_svfiprintf_r+0x28>
 800721a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800721c:	e72c      	b.n	8007078 <_svfiprintf_r+0x2c>
 800721e:	ab03      	add	r3, sp, #12
 8007220:	9300      	str	r3, [sp, #0]
 8007222:	462a      	mov	r2, r5
 8007224:	4638      	mov	r0, r7
 8007226:	4b06      	ldr	r3, [pc, #24]	@ (8007240 <_svfiprintf_r+0x1f4>)
 8007228:	a904      	add	r1, sp, #16
 800722a:	f7fe f8db 	bl	80053e4 <_printf_i>
 800722e:	e7ed      	b.n	800720c <_svfiprintf_r+0x1c0>
 8007230:	080084c8 	.word	0x080084c8
 8007234:	080084ce 	.word	0x080084ce
 8007238:	080084d2 	.word	0x080084d2
 800723c:	08004ea9 	.word	0x08004ea9
 8007240:	08006f95 	.word	0x08006f95

08007244 <__sflush_r>:
 8007244:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800724a:	0716      	lsls	r6, r2, #28
 800724c:	4605      	mov	r5, r0
 800724e:	460c      	mov	r4, r1
 8007250:	d454      	bmi.n	80072fc <__sflush_r+0xb8>
 8007252:	684b      	ldr	r3, [r1, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	dc02      	bgt.n	800725e <__sflush_r+0x1a>
 8007258:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800725a:	2b00      	cmp	r3, #0
 800725c:	dd48      	ble.n	80072f0 <__sflush_r+0xac>
 800725e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007260:	2e00      	cmp	r6, #0
 8007262:	d045      	beq.n	80072f0 <__sflush_r+0xac>
 8007264:	2300      	movs	r3, #0
 8007266:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800726a:	682f      	ldr	r7, [r5, #0]
 800726c:	6a21      	ldr	r1, [r4, #32]
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	d030      	beq.n	80072d4 <__sflush_r+0x90>
 8007272:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	0759      	lsls	r1, r3, #29
 8007278:	d505      	bpl.n	8007286 <__sflush_r+0x42>
 800727a:	6863      	ldr	r3, [r4, #4]
 800727c:	1ad2      	subs	r2, r2, r3
 800727e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007280:	b10b      	cbz	r3, 8007286 <__sflush_r+0x42>
 8007282:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007284:	1ad2      	subs	r2, r2, r3
 8007286:	2300      	movs	r3, #0
 8007288:	4628      	mov	r0, r5
 800728a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800728c:	6a21      	ldr	r1, [r4, #32]
 800728e:	47b0      	blx	r6
 8007290:	1c43      	adds	r3, r0, #1
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	d106      	bne.n	80072a4 <__sflush_r+0x60>
 8007296:	6829      	ldr	r1, [r5, #0]
 8007298:	291d      	cmp	r1, #29
 800729a:	d82b      	bhi.n	80072f4 <__sflush_r+0xb0>
 800729c:	4a28      	ldr	r2, [pc, #160]	@ (8007340 <__sflush_r+0xfc>)
 800729e:	410a      	asrs	r2, r1
 80072a0:	07d6      	lsls	r6, r2, #31
 80072a2:	d427      	bmi.n	80072f4 <__sflush_r+0xb0>
 80072a4:	2200      	movs	r2, #0
 80072a6:	6062      	str	r2, [r4, #4]
 80072a8:	6922      	ldr	r2, [r4, #16]
 80072aa:	04d9      	lsls	r1, r3, #19
 80072ac:	6022      	str	r2, [r4, #0]
 80072ae:	d504      	bpl.n	80072ba <__sflush_r+0x76>
 80072b0:	1c42      	adds	r2, r0, #1
 80072b2:	d101      	bne.n	80072b8 <__sflush_r+0x74>
 80072b4:	682b      	ldr	r3, [r5, #0]
 80072b6:	b903      	cbnz	r3, 80072ba <__sflush_r+0x76>
 80072b8:	6560      	str	r0, [r4, #84]	@ 0x54
 80072ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80072bc:	602f      	str	r7, [r5, #0]
 80072be:	b1b9      	cbz	r1, 80072f0 <__sflush_r+0xac>
 80072c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80072c4:	4299      	cmp	r1, r3
 80072c6:	d002      	beq.n	80072ce <__sflush_r+0x8a>
 80072c8:	4628      	mov	r0, r5
 80072ca:	f7ff f9e5 	bl	8006698 <_free_r>
 80072ce:	2300      	movs	r3, #0
 80072d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80072d2:	e00d      	b.n	80072f0 <__sflush_r+0xac>
 80072d4:	2301      	movs	r3, #1
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b0      	blx	r6
 80072da:	4602      	mov	r2, r0
 80072dc:	1c50      	adds	r0, r2, #1
 80072de:	d1c9      	bne.n	8007274 <__sflush_r+0x30>
 80072e0:	682b      	ldr	r3, [r5, #0]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d0c6      	beq.n	8007274 <__sflush_r+0x30>
 80072e6:	2b1d      	cmp	r3, #29
 80072e8:	d001      	beq.n	80072ee <__sflush_r+0xaa>
 80072ea:	2b16      	cmp	r3, #22
 80072ec:	d11d      	bne.n	800732a <__sflush_r+0xe6>
 80072ee:	602f      	str	r7, [r5, #0]
 80072f0:	2000      	movs	r0, #0
 80072f2:	e021      	b.n	8007338 <__sflush_r+0xf4>
 80072f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072f8:	b21b      	sxth	r3, r3
 80072fa:	e01a      	b.n	8007332 <__sflush_r+0xee>
 80072fc:	690f      	ldr	r7, [r1, #16]
 80072fe:	2f00      	cmp	r7, #0
 8007300:	d0f6      	beq.n	80072f0 <__sflush_r+0xac>
 8007302:	0793      	lsls	r3, r2, #30
 8007304:	bf18      	it	ne
 8007306:	2300      	movne	r3, #0
 8007308:	680e      	ldr	r6, [r1, #0]
 800730a:	bf08      	it	eq
 800730c:	694b      	ldreq	r3, [r1, #20]
 800730e:	1bf6      	subs	r6, r6, r7
 8007310:	600f      	str	r7, [r1, #0]
 8007312:	608b      	str	r3, [r1, #8]
 8007314:	2e00      	cmp	r6, #0
 8007316:	ddeb      	ble.n	80072f0 <__sflush_r+0xac>
 8007318:	4633      	mov	r3, r6
 800731a:	463a      	mov	r2, r7
 800731c:	4628      	mov	r0, r5
 800731e:	6a21      	ldr	r1, [r4, #32]
 8007320:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007324:	47e0      	blx	ip
 8007326:	2800      	cmp	r0, #0
 8007328:	dc07      	bgt.n	800733a <__sflush_r+0xf6>
 800732a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007332:	f04f 30ff 	mov.w	r0, #4294967295
 8007336:	81a3      	strh	r3, [r4, #12]
 8007338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800733a:	4407      	add	r7, r0
 800733c:	1a36      	subs	r6, r6, r0
 800733e:	e7e9      	b.n	8007314 <__sflush_r+0xd0>
 8007340:	dfbffffe 	.word	0xdfbffffe

08007344 <_fflush_r>:
 8007344:	b538      	push	{r3, r4, r5, lr}
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	4605      	mov	r5, r0
 800734a:	460c      	mov	r4, r1
 800734c:	b913      	cbnz	r3, 8007354 <_fflush_r+0x10>
 800734e:	2500      	movs	r5, #0
 8007350:	4628      	mov	r0, r5
 8007352:	bd38      	pop	{r3, r4, r5, pc}
 8007354:	b118      	cbz	r0, 800735e <_fflush_r+0x1a>
 8007356:	6a03      	ldr	r3, [r0, #32]
 8007358:	b90b      	cbnz	r3, 800735e <_fflush_r+0x1a>
 800735a:	f7fe f9ef 	bl	800573c <__sinit>
 800735e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0f3      	beq.n	800734e <_fflush_r+0xa>
 8007366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007368:	07d0      	lsls	r0, r2, #31
 800736a:	d404      	bmi.n	8007376 <_fflush_r+0x32>
 800736c:	0599      	lsls	r1, r3, #22
 800736e:	d402      	bmi.n	8007376 <_fflush_r+0x32>
 8007370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007372:	f7fe fb2e 	bl	80059d2 <__retarget_lock_acquire_recursive>
 8007376:	4628      	mov	r0, r5
 8007378:	4621      	mov	r1, r4
 800737a:	f7ff ff63 	bl	8007244 <__sflush_r>
 800737e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007380:	4605      	mov	r5, r0
 8007382:	07da      	lsls	r2, r3, #31
 8007384:	d4e4      	bmi.n	8007350 <_fflush_r+0xc>
 8007386:	89a3      	ldrh	r3, [r4, #12]
 8007388:	059b      	lsls	r3, r3, #22
 800738a:	d4e1      	bmi.n	8007350 <_fflush_r+0xc>
 800738c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800738e:	f7fe fb21 	bl	80059d4 <__retarget_lock_release_recursive>
 8007392:	e7dd      	b.n	8007350 <_fflush_r+0xc>

08007394 <memmove>:
 8007394:	4288      	cmp	r0, r1
 8007396:	b510      	push	{r4, lr}
 8007398:	eb01 0402 	add.w	r4, r1, r2
 800739c:	d902      	bls.n	80073a4 <memmove+0x10>
 800739e:	4284      	cmp	r4, r0
 80073a0:	4623      	mov	r3, r4
 80073a2:	d807      	bhi.n	80073b4 <memmove+0x20>
 80073a4:	1e43      	subs	r3, r0, #1
 80073a6:	42a1      	cmp	r1, r4
 80073a8:	d008      	beq.n	80073bc <memmove+0x28>
 80073aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073b2:	e7f8      	b.n	80073a6 <memmove+0x12>
 80073b4:	4601      	mov	r1, r0
 80073b6:	4402      	add	r2, r0
 80073b8:	428a      	cmp	r2, r1
 80073ba:	d100      	bne.n	80073be <memmove+0x2a>
 80073bc:	bd10      	pop	{r4, pc}
 80073be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073c6:	e7f7      	b.n	80073b8 <memmove+0x24>

080073c8 <_sbrk_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	2300      	movs	r3, #0
 80073cc:	4d05      	ldr	r5, [pc, #20]	@ (80073e4 <_sbrk_r+0x1c>)
 80073ce:	4604      	mov	r4, r0
 80073d0:	4608      	mov	r0, r1
 80073d2:	602b      	str	r3, [r5, #0]
 80073d4:	f7fa fd66 	bl	8001ea4 <_sbrk>
 80073d8:	1c43      	adds	r3, r0, #1
 80073da:	d102      	bne.n	80073e2 <_sbrk_r+0x1a>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	b103      	cbz	r3, 80073e2 <_sbrk_r+0x1a>
 80073e0:	6023      	str	r3, [r4, #0]
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	20000884 	.word	0x20000884

080073e8 <memcpy>:
 80073e8:	440a      	add	r2, r1
 80073ea:	4291      	cmp	r1, r2
 80073ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80073f0:	d100      	bne.n	80073f4 <memcpy+0xc>
 80073f2:	4770      	bx	lr
 80073f4:	b510      	push	{r4, lr}
 80073f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073fa:	4291      	cmp	r1, r2
 80073fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007400:	d1f9      	bne.n	80073f6 <memcpy+0xe>
 8007402:	bd10      	pop	{r4, pc}

08007404 <__assert_func>:
 8007404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007406:	4614      	mov	r4, r2
 8007408:	461a      	mov	r2, r3
 800740a:	4b09      	ldr	r3, [pc, #36]	@ (8007430 <__assert_func+0x2c>)
 800740c:	4605      	mov	r5, r0
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	68d8      	ldr	r0, [r3, #12]
 8007412:	b954      	cbnz	r4, 800742a <__assert_func+0x26>
 8007414:	4b07      	ldr	r3, [pc, #28]	@ (8007434 <__assert_func+0x30>)
 8007416:	461c      	mov	r4, r3
 8007418:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800741c:	9100      	str	r1, [sp, #0]
 800741e:	462b      	mov	r3, r5
 8007420:	4905      	ldr	r1, [pc, #20]	@ (8007438 <__assert_func+0x34>)
 8007422:	f000 f86f 	bl	8007504 <fiprintf>
 8007426:	f000 f87f 	bl	8007528 <abort>
 800742a:	4b04      	ldr	r3, [pc, #16]	@ (800743c <__assert_func+0x38>)
 800742c:	e7f4      	b.n	8007418 <__assert_func+0x14>
 800742e:	bf00      	nop
 8007430:	20000020 	.word	0x20000020
 8007434:	0800851e 	.word	0x0800851e
 8007438:	080084f0 	.word	0x080084f0
 800743c:	080084e3 	.word	0x080084e3

08007440 <_calloc_r>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	fba1 5402 	umull	r5, r4, r1, r2
 8007446:	b93c      	cbnz	r4, 8007458 <_calloc_r+0x18>
 8007448:	4629      	mov	r1, r5
 800744a:	f7ff f997 	bl	800677c <_malloc_r>
 800744e:	4606      	mov	r6, r0
 8007450:	b928      	cbnz	r0, 800745e <_calloc_r+0x1e>
 8007452:	2600      	movs	r6, #0
 8007454:	4630      	mov	r0, r6
 8007456:	bd70      	pop	{r4, r5, r6, pc}
 8007458:	220c      	movs	r2, #12
 800745a:	6002      	str	r2, [r0, #0]
 800745c:	e7f9      	b.n	8007452 <_calloc_r+0x12>
 800745e:	462a      	mov	r2, r5
 8007460:	4621      	mov	r1, r4
 8007462:	f7fe fa38 	bl	80058d6 <memset>
 8007466:	e7f5      	b.n	8007454 <_calloc_r+0x14>

08007468 <__ascii_mbtowc>:
 8007468:	b082      	sub	sp, #8
 800746a:	b901      	cbnz	r1, 800746e <__ascii_mbtowc+0x6>
 800746c:	a901      	add	r1, sp, #4
 800746e:	b142      	cbz	r2, 8007482 <__ascii_mbtowc+0x1a>
 8007470:	b14b      	cbz	r3, 8007486 <__ascii_mbtowc+0x1e>
 8007472:	7813      	ldrb	r3, [r2, #0]
 8007474:	600b      	str	r3, [r1, #0]
 8007476:	7812      	ldrb	r2, [r2, #0]
 8007478:	1e10      	subs	r0, r2, #0
 800747a:	bf18      	it	ne
 800747c:	2001      	movne	r0, #1
 800747e:	b002      	add	sp, #8
 8007480:	4770      	bx	lr
 8007482:	4610      	mov	r0, r2
 8007484:	e7fb      	b.n	800747e <__ascii_mbtowc+0x16>
 8007486:	f06f 0001 	mvn.w	r0, #1
 800748a:	e7f8      	b.n	800747e <__ascii_mbtowc+0x16>

0800748c <_realloc_r>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	4680      	mov	r8, r0
 8007492:	4615      	mov	r5, r2
 8007494:	460c      	mov	r4, r1
 8007496:	b921      	cbnz	r1, 80074a2 <_realloc_r+0x16>
 8007498:	4611      	mov	r1, r2
 800749a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800749e:	f7ff b96d 	b.w	800677c <_malloc_r>
 80074a2:	b92a      	cbnz	r2, 80074b0 <_realloc_r+0x24>
 80074a4:	f7ff f8f8 	bl	8006698 <_free_r>
 80074a8:	2400      	movs	r4, #0
 80074aa:	4620      	mov	r0, r4
 80074ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074b0:	f000 f841 	bl	8007536 <_malloc_usable_size_r>
 80074b4:	4285      	cmp	r5, r0
 80074b6:	4606      	mov	r6, r0
 80074b8:	d802      	bhi.n	80074c0 <_realloc_r+0x34>
 80074ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074be:	d8f4      	bhi.n	80074aa <_realloc_r+0x1e>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff f95a 	bl	800677c <_malloc_r>
 80074c8:	4607      	mov	r7, r0
 80074ca:	2800      	cmp	r0, #0
 80074cc:	d0ec      	beq.n	80074a8 <_realloc_r+0x1c>
 80074ce:	42b5      	cmp	r5, r6
 80074d0:	462a      	mov	r2, r5
 80074d2:	4621      	mov	r1, r4
 80074d4:	bf28      	it	cs
 80074d6:	4632      	movcs	r2, r6
 80074d8:	f7ff ff86 	bl	80073e8 <memcpy>
 80074dc:	4621      	mov	r1, r4
 80074de:	4640      	mov	r0, r8
 80074e0:	f7ff f8da 	bl	8006698 <_free_r>
 80074e4:	463c      	mov	r4, r7
 80074e6:	e7e0      	b.n	80074aa <_realloc_r+0x1e>

080074e8 <__ascii_wctomb>:
 80074e8:	4603      	mov	r3, r0
 80074ea:	4608      	mov	r0, r1
 80074ec:	b141      	cbz	r1, 8007500 <__ascii_wctomb+0x18>
 80074ee:	2aff      	cmp	r2, #255	@ 0xff
 80074f0:	d904      	bls.n	80074fc <__ascii_wctomb+0x14>
 80074f2:	228a      	movs	r2, #138	@ 0x8a
 80074f4:	f04f 30ff 	mov.w	r0, #4294967295
 80074f8:	601a      	str	r2, [r3, #0]
 80074fa:	4770      	bx	lr
 80074fc:	2001      	movs	r0, #1
 80074fe:	700a      	strb	r2, [r1, #0]
 8007500:	4770      	bx	lr
	...

08007504 <fiprintf>:
 8007504:	b40e      	push	{r1, r2, r3}
 8007506:	b503      	push	{r0, r1, lr}
 8007508:	4601      	mov	r1, r0
 800750a:	ab03      	add	r3, sp, #12
 800750c:	4805      	ldr	r0, [pc, #20]	@ (8007524 <fiprintf+0x20>)
 800750e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007512:	6800      	ldr	r0, [r0, #0]
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f000 f83d 	bl	8007594 <_vfiprintf_r>
 800751a:	b002      	add	sp, #8
 800751c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007520:	b003      	add	sp, #12
 8007522:	4770      	bx	lr
 8007524:	20000020 	.word	0x20000020

08007528 <abort>:
 8007528:	2006      	movs	r0, #6
 800752a:	b508      	push	{r3, lr}
 800752c:	f000 fa06 	bl	800793c <raise>
 8007530:	2001      	movs	r0, #1
 8007532:	f7fa fc42 	bl	8001dba <_exit>

08007536 <_malloc_usable_size_r>:
 8007536:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800753a:	1f18      	subs	r0, r3, #4
 800753c:	2b00      	cmp	r3, #0
 800753e:	bfbc      	itt	lt
 8007540:	580b      	ldrlt	r3, [r1, r0]
 8007542:	18c0      	addlt	r0, r0, r3
 8007544:	4770      	bx	lr

08007546 <__sfputc_r>:
 8007546:	6893      	ldr	r3, [r2, #8]
 8007548:	b410      	push	{r4}
 800754a:	3b01      	subs	r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	6093      	str	r3, [r2, #8]
 8007550:	da07      	bge.n	8007562 <__sfputc_r+0x1c>
 8007552:	6994      	ldr	r4, [r2, #24]
 8007554:	42a3      	cmp	r3, r4
 8007556:	db01      	blt.n	800755c <__sfputc_r+0x16>
 8007558:	290a      	cmp	r1, #10
 800755a:	d102      	bne.n	8007562 <__sfputc_r+0x1c>
 800755c:	bc10      	pop	{r4}
 800755e:	f000 b931 	b.w	80077c4 <__swbuf_r>
 8007562:	6813      	ldr	r3, [r2, #0]
 8007564:	1c58      	adds	r0, r3, #1
 8007566:	6010      	str	r0, [r2, #0]
 8007568:	7019      	strb	r1, [r3, #0]
 800756a:	4608      	mov	r0, r1
 800756c:	bc10      	pop	{r4}
 800756e:	4770      	bx	lr

08007570 <__sfputs_r>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	4606      	mov	r6, r0
 8007574:	460f      	mov	r7, r1
 8007576:	4614      	mov	r4, r2
 8007578:	18d5      	adds	r5, r2, r3
 800757a:	42ac      	cmp	r4, r5
 800757c:	d101      	bne.n	8007582 <__sfputs_r+0x12>
 800757e:	2000      	movs	r0, #0
 8007580:	e007      	b.n	8007592 <__sfputs_r+0x22>
 8007582:	463a      	mov	r2, r7
 8007584:	4630      	mov	r0, r6
 8007586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800758a:	f7ff ffdc 	bl	8007546 <__sfputc_r>
 800758e:	1c43      	adds	r3, r0, #1
 8007590:	d1f3      	bne.n	800757a <__sfputs_r+0xa>
 8007592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007594 <_vfiprintf_r>:
 8007594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007598:	460d      	mov	r5, r1
 800759a:	4614      	mov	r4, r2
 800759c:	4698      	mov	r8, r3
 800759e:	4606      	mov	r6, r0
 80075a0:	b09d      	sub	sp, #116	@ 0x74
 80075a2:	b118      	cbz	r0, 80075ac <_vfiprintf_r+0x18>
 80075a4:	6a03      	ldr	r3, [r0, #32]
 80075a6:	b90b      	cbnz	r3, 80075ac <_vfiprintf_r+0x18>
 80075a8:	f7fe f8c8 	bl	800573c <__sinit>
 80075ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ae:	07d9      	lsls	r1, r3, #31
 80075b0:	d405      	bmi.n	80075be <_vfiprintf_r+0x2a>
 80075b2:	89ab      	ldrh	r3, [r5, #12]
 80075b4:	059a      	lsls	r2, r3, #22
 80075b6:	d402      	bmi.n	80075be <_vfiprintf_r+0x2a>
 80075b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ba:	f7fe fa0a 	bl	80059d2 <__retarget_lock_acquire_recursive>
 80075be:	89ab      	ldrh	r3, [r5, #12]
 80075c0:	071b      	lsls	r3, r3, #28
 80075c2:	d501      	bpl.n	80075c8 <_vfiprintf_r+0x34>
 80075c4:	692b      	ldr	r3, [r5, #16]
 80075c6:	b99b      	cbnz	r3, 80075f0 <_vfiprintf_r+0x5c>
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 f938 	bl	8007840 <__swsetup_r>
 80075d0:	b170      	cbz	r0, 80075f0 <_vfiprintf_r+0x5c>
 80075d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075d4:	07dc      	lsls	r4, r3, #31
 80075d6:	d504      	bpl.n	80075e2 <_vfiprintf_r+0x4e>
 80075d8:	f04f 30ff 	mov.w	r0, #4294967295
 80075dc:	b01d      	add	sp, #116	@ 0x74
 80075de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e2:	89ab      	ldrh	r3, [r5, #12]
 80075e4:	0598      	lsls	r0, r3, #22
 80075e6:	d4f7      	bmi.n	80075d8 <_vfiprintf_r+0x44>
 80075e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075ea:	f7fe f9f3 	bl	80059d4 <__retarget_lock_release_recursive>
 80075ee:	e7f3      	b.n	80075d8 <_vfiprintf_r+0x44>
 80075f0:	2300      	movs	r3, #0
 80075f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80075f4:	2320      	movs	r3, #32
 80075f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80075fa:	2330      	movs	r3, #48	@ 0x30
 80075fc:	f04f 0901 	mov.w	r9, #1
 8007600:	f8cd 800c 	str.w	r8, [sp, #12]
 8007604:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80077b0 <_vfiprintf_r+0x21c>
 8007608:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800760c:	4623      	mov	r3, r4
 800760e:	469a      	mov	sl, r3
 8007610:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007614:	b10a      	cbz	r2, 800761a <_vfiprintf_r+0x86>
 8007616:	2a25      	cmp	r2, #37	@ 0x25
 8007618:	d1f9      	bne.n	800760e <_vfiprintf_r+0x7a>
 800761a:	ebba 0b04 	subs.w	fp, sl, r4
 800761e:	d00b      	beq.n	8007638 <_vfiprintf_r+0xa4>
 8007620:	465b      	mov	r3, fp
 8007622:	4622      	mov	r2, r4
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f7ff ffa2 	bl	8007570 <__sfputs_r>
 800762c:	3001      	adds	r0, #1
 800762e:	f000 80a7 	beq.w	8007780 <_vfiprintf_r+0x1ec>
 8007632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007634:	445a      	add	r2, fp
 8007636:	9209      	str	r2, [sp, #36]	@ 0x24
 8007638:	f89a 3000 	ldrb.w	r3, [sl]
 800763c:	2b00      	cmp	r3, #0
 800763e:	f000 809f 	beq.w	8007780 <_vfiprintf_r+0x1ec>
 8007642:	2300      	movs	r3, #0
 8007644:	f04f 32ff 	mov.w	r2, #4294967295
 8007648:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800764c:	f10a 0a01 	add.w	sl, sl, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9307      	str	r3, [sp, #28]
 8007654:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007658:	931a      	str	r3, [sp, #104]	@ 0x68
 800765a:	4654      	mov	r4, sl
 800765c:	2205      	movs	r2, #5
 800765e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007662:	4853      	ldr	r0, [pc, #332]	@ (80077b0 <_vfiprintf_r+0x21c>)
 8007664:	f7fe f9b7 	bl	80059d6 <memchr>
 8007668:	9a04      	ldr	r2, [sp, #16]
 800766a:	b9d8      	cbnz	r0, 80076a4 <_vfiprintf_r+0x110>
 800766c:	06d1      	lsls	r1, r2, #27
 800766e:	bf44      	itt	mi
 8007670:	2320      	movmi	r3, #32
 8007672:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007676:	0713      	lsls	r3, r2, #28
 8007678:	bf44      	itt	mi
 800767a:	232b      	movmi	r3, #43	@ 0x2b
 800767c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007680:	f89a 3000 	ldrb.w	r3, [sl]
 8007684:	2b2a      	cmp	r3, #42	@ 0x2a
 8007686:	d015      	beq.n	80076b4 <_vfiprintf_r+0x120>
 8007688:	4654      	mov	r4, sl
 800768a:	2000      	movs	r0, #0
 800768c:	f04f 0c0a 	mov.w	ip, #10
 8007690:	9a07      	ldr	r2, [sp, #28]
 8007692:	4621      	mov	r1, r4
 8007694:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007698:	3b30      	subs	r3, #48	@ 0x30
 800769a:	2b09      	cmp	r3, #9
 800769c:	d94b      	bls.n	8007736 <_vfiprintf_r+0x1a2>
 800769e:	b1b0      	cbz	r0, 80076ce <_vfiprintf_r+0x13a>
 80076a0:	9207      	str	r2, [sp, #28]
 80076a2:	e014      	b.n	80076ce <_vfiprintf_r+0x13a>
 80076a4:	eba0 0308 	sub.w	r3, r0, r8
 80076a8:	fa09 f303 	lsl.w	r3, r9, r3
 80076ac:	4313      	orrs	r3, r2
 80076ae:	46a2      	mov	sl, r4
 80076b0:	9304      	str	r3, [sp, #16]
 80076b2:	e7d2      	b.n	800765a <_vfiprintf_r+0xc6>
 80076b4:	9b03      	ldr	r3, [sp, #12]
 80076b6:	1d19      	adds	r1, r3, #4
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	9103      	str	r1, [sp, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bfbb      	ittet	lt
 80076c0:	425b      	neglt	r3, r3
 80076c2:	f042 0202 	orrlt.w	r2, r2, #2
 80076c6:	9307      	strge	r3, [sp, #28]
 80076c8:	9307      	strlt	r3, [sp, #28]
 80076ca:	bfb8      	it	lt
 80076cc:	9204      	strlt	r2, [sp, #16]
 80076ce:	7823      	ldrb	r3, [r4, #0]
 80076d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80076d2:	d10a      	bne.n	80076ea <_vfiprintf_r+0x156>
 80076d4:	7863      	ldrb	r3, [r4, #1]
 80076d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80076d8:	d132      	bne.n	8007740 <_vfiprintf_r+0x1ac>
 80076da:	9b03      	ldr	r3, [sp, #12]
 80076dc:	3402      	adds	r4, #2
 80076de:	1d1a      	adds	r2, r3, #4
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	9203      	str	r2, [sp, #12]
 80076e4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80076e8:	9305      	str	r3, [sp, #20]
 80076ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80077b4 <_vfiprintf_r+0x220>
 80076ee:	2203      	movs	r2, #3
 80076f0:	4650      	mov	r0, sl
 80076f2:	7821      	ldrb	r1, [r4, #0]
 80076f4:	f7fe f96f 	bl	80059d6 <memchr>
 80076f8:	b138      	cbz	r0, 800770a <_vfiprintf_r+0x176>
 80076fa:	2240      	movs	r2, #64	@ 0x40
 80076fc:	9b04      	ldr	r3, [sp, #16]
 80076fe:	eba0 000a 	sub.w	r0, r0, sl
 8007702:	4082      	lsls	r2, r0
 8007704:	4313      	orrs	r3, r2
 8007706:	3401      	adds	r4, #1
 8007708:	9304      	str	r3, [sp, #16]
 800770a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770e:	2206      	movs	r2, #6
 8007710:	4829      	ldr	r0, [pc, #164]	@ (80077b8 <_vfiprintf_r+0x224>)
 8007712:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007716:	f7fe f95e 	bl	80059d6 <memchr>
 800771a:	2800      	cmp	r0, #0
 800771c:	d03f      	beq.n	800779e <_vfiprintf_r+0x20a>
 800771e:	4b27      	ldr	r3, [pc, #156]	@ (80077bc <_vfiprintf_r+0x228>)
 8007720:	bb1b      	cbnz	r3, 800776a <_vfiprintf_r+0x1d6>
 8007722:	9b03      	ldr	r3, [sp, #12]
 8007724:	3307      	adds	r3, #7
 8007726:	f023 0307 	bic.w	r3, r3, #7
 800772a:	3308      	adds	r3, #8
 800772c:	9303      	str	r3, [sp, #12]
 800772e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007730:	443b      	add	r3, r7
 8007732:	9309      	str	r3, [sp, #36]	@ 0x24
 8007734:	e76a      	b.n	800760c <_vfiprintf_r+0x78>
 8007736:	460c      	mov	r4, r1
 8007738:	2001      	movs	r0, #1
 800773a:	fb0c 3202 	mla	r2, ip, r2, r3
 800773e:	e7a8      	b.n	8007692 <_vfiprintf_r+0xfe>
 8007740:	2300      	movs	r3, #0
 8007742:	f04f 0c0a 	mov.w	ip, #10
 8007746:	4619      	mov	r1, r3
 8007748:	3401      	adds	r4, #1
 800774a:	9305      	str	r3, [sp, #20]
 800774c:	4620      	mov	r0, r4
 800774e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007752:	3a30      	subs	r2, #48	@ 0x30
 8007754:	2a09      	cmp	r2, #9
 8007756:	d903      	bls.n	8007760 <_vfiprintf_r+0x1cc>
 8007758:	2b00      	cmp	r3, #0
 800775a:	d0c6      	beq.n	80076ea <_vfiprintf_r+0x156>
 800775c:	9105      	str	r1, [sp, #20]
 800775e:	e7c4      	b.n	80076ea <_vfiprintf_r+0x156>
 8007760:	4604      	mov	r4, r0
 8007762:	2301      	movs	r3, #1
 8007764:	fb0c 2101 	mla	r1, ip, r1, r2
 8007768:	e7f0      	b.n	800774c <_vfiprintf_r+0x1b8>
 800776a:	ab03      	add	r3, sp, #12
 800776c:	9300      	str	r3, [sp, #0]
 800776e:	462a      	mov	r2, r5
 8007770:	4630      	mov	r0, r6
 8007772:	4b13      	ldr	r3, [pc, #76]	@ (80077c0 <_vfiprintf_r+0x22c>)
 8007774:	a904      	add	r1, sp, #16
 8007776:	f7fd fb97 	bl	8004ea8 <_printf_float>
 800777a:	4607      	mov	r7, r0
 800777c:	1c78      	adds	r0, r7, #1
 800777e:	d1d6      	bne.n	800772e <_vfiprintf_r+0x19a>
 8007780:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007782:	07d9      	lsls	r1, r3, #31
 8007784:	d405      	bmi.n	8007792 <_vfiprintf_r+0x1fe>
 8007786:	89ab      	ldrh	r3, [r5, #12]
 8007788:	059a      	lsls	r2, r3, #22
 800778a:	d402      	bmi.n	8007792 <_vfiprintf_r+0x1fe>
 800778c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800778e:	f7fe f921 	bl	80059d4 <__retarget_lock_release_recursive>
 8007792:	89ab      	ldrh	r3, [r5, #12]
 8007794:	065b      	lsls	r3, r3, #25
 8007796:	f53f af1f 	bmi.w	80075d8 <_vfiprintf_r+0x44>
 800779a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800779c:	e71e      	b.n	80075dc <_vfiprintf_r+0x48>
 800779e:	ab03      	add	r3, sp, #12
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	462a      	mov	r2, r5
 80077a4:	4630      	mov	r0, r6
 80077a6:	4b06      	ldr	r3, [pc, #24]	@ (80077c0 <_vfiprintf_r+0x22c>)
 80077a8:	a904      	add	r1, sp, #16
 80077aa:	f7fd fe1b 	bl	80053e4 <_printf_i>
 80077ae:	e7e4      	b.n	800777a <_vfiprintf_r+0x1e6>
 80077b0:	080084c8 	.word	0x080084c8
 80077b4:	080084ce 	.word	0x080084ce
 80077b8:	080084d2 	.word	0x080084d2
 80077bc:	08004ea9 	.word	0x08004ea9
 80077c0:	08007571 	.word	0x08007571

080077c4 <__swbuf_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	460e      	mov	r6, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	b118      	cbz	r0, 80077d6 <__swbuf_r+0x12>
 80077ce:	6a03      	ldr	r3, [r0, #32]
 80077d0:	b90b      	cbnz	r3, 80077d6 <__swbuf_r+0x12>
 80077d2:	f7fd ffb3 	bl	800573c <__sinit>
 80077d6:	69a3      	ldr	r3, [r4, #24]
 80077d8:	60a3      	str	r3, [r4, #8]
 80077da:	89a3      	ldrh	r3, [r4, #12]
 80077dc:	071a      	lsls	r2, r3, #28
 80077de:	d501      	bpl.n	80077e4 <__swbuf_r+0x20>
 80077e0:	6923      	ldr	r3, [r4, #16]
 80077e2:	b943      	cbnz	r3, 80077f6 <__swbuf_r+0x32>
 80077e4:	4621      	mov	r1, r4
 80077e6:	4628      	mov	r0, r5
 80077e8:	f000 f82a 	bl	8007840 <__swsetup_r>
 80077ec:	b118      	cbz	r0, 80077f6 <__swbuf_r+0x32>
 80077ee:	f04f 37ff 	mov.w	r7, #4294967295
 80077f2:	4638      	mov	r0, r7
 80077f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077f6:	6823      	ldr	r3, [r4, #0]
 80077f8:	6922      	ldr	r2, [r4, #16]
 80077fa:	b2f6      	uxtb	r6, r6
 80077fc:	1a98      	subs	r0, r3, r2
 80077fe:	6963      	ldr	r3, [r4, #20]
 8007800:	4637      	mov	r7, r6
 8007802:	4283      	cmp	r3, r0
 8007804:	dc05      	bgt.n	8007812 <__swbuf_r+0x4e>
 8007806:	4621      	mov	r1, r4
 8007808:	4628      	mov	r0, r5
 800780a:	f7ff fd9b 	bl	8007344 <_fflush_r>
 800780e:	2800      	cmp	r0, #0
 8007810:	d1ed      	bne.n	80077ee <__swbuf_r+0x2a>
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	3b01      	subs	r3, #1
 8007816:	60a3      	str	r3, [r4, #8]
 8007818:	6823      	ldr	r3, [r4, #0]
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	6022      	str	r2, [r4, #0]
 800781e:	701e      	strb	r6, [r3, #0]
 8007820:	6962      	ldr	r2, [r4, #20]
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d004      	beq.n	8007832 <__swbuf_r+0x6e>
 8007828:	89a3      	ldrh	r3, [r4, #12]
 800782a:	07db      	lsls	r3, r3, #31
 800782c:	d5e1      	bpl.n	80077f2 <__swbuf_r+0x2e>
 800782e:	2e0a      	cmp	r6, #10
 8007830:	d1df      	bne.n	80077f2 <__swbuf_r+0x2e>
 8007832:	4621      	mov	r1, r4
 8007834:	4628      	mov	r0, r5
 8007836:	f7ff fd85 	bl	8007344 <_fflush_r>
 800783a:	2800      	cmp	r0, #0
 800783c:	d0d9      	beq.n	80077f2 <__swbuf_r+0x2e>
 800783e:	e7d6      	b.n	80077ee <__swbuf_r+0x2a>

08007840 <__swsetup_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4b29      	ldr	r3, [pc, #164]	@ (80078e8 <__swsetup_r+0xa8>)
 8007844:	4605      	mov	r5, r0
 8007846:	6818      	ldr	r0, [r3, #0]
 8007848:	460c      	mov	r4, r1
 800784a:	b118      	cbz	r0, 8007854 <__swsetup_r+0x14>
 800784c:	6a03      	ldr	r3, [r0, #32]
 800784e:	b90b      	cbnz	r3, 8007854 <__swsetup_r+0x14>
 8007850:	f7fd ff74 	bl	800573c <__sinit>
 8007854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007858:	0719      	lsls	r1, r3, #28
 800785a:	d422      	bmi.n	80078a2 <__swsetup_r+0x62>
 800785c:	06da      	lsls	r2, r3, #27
 800785e:	d407      	bmi.n	8007870 <__swsetup_r+0x30>
 8007860:	2209      	movs	r2, #9
 8007862:	602a      	str	r2, [r5, #0]
 8007864:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007868:	f04f 30ff 	mov.w	r0, #4294967295
 800786c:	81a3      	strh	r3, [r4, #12]
 800786e:	e033      	b.n	80078d8 <__swsetup_r+0x98>
 8007870:	0758      	lsls	r0, r3, #29
 8007872:	d512      	bpl.n	800789a <__swsetup_r+0x5a>
 8007874:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007876:	b141      	cbz	r1, 800788a <__swsetup_r+0x4a>
 8007878:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800787c:	4299      	cmp	r1, r3
 800787e:	d002      	beq.n	8007886 <__swsetup_r+0x46>
 8007880:	4628      	mov	r0, r5
 8007882:	f7fe ff09 	bl	8006698 <_free_r>
 8007886:	2300      	movs	r3, #0
 8007888:	6363      	str	r3, [r4, #52]	@ 0x34
 800788a:	89a3      	ldrh	r3, [r4, #12]
 800788c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007890:	81a3      	strh	r3, [r4, #12]
 8007892:	2300      	movs	r3, #0
 8007894:	6063      	str	r3, [r4, #4]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f043 0308 	orr.w	r3, r3, #8
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	b94b      	cbnz	r3, 80078ba <__swsetup_r+0x7a>
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078b0:	d003      	beq.n	80078ba <__swsetup_r+0x7a>
 80078b2:	4621      	mov	r1, r4
 80078b4:	4628      	mov	r0, r5
 80078b6:	f000 f882 	bl	80079be <__smakebuf_r>
 80078ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078be:	f013 0201 	ands.w	r2, r3, #1
 80078c2:	d00a      	beq.n	80078da <__swsetup_r+0x9a>
 80078c4:	2200      	movs	r2, #0
 80078c6:	60a2      	str	r2, [r4, #8]
 80078c8:	6962      	ldr	r2, [r4, #20]
 80078ca:	4252      	negs	r2, r2
 80078cc:	61a2      	str	r2, [r4, #24]
 80078ce:	6922      	ldr	r2, [r4, #16]
 80078d0:	b942      	cbnz	r2, 80078e4 <__swsetup_r+0xa4>
 80078d2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078d6:	d1c5      	bne.n	8007864 <__swsetup_r+0x24>
 80078d8:	bd38      	pop	{r3, r4, r5, pc}
 80078da:	0799      	lsls	r1, r3, #30
 80078dc:	bf58      	it	pl
 80078de:	6962      	ldrpl	r2, [r4, #20]
 80078e0:	60a2      	str	r2, [r4, #8]
 80078e2:	e7f4      	b.n	80078ce <__swsetup_r+0x8e>
 80078e4:	2000      	movs	r0, #0
 80078e6:	e7f7      	b.n	80078d8 <__swsetup_r+0x98>
 80078e8:	20000020 	.word	0x20000020

080078ec <_raise_r>:
 80078ec:	291f      	cmp	r1, #31
 80078ee:	b538      	push	{r3, r4, r5, lr}
 80078f0:	4605      	mov	r5, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	d904      	bls.n	8007900 <_raise_r+0x14>
 80078f6:	2316      	movs	r3, #22
 80078f8:	6003      	str	r3, [r0, #0]
 80078fa:	f04f 30ff 	mov.w	r0, #4294967295
 80078fe:	bd38      	pop	{r3, r4, r5, pc}
 8007900:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007902:	b112      	cbz	r2, 800790a <_raise_r+0x1e>
 8007904:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007908:	b94b      	cbnz	r3, 800791e <_raise_r+0x32>
 800790a:	4628      	mov	r0, r5
 800790c:	f000 f830 	bl	8007970 <_getpid_r>
 8007910:	4622      	mov	r2, r4
 8007912:	4601      	mov	r1, r0
 8007914:	4628      	mov	r0, r5
 8007916:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791a:	f000 b817 	b.w	800794c <_kill_r>
 800791e:	2b01      	cmp	r3, #1
 8007920:	d00a      	beq.n	8007938 <_raise_r+0x4c>
 8007922:	1c59      	adds	r1, r3, #1
 8007924:	d103      	bne.n	800792e <_raise_r+0x42>
 8007926:	2316      	movs	r3, #22
 8007928:	6003      	str	r3, [r0, #0]
 800792a:	2001      	movs	r0, #1
 800792c:	e7e7      	b.n	80078fe <_raise_r+0x12>
 800792e:	2100      	movs	r1, #0
 8007930:	4620      	mov	r0, r4
 8007932:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007936:	4798      	blx	r3
 8007938:	2000      	movs	r0, #0
 800793a:	e7e0      	b.n	80078fe <_raise_r+0x12>

0800793c <raise>:
 800793c:	4b02      	ldr	r3, [pc, #8]	@ (8007948 <raise+0xc>)
 800793e:	4601      	mov	r1, r0
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	f7ff bfd3 	b.w	80078ec <_raise_r>
 8007946:	bf00      	nop
 8007948:	20000020 	.word	0x20000020

0800794c <_kill_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	2300      	movs	r3, #0
 8007950:	4d06      	ldr	r5, [pc, #24]	@ (800796c <_kill_r+0x20>)
 8007952:	4604      	mov	r4, r0
 8007954:	4608      	mov	r0, r1
 8007956:	4611      	mov	r1, r2
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	f7fa fa1e 	bl	8001d9a <_kill>
 800795e:	1c43      	adds	r3, r0, #1
 8007960:	d102      	bne.n	8007968 <_kill_r+0x1c>
 8007962:	682b      	ldr	r3, [r5, #0]
 8007964:	b103      	cbz	r3, 8007968 <_kill_r+0x1c>
 8007966:	6023      	str	r3, [r4, #0]
 8007968:	bd38      	pop	{r3, r4, r5, pc}
 800796a:	bf00      	nop
 800796c:	20000884 	.word	0x20000884

08007970 <_getpid_r>:
 8007970:	f7fa ba0c 	b.w	8001d8c <_getpid>

08007974 <__swhatbuf_r>:
 8007974:	b570      	push	{r4, r5, r6, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	4615      	mov	r5, r2
 800797e:	2900      	cmp	r1, #0
 8007980:	461e      	mov	r6, r3
 8007982:	b096      	sub	sp, #88	@ 0x58
 8007984:	da0c      	bge.n	80079a0 <__swhatbuf_r+0x2c>
 8007986:	89a3      	ldrh	r3, [r4, #12]
 8007988:	2100      	movs	r1, #0
 800798a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800798e:	bf14      	ite	ne
 8007990:	2340      	movne	r3, #64	@ 0x40
 8007992:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007996:	2000      	movs	r0, #0
 8007998:	6031      	str	r1, [r6, #0]
 800799a:	602b      	str	r3, [r5, #0]
 800799c:	b016      	add	sp, #88	@ 0x58
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	466a      	mov	r2, sp
 80079a2:	f000 f849 	bl	8007a38 <_fstat_r>
 80079a6:	2800      	cmp	r0, #0
 80079a8:	dbed      	blt.n	8007986 <__swhatbuf_r+0x12>
 80079aa:	9901      	ldr	r1, [sp, #4]
 80079ac:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079b0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079b4:	4259      	negs	r1, r3
 80079b6:	4159      	adcs	r1, r3
 80079b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079bc:	e7eb      	b.n	8007996 <__swhatbuf_r+0x22>

080079be <__smakebuf_r>:
 80079be:	898b      	ldrh	r3, [r1, #12]
 80079c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079c2:	079d      	lsls	r5, r3, #30
 80079c4:	4606      	mov	r6, r0
 80079c6:	460c      	mov	r4, r1
 80079c8:	d507      	bpl.n	80079da <__smakebuf_r+0x1c>
 80079ca:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80079ce:	6023      	str	r3, [r4, #0]
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	2301      	movs	r3, #1
 80079d4:	6163      	str	r3, [r4, #20]
 80079d6:	b003      	add	sp, #12
 80079d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079da:	466a      	mov	r2, sp
 80079dc:	ab01      	add	r3, sp, #4
 80079de:	f7ff ffc9 	bl	8007974 <__swhatbuf_r>
 80079e2:	9f00      	ldr	r7, [sp, #0]
 80079e4:	4605      	mov	r5, r0
 80079e6:	4639      	mov	r1, r7
 80079e8:	4630      	mov	r0, r6
 80079ea:	f7fe fec7 	bl	800677c <_malloc_r>
 80079ee:	b948      	cbnz	r0, 8007a04 <__smakebuf_r+0x46>
 80079f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079f4:	059a      	lsls	r2, r3, #22
 80079f6:	d4ee      	bmi.n	80079d6 <__smakebuf_r+0x18>
 80079f8:	f023 0303 	bic.w	r3, r3, #3
 80079fc:	f043 0302 	orr.w	r3, r3, #2
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7e2      	b.n	80079ca <__smakebuf_r+0xc>
 8007a04:	89a3      	ldrh	r3, [r4, #12]
 8007a06:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a0e:	81a3      	strh	r3, [r4, #12]
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	6020      	str	r0, [r4, #0]
 8007a14:	b15b      	cbz	r3, 8007a2e <__smakebuf_r+0x70>
 8007a16:	4630      	mov	r0, r6
 8007a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a1c:	f000 f81e 	bl	8007a5c <_isatty_r>
 8007a20:	b128      	cbz	r0, 8007a2e <__smakebuf_r+0x70>
 8007a22:	89a3      	ldrh	r3, [r4, #12]
 8007a24:	f023 0303 	bic.w	r3, r3, #3
 8007a28:	f043 0301 	orr.w	r3, r3, #1
 8007a2c:	81a3      	strh	r3, [r4, #12]
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	431d      	orrs	r5, r3
 8007a32:	81a5      	strh	r5, [r4, #12]
 8007a34:	e7cf      	b.n	80079d6 <__smakebuf_r+0x18>
	...

08007a38 <_fstat_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	4d06      	ldr	r5, [pc, #24]	@ (8007a58 <_fstat_r+0x20>)
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7fa fa07 	bl	8001e58 <_fstat>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d102      	bne.n	8007a54 <_fstat_r+0x1c>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b103      	cbz	r3, 8007a54 <_fstat_r+0x1c>
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	20000884 	.word	0x20000884

08007a5c <_isatty_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	2300      	movs	r3, #0
 8007a60:	4d05      	ldr	r5, [pc, #20]	@ (8007a78 <_isatty_r+0x1c>)
 8007a62:	4604      	mov	r4, r0
 8007a64:	4608      	mov	r0, r1
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	f7fa fa05 	bl	8001e76 <_isatty>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_isatty_r+0x1a>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_isatty_r+0x1a>
 8007a74:	6023      	str	r3, [r4, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20000884 	.word	0x20000884

08007a7c <_init>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr

08007a88 <_fini>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	bf00      	nop
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr
